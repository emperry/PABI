
MSARF_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da78  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001fa6c  0801dd18  0801dd18  0002dd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d784  0803d784  00050278  2**0
                  CONTENTS
  4 .ARM          00000008  0803d784  0803d784  0004d784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d78c  0803d78c  00050278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d78c  0803d78c  0004d78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d790  0803d790  0004d790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  24000000  0803d794  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0007f464  24000278  0803da0c  00050278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2407f6dc  0803da0c  0005f6dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006c7da  00000000  00000000  000502a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ae79  00000000  00000000  000bca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003998  00000000  00000000  000c7900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000035d0  00000000  00000000  000cb298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004c3d5  00000000  00000000  000ce868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000524d6  00000000  00000000  0011ac3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b2b6b  00000000  00000000  0016d113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0031fc7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010534  00000000  00000000  0031fcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000278 	.word	0x24000278
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dd00 	.word	0x0801dd00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400027c 	.word	0x2400027c
 80002dc:	0801dd00 	.word	0x0801dd00

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN8ActuatorC1Et>:
 *      Author: tdubuke
 */

#include "Actuator.h"

Actuator::Actuator(uint16_t nucleoAddress): _nucleoAddress(nucleoAddress) {}
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <_ZN8ActuatorC1Et+0x28>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	887a      	ldrh	r2, [r7, #2]
 80006aa:	809a      	strh	r2, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	0801de04 	.word	0x0801de04

080006c0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80006ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ce:	eef0 7ae7 	vabs.f32	s15, s15
 80006d2:	eeb0 0a67 	vmov.f32	s0, s15
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <_ZN14BrushedDCMotorC1EP7PWMBankP8GPIOBankt>:
 *      Author: tdubuke
 */

#include "BrushedDCMotor.h"

BrushedDCMotor::BrushedDCMotor(PWMBank *pwmBank, GPIOBank *gpioBank, uint16_t nucleoAddress):
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	807b      	strh	r3, [r7, #2]
	Actuator(nucleoAddress), _PWMBank(pwmBank), _GPIOBank(gpioBank) {}
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	887a      	ldrh	r2, [r7, #2]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffcd 	bl	8000694 <_ZN8ActuatorC1Et>
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <_ZN14BrushedDCMotorC1EP7PWMBankP8GPIOBankt+0x38>)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	0801de14 	.word	0x0801de14

0800071c <_ZN14BrushedDCMotor5beginEtttt>:
 * @Brief init the servo by having it grab a pin from the pwm bank
 * @param pwmChannel The pin that would be preferred
 * @param dirChannel The pin that will control the dir input to the motor driver
 * @param faultChannel The pin that will trigger on a motor driver fault
 */
uint8_t BrushedDCMotor::begin(uint16_t pwmChannel, uint16_t dirChannel, uint16_t enableChannel, uint16_t faultChannel){
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	4608      	mov	r0, r1
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	4603      	mov	r3, r0
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	460b      	mov	r3, r1
 8000730:	813b      	strh	r3, [r7, #8]
 8000732:	4613      	mov	r3, r2
 8000734:	80fb      	strh	r3, [r7, #6]
	int pwmPin = _PWMBank->getNewChannel(pwmChannel);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	897a      	ldrh	r2, [r7, #10]
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f016 f897 	bl	8016874 <_ZN7PWMBank13getNewChannelEh>
 8000746:	61f8      	str	r0, [r7, #28]
	int dirPin = _GPIOBank->getNewChannel(dirChannel);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	893a      	ldrh	r2, [r7, #8]
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f015 fd35 	bl	80161c2 <_ZN8GPIOBank13getNewChannelEh>
 8000758:	61b8      	str	r0, [r7, #24]
	int enPin = _GPIOBank->getNewChannel(enableChannel);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f015 fd2c 	bl	80161c2 <_ZN8GPIOBank13getNewChannelEh>
 800076a:	6178      	str	r0, [r7, #20]
	int faultPin = _GPIOBank->getNewChannel(faultChannel);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f015 fd23 	bl	80161c2 <_ZN8GPIOBank13getNewChannelEh>
 800077c:	6138      	str	r0, [r7, #16]

	// Get new pwm channel
	if(pwmPin == -1){
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d101      	bne.n	800078a <_ZN14BrushedDCMotor5beginEtttt+0x6e>
		return -1;
 8000786:	23ff      	movs	r3, #255	; 0xff
 8000788:	e045      	b.n	8000816 <_ZN14BrushedDCMotor5beginEtttt+0xfa>
	}else{
		_PWMPin = pwmPin;
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	b29a      	uxth	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	821a      	strh	r2, [r3, #16]
	}

	// Get new dir channel
	if(dirPin == -1){
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d101      	bne.n	800079e <_ZN14BrushedDCMotor5beginEtttt+0x82>
		return -1;
 800079a:	23ff      	movs	r3, #255	; 0xff
 800079c:	e03b      	b.n	8000816 <_ZN14BrushedDCMotor5beginEtttt+0xfa>
	}else{
		_DirPin = dirPin;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	825a      	strh	r2, [r3, #18]
		_GPIOBank->pinMode(_DirPin, OUTPUT);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68d8      	ldr	r0, [r3, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	8a5b      	ldrh	r3, [r3, #18]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	f015 fd38 	bl	8016228 <_ZN8GPIOBank7pinModeEhh>
	}

	// Get new en channel
	if(enPin == -1){
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007be:	d101      	bne.n	80007c4 <_ZN14BrushedDCMotor5beginEtttt+0xa8>
		return -1;
 80007c0:	23ff      	movs	r3, #255	; 0xff
 80007c2:	e028      	b.n	8000816 <_ZN14BrushedDCMotor5beginEtttt+0xfa>
	}else{
		_EnablePin = enPin;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	82da      	strh	r2, [r3, #22]
		_GPIOBank->pinMode(_EnablePin, OUTPUT);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	68d8      	ldr	r0, [r3, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	8adb      	ldrh	r3, [r3, #22]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	f015 fd25 	bl	8016228 <_ZN8GPIOBank7pinModeEhh>
		_GPIOBank->setOutput(enPin, 0);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	b2d1      	uxtb	r1, r2
 80007e6:	2200      	movs	r2, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f015 fd46 	bl	801627a <_ZN8GPIOBank9setOutputEht>
	}

	// Get new fault channel
	if(faultPin == -1){
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d101      	bne.n	80007fa <_ZN14BrushedDCMotor5beginEtttt+0xde>
		return -1;
 80007f6:	23ff      	movs	r3, #255	; 0xff
 80007f8:	e00d      	b.n	8000816 <_ZN14BrushedDCMotor5beginEtttt+0xfa>
	}else{
		_FaultPin = faultPin;
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	829a      	strh	r2, [r3, #20]
		_GPIOBank->pinMode(_FaultPin, INPUT);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	68d8      	ldr	r0, [r3, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	8a9b      	ldrh	r3, [r3, #20]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2201      	movs	r2, #1
 800080e:	4619      	mov	r1, r3
 8000810:	f015 fd0a 	bl	8016228 <_ZN8GPIOBank7pinModeEhh>
	}

	return 0;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_ZN14BrushedDCMotor4moveEff>:
/*!
 * @brief Move the brushed dc motor using pwm and gpio outputs
 * @param speed Speed -100% to 100%
 * @param position Not used
 */
void BrushedDCMotor::move(float position, float speed){
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	ed87 0a02 	vstr	s0, [r7, #8]
 800082a:	edc7 0a01 	vstr	s1, [r7, #4]
	if(speed >= 0){
 800082e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	db09      	blt.n	8000850 <_ZN14BrushedDCMotor4moveEff+0x32>
		_GPIOBank->setOutput(_DirPin, 1);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	68d8      	ldr	r0, [r3, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	8a5b      	ldrh	r3, [r3, #18]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	f015 fd16 	bl	801627a <_ZN8GPIOBank9setOutputEht>
 800084e:	e008      	b.n	8000862 <_ZN14BrushedDCMotor4moveEff+0x44>
	}else{
		_GPIOBank->setOutput(_DirPin, 0);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	68d8      	ldr	r0, [r3, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	8a5b      	ldrh	r3, [r3, #18]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	f015 fd0c 	bl	801627a <_ZN8GPIOBank9setOutputEht>
	}

	float posSpeed = abs(speed);
 8000862:	ed97 0a01 	vldr	s0, [r7, #4]
 8000866:	f7ff ff2b 	bl	80006c0 <_ZSt3absf>
 800086a:	ed87 0a05 	vstr	s0, [r7, #20]
	_PWMBank->setDutyCycle(_PWMPin, (uint16_t)posSpeed);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6898      	ldr	r0, [r3, #8]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	8a1b      	ldrh	r3, [r3, #16]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	edd7 7a05 	vldr	s15, [r7, #20]
 800087c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000880:	ee17 2a90 	vmov	r2, s15
 8000884:	b292      	uxth	r2, r2
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	4619      	mov	r1, r3
 800088a:	f015 ff55 	bl	8016738 <_ZN7PWMBank12setDutyCycleEhh>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_ZN14BrushedDCMotor6torqueEb>:

void BrushedDCMotor::torque(bool isOn){}
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <_ZN14BrushlessMotorC1EP7PWMBankt>:
 *      Author: tdubuke
 */

#include "BrushlessMotor.h"

BrushlessMotor::BrushlessMotor(PWMBank *pwmBank, uint16_t nucleoAddress): Actuator(nucleoAddress), _PWMBank(pwmBank) {}
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	4613      	mov	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fee5 	bl	8000694 <_ZN8ActuatorC1Et>
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <_ZN14BrushlessMotorC1EP7PWMBankt+0x30>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	0801de24 	.word	0x0801de24

080008e4 <_ZN14BrushlessMotorD1Ev>:
BrushlessMotor::~BrushlessMotor() {}
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <_ZN14BrushlessMotorD1Ev+0x1c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	0801de24 	.word	0x0801de24

08000904 <_ZN14BrushlessMotorD0Ev>:
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ffe9 	bl	80008e4 <_ZN14BrushlessMotorD1Ev>
 8000912:	2110      	movs	r1, #16
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f01a fd2f 	bl	801b378 <_ZdlPvj>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <_ZN14BrushlessMotor5beginEt>:

uint8_t BrushlessMotor::begin(uint16_t pwmChannel){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
	int pwmPin = _PWMBank->getNewChannel(pwmChannel);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	887a      	ldrh	r2, [r7, #2]
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f015 ff9a 	bl	8016874 <_ZN7PWMBank13getNewChannelEh>
 8000940:	60f8      	str	r0, [r7, #12]

	// Get new pwm channel
	if(pwmPin == -1){
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d101      	bne.n	800094e <_ZN14BrushlessMotor5beginEt+0x2a>
		return -1;
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	e00d      	b.n	800096a <_ZN14BrushlessMotor5beginEt+0x46>
	}else{
		_PWMPin = pwmPin;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	819a      	strh	r2, [r3, #12]
	}

	_PWMBank->writeMicroseconds(pwmChannel, 1500);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	887a      	ldrh	r2, [r7, #2]
 800095c:	b2d1      	uxtb	r1, r2
 800095e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000962:	4618      	mov	r0, r3
 8000964:	f015 fecb 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>

	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <_ZN14BrushlessMotor4moveEff>:

// Speed proportional to percent of full
// 100% = 3686
// 0% = 2047
// -100% = 409
void BrushlessMotor::move(float position, float speed){
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000980:	edc7 0a01 	vstr	s1, [r7, #4]
	float absSpeed = abs(speed * 5);
 8000984:	edd7 7a01 	vldr	s15, [r7, #4]
 8000988:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800098c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000990:	eeb0 0a67 	vmov.f32	s0, s15
 8000994:	f7ff fe94 	bl	80006c0 <_ZSt3absf>
 8000998:	ed87 0a04 	vstr	s0, [r7, #16]
	float micros;

	if(speed > 0){
 800099c:	edd7 7a01 	vldr	s15, [r7, #4]
 80009a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a8:	dd08      	ble.n	80009bc <_ZN14BrushlessMotor4moveEff+0x48>
		micros = 1500 + absSpeed;
 80009aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80009ae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000a08 <_ZN14BrushlessMotor4moveEff+0x94>
 80009b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009b6:	edc7 7a05 	vstr	s15, [r7, #20]
 80009ba:	e011      	b.n	80009e0 <_ZN14BrushlessMotor4moveEff+0x6c>
	}else if(speed < 0){
 80009bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80009c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c8:	d508      	bpl.n	80009dc <_ZN14BrushlessMotor4moveEff+0x68>
		micros = 1500 - absSpeed;
 80009ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a08 <_ZN14BrushlessMotor4moveEff+0x94>
 80009ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80009d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d6:	edc7 7a05 	vstr	s15, [r7, #20]
 80009da:	e001      	b.n	80009e0 <_ZN14BrushlessMotor4moveEff+0x6c>
	}else{
		micros = 1500;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <_ZN14BrushlessMotor4moveEff+0x98>)
 80009de:	617b      	str	r3, [r7, #20]
	}

	_PWMBank->writeMicroseconds(_PWMPin, micros);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6898      	ldr	r0, [r3, #8]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	899b      	ldrh	r3, [r3, #12]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f2:	ee17 2a90 	vmov	r2, s15
 80009f6:	b292      	uxth	r2, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	f015 fe80 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	44bb8000 	.word	0x44bb8000
 8000a0c:	44bb8000 	.word	0x44bb8000

08000a10 <_ZN14BrushlessMotor6torqueEb>:

void BrushlessMotor::torque(bool isOn){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	if(!isOn){
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <_ZN14BrushlessMotor6torqueEb+0x2c>
		_PWMBank->writeMicroseconds(_PWMPin, 1);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6898      	ldr	r0, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	899b      	ldrh	r3, [r3, #12]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2201      	movs	r2, #1
 8000a34:	4619      	mov	r1, r3
 8000a36:	f015 fe62 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>
	}else{
		_PWMBank->writeMicroseconds(_PWMPin, 1500);
	}
}
 8000a3a:	e009      	b.n	8000a50 <_ZN14BrushlessMotor6torqueEb+0x40>
		_PWMBank->writeMicroseconds(_PWMPin, 1500);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6898      	ldr	r0, [r3, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	899b      	ldrh	r3, [r3, #12]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f015 fe57 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_ZN19DynamixelrobotServo12readPositionEv>:
  uint16_t readPwm() { return readStatus().pwm; }

  /// Uses a STAT command to read the servo position.
  ///
  /// See readStatus().
  uint16_t readPosition() { return readStatus().position; }
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f87a 	bl	8000b60 <_ZN19DynamixelrobotServo10readStatusEv>
 8000a6c:	8a7b      	ldrh	r3, [r7, #18]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_ZNK19DynamixelrobotServo12getLastErrorEv>:
  void torque(bool isOn);
  float getValue();
  /// Returns the communication error from the last command.  The return value
  /// will be 0 if there was no error and non-zero if there was an error.  The
  /// return value will be one of the values of the XYZrobotServoError enum.
  uint8_t getLastError() const { return (uint8_t)lastError; }
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_ZN19DynamixelrobotServoC1EP21__USART_HandleTypeDefht>:
#define SET_POSITION_CONTROL 0
#define SET_SPEED_CONTROL 1
#define SET_TORQUE_OFF 2
#define SET_POSITION_CONTROL_SERVO_ON 3

DynamixelrobotServo::DynamixelrobotServo(USART_HandleTypeDef *husart, uint8_t _id, uint16_t nucleoAddress):
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80bb      	strh	r3, [r7, #4]
	Actuator(nucleoAddress), Sensor(nucleoAddress), id(_id), husart(husart){}
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	88ba      	ldrh	r2, [r7, #4]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdf1 	bl	8000694 <_ZN8ActuatorC1Et>
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	88ba      	ldrh	r2, [r7, #4]
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f01a fc46 	bl	801b34c <_ZN6SensorC1Et>
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <_ZN19DynamixelrobotServoC1EP21__USART_HandleTypeDefht+0x54>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <_ZN19DynamixelrobotServoC1EP21__USART_HandleTypeDefht+0x58>)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	751a      	strb	r2, [r3, #20]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	0801de3c 	.word	0x0801de3c
 8000ae8:	0801de50 	.word	0x0801de50

08000aec <_ZN19DynamixelrobotServo8ramWriteEhPKhh>:
  memoryRead(CMD_EEPROM_READ, startAddress, data, dataSize);
}

/// Writes data from the specified buffer to the servo's RAM.
void DynamixelrobotServo::ramWrite(uint8_t startAddress, const uint8_t * data, uint8_t dataSize)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	461a      	mov	r2, r3
 8000af8:	460b      	mov	r3, r1
 8000afa:	72fb      	strb	r3, [r7, #11]
 8000afc:	4613      	mov	r3, r2
 8000afe:	72bb      	strb	r3, [r7, #10]
  memoryWrite(CMD_RAM_WRITE, startAddress, data, dataSize);
 8000b00:	7afa      	ldrb	r2, [r7, #11]
 8000b02:	7abb      	ldrb	r3, [r7, #10]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2103      	movs	r1, #3
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f000 f992 	bl	8000e34 <_ZN19DynamixelrobotServo11memoryWriteEhhPKhh>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_ZN19DynamixelrobotServo12readIdEepromEv>:
}

/// Reads the sID parameter byte in EEPROM, which determines which ID the
/// servo uses on its serial interface.
uint8_t DynamixelrobotServo::readIdEeprom()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
  uint8_t id = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
  memoryRead(CMD_EEPROM_READ, 6, &id, 1);
 8000b24:	f107 030f 	add.w	r3, r7, #15
 8000b28:	2201      	movs	r2, #1
 8000b2a:	9200      	str	r2, [sp, #0]
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	2102      	movs	r1, #2
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f99d 	bl	8000e70 <_ZN19DynamixelrobotServo10memoryReadEhhPhh>
  return id;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN19DynamixelrobotServo14writeMaxPwmRamEt>:
///
/// This should be a number between 0 and 1023 that indicates how strong the
/// servo should be allowed to drive its motor, with 1023 corresponding to
/// 100%.
void DynamixelrobotServo::writeMaxPwmRam(uint16_t value)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
  ramWrite(16, (uint8_t *)&value, 1023);
 8000b4c:	1cba      	adds	r2, r7, #2
 8000b4e:	23ff      	movs	r3, #255	; 0xff
 8000b50:	2110      	movs	r1, #16
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffca 	bl	8000aec <_ZN19DynamixelrobotServo8ramWriteEhPKhh>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_ZN19DynamixelrobotServo10readStatusEv>:
  return (DynamixelrobotServoAckPolicy)result;
}

/// Sends a STAT command to the servo and returns the results.
DynamixelrobotServoStatus DynamixelrobotServo::readStatus()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  flushRead();
 8000b6a:	6838      	ldr	r0, [r7, #0]
 8000b6c:	f000 f819 	bl	8000ba2 <_ZN19DynamixelrobotServo9flushReadEv>

  DynamixelrobotServoStatus status;
  sendRequest(CMD_STAT, NULL, 0);
 8000b70:	2300      	movs	r3, #0
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2300      	movs	r3, #0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2107      	movs	r1, #7
 8000b7e:	6838      	ldr	r0, [r7, #0]
 8000b80:	f000 f820 	bl	8000bc4 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h>
  readAck(CMD_STAT, (uint8_t *)&status, 10);
 8000b84:	2300      	movs	r3, #0
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	2107      	movs	r1, #7
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f000 f893 	bl	8000cbe <_ZN19DynamixelrobotServo7readAckEhPhhS0_h>
  return status;
 8000b98:	bf00      	nop
}
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_ZN19DynamixelrobotServo9flushReadEv>:
{
  sendRequest(CMD_REBOOT, NULL, 0);
}

void DynamixelrobotServo::flushRead()
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	HAL_USART_Receive(husart, garbageBuffer, 50, 0);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6998      	ldr	r0, [r3, #24]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f103 011c 	add.w	r1, r3, #28
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2232      	movs	r2, #50	; 0x32
 8000bb8:	f010 fd25 	bl	8011606 <HAL_USART_Receive>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h>:

void DynamixelrobotServo::sendRequest(uint8_t cmd,
  const uint8_t * data1, uint8_t data1Size,
  const uint8_t * data2, uint8_t data2Size)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	72fb      	strb	r3, [r7, #11]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	72bb      	strb	r3, [r7, #10]
  uint8_t header[7];

  uint8_t size = data1Size + data2Size + sizeof(header);
 8000bd8:	7aba      	ldrb	r2, [r7, #10]
 8000bda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bde:	4413      	add	r3, r2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3307      	adds	r3, #7
 8000be4:	773b      	strb	r3, [r7, #28]

  uint8_t checksum = size ^ id ^ cmd;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	7d1a      	ldrb	r2, [r3, #20]
 8000bea:	7f3b      	ldrb	r3, [r7, #28]
 8000bec:	4053      	eors	r3, r2
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	7afb      	ldrb	r3, [r7, #11]
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < data1Size; i++) { checksum ^= data1[i]; }
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	77bb      	strb	r3, [r7, #30]
 8000bfa:	7fba      	ldrb	r2, [r7, #30]
 8000bfc:	7abb      	ldrb	r3, [r7, #10]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d20a      	bcs.n	8000c18 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h+0x54>
 8000c02:	7fbb      	ldrb	r3, [r7, #30]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	7ffb      	ldrb	r3, [r7, #31]
 8000c0c:	4053      	eors	r3, r2
 8000c0e:	77fb      	strb	r3, [r7, #31]
 8000c10:	7fbb      	ldrb	r3, [r7, #30]
 8000c12:	3301      	adds	r3, #1
 8000c14:	77bb      	strb	r3, [r7, #30]
 8000c16:	e7f0      	b.n	8000bfa <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h+0x36>
  for (uint8_t i = 0; i < data2Size; i++) { checksum ^= data2[i]; }
 8000c18:	2300      	movs	r3, #0
 8000c1a:	777b      	strb	r3, [r7, #29]
 8000c1c:	7f7a      	ldrb	r2, [r7, #29]
 8000c1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d20a      	bcs.n	8000c3c <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h+0x78>
 8000c26:	7f7b      	ldrb	r3, [r7, #29]
 8000c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	7ffb      	ldrb	r3, [r7, #31]
 8000c30:	4053      	eors	r3, r2
 8000c32:	77fb      	strb	r3, [r7, #31]
 8000c34:	7f7b      	ldrb	r3, [r7, #29]
 8000c36:	3301      	adds	r3, #1
 8000c38:	777b      	strb	r3, [r7, #29]
 8000c3a:	e7ef      	b.n	8000c1c <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h+0x58>

  header[0] = 0xFF;
 8000c3c:	23ff      	movs	r3, #255	; 0xff
 8000c3e:	753b      	strb	r3, [r7, #20]
  header[1] = 0xFF;
 8000c40:	23ff      	movs	r3, #255	; 0xff
 8000c42:	757b      	strb	r3, [r7, #21]
  header[2] = size;
 8000c44:	7f3b      	ldrb	r3, [r7, #28]
 8000c46:	75bb      	strb	r3, [r7, #22]
  header[3] = id;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	7d1b      	ldrb	r3, [r3, #20]
 8000c4c:	75fb      	strb	r3, [r7, #23]
  header[4] = cmd;
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	763b      	strb	r3, [r7, #24]
  header[5] = checksum & 0xFE;
 8000c52:	7ffb      	ldrb	r3, [r7, #31]
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	767b      	strb	r3, [r7, #25]
  header[6] = ~checksum & 0xFE;
 8000c5c:	7ffb      	ldrb	r3, [r7, #31]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	76bb      	strb	r3, [r7, #26]

  HAL_USART_Transmit(husart, header, sizeof(header), HAL_MAX_DELAY);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6998      	ldr	r0, [r3, #24]
 8000c6e:	f107 0114 	add.w	r1, r7, #20
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2207      	movs	r2, #7
 8000c78:	f010 fc1c 	bl	80114b4 <HAL_USART_Transmit>

  if (data1Size) { HAL_USART_Transmit(husart, (uint8_t *)data1, data1Size, HAL_MAX_DELAY); }
 8000c7c:	7abb      	ldrb	r3, [r7, #10]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d008      	beq.n	8000c94 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h+0xd0>
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6998      	ldr	r0, [r3, #24]
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f010 fc10 	bl	80114b4 <HAL_USART_Transmit>
  if (data2Size) { HAL_USART_Transmit(husart, (uint8_t *)data2, data2Size, HAL_MAX_DELAY); }
 8000c94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d009      	beq.n	8000cb0 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h+0xec>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6998      	ldr	r0, [r3, #24]
 8000ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cac:	f010 fc02 	bl	80114b4 <HAL_USART_Transmit>

  lastError = DynamixelrobotServoError::None;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_ZN19DynamixelrobotServo7readAckEhPhhS0_h>:

void DynamixelrobotServo::readAck(uint8_t cmd,
  uint8_t * data1, uint8_t data1Size,
  uint8_t * data2, uint8_t data2Size)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	460b      	mov	r3, r1
 8000ccc:	72fb      	strb	r3, [r7, #11]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	72bb      	strb	r3, [r7, #10]
  cmd |= 0x40;
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	72fb      	strb	r3, [r7, #11]
  uint8_t rec_header[7];
  uint8_t size = sizeof(rec_header) + data1Size + data2Size;
 8000cda:	7aba      	ldrb	r2, [r7, #10]
 8000cdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	3307      	adds	r3, #7
 8000ce6:	773b      	strb	r3, [r7, #28]

  HAL_StatusTypeDef status = HAL_USART_Receive(husart, rec_header, sizeof(rec_header), 100);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6998      	ldr	r0, [r3, #24]
 8000cec:	f107 0114 	add.w	r1, r7, #20
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	f010 fc87 	bl	8011606 <HAL_USART_Receive>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	76fb      	strb	r3, [r7, #27]
  if(status == HAL_TIMEOUT){
 8000cfc:	7efb      	ldrb	r3, [r7, #27]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d103      	bne.n	8000d0a <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x4c>
	  lastError = DynamixelrobotServoError::HeaderTimeout;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2201      	movs	r2, #1
 8000d06:	611a      	str	r2, [r3, #16]
	  return;
 8000d08:	e091      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[0] != 0xFF)
 8000d0a:	7d3b      	ldrb	r3, [r7, #20]
 8000d0c:	2bff      	cmp	r3, #255	; 0xff
 8000d0e:	d003      	beq.n	8000d18 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x5a>
  {
    lastError = DynamixelrobotServoError::HeaderByte1Wrong;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2202      	movs	r2, #2
 8000d14:	611a      	str	r2, [r3, #16]
    return;
 8000d16:	e08a      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[1] != 0xFF)
 8000d18:	7d7b      	ldrb	r3, [r7, #21]
 8000d1a:	2bff      	cmp	r3, #255	; 0xff
 8000d1c:	d003      	beq.n	8000d26 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x68>
  {
    lastError = DynamixelrobotServoError::HeaderByte2Wrong;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2203      	movs	r2, #3
 8000d22:	611a      	str	r2, [r3, #16]
    return;
 8000d24:	e083      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[3] != id)
 8000d26:	7dfa      	ldrb	r2, [r7, #23]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	7d1b      	ldrb	r3, [r3, #20]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d003      	beq.n	8000d38 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x7a>
  {
    lastError = DynamixelrobotServoError::IdWrong;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2204      	movs	r2, #4
 8000d34:	611a      	str	r2, [r3, #16]
    return;
 8000d36:	e07a      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[4] != cmd)
 8000d38:	7e3b      	ldrb	r3, [r7, #24]
 8000d3a:	7afa      	ldrb	r2, [r7, #11]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d003      	beq.n	8000d48 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x8a>
  {
    lastError = DynamixelrobotServoError::CmdWrong;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2205      	movs	r2, #5
 8000d44:	611a      	str	r2, [r3, #16]
    return;
 8000d46:	e072      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[2] != size)
 8000d48:	7dbb      	ldrb	r3, [r7, #22]
 8000d4a:	7f3a      	ldrb	r2, [r7, #28]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d003      	beq.n	8000d58 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x9a>
  {
    lastError = DynamixelrobotServoError::SizeWrong;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2206      	movs	r2, #6
 8000d54:	611a      	str	r2, [r3, #16]
    return;
 8000d56:	e06a      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (data1Size)
 8000d58:	7abb      	ldrb	r3, [r7, #10]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00c      	beq.n	8000d78 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0xba>
  {
	  status = HAL_USART_Receive(husart, data1, data1Size, 50);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6998      	ldr	r0, [r3, #24]
 8000d62:	7abb      	ldrb	r3, [r7, #10]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	2332      	movs	r3, #50	; 0x32
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	f010 fc4c 	bl	8011606 <HAL_USART_Receive>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	76fb      	strb	r3, [r7, #27]
	  if(status == HAL_TIMEOUT){
 8000d72:	7efb      	ldrb	r3, [r7, #27]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d057      	beq.n	8000e28 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x16a>
		  return;
	  }
  }

  if (data2Size)
 8000d78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00d      	beq.n	8000d9c <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0xde>
  {
	  status = HAL_USART_Receive(husart, data2, data2Size, 50);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6998      	ldr	r0, [r3, #24]
 8000d84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	2332      	movs	r3, #50	; 0x32
 8000d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d8e:	f010 fc3a 	bl	8011606 <HAL_USART_Receive>
 8000d92:	4603      	mov	r3, r0
 8000d94:	76fb      	strb	r3, [r7, #27]
	  if(status == HAL_TIMEOUT){
 8000d96:	7efb      	ldrb	r3, [r7, #27]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d047      	beq.n	8000e2c <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x16e>
		  return;
	  }
  }

  uint8_t checksum = size ^ id ^ cmd;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	7d1a      	ldrb	r2, [r3, #20]
 8000da0:	7f3b      	ldrb	r3, [r7, #28]
 8000da2:	4053      	eors	r3, r2
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	4053      	eors	r3, r2
 8000daa:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < data1Size; i++) { checksum ^= data1[i]; }
 8000dac:	2300      	movs	r3, #0
 8000dae:	77bb      	strb	r3, [r7, #30]
 8000db0:	7fba      	ldrb	r2, [r7, #30]
 8000db2:	7abb      	ldrb	r3, [r7, #10]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d20a      	bcs.n	8000dce <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x110>
 8000db8:	7fbb      	ldrb	r3, [r7, #30]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	7ffb      	ldrb	r3, [r7, #31]
 8000dc2:	4053      	eors	r3, r2
 8000dc4:	77fb      	strb	r3, [r7, #31]
 8000dc6:	7fbb      	ldrb	r3, [r7, #30]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	77bb      	strb	r3, [r7, #30]
 8000dcc:	e7f0      	b.n	8000db0 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0xf2>
  for (uint8_t i = 0; i < data2Size; i++) { checksum ^= data2[i]; }
 8000dce:	2300      	movs	r3, #0
 8000dd0:	777b      	strb	r3, [r7, #29]
 8000dd2:	7f7a      	ldrb	r2, [r7, #29]
 8000dd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d20a      	bcs.n	8000df2 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x134>
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000de0:	4413      	add	r3, r2
 8000de2:	781a      	ldrb	r2, [r3, #0]
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
 8000de6:	4053      	eors	r3, r2
 8000de8:	77fb      	strb	r3, [r7, #31]
 8000dea:	7f7b      	ldrb	r3, [r7, #29]
 8000dec:	3301      	adds	r3, #1
 8000dee:	777b      	strb	r3, [r7, #29]
 8000df0:	e7ef      	b.n	8000dd2 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x114>

  if (rec_header[5] != (checksum & 0xFE))
 8000df2:	7e7b      	ldrb	r3, [r7, #25]
 8000df4:	461a      	mov	r2, r3
 8000df6:	7ffb      	ldrb	r3, [r7, #31]
 8000df8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d003      	beq.n	8000e08 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x14a>
  {
    lastError = DynamixelrobotServoError::Checksum1Wrong;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2209      	movs	r2, #9
 8000e04:	611a      	str	r2, [r3, #16]
    return;
 8000e06:	e012      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[6] != (~checksum & 0xFE))
 8000e08:	7ebb      	ldrb	r3, [r7, #26]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	7ffb      	ldrb	r3, [r7, #31]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d003      	beq.n	8000e20 <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x162>
  {
    lastError = DynamixelrobotServoError::Checksum2Wrong;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	220a      	movs	r2, #10
 8000e1c:	611a      	str	r2, [r3, #16]
    return;
 8000e1e:	e006      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
  }

  lastError = DynamixelrobotServoError::None;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	e002      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
		  return;
 8000e28:	bf00      	nop
 8000e2a:	e000      	b.n	8000e2e <_ZN19DynamixelrobotServo7readAckEhPhhS0_h+0x170>
		  return;
 8000e2c:	bf00      	nop
}
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_ZN19DynamixelrobotServo11memoryWriteEhhPKhh>:

void DynamixelrobotServo::memoryWrite(uint8_t cmd, uint8_t startAddress,
  const uint8_t * data, uint8_t dataSize)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	72fb      	strb	r3, [r7, #11]
 8000e42:	4613      	mov	r3, r2
 8000e44:	72bb      	strb	r3, [r7, #10]
  uint8_t request[2];
  request[0] = startAddress;
 8000e46:	7abb      	ldrb	r3, [r7, #10]
 8000e48:	753b      	strb	r3, [r7, #20]
  request[1] = dataSize;
 8000e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e4e:	757b      	strb	r3, [r7, #21]

  sendRequest(cmd, request, sizeof(request), data, dataSize);
 8000e50:	f107 0214 	add.w	r2, r7, #20
 8000e54:	7af9      	ldrb	r1, [r7, #11]
 8000e56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2302      	movs	r3, #2
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff feae 	bl	8000bc4 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZN19DynamixelrobotServo10memoryReadEhhPhh>:

void DynamixelrobotServo::memoryRead(uint8_t cmd, uint8_t startAddress,
  uint8_t * data, uint8_t dataSize)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	72fb      	strb	r3, [r7, #11]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	72bb      	strb	r3, [r7, #10]
  flushRead();
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff fe8d 	bl	8000ba2 <_ZN19DynamixelrobotServo9flushReadEv>

  uint8_t request[2];
  request[0] = startAddress;
 8000e88:	7abb      	ldrb	r3, [r7, #10]
 8000e8a:	753b      	strb	r3, [r7, #20]
  request[1] = dataSize;
 8000e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e90:	757b      	strb	r3, [r7, #21]
  sendRequest(cmd, request, sizeof(request));
 8000e92:	f107 0214 	add.w	r2, r7, #20
 8000e96:	7af9      	ldrb	r1, [r7, #11]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff fe8e 	bl	8000bc4 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h>

  uint8_t response[4];
  readAck(cmd, response, 4, data, dataSize);
 8000ea8:	f107 0210 	add.w	r2, r7, #16
 8000eac:	7af9      	ldrb	r1, [r7, #11]
 8000eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2304      	movs	r3, #4
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff feff 	bl	8000cbe <_ZN19DynamixelrobotServo7readAckEhPhhS0_h>
  if (getLastError()) { return; }
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f7ff fdd8 	bl	8000a76 <_ZNK19DynamixelrobotServo12getLastErrorEv>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2301      	movne	r3, #1
 8000ece:	2300      	moveq	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10f      	bne.n	8000ef6 <_ZN19DynamixelrobotServo10memoryReadEhhPhh+0x86>

  if (response[2] != request[0])
 8000ed6:	7cba      	ldrb	r2, [r7, #18]
 8000ed8:	7d3b      	ldrb	r3, [r7, #20]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d003      	beq.n	8000ee6 <_ZN19DynamixelrobotServo10memoryReadEhhPhh+0x76>
  {
    lastError = DynamixelrobotServoError::ReadOffsetWrong;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	611a      	str	r2, [r3, #16]
    return;
 8000ee4:	e008      	b.n	8000ef8 <_ZN19DynamixelrobotServo10memoryReadEhhPhh+0x88>
  }

  if (response[3] != request[1])
 8000ee6:	7cfa      	ldrb	r2, [r7, #19]
 8000ee8:	7d7b      	ldrb	r3, [r7, #21]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d004      	beq.n	8000ef8 <_ZN19DynamixelrobotServo10memoryReadEhhPhh+0x88>
  {
    lastError = DynamixelrobotServoError::ReadLengthWrong;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2211      	movs	r2, #17
 8000ef2:	611a      	str	r2, [r3, #16]
    return;
 8000ef4:	e000      	b.n	8000ef8 <_ZN19DynamixelrobotServo10memoryReadEhhPhh+0x88>
  if (getLastError()) { return; }
 8000ef6:	bf00      	nop
  }
}
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_ZN19DynamixelrobotServo8sendIJogEthh>:

void DynamixelrobotServo::sendIJog(uint16_t goal, uint8_t type, uint8_t playtime)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af02      	add	r7, sp, #8
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	4608      	mov	r0, r1
 8000f08:	4611      	mov	r1, r2
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	460b      	mov	r3, r1
 8000f12:	707b      	strb	r3, [r7, #1]
 8000f14:	4613      	mov	r3, r2
 8000f16:	703b      	strb	r3, [r7, #0]
  uint8_t data[5];
  data[0] = goal & 0xFF;
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	723b      	strb	r3, [r7, #8]
  data[1] = goal >> 8 & 0xFF;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	727b      	strb	r3, [r7, #9]
  data[2] = type;
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	72bb      	strb	r3, [r7, #10]
  data[3] = id;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7d1b      	ldrb	r3, [r3, #20]
 8000f30:	72fb      	strb	r3, [r7, #11]
  data[4] = playtime;
 8000f32:	783b      	ldrb	r3, [r7, #0]
 8000f34:	733b      	strb	r3, [r7, #12]
  sendRequest(CMD_I_JOG, data, sizeof(data));
 8000f36:	f107 0208 	add.w	r2, r7, #8
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2305      	movs	r3, #5
 8000f44:	2105      	movs	r1, #5
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fe3c 	bl	8000bc4 <_ZN19DynamixelrobotServo11sendRequestEhPKhhS1_h>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <_ZN19DynamixelrobotServo4moveEff>:
	}

	return -1;
}

void DynamixelrobotServo::move(float position, float speed){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f64:	edc7 0a01 	vstr	s1, [r7, #4]
	float pos = position / RADS_PER_TICK;
 8000f68:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f6c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f70:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000fd8 <_ZN19DynamixelrobotServo4moveEff+0x80>
 8000f74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f7c:	edc7 7a04 	vstr	s15, [r7, #16]
	float playtime = speed * 100;
 8000f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f84:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000fe0 <_ZN19DynamixelrobotServo4moveEff+0x88>
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	edc7 7a05 	vstr	s15, [r7, #20]
	if(playtime > 255){
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000fe4 <_ZN19DynamixelrobotServo4moveEff+0x8c>
 8000f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	dd01      	ble.n	8000fa6 <_ZN19DynamixelrobotServo4moveEff+0x4e>
		playtime = 255;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_ZN19DynamixelrobotServo4moveEff+0x90>)
 8000fa4:	617b      	str	r3, [r7, #20]
	}
	sendIJog((uint16_t)pos, SET_POSITION_CONTROL, (uint8_t)playtime);
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b299      	uxth	r1, r3
 8000fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbc:	edc7 7a00 	vstr	s15, [r7]
 8000fc0:	783b      	ldrb	r3, [r7, #0]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff ff99 	bl	8000efe <_ZN19DynamixelrobotServo8sendIJogEthh>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	9e060fe4 	.word	0x9e060fe4
 8000fdc:	3f770f7b 	.word	0x3f770f7b
 8000fe0:	42c80000 	.word	0x42c80000
 8000fe4:	437f0000 	.word	0x437f0000
 8000fe8:	437f0000 	.word	0x437f0000

08000fec <_ZN19DynamixelrobotServo6torqueEb>:

void DynamixelrobotServo::torque(bool isOn){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	if(isOn){
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <_ZN19DynamixelrobotServo6torqueEb+0x1e>
		writeMaxPwmRam(1023);
 8000ffe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fd9c 	bl	8000b40 <_ZN19DynamixelrobotServo14writeMaxPwmRamEt>
	}else{
		writeMaxPwmRam(0);
	}
}
 8001008:	e003      	b.n	8001012 <_ZN19DynamixelrobotServo6torqueEb+0x26>
		writeMaxPwmRam(0);
 800100a:	2100      	movs	r1, #0
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fd97 	bl	8000b40 <_ZN19DynamixelrobotServo14writeMaxPwmRamEt>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	0000      	movs	r0, r0
 800101c:	0000      	movs	r0, r0
	...

08001020 <_ZN19DynamixelrobotServo8getValueEv>:

float DynamixelrobotServo::getValue(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint16_t position = readPosition();
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fd15 	bl	8000a58 <_ZN19DynamixelrobotServo12readPositionEv>
 800102e:	4603      	mov	r3, r0
 8001030:	81fb      	strh	r3, [r7, #14]
	if(lastError != DynamixelrobotServoError::None){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <_ZN19DynamixelrobotServo8getValueEv+0x20>
		return 0;
 800103a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001070 <_ZN19DynamixelrobotServo8getValueEv+0x50>
 800103e:	e00c      	b.n	800105a <_ZN19DynamixelrobotServo8getValueEv+0x3a>
	}
	return (float)position * RADS_PER_TICK;
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800104e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8001068 <_ZN19DynamixelrobotServo8getValueEv+0x48>
 8001052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001056:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	f3af 8000 	nop.w
 8001068:	9e060fe4 	.word	0x9e060fe4
 800106c:	3f770f7b 	.word	0x3f770f7b
 8001070:	00000000 	.word	0x00000000

08001074 <_ZThn8_N19DynamixelrobotServo8getValueEv>:
  float getValue();
 8001074:	f1a0 0008 	sub.w	r0, r0, #8
 8001078:	f7ff bfd2 	b.w	8001020 <_ZN19DynamixelrobotServo8getValueEv>

0800107c <_ZN8PWMServoC1EP7PWMBankft>:
 *      Author: tdubuke
 */

#include "PWMServo.h"

PWMServo::PWMServo(PWMBank *pwmBank, float maxRotation, uint16_t nucleoAddress):
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	ed87 0a01 	vstr	s0, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	807b      	strh	r3, [r7, #2]
	Actuator(nucleoAddress), _PWMBank(pwmBank), _maxRotAngle(maxRotation){}
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fafd 	bl	8000694 <_ZN8ActuatorC1Et>
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <_ZN8PWMServoC1EP7PWMBankft+0x3c>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0801de5c 	.word	0x0801de5c

080010bc <_ZN8PWMServo5beginEt>:

/*!
 * @Brief init the servo by having it grab a pin from the pwm bank
 * @param preferenceChannel The pin that would be preferred
 */
int PWMServo::begin(uint16_t preferenceChannel){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
	uint16_t pin = _PWMBank->getNewChannel(preferenceChannel);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f015 fbce 	bl	8016874 <_ZN7PWMBank13getNewChannelEh>
 80010d8:	4603      	mov	r3, r0
 80010da:	81fb      	strh	r3, [r7, #14]

	// Get new channel
	if(pin == -1){
		return -1;
	}else{
		_PWMPin = pin;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	89fa      	ldrh	r2, [r7, #14]
 80010e0:	819a      	strh	r2, [r3, #12]
	}

	_PWMBank->writeMicroseconds(_PWMPin, 1500);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6898      	ldr	r0, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	899b      	ldrh	r3, [r3, #12]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010f0:	4619      	mov	r1, r3
 80010f2:	f015 fb04 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>

	return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZN8PWMServo4moveEff>:
 * @brief send a command to the Servo to move to a new position
 * @param position New position given in 0-max
 * @param speed Speed to achieve, since PWM servos do not have a speed value
 * this setting will be ignored here
 */
void PWMServo::move(float position, float speed){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	ed87 0a02 	vstr	s0, [r7, #8]
 800110c:	edc7 0a01 	vstr	s1, [r7, #4]
	float servoPerc = position / _maxRotAngle;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	ed93 7a04 	vldr	s14, [r3, #16]
 8001116:	edd7 6a02 	vldr	s13, [r7, #8]
 800111a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111e:	edc7 7a05 	vstr	s15, [r7, #20]

	if(servoPerc > 1) servoPerc = 1;
 8001122:	edd7 7a05 	vldr	s15, [r7, #20]
 8001126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800112a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	dd02      	ble.n	800113a <_ZN8PWMServo4moveEff+0x3a>
 8001134:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001138:	617b      	str	r3, [r7, #20]

	// redefine percentage between 1000 and 2000 micros
	float micros = (1000 * servoPerc) + 1000;
 800113a:	edd7 7a05 	vldr	s15, [r7, #20]
 800113e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001178 <_ZN8PWMServo4moveEff+0x78>
 8001142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001146:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001178 <_ZN8PWMServo4moveEff+0x78>
 800114a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800114e:	edc7 7a04 	vstr	s15, [r7, #16]

	_PWMBank->writeMicroseconds(_PWMPin, (uint16_t)micros);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6898      	ldr	r0, [r3, #8]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	899b      	ldrh	r3, [r3, #12]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001164:	ee17 2a90 	vmov	r2, s15
 8001168:	b292      	uxth	r2, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f015 fac7 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	447a0000 	.word	0x447a0000

0800117c <_ZN8PWMServo6torqueEb>:

void PWMServo::torque(bool isOn){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	if(isOn){
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <_ZN8PWMServo6torqueEb+0x28>
		_PWMBank->writeMicroseconds(_PWMPin, 1500);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6898      	ldr	r0, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	899b      	ldrh	r3, [r3, #12]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800119c:	4619      	mov	r1, r3
 800119e:	f015 faae 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>
	}else{
		_PWMBank->writeMicroseconds(_PWMPin, 1);
	}
}
 80011a2:	e008      	b.n	80011b6 <_ZN8PWMServo6torqueEb+0x3a>
		_PWMBank->writeMicroseconds(_PWMPin, 1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	899b      	ldrh	r3, [r3, #12]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f015 faa4 	bl	80166fe <_ZN7PWMBank17writeMicrosecondsEht>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN13XYZrobotServo12readPositionEv>:
  uint16_t readPwm() { return readStatus().pwm; }

  /// Uses a STAT command to read the servo position.
  ///
  /// See readStatus().
  uint16_t readPosition() { return readStatus().position; }
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f87b 	bl	80012c8 <_ZN13XYZrobotServo10readStatusEv>
 80011d2:	8a7b      	ldrh	r3, [r7, #18]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZNK13XYZrobotServo12getLastErrorEv>:
  void torque(bool isOn);
  float getValue();
  /// Returns the communication error from the last command.  The return value
  /// will be 0 if there was no error and non-zero if there was an error.  The
  /// return value will be one of the values of the XYZrobotServoError enum.
  uint8_t getLastError() const { return (uint8_t)lastError; }
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_ZN13XYZrobotServoC1EP20__UART_HandleTypeDefht>:
#define SET_POSITION_CONTROL 0
#define SET_SPEED_CONTROL 1
#define SET_TORQUE_OFF 2
#define SET_POSITION_CONTROL_SERVO_ON 3

XYZrobotServo::XYZrobotServo(UART_HandleTypeDef *_huart, uint8_t _id, uint16_t nucleoAddress):
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	460b      	mov	r3, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	80bb      	strh	r3, [r7, #4]
	Actuator(nucleoAddress), Sensor(nucleoAddress), id(_id), huart(_huart){}
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	88ba      	ldrh	r2, [r7, #4]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fa3d 	bl	8000694 <_ZN8ActuatorC1Et>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3308      	adds	r3, #8
 800121e:	88ba      	ldrh	r2, [r7, #4]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f01a f892 	bl	801b34c <_ZN6SensorC1Et>
 8001228:	4a08      	ldr	r2, [pc, #32]	; (800124c <_ZN13XYZrobotServoC1EP20__UART_HandleTypeDefht+0x54>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <_ZN13XYZrobotServoC1EP20__UART_HandleTypeDefht+0x58>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	751a      	strb	r2, [r3, #20]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0801de6c 	.word	0x0801de6c
 8001250:	0801de80 	.word	0x0801de80

08001254 <_ZN13XYZrobotServo8ramWriteEhPKhh>:
  memoryRead(CMD_EEPROM_READ, startAddress, data, dataSize);
}

/// Writes data from the specified buffer to the servo's RAM.
void XYZrobotServo::ramWrite(uint8_t startAddress, const uint8_t * data, uint8_t dataSize)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	72fb      	strb	r3, [r7, #11]
 8001264:	4613      	mov	r3, r2
 8001266:	72bb      	strb	r3, [r7, #10]
  memoryWrite(CMD_RAM_WRITE, startAddress, data, dataSize);
 8001268:	7afa      	ldrb	r2, [r7, #11]
 800126a:	7abb      	ldrb	r3, [r7, #10]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2103      	movs	r1, #3
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f992 	bl	800159c <_ZN13XYZrobotServo11memoryWriteEhhPKhh>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN13XYZrobotServo12readIdEepromEv>:
}

/// Reads the sID parameter byte in EEPROM, which determines which ID the
/// servo uses on its serial interface.
uint8_t XYZrobotServo::readIdEeprom()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af02      	add	r7, sp, #8
 8001286:	6078      	str	r0, [r7, #4]
  uint8_t id = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  memoryRead(CMD_EEPROM_READ, 6, &id, 1);
 800128c:	f107 030f 	add.w	r3, r7, #15
 8001290:	2201      	movs	r2, #1
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	2206      	movs	r2, #6
 8001296:	2102      	movs	r1, #2
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f99d 	bl	80015d8 <_ZN13XYZrobotServo10memoryReadEhhPhh>
  return id;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZN13XYZrobotServo14writeMaxPwmRamEt>:
///
/// This should be a number between 0 and 1023 that indicates how strong the
/// servo should be allowed to drive its motor, with 1023 corresponding to
/// 100%.
void XYZrobotServo::writeMaxPwmRam(uint16_t value)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  ramWrite(16, (uint8_t *)&value, 2);
 80012b4:	1cba      	adds	r2, r7, #2
 80012b6:	2302      	movs	r3, #2
 80012b8:	2110      	movs	r1, #16
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffca 	bl	8001254 <_ZN13XYZrobotServo8ramWriteEhPKhh>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZN13XYZrobotServo10readStatusEv>:
  return (XYZrobotServoAckPolicy)result;
}

/// Sends a STAT command to the servo and returns the results.
XYZrobotServoStatus XYZrobotServo::readStatus()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  flushRead();
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f000 f819 	bl	800130a <_ZN13XYZrobotServo9flushReadEv>

  XYZrobotServoStatus status;
  sendRequest(CMD_STAT, NULL, 0);
 80012d8:	2300      	movs	r3, #0
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	2300      	movs	r3, #0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	2200      	movs	r2, #0
 80012e4:	2107      	movs	r1, #7
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f000 f820 	bl	800132c <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h>
  readAck(CMD_STAT, (uint8_t *)&status, 10);
 80012ec:	2300      	movs	r3, #0
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2300      	movs	r3, #0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	230a      	movs	r3, #10
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	2107      	movs	r1, #7
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f000 f893 	bl	8001426 <_ZN13XYZrobotServo7readAckEhPhhS0_h>
  return status;
 8001300:	bf00      	nop
}
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_ZN13XYZrobotServo9flushReadEv>:
{
  sendRequest(CMD_REBOOT, NULL, 0);
}

void XYZrobotServo::flushRead()
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, garbageBuffer, 50, 0);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6998      	ldr	r0, [r3, #24]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f103 011c 	add.w	r1, r3, #28
 800131c:	2300      	movs	r3, #0
 800131e:	2232      	movs	r2, #50	; 0x32
 8001320:	f00e ff44 	bl	80101ac <HAL_UART_Receive>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h>:

void XYZrobotServo::sendRequest(uint8_t cmd,
  const uint8_t * data1, uint8_t data1Size,
  const uint8_t * data2, uint8_t data2Size)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	461a      	mov	r2, r3
 8001338:	460b      	mov	r3, r1
 800133a:	72fb      	strb	r3, [r7, #11]
 800133c:	4613      	mov	r3, r2
 800133e:	72bb      	strb	r3, [r7, #10]
  uint8_t header[7];

  uint8_t size = data1Size + data2Size + sizeof(header);
 8001340:	7aba      	ldrb	r2, [r7, #10]
 8001342:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001346:	4413      	add	r3, r2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3307      	adds	r3, #7
 800134c:	773b      	strb	r3, [r7, #28]

  uint8_t checksum = size ^ id ^ cmd;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	7d1a      	ldrb	r2, [r3, #20]
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	4053      	eors	r3, r2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	4053      	eors	r3, r2
 800135c:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < data1Size; i++) { checksum ^= data1[i]; }
 800135e:	2300      	movs	r3, #0
 8001360:	77bb      	strb	r3, [r7, #30]
 8001362:	7fba      	ldrb	r2, [r7, #30]
 8001364:	7abb      	ldrb	r3, [r7, #10]
 8001366:	429a      	cmp	r2, r3
 8001368:	d20a      	bcs.n	8001380 <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h+0x54>
 800136a:	7fbb      	ldrb	r3, [r7, #30]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	4053      	eors	r3, r2
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	7fbb      	ldrb	r3, [r7, #30]
 800137a:	3301      	adds	r3, #1
 800137c:	77bb      	strb	r3, [r7, #30]
 800137e:	e7f0      	b.n	8001362 <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h+0x36>
  for (uint8_t i = 0; i < data2Size; i++) { checksum ^= data2[i]; }
 8001380:	2300      	movs	r3, #0
 8001382:	777b      	strb	r3, [r7, #29]
 8001384:	7f7a      	ldrb	r2, [r7, #29]
 8001386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800138a:	429a      	cmp	r2, r3
 800138c:	d20a      	bcs.n	80013a4 <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h+0x78>
 800138e:	7f7b      	ldrb	r3, [r7, #29]
 8001390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001392:	4413      	add	r3, r2
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	4053      	eors	r3, r2
 800139a:	77fb      	strb	r3, [r7, #31]
 800139c:	7f7b      	ldrb	r3, [r7, #29]
 800139e:	3301      	adds	r3, #1
 80013a0:	777b      	strb	r3, [r7, #29]
 80013a2:	e7ef      	b.n	8001384 <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h+0x58>

  header[0] = 0xFF;
 80013a4:	23ff      	movs	r3, #255	; 0xff
 80013a6:	753b      	strb	r3, [r7, #20]
  header[1] = 0xFF;
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	757b      	strb	r3, [r7, #21]
  header[2] = size;
 80013ac:	7f3b      	ldrb	r3, [r7, #28]
 80013ae:	75bb      	strb	r3, [r7, #22]
  header[3] = id;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	7d1b      	ldrb	r3, [r3, #20]
 80013b4:	75fb      	strb	r3, [r7, #23]
  header[4] = cmd;
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	763b      	strb	r3, [r7, #24]
  header[5] = checksum & 0xFE;
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	767b      	strb	r3, [r7, #25]
  header[6] = ~checksum & 0xFE;
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	76bb      	strb	r3, [r7, #26]

  HAL_UART_Transmit(huart, header, sizeof(header), HAL_MAX_DELAY);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6998      	ldr	r0, [r3, #24]
 80013d6:	f107 0114 	add.w	r1, r7, #20
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2207      	movs	r2, #7
 80013e0:	f00e fe4e 	bl	8010080 <HAL_UART_Transmit>
  //HAL_UART_Transmit_DMA(huart, header, sizeof(header));

  if (data1Size) { HAL_UART_Transmit(huart, (uint8_t *)data1, data1Size, HAL_MAX_DELAY); }
 80013e4:	7abb      	ldrb	r3, [r7, #10]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h+0xd0>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6998      	ldr	r0, [r3, #24]
 80013ee:	7abb      	ldrb	r3, [r7, #10]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f00e fe42 	bl	8010080 <HAL_UART_Transmit>
  if (data2Size) { HAL_UART_Transmit(huart, (uint8_t *)data2, data2Size, HAL_MAX_DELAY); }
 80013fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d009      	beq.n	8001418 <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h+0xec>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6998      	ldr	r0, [r3, #24]
 8001408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800140c:	b29a      	uxth	r2, r3
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001414:	f00e fe34 	bl	8010080 <HAL_UART_Transmit>

  lastError = XYZrobotServoError::None;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZN13XYZrobotServo7readAckEhPhhS0_h>:

void XYZrobotServo::readAck(uint8_t cmd,
  uint8_t * data1, uint8_t data1Size,
  uint8_t * data2, uint8_t data2Size)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b088      	sub	sp, #32
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	461a      	mov	r2, r3
 8001432:	460b      	mov	r3, r1
 8001434:	72fb      	strb	r3, [r7, #11]
 8001436:	4613      	mov	r3, r2
 8001438:	72bb      	strb	r3, [r7, #10]
  cmd |= 0x40;
 800143a:	7afb      	ldrb	r3, [r7, #11]
 800143c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001440:	72fb      	strb	r3, [r7, #11]
  uint8_t rec_header[7];
  uint8_t size = sizeof(rec_header) + data1Size + data2Size;
 8001442:	7aba      	ldrb	r2, [r7, #10]
 8001444:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001448:	4413      	add	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3307      	adds	r3, #7
 800144e:	773b      	strb	r3, [r7, #28]

  HAL_StatusTypeDef status = HAL_UART_Receive(huart, rec_header, sizeof(rec_header), 100);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6998      	ldr	r0, [r3, #24]
 8001454:	f107 0114 	add.w	r1, r7, #20
 8001458:	2364      	movs	r3, #100	; 0x64
 800145a:	2207      	movs	r2, #7
 800145c:	f00e fea6 	bl	80101ac <HAL_UART_Receive>
 8001460:	4603      	mov	r3, r0
 8001462:	76fb      	strb	r3, [r7, #27]
  if(status == HAL_TIMEOUT){
 8001464:	7efb      	ldrb	r3, [r7, #27]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d103      	bne.n	8001472 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x4c>
	  lastError = XYZrobotServoError::HeaderTimeout;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2201      	movs	r2, #1
 800146e:	611a      	str	r2, [r3, #16]
	  return;
 8001470:	e091      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[0] != 0xFF)
 8001472:	7d3b      	ldrb	r3, [r7, #20]
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d003      	beq.n	8001480 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x5a>
  {
    lastError = XYZrobotServoError::HeaderByte1Wrong;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2202      	movs	r2, #2
 800147c:	611a      	str	r2, [r3, #16]
    return;
 800147e:	e08a      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[1] != 0xFF)
 8001480:	7d7b      	ldrb	r3, [r7, #21]
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d003      	beq.n	800148e <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x68>
  {
    lastError = XYZrobotServoError::HeaderByte2Wrong;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2203      	movs	r2, #3
 800148a:	611a      	str	r2, [r3, #16]
    return;
 800148c:	e083      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[3] != id)
 800148e:	7dfa      	ldrb	r2, [r7, #23]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	7d1b      	ldrb	r3, [r3, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d003      	beq.n	80014a0 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x7a>
  {
    lastError = XYZrobotServoError::IdWrong;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2204      	movs	r2, #4
 800149c:	611a      	str	r2, [r3, #16]
    return;
 800149e:	e07a      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[4] != cmd)
 80014a0:	7e3b      	ldrb	r3, [r7, #24]
 80014a2:	7afa      	ldrb	r2, [r7, #11]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d003      	beq.n	80014b0 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x8a>
  {
    lastError = XYZrobotServoError::CmdWrong;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2205      	movs	r2, #5
 80014ac:	611a      	str	r2, [r3, #16]
    return;
 80014ae:	e072      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[2] != size)
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	7f3a      	ldrb	r2, [r7, #28]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d003      	beq.n	80014c0 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x9a>
  {
    lastError = XYZrobotServoError::SizeWrong;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2206      	movs	r2, #6
 80014bc:	611a      	str	r2, [r3, #16]
    return;
 80014be:	e06a      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (data1Size)
 80014c0:	7abb      	ldrb	r3, [r7, #10]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0xba>
  {
	  status = HAL_UART_Receive(huart, data1, data1Size, 50);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6998      	ldr	r0, [r3, #24]
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	2332      	movs	r3, #50	; 0x32
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	f00e fe6b 	bl	80101ac <HAL_UART_Receive>
 80014d6:	4603      	mov	r3, r0
 80014d8:	76fb      	strb	r3, [r7, #27]
	  if(status == HAL_TIMEOUT){
 80014da:	7efb      	ldrb	r3, [r7, #27]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d057      	beq.n	8001590 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x16a>
		  return;
	  }
  }

  if (data2Size)
 80014e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00d      	beq.n	8001504 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0xde>
  {
	  status = HAL_UART_Receive(huart, data2, data2Size, 50);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6998      	ldr	r0, [r3, #24]
 80014ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	2332      	movs	r3, #50	; 0x32
 80014f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f6:	f00e fe59 	bl	80101ac <HAL_UART_Receive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	76fb      	strb	r3, [r7, #27]
	  if(status == HAL_TIMEOUT){
 80014fe:	7efb      	ldrb	r3, [r7, #27]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d047      	beq.n	8001594 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x16e>
		  return;
	  }
  }

  uint8_t checksum = size ^ id ^ cmd;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	7d1a      	ldrb	r2, [r3, #20]
 8001508:	7f3b      	ldrb	r3, [r7, #28]
 800150a:	4053      	eors	r3, r2
 800150c:	b2da      	uxtb	r2, r3
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	4053      	eors	r3, r2
 8001512:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < data1Size; i++) { checksum ^= data1[i]; }
 8001514:	2300      	movs	r3, #0
 8001516:	77bb      	strb	r3, [r7, #30]
 8001518:	7fba      	ldrb	r2, [r7, #30]
 800151a:	7abb      	ldrb	r3, [r7, #10]
 800151c:	429a      	cmp	r2, r3
 800151e:	d20a      	bcs.n	8001536 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x110>
 8001520:	7fbb      	ldrb	r3, [r7, #30]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	7ffb      	ldrb	r3, [r7, #31]
 800152a:	4053      	eors	r3, r2
 800152c:	77fb      	strb	r3, [r7, #31]
 800152e:	7fbb      	ldrb	r3, [r7, #30]
 8001530:	3301      	adds	r3, #1
 8001532:	77bb      	strb	r3, [r7, #30]
 8001534:	e7f0      	b.n	8001518 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0xf2>
  for (uint8_t i = 0; i < data2Size; i++) { checksum ^= data2[i]; }
 8001536:	2300      	movs	r3, #0
 8001538:	777b      	strb	r3, [r7, #29]
 800153a:	7f7a      	ldrb	r2, [r7, #29]
 800153c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001540:	429a      	cmp	r2, r3
 8001542:	d20a      	bcs.n	800155a <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x134>
 8001544:	7f7b      	ldrb	r3, [r7, #29]
 8001546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001548:	4413      	add	r3, r2
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	4053      	eors	r3, r2
 8001550:	77fb      	strb	r3, [r7, #31]
 8001552:	7f7b      	ldrb	r3, [r7, #29]
 8001554:	3301      	adds	r3, #1
 8001556:	777b      	strb	r3, [r7, #29]
 8001558:	e7ef      	b.n	800153a <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x114>

  if (rec_header[5] != (checksum & 0xFE))
 800155a:	7e7b      	ldrb	r3, [r7, #25]
 800155c:	461a      	mov	r2, r3
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001564:	429a      	cmp	r2, r3
 8001566:	d003      	beq.n	8001570 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x14a>
  {
    lastError = XYZrobotServoError::Checksum1Wrong;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2209      	movs	r2, #9
 800156c:	611a      	str	r2, [r3, #16]
    return;
 800156e:	e012      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  if (rec_header[6] != (~checksum & 0xFE))
 8001570:	7ebb      	ldrb	r3, [r7, #26]
 8001572:	461a      	mov	r2, r3
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	43db      	mvns	r3, r3
 8001578:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800157c:	429a      	cmp	r2, r3
 800157e:	d003      	beq.n	8001588 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x162>
  {
    lastError = XYZrobotServoError::Checksum2Wrong;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	220a      	movs	r2, #10
 8001584:	611a      	str	r2, [r3, #16]
    return;
 8001586:	e006      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
  }

  lastError = XYZrobotServoError::None;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	e002      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
		  return;
 8001590:	bf00      	nop
 8001592:	e000      	b.n	8001596 <_ZN13XYZrobotServo7readAckEhPhhS0_h+0x170>
		  return;
 8001594:	bf00      	nop
}
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZN13XYZrobotServo11memoryWriteEhhPKhh>:

void XYZrobotServo::memoryWrite(uint8_t cmd, uint8_t startAddress,
  const uint8_t * data, uint8_t dataSize)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	72fb      	strb	r3, [r7, #11]
 80015aa:	4613      	mov	r3, r2
 80015ac:	72bb      	strb	r3, [r7, #10]
  uint8_t request[2];
  request[0] = startAddress;
 80015ae:	7abb      	ldrb	r3, [r7, #10]
 80015b0:	753b      	strb	r3, [r7, #20]
  request[1] = dataSize;
 80015b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b6:	757b      	strb	r3, [r7, #21]

  sendRequest(cmd, request, sizeof(request), data, dataSize);
 80015b8:	f107 0214 	add.w	r2, r7, #20
 80015bc:	7af9      	ldrb	r1, [r7, #11]
 80015be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2302      	movs	r3, #2
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff feae 	bl	800132c <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h>
}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN13XYZrobotServo10memoryReadEhhPhh>:

void XYZrobotServo::memoryRead(uint8_t cmd, uint8_t startAddress,
  uint8_t * data, uint8_t dataSize)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	72fb      	strb	r3, [r7, #11]
 80015e6:	4613      	mov	r3, r2
 80015e8:	72bb      	strb	r3, [r7, #10]
  flushRead();
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff fe8d 	bl	800130a <_ZN13XYZrobotServo9flushReadEv>

  uint8_t request[2];
  request[0] = startAddress;
 80015f0:	7abb      	ldrb	r3, [r7, #10]
 80015f2:	753b      	strb	r3, [r7, #20]
  request[1] = dataSize;
 80015f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015f8:	757b      	strb	r3, [r7, #21]
  sendRequest(cmd, request, sizeof(request));
 80015fa:	f107 0214 	add.w	r2, r7, #20
 80015fe:	7af9      	ldrb	r1, [r7, #11]
 8001600:	2300      	movs	r3, #0
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2302      	movs	r3, #2
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff fe8e 	bl	800132c <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h>

  uint8_t response[4];
  readAck(cmd, response, 4, data, dataSize);
 8001610:	f107 0210 	add.w	r2, r7, #16
 8001614:	7af9      	ldrb	r1, [r7, #11]
 8001616:	f897 3020 	ldrb.w	r3, [r7, #32]
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2304      	movs	r3, #4
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff feff 	bl	8001426 <_ZN13XYZrobotServo7readAckEhPhhS0_h>
  if (getLastError()) { return; }
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fdd7 	bl	80011dc <_ZNK13XYZrobotServo12getLastErrorEv>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <_ZN13XYZrobotServo10memoryReadEhhPhh+0x86>

  // Despite what the A1-16 datasheet says, the first two bytes of the response
  // tend to 0, and the start address and data size come after that.

  if (response[2] != request[0])
 800163e:	7cba      	ldrb	r2, [r7, #18]
 8001640:	7d3b      	ldrb	r3, [r7, #20]
 8001642:	429a      	cmp	r2, r3
 8001644:	d003      	beq.n	800164e <_ZN13XYZrobotServo10memoryReadEhhPhh+0x76>
  {
    lastError = XYZrobotServoError::ReadOffsetWrong;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2210      	movs	r2, #16
 800164a:	611a      	str	r2, [r3, #16]
    return;
 800164c:	e008      	b.n	8001660 <_ZN13XYZrobotServo10memoryReadEhhPhh+0x88>
  }

  if (response[3] != request[1])
 800164e:	7cfa      	ldrb	r2, [r7, #19]
 8001650:	7d7b      	ldrb	r3, [r7, #21]
 8001652:	429a      	cmp	r2, r3
 8001654:	d004      	beq.n	8001660 <_ZN13XYZrobotServo10memoryReadEhhPhh+0x88>
  {
    lastError = XYZrobotServoError::ReadLengthWrong;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2211      	movs	r2, #17
 800165a:	611a      	str	r2, [r3, #16]
    return;
 800165c:	e000      	b.n	8001660 <_ZN13XYZrobotServo10memoryReadEhhPhh+0x88>
  if (getLastError()) { return; }
 800165e:	bf00      	nop
  }
}
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZN13XYZrobotServo8sendIJogEthh>:

void XYZrobotServo::sendIJog(uint16_t goal, uint8_t type, uint8_t playtime)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af02      	add	r7, sp, #8
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	4608      	mov	r0, r1
 8001670:	4611      	mov	r1, r2
 8001672:	461a      	mov	r2, r3
 8001674:	4603      	mov	r3, r0
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	460b      	mov	r3, r1
 800167a:	707b      	strb	r3, [r7, #1]
 800167c:	4613      	mov	r3, r2
 800167e:	703b      	strb	r3, [r7, #0]
  uint8_t data[5];
  data[0] = goal & 0xFF;
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	723b      	strb	r3, [r7, #8]
  data[1] = goal >> 8 & 0xFF;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	727b      	strb	r3, [r7, #9]
  data[2] = type;
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	72bb      	strb	r3, [r7, #10]
  data[3] = id;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7d1b      	ldrb	r3, [r3, #20]
 8001698:	72fb      	strb	r3, [r7, #11]
  data[4] = playtime;
 800169a:	783b      	ldrb	r3, [r7, #0]
 800169c:	733b      	strb	r3, [r7, #12]
  sendRequest(CMD_I_JOG, data, sizeof(data));
 800169e:	f107 0208 	add.w	r2, r7, #8
 80016a2:	2300      	movs	r3, #0
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2305      	movs	r3, #5
 80016ac:	2105      	movs	r1, #5
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fe3c 	bl	800132c <_ZN13XYZrobotServo11sendRequestEhPKhhS1_h>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	0000      	movs	r0, r0
	...

080016c0 <_ZN13XYZrobotServo4moveEff>:
	}

	return -1;
}

void XYZrobotServo::move(float position, float speed){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80016cc:	edc7 0a01 	vstr	s1, [r7, #4]
	float pos = position / RADS_PER_TICK;
 80016d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016d8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001740 <_ZN13XYZrobotServo4moveEff+0x80>
 80016dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016e4:	edc7 7a04 	vstr	s15, [r7, #16]
	float playtime = speed * 100;
 80016e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001748 <_ZN13XYZrobotServo4moveEff+0x88>
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	edc7 7a05 	vstr	s15, [r7, #20]
	if(playtime > 255){
 80016f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800174c <_ZN13XYZrobotServo4moveEff+0x8c>
 8001700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	dd01      	ble.n	800170e <_ZN13XYZrobotServo4moveEff+0x4e>
		playtime = 255;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_ZN13XYZrobotServo4moveEff+0x90>)
 800170c:	617b      	str	r3, [r7, #20]
	}
	sendIJog((uint16_t)pos, SET_POSITION_CONTROL, (uint8_t)playtime);
 800170e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001716:	ee17 3a90 	vmov	r3, s15
 800171a:	b299      	uxth	r1, r3
 800171c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001724:	edc7 7a00 	vstr	s15, [r7]
 8001728:	783b      	ldrb	r3, [r7, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2200      	movs	r2, #0
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff ff99 	bl	8001666 <_ZN13XYZrobotServo8sendIJogEthh>
}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	9e060fe4 	.word	0x9e060fe4
 8001744:	3f770f7b 	.word	0x3f770f7b
 8001748:	42c80000 	.word	0x42c80000
 800174c:	437f0000 	.word	0x437f0000
 8001750:	437f0000 	.word	0x437f0000

08001754 <_ZN13XYZrobotServo6torqueEb>:

void XYZrobotServo::torque(bool isOn){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
	if(isOn){
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <_ZN13XYZrobotServo6torqueEb+0x1e>
		writeMaxPwmRam(1023);
 8001766:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fd9c 	bl	80012a8 <_ZN13XYZrobotServo14writeMaxPwmRamEt>
	}else{
		writeMaxPwmRam(0);
	}
}
 8001770:	e003      	b.n	800177a <_ZN13XYZrobotServo6torqueEb+0x26>
		writeMaxPwmRam(0);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fd97 	bl	80012a8 <_ZN13XYZrobotServo14writeMaxPwmRamEt>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	0000      	movs	r0, r0
 8001784:	0000      	movs	r0, r0
	...

08001788 <_ZN13XYZrobotServo8getValueEv>:

float XYZrobotServo::getValue(){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint16_t position = readPosition();
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fd14 	bl	80011be <_ZN13XYZrobotServo12readPositionEv>
 8001796:	4603      	mov	r3, r0
 8001798:	81fb      	strh	r3, [r7, #14]
	if(lastError != XYZrobotServoError::None){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <_ZN13XYZrobotServo8getValueEv+0x20>
		return 0;
 80017a2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80017d8 <_ZN13XYZrobotServo8getValueEv+0x50>
 80017a6:	e00c      	b.n	80017c2 <_ZN13XYZrobotServo8getValueEv+0x3a>
	}
	return (float)position * RADS_PER_TICK;
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80017d0 <_ZN13XYZrobotServo8getValueEv+0x48>
 80017ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	f3af 8000 	nop.w
 80017d0:	9e060fe4 	.word	0x9e060fe4
 80017d4:	3f770f7b 	.word	0x3f770f7b
 80017d8:	00000000 	.word	0x00000000

080017dc <_ZThn8_N13XYZrobotServo8getValueEv>:
  float getValue();
 80017dc:	f1a0 0008 	sub.w	r0, r0, #8
 80017e0:	f7ff bfd2 	b.w	8001788 <_ZN13XYZrobotServo8getValueEv>

080017e4 <_ZN3PIDC1Effffff>:
 */

#include "PID.h"
#include <cmath>

PID::PID( float dt, float max, float min, float Kp, float Kd, float Ki ):
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	61f8      	str	r0, [r7, #28]
 80017ec:	ed87 0a06 	vstr	s0, [r7, #24]
 80017f0:	edc7 0a05 	vstr	s1, [r7, #20]
 80017f4:	ed87 1a04 	vstr	s2, [r7, #16]
 80017f8:	edc7 1a03 	vstr	s3, [r7, #12]
 80017fc:	ed87 2a02 	vstr	s4, [r7, #8]
 8001800:	edc7 2a01 	vstr	s5, [r7, #4]
    _min(min),
    _Kp(Kp),
    _Kd(Kd),
    _Ki(Ki),
    _pre_error(0),
    _integral(0)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	611a      	str	r2, [r3, #16]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
{}
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_ZN3PIDD1Ev>:

PID::~PID(){}
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZN3PID9calculateEff>:

float PID::calculate( float setpoint, float pv )
{
 800185c:	b480      	push	{r7}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	ed87 0a02 	vstr	s0, [r7, #8]
 8001868:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculate error
	float error = setpoint - pv;
 800186c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001870:	edd7 7a01 	vldr	s15, [r7, #4]
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	edc7 7a08 	vstr	s15, [r7, #32]

	// Proportional term
	float Pout = _Kp * error;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001882:	ed97 7a08 	vldr	s14, [r7, #32]
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Integral term
	_integral += error * _dt;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	ed93 7a07 	vldr	s14, [r3, #28]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edd3 6a00 	vldr	s13, [r3]
 800189a:	edd7 7a08 	vldr	s15, [r7, #32]
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	edc3 7a07 	vstr	s15, [r3, #28]
	float Iout = _Ki * _integral;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	edc7 7a06 	vstr	s15, [r7, #24]

	// Derivative term
	float derivative = (error - _pre_error) / _dt;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80018ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d8:	edc7 7a05 	vstr	s15, [r7, #20]
	float Dout = _Kd * derivative;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	edd3 7a04 	vldr	s15, [r3, #16]
 80018e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ea:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate total output
	float output = Pout + Iout + Dout;
 80018ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// Restrict to max/min
	if( output > _max )
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	edd3 7a01 	vldr	s15, [r3, #4]
 800190c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dd03      	ble.n	8001922 <_ZN3PID9calculateEff+0xc6>
		output = _max;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	e00c      	b.n	800193c <_ZN3PID9calculateEff+0xe0>
	else if( output < _min )
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	edd3 7a02 	vldr	s15, [r3, #8]
 8001928:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800192c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	d502      	bpl.n	800193c <_ZN3PID9calculateEff+0xe0>
		output = _min;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	627b      	str	r3, [r7, #36]	; 0x24

	// Save error to previous error
	_pre_error = error;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a3a      	ldr	r2, [r7, #32]
 8001940:	619a      	str	r2, [r3, #24]

	return output;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	ee07 3a90 	vmov	s15, r3
}
 8001948:	eeb0 0a67 	vmov.f32	s0, s15
 800194c:	372c      	adds	r7, #44	; 0x2c
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_ZN3PID8setPGainEf>:

void PID::setPGain(float K_P){
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	ed87 0a00 	vstr	s0, [r7]
	_Kp = K_P;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	60da      	str	r2, [r3, #12]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_ZN3PID8setIGainEf>:
void PID::setIGain(float K_I){
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	ed87 0a00 	vstr	s0, [r7]
	_Ki = K_I;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	615a      	str	r2, [r3, #20]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_ZN3PID8setDGainEf>:
void PID::setDGain(float K_D){
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	ed87 0a00 	vstr	s0, [r7]
	_Kd = K_D;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	611a      	str	r2, [r3, #16]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_SPI_TxCpltCallback>:
//}

volatile bool oneTransmitting = false;
volatile bool threeTransmitting = false;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_SPI_TxCpltCallback+0x38>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d103      	bne.n	80019da <HAL_SPI_TxCpltCallback+0x1a>
		oneTransmitting = false;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_SPI_TxCpltCallback+0x3c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	}else if(hspi->Instance == SPI3){
		threeTransmitting = false;
	}
}
 80019d8:	e007      	b.n	80019ea <HAL_SPI_TxCpltCallback+0x2a>
	}else if(hspi->Instance == SPI3){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_SPI_TxCpltCallback+0x40>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d102      	bne.n	80019ea <HAL_SPI_TxCpltCallback+0x2a>
		threeTransmitting = false;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_SPI_TxCpltCallback+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40013000 	.word	0x40013000
 80019fc:	2400143d 	.word	0x2400143d
 8001a00:	40003c00 	.word	0x40003c00
 8001a04:	2400143e 	.word	0x2400143e

08001a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001a0e:	f001 fc7b 	bl	8003308 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001a12:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <main+0x20c>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11b      	bne.n	8001a56 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a1e:	f3bf 8f4f 	dsb	sy
}
 8001a22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a24:	f3bf 8f6f 	isb	sy
}
 8001a28:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a2a:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <main+0x20c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a32:	f3bf 8f4f 	dsb	sy
}
 8001a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a38:	f3bf 8f6f 	isb	sy
}
 8001a3c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a3e:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <main+0x20c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a74      	ldr	r2, [pc, #464]	; (8001c14 <main+0x20c>)
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4a:	f3bf 8f4f 	dsb	sy
}
 8001a4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a50:	f3bf 8f6f 	isb	sy
}
 8001a54:	e000      	b.n	8001a58 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001a56:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001a58:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <main+0x20c>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d138      	bne.n	8001ad6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <main+0x20c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6c:	f3bf 8f4f 	dsb	sy
}
 8001a70:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001a72:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <main+0x20c>)
 8001a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a78:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0b5b      	lsrs	r3, r3, #13
 8001a7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a82:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	08db      	lsrs	r3, r3, #3
 8001a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a8c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a96:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a9c:	495d      	ldr	r1, [pc, #372]	; (8001c14 <main+0x20c>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ef      	bne.n	8001a8e <main+0x86>
    } while(sets-- != 0U);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e5      	bne.n	8001a84 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab8:	f3bf 8f4f 	dsb	sy
}
 8001abc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001abe:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <main+0x20c>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <main+0x20c>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aca:	f3bf 8f4f 	dsb	sy
}
 8001ace:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ad0:	f3bf 8f6f 	isb	sy
}
 8001ad4:	e000      	b.n	8001ad8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ad6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad8:	f002 fdd4 	bl	8004684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001adc:	f000 f8c6 	bl	8001c6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ae0:	f000 f94c 	bl	8001d7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae4:	f000 ffae 	bl	8002a44 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ae8:	f000 ff84 	bl	80029f4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001aec:	f000 ff50 	bl	8002990 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8001af0:	f000 fcb8 	bl	8002464 <MX_SPI4_Init>
  MX_SPI1_Init();
 8001af4:	f000 fc0a 	bl	800230c <MX_SPI1_Init>
  MX_DMA2D_Init();
 8001af8:	f000 fa76 	bl	8001fe8 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8001afc:	f000 fb12 	bl	8002124 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b00:	f000 fb50 	bl	80021a4 <MX_I2C2_Init>
  MX_UART4_Init();
 8001b04:	f000 fe5e 	bl	80027c4 <MX_UART4_Init>
  MX_LPTIM2_Init();
 8001b08:	f000 fbcc 	bl	80022a4 <MX_LPTIM2_Init>
  MX_SPI3_Init();
 8001b0c:	f000 fc54 	bl	80023b8 <MX_SPI3_Init>
  MX_SPI5_Init();
 8001b10:	f000 fd00 	bl	8002514 <MX_SPI5_Init>
  MX_USART2_UART_Init();
 8001b14:	f000 fea4 	bl	8002860 <MX_USART2_UART_Init>
  MX_I2C4_Init();
 8001b18:	f000 fb84 	bl	8002224 <MX_I2C4_Init>
  MX_TIM2_Init();
 8001b1c:	f000 fd52 	bl	80025c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b20:	f000 fda4 	bl	800266c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b24:	f000 fdf8 	bl	8002718 <MX_TIM4_Init>
  MX_HRTIM_Init();
 8001b28:	f000 fa98 	bl	800205c <MX_HRTIM_Init>
  MX_ADC3_Init();
 8001b2c:	f000 f9d8 	bl	8001ee0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001b30:	f000 fee2 	bl	80028f8 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001b34:	f000 f952 	bl	8001ddc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  FillRectHandle();
 8001b38:	f001 f8e4 	bl	8002d04 <FillRectHandle>
  BlendImageHandle();
 8001b3c:	f001 f8fa 	bl	8002d34 <BlendImageHandle>


	HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_MASTER);
 8001b40:	2105      	movs	r1, #5
 8001b42:	4835      	ldr	r0, [pc, #212]	; (8001c18 <main+0x210>)
 8001b44:	f007 f804 	bl	8008b50 <HAL_HRTIM_SimpleBaseStart_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b48:	f015 f9aa 	bl	8016ea0 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of lcdDisplaysTaskSem */
  lcdDisplaysTaskSemHandle = osSemaphoreNew(1, 1, &lcdDisplaysTaskSem_attributes);
 8001b4c:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <main+0x214>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2001      	movs	r0, #1
 8001b52:	f015 fb83 	bl	801725c <osSemaphoreNew>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <main+0x218>)
 8001b5a:	6013      	str	r3, [r2, #0]

  /* creation of pidStepTaskSem */
  pidStepTaskSemHandle = osSemaphoreNew(1, 1, &pidStepTaskSem_attributes);
 8001b5c:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <main+0x21c>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2001      	movs	r0, #1
 8001b62:	f015 fb7b 	bl	801725c <osSemaphoreNew>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <main+0x220>)
 8001b6a:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer_LCD */
  Timer_LCDHandle = osTimerNew(Timer_LCD_cb, osTimerPeriodic, NULL, &Timer_LCD_attributes);
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <main+0x224>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2101      	movs	r1, #1
 8001b72:	482f      	ldr	r0, [pc, #188]	; (8001c30 <main+0x228>)
 8001b74:	f015 fac8 	bl	8017108 <osTimerNew>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <main+0x22c>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* creation of Timer_PID */
  Timer_PIDHandle = osTimerNew(Timer_PID_cb, osTimerPeriodic, NULL, &Timer_PID_attributes);
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <main+0x230>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	2101      	movs	r1, #1
 8001b84:	482d      	ldr	r0, [pc, #180]	; (8001c3c <main+0x234>)
 8001b86:	f015 fabf 	bl	8017108 <osTimerNew>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a2c      	ldr	r2, [pc, #176]	; (8001c40 <main+0x238>)
 8001b8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
	osStatus Timer_LCD_status = osTimerStart(Timer_LCDHandle, 33u);
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <main+0x22c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	4618      	mov	r0, r3
 8001b98:	f015 fb32 	bl	8017200 <osTimerStart>
 8001b9c:	6178      	str	r0, [r7, #20]
	if(Timer_LCD_status != osOK){
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <main+0x1a4>
	//timer didnt start
		timer_count = -1;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <main+0x23c>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	601a      	str	r2, [r3, #0]
	}

	osStatus Timer_PID_status = osTimerStart(Timer_PIDHandle, 30u);
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <main+0x238>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	211e      	movs	r1, #30
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f015 fb24 	bl	8017200 <osTimerStart>
 8001bb8:	6138      	str	r0, [r7, #16]
	if(Timer_PID_status != osOK){
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <main+0x1c0>
	//timer didnt start
		timer_count = -1;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <main+0x23c>)
 8001bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc6:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of commTask */
  commTaskHandle = osThreadNew(StartCommTask, NULL, &commTask_attributes);
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <main+0x240>)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	481f      	ldr	r0, [pc, #124]	; (8001c4c <main+0x244>)
 8001bce:	f015 f9b1 	bl	8016f34 <osThreadNew>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <main+0x248>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* creation of lcdDisplaysTask */
  lcdDisplaysTaskHandle = osThreadNew(StartLCDDisplays, NULL, &lcdDisplaysTask_attributes);
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <main+0x24c>)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	481e      	ldr	r0, [pc, #120]	; (8001c58 <main+0x250>)
 8001bde:	f015 f9a9 	bl	8016f34 <osThreadNew>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <main+0x254>)
 8001be6:	6013      	str	r3, [r2, #0]

  /* creation of motorOutputTask */
  motorOutputTaskHandle = osThreadNew(StartMotorOutput, NULL, &motorOutputTask_attributes);
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <main+0x258>)
 8001bea:	2100      	movs	r1, #0
 8001bec:	481d      	ldr	r0, [pc, #116]	; (8001c64 <main+0x25c>)
 8001bee:	f015 f9a1 	bl	8016f34 <osThreadNew>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <main+0x260>)
 8001bf6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	osThreadSuspend(lcdDisplaysTaskHandle);
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <main+0x254>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f015 fa2b 	bl	8017058 <osThreadSuspend>
	osThreadSuspend(motorOutputTaskHandle);
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <main+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f015 fa26 	bl	8017058 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c0c:	f015 f96c 	bl	8016ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001c10:	e7fe      	b.n	8001c10 <main+0x208>
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	240003c4 	.word	0x240003c4
 8001c1c:	0803d310 	.word	0x0803d310
 8001c20:	24000f4c 	.word	0x24000f4c
 8001c24:	0803d320 	.word	0x0803d320
 8001c28:	24000f50 	.word	0x24000f50
 8001c2c:	0803d2f0 	.word	0x0803d2f0
 8001c30:	080032c9 	.word	0x080032c9
 8001c34:	24000f44 	.word	0x24000f44
 8001c38:	0803d300 	.word	0x0803d300
 8001c3c:	080032e9 	.word	0x080032e9
 8001c40:	24000f48 	.word	0x24000f48
 8001c44:	24001368 	.word	0x24001368
 8001c48:	0803d284 	.word	0x0803d284
 8001c4c:	08002f0d 	.word	0x08002f0d
 8001c50:	24000f38 	.word	0x24000f38
 8001c54:	0803d2a8 	.word	0x0803d2a8
 8001c58:	08002f2d 	.word	0x08002f2d
 8001c5c:	24000f3c 	.word	0x24000f3c
 8001c60:	0803d2cc 	.word	0x0803d2cc
 8001c64:	0800326d 	.word	0x0800326d
 8001c68:	24000f40 	.word	0x24000f40

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b09c      	sub	sp, #112	; 0x70
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	224c      	movs	r2, #76	; 0x4c
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f019 fbe4 	bl	801b448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2220      	movs	r2, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f019 fbde 	bl	801b448 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f008 fe95 	bl	800a9bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <SystemClock_Config+0x104>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <SystemClock_Config+0x104>)
 8001c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <SystemClock_Config+0x104>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <SystemClock_Config+0x108>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <SystemClock_Config+0x108>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <SystemClock_Config+0x108>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cc4:	bf00      	nop
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <SystemClock_Config+0x104>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd2:	d1f8      	bne.n	8001cc6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <SystemClock_Config+0x10c>)
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f023 0303 	bic.w	r3, r3, #3
 8001cdc:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <SystemClock_Config+0x10c>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf2:	2340      	movs	r3, #64	; 0x40
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001d02:	2378      	movs	r3, #120	; 0x78
 8001d04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001d0a:	2314      	movs	r3, #20
 8001d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d12:	230c      	movs	r3, #12
 8001d14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4618      	mov	r0, r3
 8001d24:	f008 fe94 	bl	800aa50 <HAL_RCC_OscConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d2e:	f001 fb07 	bl	8003340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d32:	233f      	movs	r3, #63	; 0x3f
 8001d34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2104      	movs	r1, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 faa7 	bl	800b2ac <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001d64:	f001 faec 	bl	8003340 <Error_Handler>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3770      	adds	r7, #112	; 0x70
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	58024800 	.word	0x58024800
 8001d74:	58000400 	.word	0x58000400
 8001d78:	58024400 	.word	0x58024400

08001d7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0b0      	sub	sp, #192	; 0xc0
 8001d80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	22bc      	movs	r2, #188	; 0xbc
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f019 fb5d 	bl	801b448 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <PeriphCommonClock_Config+0x5c>)
 8001d90:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001d96:	2313      	movs	r3, #19
 8001d98:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001daa:	2320      	movs	r3, #32
 8001dac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001db2:	2300      	movs	r3, #0
 8001db4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f009 fe42 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001dca:	f001 fab9 	bl	8003340 <Error_Handler>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	37c0      	adds	r7, #192	; 0xc0
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	80080000 	.word	0x80080000

08001ddc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001df6:	4a37      	ldr	r2, [pc, #220]	; (8001ed4 <MX_ADC2_Init+0xf8>)
 8001df8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e50:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e52:	f002 fe45 	bl	8004ae0 <HAL_ADC_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001e5c:	f001 fa70 	bl	8003340 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <MX_ADC2_Init+0xfc>)
 8001e62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e64:	2306      	movs	r3, #6
 8001e66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001e68:	2305      	movs	r3, #5
 8001e6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e70:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e72:	2304      	movs	r3, #4
 8001e74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001e84:	f002 ffce 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001e8e:	f001 fa57 	bl	8003340 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_ADC2_Init+0x100>)
 8001e94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e96:	230c      	movs	r3, #12
 8001e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001ea0:	f002 ffc0 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8001eaa:	f001 fa49 	bl	8003340 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001eae:	2312      	movs	r3, #18
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <MX_ADC2_Init+0xf4>)
 8001eb8:	f002 ffb4 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8001ec2:	f001 fa3d 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000294 	.word	0x24000294
 8001ed4:	40022100 	.word	0x40022100
 8001ed8:	3ef08000 	.word	0x3ef08000
 8001edc:	14f00020 	.word	0x14f00020

08001ee0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	615a      	str	r2, [r3, #20]
 8001ef6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001efa:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <MX_ADC3_Init+0xfc>)
 8001efc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001efe:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f12:	2204      	movs	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f24:	2203      	movs	r2, #3
 8001f26:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f54:	4820      	ldr	r0, [pc, #128]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f56:	f002 fdc3 	bl	8004ae0 <HAL_ADC_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001f60:	f001 f9ee 	bl	8003340 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f64:	2301      	movs	r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f68:	2306      	movs	r3, #6
 8001f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001f6c:	2305      	movs	r3, #5
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f74:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f76:	2304      	movs	r3, #4
 8001f78:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4814      	ldr	r0, [pc, #80]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001f88:	f002 ff4c 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001f92:	f001 f9d5 	bl	8003340 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_ADC3_Init+0x100>)
 8001f98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001fa4:	f002 ff3e 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8001fae:	f001 f9c7 	bl	8003340 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_ADC3_Init+0x104>)
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001fb6:	2312      	movs	r3, #18
 8001fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <MX_ADC3_Init+0xf8>)
 8001fc0:	f002 ff30 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 8001fca:	f001 f9b9 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	240002f8 	.word	0x240002f8
 8001fdc:	58026000 	.word	0x58026000
 8001fe0:	04300002 	.word	0x04300002
 8001fe4:	19200040 	.word	0x19200040

08001fe8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <MX_DMA2D_Init+0x70>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB1555;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB1555;
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_DMA2D_Init+0x6c>)
 800200c:	2203      	movs	r2, #3
 800200e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002012:	2200      	movs	r2, #0
 8002014:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002018:	2200      	movs	r2, #0
 800201a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <MX_DMA2D_Init+0x6c>)
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002024:	2200      	movs	r2, #0
 8002026:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_DMA2D_Init+0x6c>)
 800202a:	2200      	movs	r2, #0
 800202c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800202e:	4809      	ldr	r0, [pc, #36]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002030:	f005 ff94 	bl	8007f5c <HAL_DMA2D_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800203a:	f001 f981 	bl	8003340 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800203e:	2101      	movs	r1, #1
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_DMA2D_Init+0x6c>)
 8002042:	f006 f957 	bl	80082f4 <HAL_DMA2D_ConfigLayer>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800204c:	f001 f978 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2400035c 	.word	0x2400035c
 8002058:	52001000 	.word	0x52001000

0800205c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b09a      	sub	sp, #104	; 0x68
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2254      	movs	r2, #84	; 0x54
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f019 f9e6 	bl	801b448 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <MX_HRTIM_Init+0xc0>)
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <MX_HRTIM_Init+0xc4>)
 8002080:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <MX_HRTIM_Init+0xc0>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <MX_HRTIM_Init+0xc0>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800208e:	4823      	ldr	r0, [pc, #140]	; (800211c <MX_HRTIM_Init+0xc0>)
 8002090:	f006 fc66 	bl	8008960 <HAL_HRTIM_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_HRTIM_Init+0x42>
  {
    Error_Handler();
 800209a:	f001 f951 	bl	8003340 <Error_Handler>
  }
  pTimeBaseCfg.Period = 12000;
 800209e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80020a2:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80020a4:	2300      	movs	r3, #0
 80020a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80020a8:	2305      	movs	r3, #5
 80020aa:	663b      	str	r3, [r7, #96]	; 0x60
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80020ac:	2308      	movs	r3, #8
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80020b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b4:	461a      	mov	r2, r3
 80020b6:	2105      	movs	r1, #5
 80020b8:	4818      	ldr	r0, [pc, #96]	; (800211c <MX_HRTIM_Init+0xc0>)
 80020ba:	f006 fd21 	bl	8008b00 <HAL_HRTIM_TimeBaseConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 80020c4:	f001 f93c 	bl	8003340 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMASrcAddress = 0x0000;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMADstAddress = 0x0000;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASize = 0x1;
 80020d8:	2301      	movs	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	461a      	mov	r2, r3
 8002100:	2105      	movs	r1, #5
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <MX_HRTIM_Init+0xc0>)
 8002104:	f006 fd70 	bl	8008be8 <HAL_HRTIM_WaveformTimerConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_HRTIM_Init+0xb6>
  {
    Error_Handler();
 800210e:	f001 f917 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	3768      	adds	r7, #104	; 0x68
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	240003c4 	.word	0x240003c4
 8002120:	40017400 	.word	0x40017400

08002124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_I2C1_Init+0x74>)
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <MX_I2C1_Init+0x78>)
 800212c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_I2C1_Init+0x74>)
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <MX_I2C1_Init+0x7c>)
 8002132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_I2C1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_I2C1_Init+0x74>)
 800213c:	2201      	movs	r2, #1
 800213e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_I2C1_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_I2C1_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_I2C1_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_I2C1_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_I2C1_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <MX_I2C1_Init+0x74>)
 8002160:	f007 fbae 	bl	80098c0 <HAL_I2C_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800216a:	f001 f8e9 	bl	8003340 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216e:	2100      	movs	r1, #0
 8002170:	4809      	ldr	r0, [pc, #36]	; (8002198 <MX_I2C1_Init+0x74>)
 8002172:	f008 f909 	bl	800a388 <HAL_I2CEx_ConfigAnalogFilter>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800217c:	f001 f8e0 	bl	8003340 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_I2C1_Init+0x74>)
 8002184:	f008 f94b 	bl	800a41e <HAL_I2CEx_ConfigDigitalFilter>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800218e:	f001 f8d7 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	240004a0 	.word	0x240004a0
 800219c:	40005400 	.word	0x40005400
 80021a0:	307075b1 	.word	0x307075b1

080021a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_I2C2_Init+0x74>)
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <MX_I2C2_Init+0x78>)
 80021ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_I2C2_Init+0x74>)
 80021b0:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <MX_I2C2_Init+0x7c>)
 80021b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_I2C2_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_I2C2_Init+0x74>)
 80021bc:	2201      	movs	r2, #1
 80021be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_I2C2_Init+0x74>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_I2C2_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_I2C2_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_I2C2_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_I2C2_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021de:	480e      	ldr	r0, [pc, #56]	; (8002218 <MX_I2C2_Init+0x74>)
 80021e0:	f007 fb6e 	bl	80098c0 <HAL_I2C_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80021ea:	f001 f8a9 	bl	8003340 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ee:	2100      	movs	r1, #0
 80021f0:	4809      	ldr	r0, [pc, #36]	; (8002218 <MX_I2C2_Init+0x74>)
 80021f2:	f008 f8c9 	bl	800a388 <HAL_I2CEx_ConfigAnalogFilter>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80021fc:	f001 f8a0 	bl	8003340 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002200:	2100      	movs	r1, #0
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_I2C2_Init+0x74>)
 8002204:	f008 f90b 	bl	800a41e <HAL_I2CEx_ConfigDigitalFilter>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800220e:	f001 f897 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	240004ec 	.word	0x240004ec
 800221c:	40005800 	.word	0x40005800
 8002220:	307075b1 	.word	0x307075b1

08002224 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_I2C4_Init+0x74>)
 800222a:	4a1c      	ldr	r2, [pc, #112]	; (800229c <MX_I2C4_Init+0x78>)
 800222c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_I2C4_Init+0x74>)
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <MX_I2C4_Init+0x7c>)
 8002232:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_I2C4_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <MX_I2C4_Init+0x74>)
 800223c:	2201      	movs	r2, #1
 800223e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <MX_I2C4_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MX_I2C4_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <MX_I2C4_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_I2C4_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <MX_I2C4_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <MX_I2C4_Init+0x74>)
 8002260:	f007 fb2e 	bl	80098c0 <HAL_I2C_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800226a:	f001 f869 	bl	8003340 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <MX_I2C4_Init+0x74>)
 8002272:	f008 f889 	bl	800a388 <HAL_I2CEx_ConfigAnalogFilter>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800227c:	f001 f860 	bl	8003340 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002280:	2100      	movs	r1, #0
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_I2C4_Init+0x74>)
 8002284:	f008 f8cb 	bl	800a41e <HAL_I2CEx_ConfigDigitalFilter>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800228e:	f001 f857 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	24000538 	.word	0x24000538
 800229c:	58001c00 	.word	0x58001c00
 80022a0:	307075b1 	.word	0x307075b1

080022a4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <MX_LPTIM2_Init+0x64>)
 80022ac:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022cc:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_LPTIM2_Init+0x60>)
 80022f0:	f008 f8e2 	bl	800a4b8 <HAL_LPTIM_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 80022fa:	f001 f821 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	24000584 	.word	0x24000584
 8002308:	58002400 	.word	0x58002400

0800230c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <MX_SPI1_Init+0xa8>)
 8002314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002318:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800231c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002326:	2207      	movs	r2, #7
 8002328:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002338:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800233c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002344:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800235a:	2200      	movs	r2, #0
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002374:	2200      	movs	r2, #0
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800237a:	2200      	movs	r2, #0
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002380:	2200      	movs	r2, #0
 8002382:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002386:	2200      	movs	r2, #0
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800238c:	2200      	movs	r2, #0
 800238e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_SPI1_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <MX_SPI1_Init+0xa4>)
 800239e:	f00b fcdf 	bl	800dd60 <HAL_SPI_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80023a8:	f000 ffca 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	240005bc 	.word	0x240005bc
 80023b4:	40013000 	.word	0x40013000

080023b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <MX_SPI3_Init+0xa4>)
 80023be:	4a28      	ldr	r2, [pc, #160]	; (8002460 <MX_SPI3_Init+0xa8>)
 80023c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <MX_SPI3_Init+0xa4>)
 80023c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <MX_SPI3_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <MX_SPI3_Init+0xa4>)
 80023d2:	2207      	movs	r2, #7
 80023d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <MX_SPI3_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <MX_SPI3_Init+0xa4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_SPI3_Init+0xa4>)
 80023e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <MX_SPI3_Init+0xa4>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <MX_SPI3_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_SPI3_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <MX_SPI3_Init+0xa4>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_SPI3_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_SPI3_Init+0xa4>)
 800240c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_SPI3_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <MX_SPI3_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_SPI3_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <MX_SPI3_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_SPI3_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_SPI3_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_SPI3_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <MX_SPI3_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_SPI3_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MX_SPI3_Init+0xa4>)
 800244a:	f00b fc89 	bl	800dd60 <HAL_SPI_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002454:	f000 ff74 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24000644 	.word	0x24000644
 8002460:	40003c00 	.word	0x40003c00

08002464 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <MX_SPI4_Init+0xa8>)
 800246a:	4a29      	ldr	r2, [pc, #164]	; (8002510 <MX_SPI4_Init+0xac>)
 800246c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800246e:	4b27      	ldr	r3, [pc, #156]	; (800250c <MX_SPI4_Init+0xa8>)
 8002470:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002474:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <MX_SPI4_Init+0xa8>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <MX_SPI4_Init+0xa8>)
 800247e:	2207      	movs	r2, #7
 8002480:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <MX_SPI4_Init+0xa8>)
 8002484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002488:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <MX_SPI4_Init+0xa8>)
 800248c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002490:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_SPI4_Init+0xa8>)
 8002494:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002498:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <MX_SPI4_Init+0xa8>)
 800249c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80024a0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_SPI4_Init+0xa8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_SPI4_Init+0xa8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_SPI4_Init+0xa8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_SPI4_Init+0xa8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_SPI4_Init+0xa8>)
 80024bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_SPI4_Init+0xa8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_SPI4_Init+0xa8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_SPI4_Init+0xa8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <MX_SPI4_Init+0xa8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_SPI4_Init+0xa8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <MX_SPI4_Init+0xa8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_SPI4_Init+0xa8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <MX_SPI4_Init+0xa8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_SPI4_Init+0xa8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_SPI4_Init+0xa8>)
 80024fa:	f00b fc31 	bl	800dd60 <HAL_SPI_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8002504:	f000 ff1c 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	240006cc 	.word	0x240006cc
 8002510:	40013400 	.word	0x40013400

08002514 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <MX_SPI5_Init+0xa8>)
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <MX_SPI5_Init+0xac>)
 800251c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800251e:	4b27      	ldr	r3, [pc, #156]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002520:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002524:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <MX_SPI5_Init+0xa8>)
 800252e:	2207      	movs	r2, #7
 8002530:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <MX_SPI5_Init+0xa8>)
 800253a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002542:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002546:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <MX_SPI5_Init+0xa8>)
 800254a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800254e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002552:	2200      	movs	r2, #0
 8002554:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <MX_SPI5_Init+0xa8>)
 800255e:	2200      	movs	r2, #0
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002564:	2200      	movs	r2, #0
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <MX_SPI5_Init+0xa8>)
 800256a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002572:	2200      	movs	r2, #0
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002578:	2200      	movs	r2, #0
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <MX_SPI5_Init+0xa8>)
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_SPI5_Init+0xa8>)
 800258a:	2200      	movs	r2, #0
 800258c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002590:	2200      	movs	r2, #0
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_SPI5_Init+0xa8>)
 8002596:	2200      	movs	r2, #0
 8002598:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_SPI5_Init+0xa8>)
 800259c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_SPI5_Init+0xa8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <MX_SPI5_Init+0xa8>)
 80025aa:	f00b fbd9 	bl	800dd60 <HAL_SPI_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_SPI5_Init+0xa4>
  {
    Error_Handler();
 80025b4:	f000 fec4 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	24000754 	.word	0x24000754
 80025c0:	40015000 	.word	0x40015000

080025c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f018 ff38 	bl	801b448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	463b      	mov	r3, r7
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <MX_TIM2_Init+0xa4>)
 80025e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <MX_TIM2_Init+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <MX_TIM2_Init+0xa4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <MX_TIM2_Init+0xa4>)
 80025f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <MX_TIM2_Init+0xa4>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <MX_TIM2_Init+0xa4>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800260a:	2301      	movs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002612:	2301      	movs	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800261a:	2305      	movs	r3, #5
 800261c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002622:	2301      	movs	r3, #1
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800262a:	2305      	movs	r3, #5
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800262e:	f107 030c 	add.w	r3, r7, #12
 8002632:	4619      	mov	r1, r3
 8002634:	480c      	ldr	r0, [pc, #48]	; (8002668 <MX_TIM2_Init+0xa4>)
 8002636:	f00d f8eb 	bl	800f810 <HAL_TIM_Encoder_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002640:	f000 fe7e 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800264c:	463b      	mov	r3, r7
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_TIM2_Init+0xa4>)
 8002652:	f00d fc19 	bl	800fe88 <HAL_TIMEx_MasterConfigSynchronization>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800265c:	f000 fe70 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	3730      	adds	r7, #48	; 0x30
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	240008cc 	.word	0x240008cc

0800266c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f018 fee4 	bl	801b448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_TIM3_Init+0xa4>)
 800268c:	4a21      	ldr	r2, [pc, #132]	; (8002714 <MX_TIM3_Init+0xa8>)
 800268e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_TIM3_Init+0xa4>)
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_TIM3_Init+0xa4>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_TIM3_Init+0xa4>)
 800269e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM3_Init+0xa4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_TIM3_Init+0xa4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026b8:	2301      	movs	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80026c0:	2305      	movs	r3, #5
 80026c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80026d0:	2305      	movs	r3, #5
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_TIM3_Init+0xa4>)
 80026dc:	f00d f898 	bl	800f810 <HAL_TIM_Encoder_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80026e6:	f000 fe2b 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_TIM3_Init+0xa4>)
 80026f8:	f00d fbc6 	bl	800fe88 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002702:	f000 fe1d 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3730      	adds	r7, #48	; 0x30
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	24000918 	.word	0x24000918
 8002714:	40000400 	.word	0x40000400

08002718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f018 fe8e 	bl	801b448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	463b      	mov	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_TIM4_Init+0xa4>)
 8002738:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <MX_TIM4_Init+0xa8>)
 800273a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <MX_TIM4_Init+0xa4>)
 800273e:	2200      	movs	r2, #0
 8002740:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_TIM4_Init+0xa4>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <MX_TIM4_Init+0xa4>)
 800274a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_TIM4_Init+0xa4>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <MX_TIM4_Init+0xa4>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800275c:	2301      	movs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800276c:	2305      	movs	r3, #5
 800276e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800277c:	2305      	movs	r3, #5
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <MX_TIM4_Init+0xa4>)
 8002788:	f00d f842 	bl	800f810 <HAL_TIM_Encoder_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002792:	f000 fdd5 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800279e:	463b      	mov	r3, r7
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_TIM4_Init+0xa4>)
 80027a4:	f00d fb70 	bl	800fe88 <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80027ae:	f000 fdc7 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	; 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	24000964 	.word	0x24000964
 80027c0:	40000800 	.word	0x40000800

080027c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027c8:	4b23      	ldr	r3, [pc, #140]	; (8002858 <MX_UART4_Init+0x94>)
 80027ca:	4a24      	ldr	r2, [pc, #144]	; (800285c <MX_UART4_Init+0x98>)
 80027cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <MX_UART4_Init+0x94>)
 80027d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <MX_UART4_Init+0x94>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <MX_UART4_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <MX_UART4_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <MX_UART4_Init+0x94>)
 80027ea:	220c      	movs	r2, #12
 80027ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <MX_UART4_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <MX_UART4_Init+0x94>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <MX_UART4_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <MX_UART4_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <MX_UART4_Init+0x94>)
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800280c:	4812      	ldr	r0, [pc, #72]	; (8002858 <MX_UART4_Init+0x94>)
 800280e:	f00d fbe7 	bl	800ffe0 <HAL_UART_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002818:	f000 fd92 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 800281c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002820:	480d      	ldr	r0, [pc, #52]	; (8002858 <MX_UART4_Init+0x94>)
 8002822:	f00e fd28 	bl	8011276 <HAL_UARTEx_SetTxFifoThreshold>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 800282c:	f000 fd88 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8002830:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002834:	4808      	ldr	r0, [pc, #32]	; (8002858 <MX_UART4_Init+0x94>)
 8002836:	f00e fd5c 	bl	80112f2 <HAL_UARTEx_SetRxFifoThreshold>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8002840:	f000 fd7e 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_UART4_Init+0x94>)
 8002846:	f00e fca2 	bl	801118e <HAL_UARTEx_EnableFifoMode>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8002850:	f000 fd76 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	240009b0 	.word	0x240009b0
 800285c:	40004c00 	.word	0x40004c00

08002860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
husart2.Instance = USART2;
 8002864:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 8002866:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <MX_USART2_UART_Init+0x94>)
 8002868:	601a      	str	r2, [r3, #0]
husart2.Init.BaudRate = 115200;
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 800286c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002870:	605a      	str	r2, [r3, #4]
husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8002872:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
husart2.Init.StopBits = USART_STOPBITS_1;
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
husart2.Init.Parity = USART_PARITY_NONE;
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
husart2.Init.Mode = USART_MODE_TX_RX;
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	621a      	str	r2, [r3, #32]
husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
	  if (HAL_USART_Init(&husart2) != HAL_OK)
 80028a8:	4811      	ldr	r0, [pc, #68]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 80028aa:	f00e fdaf 	bl	801140c <HAL_USART_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028b4:	f000 fd44 	bl	8003340 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b8:	2100      	movs	r1, #0
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 80028bc:	f00f fd5e 	bl	801237c <HAL_USARTEx_SetTxFifoThreshold>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028c6:	f000 fd3b 	bl	8003340 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ca:	2100      	movs	r1, #0
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 80028ce:	f00f fd93 	bl	80123f8 <HAL_USARTEx_SetRxFifoThreshold>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028d8:	f000 fd32 	bl	8003340 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 80028dc:	4804      	ldr	r0, [pc, #16]	; (80028f0 <MX_USART2_UART_Init+0x90>)
 80028de:	f00f fd14 	bl	801230a <HAL_USARTEx_DisableFifoMode>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028e8:	f000 fd2a 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	24000ad0 	.word	0x24000ad0
 80028f4:	40004400 	.word	0x40004400

080028f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <MX_USART3_UART_Init+0x90>)
 80028fe:	4a23      	ldr	r2, [pc, #140]	; (800298c <MX_USART3_UART_Init+0x94>)
 8002900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <MX_USART3_UART_Init+0x90>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <MX_USART3_UART_Init+0x90>)
 800291e:	220c      	movs	r2, #12
 8002920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <MX_USART3_UART_Init+0x90>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <MX_USART3_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002940:	4811      	ldr	r0, [pc, #68]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002942:	f00d fb4d 	bl	800ffe0 <HAL_UART_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800294c:	f000 fcf8 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002950:	2100      	movs	r1, #0
 8002952:	480d      	ldr	r0, [pc, #52]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002954:	f00e fc8f 	bl	8011276 <HAL_UARTEx_SetTxFifoThreshold>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800295e:	f000 fcef 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002962:	2100      	movs	r1, #0
 8002964:	4808      	ldr	r0, [pc, #32]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002966:	f00e fcc4 	bl	80112f2 <HAL_UARTEx_SetRxFifoThreshold>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002970:	f000 fce6 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <MX_USART3_UART_Init+0x90>)
 8002976:	f00e fc45 	bl	8011204 <HAL_UARTEx_DisableFifoMode>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002980:	f000 fcde 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	24000a40 	.word	0x24000a40
 800298c:	40004800 	.word	0x40004800

08002990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002998:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800299c:	2209      	movs	r2, #9
 800299e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029a2:	2202      	movs	r2, #2
 80029a4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029d8:	f007 fea8 	bl	800a72c <HAL_PCD_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80029e2:	f000 fcad 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	24000b30 	.word	0x24000b30
 80029f0:	40080000 	.word	0x40080000

080029f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_DMA_Init+0x4c>)
 80029fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a00:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <MX_DMA_Init+0x4c>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <MX_DMA_Init+0x4c>)
 8002a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2105      	movs	r1, #5
 8002a1c:	200b      	movs	r0, #11
 8002a1e:	f002 ff13 	bl	8005848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a22:	200b      	movs	r0, #11
 8002a24:	f002 ff2a 	bl	800587c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2105      	movs	r1, #5
 8002a2c:	200f      	movs	r0, #15
 8002a2e:	f002 ff0b 	bl	8005848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002a32:	200f      	movs	r0, #15
 8002a34:	f002 ff22 	bl	800587c <HAL_NVIC_EnableIRQ>

}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58024400 	.word	0x58024400

08002a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08e      	sub	sp, #56	; 0x38
 8002a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a5a:	4ba3      	ldr	r3, [pc, #652]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a60:	4aa1      	ldr	r2, [pc, #644]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6a:	4b9f      	ldr	r3, [pc, #636]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a78:	4b9b      	ldr	r3, [pc, #620]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	4a9a      	ldr	r2, [pc, #616]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a88:	4b97      	ldr	r3, [pc, #604]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a96:	4b94      	ldr	r3, [pc, #592]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9c:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa6:	4b90      	ldr	r3, [pc, #576]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aba:	4a8b      	ldr	r2, [pc, #556]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad8:	4a83      	ldr	r2, [pc, #524]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b79      	ldr	r3, [pc, #484]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b0e:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b14:	4a74      	ldr	r2, [pc, #464]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1e:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2c:	4b6e      	ldr	r3, [pc, #440]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b32:	4a6d      	ldr	r2, [pc, #436]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <MX_GPIO_Init+0x2a4>)
 8002b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ETH_NSS_Pin|USER_LED_Y_Pin, GPIO_PIN_RESET);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2112      	movs	r1, #18
 8002b4e:	4867      	ldr	r0, [pc, #412]	; (8002cec <MX_GPIO_Init+0x2a8>)
 8002b50:	f005 feec 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2104      	movs	r1, #4
 8002b58:	4865      	ldr	r0, [pc, #404]	; (8002cf0 <MX_GPIO_Init+0x2ac>)
 8002b5a:	f005 fee7 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_G_Pin|ETH_RSTN_Pin|USER_LED_R_Pin, GPIO_PIN_RESET);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f244 0105 	movw	r1, #16389	; 0x4005
 8002b64:	4863      	ldr	r0, [pc, #396]	; (8002cf4 <MX_GPIO_Init+0x2b0>)
 8002b66:	f005 fee1 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b70:	4861      	ldr	r0, [pc, #388]	; (8002cf8 <MX_GPIO_Init+0x2b4>)
 8002b72:	f005 fedb 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD2_DCX_Pin|LCD2_RSVD_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	210c      	movs	r1, #12
 8002b7a:	4860      	ldr	r0, [pc, #384]	; (8002cfc <MX_GPIO_Init+0x2b8>)
 8002b7c:	f005 fed6 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DCX_Pin|LCD1_RSVD_Pin, GPIO_PIN_RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b86:	485e      	ldr	r0, [pc, #376]	; (8002d00 <MX_GPIO_Init+0x2bc>)
 8002b88:	f005 fed0 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2110      	movs	r1, #16
 8002b90:	4859      	ldr	r0, [pc, #356]	; (8002cf8 <MX_GPIO_Init+0x2b4>)
 8002b92:	f005 fecb 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG_Pin */
  GPIO_InitStruct.Pin = PG_Pin;
 8002b96:	2308      	movs	r3, #8
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PG_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4850      	ldr	r0, [pc, #320]	; (8002cec <MX_GPIO_Init+0x2a8>)
 8002baa:	f005 fcf7 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_NSS_Pin */
  GPIO_InitStruct.Pin = ETH_NSS_Pin;
 8002bae:	2310      	movs	r3, #16
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ETH_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4849      	ldr	r0, [pc, #292]	; (8002cec <MX_GPIO_Init+0x2a8>)
 8002bc6:	f005 fce9 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4848      	ldr	r0, [pc, #288]	; (8002d00 <MX_GPIO_Init+0x2bc>)
 8002be0:	f005 fcdc 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002be4:	2304      	movs	r3, #4
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	483d      	ldr	r0, [pc, #244]	; (8002cf0 <MX_GPIO_Init+0x2ac>)
 8002bfc:	f005 fcce 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin ETH_RSTN_Pin USER_LED_R_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|ETH_RSTN_Pin|USER_LED_R_Pin;
 8002c00:	f244 0305 	movw	r3, #16389	; 0x4005
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4836      	ldr	r0, [pc, #216]	; (8002cf4 <MX_GPIO_Init+0x2b0>)
 8002c1a:	f005 fcbf 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4832      	ldr	r0, [pc, #200]	; (8002cfc <MX_GPIO_Init+0x2b8>)
 8002c32:	f005 fcb3 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_INTn_Pin */
  GPIO_InitStruct.Pin = ETH_INTn_Pin;
 8002c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ETH_INTn_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4828      	ldr	r0, [pc, #160]	; (8002cec <MX_GPIO_Init+0x2a8>)
 8002c4c:	f005 fca6 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002c50:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c66:	4619      	mov	r1, r3
 8002c68:	4823      	ldr	r0, [pc, #140]	; (8002cf8 <MX_GPIO_Init+0x2b4>)
 8002c6a:	f005 fc97 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD2_DCX_Pin LCD2_RSVD_Pin */
  GPIO_InitStruct.Pin = LCD2_DCX_Pin|LCD2_RSVD_Pin;
 8002c6e:	230c      	movs	r3, #12
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c82:	4619      	mov	r1, r3
 8002c84:	481d      	ldr	r0, [pc, #116]	; (8002cfc <MX_GPIO_Init+0x2b8>)
 8002c86:	f005 fc89 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4817      	ldr	r0, [pc, #92]	; (8002cfc <MX_GPIO_Init+0x2b8>)
 8002ca0:	f005 fc7c 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DCX_Pin LCD1_RSVD_Pin */
  GPIO_InitStruct.Pin = LCD1_DCX_Pin|LCD1_RSVD_Pin;
 8002ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4810      	ldr	r0, [pc, #64]	; (8002d00 <MX_GPIO_Init+0x2bc>)
 8002cbe:	f005 fc6d 	bl	800859c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Y_Pin */
  GPIO_InitStruct.Pin = USER_LED_Y_Pin;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USER_LED_Y_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <MX_GPIO_Init+0x2a8>)
 8002cda:	f005 fc5f 	bl	800859c <HAL_GPIO_Init>

}
 8002cde:	bf00      	nop
 8002ce0:	3738      	adds	r7, #56	; 0x38
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58021000 	.word	0x58021000
 8002cf0:	58021400 	.word	0x58021400
 8002cf4:	58020400 	.word	0x58020400
 8002cf8:	58020c00 	.word	0x58020c00
 8002cfc:	58021800 	.word	0x58021800
 8002d00:	58020800 	.word	0x58020800

08002d04 <FillRectHandle>:

/* USER CODE BEGIN 4 */
void FillRectHandle(){
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
	fillRectHandle.Instance = DMA2D;
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <FillRectHandle+0x28>)
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <FillRectHandle+0x2c>)
 8002d0c:	601a      	str	r2, [r3, #0]

	fillRectHandle.Init.Mode = DMA2D_R2M;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <FillRectHandle+0x28>)
 8002d10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d14:	605a      	str	r2, [r3, #4]
	fillRectHandle.Init.ColorMode = DMA2D_OUTPUT_ARGB1555;
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <FillRectHandle+0x28>)
 8002d18:	2203      	movs	r2, #3
 8002d1a:	609a      	str	r2, [r3, #8]
	fillRectHandle.Init.OutputOffset = 0;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <FillRectHandle+0x28>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	2400136c 	.word	0x2400136c
 8002d30:	52001000 	.word	0x52001000

08002d34 <BlendImageHandle>:

void BlendImageHandle(){
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
	blendImageHandle.Instance = DMA2D;
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <BlendImageHandle+0x54>)
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <BlendImageHandle+0x58>)
 8002d3c:	601a      	str	r2, [r3, #0]

	blendImageHandle.Init.Mode = DMA2D_M2M_BLEND;
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <BlendImageHandle+0x54>)
 8002d40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d44:	605a      	str	r2, [r3, #4]
	blendImageHandle.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <BlendImageHandle+0x54>)
 8002d48:	2202      	movs	r2, #2
 8002d4a:	609a      	str	r2, [r3, #8]
	//blendImageHandle.Init.BytesSwap = DMA2D_BYTES_SWAP;

	// Foreground
	blendImageHandle.LayerCfg[1].AlphaMode = DMA2D_REGULAR_ALPHA;
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <BlendImageHandle+0x54>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	64da      	str	r2, [r3, #76]	; 0x4c
	blendImageHandle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB1555;
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <BlendImageHandle+0x54>)
 8002d54:	2203      	movs	r2, #3
 8002d56:	649a      	str	r2, [r3, #72]	; 0x48
	blendImageHandle.LayerCfg[1].InputOffset = 0;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <BlendImageHandle+0x54>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
	blendImageHandle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <BlendImageHandle+0x54>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58
	blendImageHandle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <BlendImageHandle+0x54>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54

	// Background
	blendImageHandle.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <BlendImageHandle+0x54>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
	blendImageHandle.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <BlendImageHandle+0x54>)
 8002d72:	2202      	movs	r2, #2
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
	blendImageHandle.LayerCfg[0].RedBlueSwap = DMA2D_RB_REGULAR;
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <BlendImageHandle+0x54>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	240013d4 	.word	0x240013d4
 8002d8c:	52001000 	.word	0x52001000

08002d90 <DMA2D_FillRect>:

void DMA2D_FillRect(uint16_t *screen_buffer, uint32_t color, uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t buffer_width) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]

	fillRectHandle.Init.OutputOffset = buffer_width - width;
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <DMA2D_FillRect+0x50>)
 8002da6:	60d3      	str	r3, [r2, #12]

	HAL_DMA2D_Init(&fillRectHandle);
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <DMA2D_FillRect+0x50>)
 8002daa:	f005 f8d7 	bl	8007f5c <HAL_DMA2D_Init>
	HAL_DMA2D_Start(&fillRectHandle, color,
			(uint32_t) screen_buffer + (x + y * buffer_width) * 2, width, height);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	fb03 f202 	mul.w	r2, r3, r2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	005a      	lsls	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
	HAL_DMA2D_Start(&fillRectHandle, color,
 8002dbe:	441a      	add	r2, r3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4805      	ldr	r0, [pc, #20]	; (8002de0 <DMA2D_FillRect+0x50>)
 8002dca:	f005 f92b 	bl	8008024 <HAL_DMA2D_Start>

	HAL_DMA2D_PollForTransfer(&fillRectHandle, 200);
 8002dce:	21c8      	movs	r1, #200	; 0xc8
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <DMA2D_FillRect+0x50>)
 8002dd2:	f005 f9a5 	bl	8008120 <HAL_DMA2D_PollForTransfer>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2400136c 	.word	0x2400136c

08002de4 <DMA2D_BlendImage>:

void DMA2D_BlendImage(uint16_t *screen_buffer, uint32_t data, uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t buffer_width) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
	uint32_t destination = (uint32_t) screen_buffer + (x + y * LCD_WIDTH) * 2;
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	005a      	lsls	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

	blendImageHandle.Init.OutputOffset = buffer_width - width;
 8002e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e12:	60d3      	str	r3, [r2, #12]
	blendImageHandle.LayerCfg[0].InputOffset = buffer_width - width;
 8002e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e1c:	6293      	str	r3, [r2, #40]	; 0x28

	HAL_DMA2D_Init(&blendImageHandle);
 8002e1e:	480e      	ldr	r0, [pc, #56]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e20:	f005 f89c 	bl	8007f5c <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&blendImageHandle, 1);
 8002e24:	2101      	movs	r1, #1
 8002e26:	480c      	ldr	r0, [pc, #48]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e28:	f005 fa64 	bl	80082f4 <HAL_DMA2D_ConfigLayer>
	HAL_DMA2D_ConfigLayer(&blendImageHandle, 0);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	480a      	ldr	r0, [pc, #40]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e30:	f005 fa60 	bl	80082f4 <HAL_DMA2D_ConfigLayer>

	HAL_DMA2D_BlendingStart(&blendImageHandle, data, destination, destination, width,
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e44:	f005 f919 	bl	800807a <HAL_DMA2D_BlendingStart>
			height);

	HAL_DMA2D_PollForTransfer(&blendImageHandle, 200);
 8002e48:	21c8      	movs	r1, #200	; 0xc8
 8002e4a:	4803      	ldr	r0, [pc, #12]	; (8002e58 <DMA2D_BlendImage+0x74>)
 8002e4c:	f005 f968 	bl	8008120 <HAL_DMA2D_PollForTransfer>
}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	240013d4 	.word	0x240013d4

08002e5c <updateChargeStatus>:

void updateChargeStatus(){
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
	uint8_t statOne = HAL_GPIO_ReadPin(GPIOG, STAT1_Pin);
 8002e62:	2101      	movs	r1, #1
 8002e64:	4826      	ldr	r0, [pc, #152]	; (8002f00 <updateChargeStatus+0xa4>)
 8002e66:	f005 fd49 	bl	80088fc <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t statTwo = HAL_GPIO_ReadPin(GPIOG, STAT2_Pin);
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4823      	ldr	r0, [pc, #140]	; (8002f00 <updateChargeStatus+0xa4>)
 8002e72:	f005 fd43 	bl	80088fc <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	71bb      	strb	r3, [r7, #6]

	if(statOne == 1 && statTwo == 1){
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <updateChargeStatus+0x40>
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10a      	bne.n	8002e9c <updateChargeStatus+0x40>
		HAL_GPIO_WritePin(GPIOE, USER_LED_Y_Pin, GPIO_PIN_SET);
 8002e86:	2201      	movs	r2, #1
 8002e88:	2102      	movs	r1, #2
 8002e8a:	481e      	ldr	r0, [pc, #120]	; (8002f04 <updateChargeStatus+0xa8>)
 8002e8c:	f005 fd4e 	bl	800892c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, USER_LED_G_Pin, GPIO_PIN_SET);
 8002e90:	2201      	movs	r2, #1
 8002e92:	2101      	movs	r1, #1
 8002e94:	481c      	ldr	r0, [pc, #112]	; (8002f08 <updateChargeStatus+0xac>)
 8002e96:	f005 fd49 	bl	800892c <HAL_GPIO_WritePin>
 8002e9a:	e02c      	b.n	8002ef6 <updateChargeStatus+0x9a>
	}else if(statOne == 0 && statTwo == 1){
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <updateChargeStatus+0x62>
 8002ea2:	79bb      	ldrb	r3, [r7, #6]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10a      	bne.n	8002ebe <updateChargeStatus+0x62>
		HAL_GPIO_WritePin(GPIOE, USER_LED_Y_Pin, GPIO_PIN_SET);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2102      	movs	r1, #2
 8002eac:	4815      	ldr	r0, [pc, #84]	; (8002f04 <updateChargeStatus+0xa8>)
 8002eae:	f005 fd3d 	bl	800892c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, USER_LED_G_Pin, GPIO_PIN_RESET);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4814      	ldr	r0, [pc, #80]	; (8002f08 <updateChargeStatus+0xac>)
 8002eb8:	f005 fd38 	bl	800892c <HAL_GPIO_WritePin>
 8002ebc:	e01b      	b.n	8002ef6 <updateChargeStatus+0x9a>
	}else if(statOne == 1 && statTwo == 0){
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <updateChargeStatus+0x84>
 8002ec4:	79bb      	ldrb	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <updateChargeStatus+0x84>
		HAL_GPIO_WritePin(GPIOE, USER_LED_Y_Pin, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2102      	movs	r1, #2
 8002ece:	480d      	ldr	r0, [pc, #52]	; (8002f04 <updateChargeStatus+0xa8>)
 8002ed0:	f005 fd2c 	bl	800892c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, USER_LED_G_Pin, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <updateChargeStatus+0xac>)
 8002eda:	f005 fd27 	bl	800892c <HAL_GPIO_WritePin>
 8002ede:	e00a      	b.n	8002ef6 <updateChargeStatus+0x9a>
	}else{
		HAL_GPIO_WritePin(GPIOE, USER_LED_Y_Pin, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	4807      	ldr	r0, [pc, #28]	; (8002f04 <updateChargeStatus+0xa8>)
 8002ee6:	f005 fd21 	bl	800892c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, USER_LED_G_Pin, GPIO_PIN_RESET);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2101      	movs	r1, #1
 8002eee:	4806      	ldr	r0, [pc, #24]	; (8002f08 <updateChargeStatus+0xac>)
 8002ef0:	f005 fd1c 	bl	800892c <HAL_GPIO_WritePin>
	}
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	58021800 	.word	0x58021800
 8002f04:	58021000 	.word	0x58021000
 8002f08:	58020400 	.word	0x58020400

08002f0c <StartCommTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommTask */
void StartCommTask(void *argument)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	EthInit(&hspi4);
 8002f14:	4804      	ldr	r0, [pc, #16]	; (8002f28 <StartCommTask+0x1c>)
 8002f16:	f010 ffe7 	bl	8013ee8 <EthInit>
	/* Infinite loop */
	for (ever) {
#ifdef DO_LOOP_MEASURE
		start_time = hrtim_count;
#endif
		loop_udps(5050);
 8002f1a:	f241 30ba 	movw	r0, #5050	; 0x13ba
 8002f1e:	f011 f8ad 	bl	801407c <loop_udps>

		updateChargeStatus();
 8002f22:	f7ff ff9b 	bl	8002e5c <updateChargeStatus>
		loop_udps(5050);
 8002f26:	e7f8      	b.n	8002f1a <StartCommTask+0xe>
 8002f28:	240006cc 	.word	0x240006cc

08002f2c <StartLCDDisplays>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDDisplays */
void StartLCDDisplays(void *argument)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b08b      	sub	sp, #44	; 0x2c
 8002f30:	af04      	add	r7, sp, #16
 8002f32:	6078      	str	r0, [r7, #4]
	uint8_t lcd1_lastx;
	uint8_t lcd1_lasty;
	uint8_t lcd2_lastx;
	uint8_t lcd2_lasty;

	uint8_t lcd1_x = 50;
 8002f34:	2332      	movs	r3, #50	; 0x32
 8002f36:	74fb      	strb	r3, [r7, #19]
	uint8_t lcd1_y = 50;
 8002f38:	2332      	movs	r3, #50	; 0x32
 8002f3a:	74bb      	strb	r3, [r7, #18]
	int8_t lcd1_x_step = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
	int8_t lcd1_y_step = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73bb      	strb	r3, [r7, #14]

	uint8_t lcd2_x = 50;
 8002f44:	2332      	movs	r3, #50	; 0x32
 8002f46:	747b      	strb	r3, [r7, #17]
	uint8_t lcd2_y = 50;
 8002f48:	2332      	movs	r3, #50	; 0x32
 8002f4a:	743b      	strb	r3, [r7, #16]
	int8_t lcd2_x_step = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	737b      	strb	r3, [r7, #13]
	int8_t lcd2_y_step = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	733b      	strb	r3, [r7, #12]

	DMA2D_FillRect(lcd1_screen_buffer, 0xFFFFFFFF, 0, 0, 240, 240, LCD_WIDTH);
 8002f54:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <StartLCDDisplays+0x1a0>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	23f0      	movs	r3, #240	; 0xf0
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	23f0      	movs	r3, #240	; 0xf0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	23f0      	movs	r3, #240	; 0xf0
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	2200      	movs	r2, #0
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6c:	f7ff ff10 	bl	8002d90 <DMA2D_FillRect>
	ST7789_writeScreen(lcd1, lcd1_screen_buffer);
 8002f70:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <StartLCDDisplays+0x1a4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a55      	ldr	r2, [pc, #340]	; (80030cc <StartLCDDisplays+0x1a0>)
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f013 ff3e 	bl	8016dfc <ST7789_writeScreen>

	DMA2D_FillRect(lcd2_screen_buffer, 0xFFFFFFFF, 0, 0, 240, 240, LCD_WIDTH);
 8002f80:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <StartLCDDisplays+0x1a8>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	23f0      	movs	r3, #240	; 0xf0
 8002f86:	9302      	str	r3, [sp, #8]
 8002f88:	23f0      	movs	r3, #240	; 0xf0
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	23f0      	movs	r3, #240	; 0xf0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	2200      	movs	r2, #0
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	f7ff fefa 	bl	8002d90 <DMA2D_FillRect>
	ST7789_writeScreen(lcd2, lcd2_screen_buffer);
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <StartLCDDisplays+0x1ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	; (80030d4 <StartLCDDisplays+0x1a8>)
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f013 ff28 	bl	8016dfc <ST7789_writeScreen>

	/* Infinite loop */
	for (ever) {
		//wait for the software timer to signal that it is time to refresh the LCD
		osSemaphoreAcquire(lcdDisplaysTaskSemHandle, osWaitForever);
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <StartLCDDisplays+0x1b0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f014 f9db 	bl	8017370 <osSemaphoreAcquire>

		lcd1_x_step = (lcd1_x_t - lcd1_x) / 2;
 8002fba:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <StartLCDDisplays+0x1b4>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da00      	bge.n	8002fca <StartLCDDisplays+0x9e>
 8002fc8:	3301      	adds	r3, #1
 8002fca:	105b      	asrs	r3, r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
		lcd1_y_step = (lcd1_y_t - lcd1_y) / 2;
 8002fce:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <StartLCDDisplays+0x1b8>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	7cbb      	ldrb	r3, [r7, #18]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da00      	bge.n	8002fde <StartLCDDisplays+0xb2>
 8002fdc:	3301      	adds	r3, #1
 8002fde:	105b      	asrs	r3, r3, #1
 8002fe0:	73bb      	strb	r3, [r7, #14]

		lcd2_x_step = (lcd2_x_t - lcd2_x) / 2;
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <StartLCDDisplays+0x1bc>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	7c7b      	ldrb	r3, [r7, #17]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da00      	bge.n	8002ff2 <StartLCDDisplays+0xc6>
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	105b      	asrs	r3, r3, #1
 8002ff4:	737b      	strb	r3, [r7, #13]
		lcd2_y_step = (lcd2_y_t - lcd2_y) / 2;
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <StartLCDDisplays+0x1c0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	7c3b      	ldrb	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	da00      	bge.n	8003006 <StartLCDDisplays+0xda>
 8003004:	3301      	adds	r3, #1
 8003006:	105b      	asrs	r3, r3, #1
 8003008:	733b      	strb	r3, [r7, #12]

		if(blink > 0){
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <StartLCDDisplays+0x1c4>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d074      	beq.n	80030fc <StartLCDDisplays+0x1d0>
			while(oneTransmitting);
 8003012:	bf00      	nop
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <StartLCDDisplays+0x1c8>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1fa      	bne.n	8003014 <StartLCDDisplays+0xe8>
			DMA2D_FillRect(lcd1_screen_buffer, 0x00000000, 0, 0, 240, 240, LCD_WIDTH);
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <StartLCDDisplays+0x1a0>)
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	23f0      	movs	r3, #240	; 0xf0
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	23f0      	movs	r3, #240	; 0xf0
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	23f0      	movs	r3, #240	; 0xf0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	2200      	movs	r2, #0
 8003032:	2100      	movs	r1, #0
 8003034:	f7ff feac 	bl	8002d90 <DMA2D_FillRect>
			ST7789_writeScreen(lcd1, lcd1_screen_buffer);
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <StartLCDDisplays+0x1a4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <StartLCDDisplays+0x1a0>)
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f013 feda 	bl	8016dfc <ST7789_writeScreen>

			while(threeTransmitting);
 8003048:	bf00      	nop
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <StartLCDDisplays+0x1cc>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1fa      	bne.n	800304a <StartLCDDisplays+0x11e>
			DMA2D_FillRect(lcd2_screen_buffer, 0x00000000, 0, 0, 240, 240, LCD_WIDTH);
 8003054:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <StartLCDDisplays+0x1a8>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	23f0      	movs	r3, #240	; 0xf0
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	23f0      	movs	r3, #240	; 0xf0
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	23f0      	movs	r3, #240	; 0xf0
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	f7ff fe91 	bl	8002d90 <DMA2D_FillRect>
			ST7789_writeScreen(lcd2, lcd2_screen_buffer);
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <StartLCDDisplays+0x1ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <StartLCDDisplays+0x1a8>)
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f013 febf 	bl	8016dfc <ST7789_writeScreen>

			blink -= 1;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <StartLCDDisplays+0x1c4>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <StartLCDDisplays+0x1c4>)
 8003088:	701a      	strb	r2, [r3, #0]

			if(blink == 0){
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <StartLCDDisplays+0x1c4>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d18c      	bne.n	8002fac <StartLCDDisplays+0x80>
				DMA2D_FillRect(lcd1_screen_buffer, 0xFFFFFFFF, 0, 0, 240, 240, LCD_WIDTH);
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <StartLCDDisplays+0x1a0>)
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	23f0      	movs	r3, #240	; 0xf0
 8003098:	9302      	str	r3, [sp, #8]
 800309a:	23f0      	movs	r3, #240	; 0xf0
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	23f0      	movs	r3, #240	; 0xf0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	2200      	movs	r2, #0
 80030a6:	f04f 31ff 	mov.w	r1, #4294967295
 80030aa:	f7ff fe71 	bl	8002d90 <DMA2D_FillRect>
				DMA2D_FillRect(lcd2_screen_buffer, 0xFFFFFFFF, 0, 0, 240, 240, LCD_WIDTH);
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <StartLCDDisplays+0x1a8>)
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	23f0      	movs	r3, #240	; 0xf0
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	23f0      	movs	r3, #240	; 0xf0
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	23f0      	movs	r3, #240	; 0xf0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2300      	movs	r3, #0
 80030c0:	2200      	movs	r2, #0
 80030c2:	f04f 31ff 	mov.w	r1, #4294967295
 80030c6:	f7ff fe63 	bl	8002d90 <DMA2D_FillRect>
 80030ca:	e76f      	b.n	8002fac <StartLCDDisplays+0x80>
 80030cc:	24001360 	.word	0x24001360
 80030d0:	24000f54 	.word	0x24000f54
 80030d4:	24001364 	.word	0x24001364
 80030d8:	24000f58 	.word	0x24000f58
 80030dc:	24000f4c 	.word	0x24000f4c
 80030e0:	24000023 	.word	0x24000023
 80030e4:	24000024 	.word	0x24000024
 80030e8:	24000025 	.word	0x24000025
 80030ec:	24000026 	.word	0x24000026
 80030f0:	2400143c 	.word	0x2400143c
 80030f4:	2400143d 	.word	0x2400143d
 80030f8:	2400143e 	.word	0x2400143e
			}
		}else{
			if (abs(lcd1_x_step) > 2 || abs(lcd1_y_step) > 2) {
 80030fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	bfb8      	it	lt
 8003104:	425b      	neglt	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d807      	bhi.n	800311c <StartLCDDisplays+0x1f0>
 800310c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003110:	2b00      	cmp	r3, #0
 8003112:	bfb8      	it	lt
 8003114:	425b      	neglt	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d90b      	bls.n	8003134 <StartLCDDisplays+0x208>
				lcd1_lastx = lcd1_x;
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	75fb      	strb	r3, [r7, #23]
				lcd1_lasty = lcd1_y;
 8003120:	7cbb      	ldrb	r3, [r7, #18]
 8003122:	75bb      	strb	r3, [r7, #22]

				lcd1_x += lcd1_x_step;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	4413      	add	r3, r2
 800312a:	74fb      	strb	r3, [r7, #19]
				lcd1_y += lcd1_y_step;
 800312c:	7bba      	ldrb	r2, [r7, #14]
 800312e:	7cbb      	ldrb	r3, [r7, #18]
 8003130:	4413      	add	r3, r2
 8003132:	74bb      	strb	r3, [r7, #18]
			}

			if (abs(lcd2_x_step) > 2 || abs(lcd2_y_step) > 2) {
 8003134:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003138:	2b00      	cmp	r3, #0
 800313a:	bfb8      	it	lt
 800313c:	425b      	neglt	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d807      	bhi.n	8003154 <StartLCDDisplays+0x228>
 8003144:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	bfb8      	it	lt
 800314c:	425b      	neglt	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d90b      	bls.n	800316c <StartLCDDisplays+0x240>
				lcd2_lastx = lcd2_x;
 8003154:	7c7b      	ldrb	r3, [r7, #17]
 8003156:	757b      	strb	r3, [r7, #21]
				lcd2_lasty = lcd2_y;
 8003158:	7c3b      	ldrb	r3, [r7, #16]
 800315a:	753b      	strb	r3, [r7, #20]

				lcd2_x += lcd2_x_step;
 800315c:	7b7a      	ldrb	r2, [r7, #13]
 800315e:	7c7b      	ldrb	r3, [r7, #17]
 8003160:	4413      	add	r3, r2
 8003162:	747b      	strb	r3, [r7, #17]
				lcd2_y += lcd2_y_step;
 8003164:	7b3a      	ldrb	r2, [r7, #12]
 8003166:	7c3b      	ldrb	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	743b      	strb	r3, [r7, #16]
			}

			while(oneTransmitting);
 800316c:	bf00      	nop
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <StartLCDDisplays+0x320>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1fa      	bne.n	800316e <StartLCDDisplays+0x242>
			DMA2D_FillRect(lcd1_screen_buffer, 0xFFFFFFFF, lcd1_lastx, lcd1_lasty, IMAGE_WIDTH, IMAGE_HEIGHT, LCD_WIDTH);
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <StartLCDDisplays+0x324>)
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	7dfa      	ldrb	r2, [r7, #23]
 800317e:	7dbb      	ldrb	r3, [r7, #22]
 8003180:	21f0      	movs	r1, #240	; 0xf0
 8003182:	9102      	str	r1, [sp, #8]
 8003184:	2150      	movs	r1, #80	; 0x50
 8003186:	9101      	str	r1, [sp, #4]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	9100      	str	r1, [sp, #0]
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	f7ff fdfe 	bl	8002d90 <DMA2D_FillRect>
			DMA2D_BlendImage(lcd1_screen_buffer, (uint32_t) green_eye_80x80, lcd1_x, lcd1_y, IMAGE_WIDTH, IMAGE_HEIGHT, LCD_WIDTH);
 8003194:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <StartLCDDisplays+0x324>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4c2e      	ldr	r4, [pc, #184]	; (8003254 <StartLCDDisplays+0x328>)
 800319a:	7cfa      	ldrb	r2, [r7, #19]
 800319c:	7cbb      	ldrb	r3, [r7, #18]
 800319e:	21f0      	movs	r1, #240	; 0xf0
 80031a0:	9102      	str	r1, [sp, #8]
 80031a2:	2150      	movs	r1, #80	; 0x50
 80031a4:	9101      	str	r1, [sp, #4]
 80031a6:	2150      	movs	r1, #80	; 0x50
 80031a8:	9100      	str	r1, [sp, #0]
 80031aa:	4621      	mov	r1, r4
 80031ac:	f7ff fe1a 	bl	8002de4 <DMA2D_BlendImage>
			DMA2D_BlendImage(lcd1_screen_buffer, (uint32_t) front_image, 0, 0, 240, 240, LCD_WIDTH);
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <StartLCDDisplays+0x324>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	4928      	ldr	r1, [pc, #160]	; (8003258 <StartLCDDisplays+0x32c>)
 80031b6:	23f0      	movs	r3, #240	; 0xf0
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	23f0      	movs	r3, #240	; 0xf0
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	23f0      	movs	r3, #240	; 0xf0
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	2200      	movs	r2, #0
 80031c6:	f7ff fe0d 	bl	8002de4 <DMA2D_BlendImage>
			ST7789_writeScreen(lcd1, lcd1_screen_buffer);
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <StartLCDDisplays+0x330>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a20      	ldr	r2, [pc, #128]	; (8003250 <StartLCDDisplays+0x324>)
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f013 fe11 	bl	8016dfc <ST7789_writeScreen>

			while(threeTransmitting);
 80031da:	bf00      	nop
 80031dc:	4b20      	ldr	r3, [pc, #128]	; (8003260 <StartLCDDisplays+0x334>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1fa      	bne.n	80031dc <StartLCDDisplays+0x2b0>
			DMA2D_FillRect(lcd2_screen_buffer, 0xFFFFFFFF, lcd2_lastx, lcd2_lasty, IMAGE_WIDTH, IMAGE_HEIGHT, LCD_WIDTH);
 80031e6:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <StartLCDDisplays+0x338>)
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	7d7a      	ldrb	r2, [r7, #21]
 80031ec:	7d3b      	ldrb	r3, [r7, #20]
 80031ee:	21f0      	movs	r1, #240	; 0xf0
 80031f0:	9102      	str	r1, [sp, #8]
 80031f2:	2150      	movs	r1, #80	; 0x50
 80031f4:	9101      	str	r1, [sp, #4]
 80031f6:	2150      	movs	r1, #80	; 0x50
 80031f8:	9100      	str	r1, [sp, #0]
 80031fa:	f04f 31ff 	mov.w	r1, #4294967295
 80031fe:	f7ff fdc7 	bl	8002d90 <DMA2D_FillRect>
			DMA2D_BlendImage(lcd2_screen_buffer, (uint32_t) green_eye_80x80, lcd2_x, lcd2_y, IMAGE_WIDTH, IMAGE_HEIGHT, LCD_WIDTH);
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <StartLCDDisplays+0x338>)
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	4c13      	ldr	r4, [pc, #76]	; (8003254 <StartLCDDisplays+0x328>)
 8003208:	7c7a      	ldrb	r2, [r7, #17]
 800320a:	7c3b      	ldrb	r3, [r7, #16]
 800320c:	21f0      	movs	r1, #240	; 0xf0
 800320e:	9102      	str	r1, [sp, #8]
 8003210:	2150      	movs	r1, #80	; 0x50
 8003212:	9101      	str	r1, [sp, #4]
 8003214:	2150      	movs	r1, #80	; 0x50
 8003216:	9100      	str	r1, [sp, #0]
 8003218:	4621      	mov	r1, r4
 800321a:	f7ff fde3 	bl	8002de4 <DMA2D_BlendImage>
			DMA2D_BlendImage(lcd2_screen_buffer, (uint32_t) front_image, 0, 0, 240, 240, LCD_WIDTH);
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <StartLCDDisplays+0x338>)
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	490d      	ldr	r1, [pc, #52]	; (8003258 <StartLCDDisplays+0x32c>)
 8003224:	23f0      	movs	r3, #240	; 0xf0
 8003226:	9302      	str	r3, [sp, #8]
 8003228:	23f0      	movs	r3, #240	; 0xf0
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	23f0      	movs	r3, #240	; 0xf0
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	2200      	movs	r2, #0
 8003234:	f7ff fdd6 	bl	8002de4 <DMA2D_BlendImage>
			ST7789_writeScreen(lcd2, lcd2_screen_buffer);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <StartLCDDisplays+0x33c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <StartLCDDisplays+0x338>)
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f013 fdda 	bl	8016dfc <ST7789_writeScreen>
		osSemaphoreAcquire(lcdDisplaysTaskSemHandle, osWaitForever);
 8003248:	e6b0      	b.n	8002fac <StartLCDDisplays+0x80>
 800324a:	bf00      	nop
 800324c:	2400143d 	.word	0x2400143d
 8003250:	24001360 	.word	0x24001360
 8003254:	0801de84 	.word	0x0801de84
 8003258:	08021084 	.word	0x08021084
 800325c:	24000f54 	.word	0x24000f54
 8003260:	2400143e 	.word	0x2400143e
 8003264:	24001364 	.word	0x24001364
 8003268:	24000f58 	.word	0x24000f58

0800326c <StartMotorOutput>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorOutput */
void StartMotorOutput(void *argument)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorOutput */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(pidStepTaskSemHandle, osWaitForever);
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <StartMotorOutput+0x54>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	4618      	mov	r0, r3
 800327e:	f014 f877 	bl	8017370 <osSemaphoreAcquire>

		for(int i = 0; i < MAX_PACKAGES; i++){
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e016      	b.n	80032b6 <StartMotorOutput+0x4a>
			if(Packages[i] != 0){
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <StartMotorOutput+0x58>)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <StartMotorOutput+0x44>
				Package_updateSensorValue(Packages[i]);
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <StartMotorOutput+0x58>)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	4618      	mov	r0, r3
 800329e:	f017 fd9f 	bl	801ade0 <Package_updateSensorValue>
				Package_StepPID(Packages[i]);
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <StartMotorOutput+0x58>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f017 fd8d 	bl	801adca <Package_StepPID>
		for(int i = 0; i < MAX_PACKAGES; i++){
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2bfe      	cmp	r3, #254	; 0xfe
 80032ba:	dde5      	ble.n	8003288 <StartMotorOutput+0x1c>
		osSemaphoreAcquire(pidStepTaskSemHandle, osWaitForever);
 80032bc:	e7da      	b.n	8003274 <StartMotorOutput+0x8>
 80032be:	bf00      	nop
 80032c0:	24000f50 	.word	0x24000f50
 80032c4:	24000f64 	.word	0x24000f64

080032c8 <Timer_LCD_cb>:
  /* USER CODE END StartMotorOutput */
}

/* Timer_LCD_cb function */
void Timer_LCD_cb(void *argument)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_LCD_cb */
  osSemaphoreRelease(lcdDisplaysTaskSemHandle);
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <Timer_LCD_cb+0x1c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f014 f89d 	bl	8017414 <osSemaphoreRelease>
  /* USER CODE END Timer_LCD_cb */
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	24000f4c 	.word	0x24000f4c

080032e8 <Timer_PID_cb>:

/* Timer_PID_cb function */
void Timer_PID_cb(void *argument)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_PID_cb */
	osSemaphoreRelease(pidStepTaskSemHandle);
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <Timer_PID_cb+0x1c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f014 f88d 	bl	8017414 <osSemaphoreRelease>
  /* USER CODE END Timer_PID_cb */
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	24000f50 	.word	0x24000f50

08003308 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 800330c:	f002 fac4 	bl	8005898 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003310:	2004      	movs	r0, #4
 8003312:	f002 fad9 	bl	80058c8 <HAL_MPU_Enable>

}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800332e:	f001 f9e5 	bl	80046fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000

08003340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_MspInit+0x38>)
 8003358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_MspInit+0x38>)
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_MspInit+0x38>)
 8003368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003374:	2200      	movs	r2, #0
 8003376:	210f      	movs	r1, #15
 8003378:	f06f 0001 	mvn.w	r0, #1
 800337c:	f002 fa64 	bl	8005848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	58024400 	.word	0x58024400

0800338c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	; 0x38
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a59      	ldr	r2, [pc, #356]	; (8003510 <HAL_ADC_MspInit+0x184>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d160      	bne.n	8003470 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033b6:	f043 0320 	orr.w	r3, r3, #32
 80033ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033cc:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d2:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003408:	4b42      	ldr	r3, [pc, #264]	; (8003514 <HAL_ADC_MspInit+0x188>)
 800340a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800340e:	4a41      	ldr	r2, [pc, #260]	; (8003514 <HAL_ADC_MspInit+0x188>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003418:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_ADC_MspInit+0x188>)
 800341a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_INP10
    PA3     ------> ADC2_INP15
    PB1     ------> ADC2_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003426:	2301      	movs	r3, #1
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800342a:	2303      	movs	r3, #3
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003436:	4619      	mov	r1, r3
 8003438:	4837      	ldr	r0, [pc, #220]	; (8003518 <HAL_ADC_MspInit+0x18c>)
 800343a:	f005 f8af 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800343e:	2308      	movs	r3, #8
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003442:	2303      	movs	r3, #3
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344e:	4619      	mov	r1, r3
 8003450:	4832      	ldr	r0, [pc, #200]	; (800351c <HAL_ADC_MspInit+0x190>)
 8003452:	f005 f8a3 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003456:	2302      	movs	r3, #2
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345a:	2303      	movs	r3, #3
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003466:	4619      	mov	r1, r3
 8003468:	482d      	ldr	r0, [pc, #180]	; (8003520 <HAL_ADC_MspInit+0x194>)
 800346a:	f005 f897 	bl	800859c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800346e:	e04a      	b.n	8003506 <HAL_ADC_MspInit+0x17a>
  else if(hadc->Instance==ADC3)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_ADC_MspInit+0x198>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d145      	bne.n	8003506 <HAL_ADC_MspInit+0x17a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_ADC_MspInit+0x188>)
 800347c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003480:	4a24      	ldr	r2, [pc, #144]	; (8003514 <HAL_ADC_MspInit+0x188>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_ADC_MspInit+0x188>)
 800348c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_ADC_MspInit+0x188>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80034a0:	f043 0320 	orr.w	r3, r3, #32
 80034a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80034b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_ADC_MspInit+0x188>)
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034da:	2303      	movs	r3, #3
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e6:	4619      	mov	r1, r3
 80034e8:	480f      	ldr	r0, [pc, #60]	; (8003528 <HAL_ADC_MspInit+0x19c>)
 80034ea:	f005 f857 	bl	800859c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80034ee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80034f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80034f6:	f001 f951 	bl	800479c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80034fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80034fe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003502:	f001 f94b 	bl	800479c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003506:	bf00      	nop
 8003508:	3738      	adds	r7, #56	; 0x38
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40022100 	.word	0x40022100
 8003514:	58024400 	.word	0x58024400
 8003518:	58020800 	.word	0x58020800
 800351c:	58020000 	.word	0x58020000
 8003520:	58020400 	.word	0x58020400
 8003524:	58026000 	.word	0x58026000
 8003528:	58021400 	.word	0x58021400

0800352c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <HAL_DMA2D_MspInit+0x3c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10e      	bne.n	800355c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_DMA2D_MspInit+0x40>)
 8003540:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003544:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_DMA2D_MspInit+0x40>)
 8003546:	f043 0310 	orr.w	r3, r3, #16
 800354a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_DMA2D_MspInit+0x40>)
 8003550:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	52001000 	.word	0x52001000
 800356c:	58024400 	.word	0x58024400

08003570 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0b2      	sub	sp, #200	; 0xc8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	22bc      	movs	r2, #188	; 0xbc
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f017 ff61 	bl	801b448 <memset>
  if(hhrtim->Instance==HRTIM1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_HRTIM_MspInit+0x78>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d126      	bne.n	80035de <HAL_HRTIM_MspInit+0x6e>
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8003590:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003594:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4618      	mov	r0, r3
 80035a2:	f008 fa51 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_HRTIM_MspInit+0x40>
    {
      Error_Handler();
 80035ac:	f7ff fec8 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_HRTIM_MspInit+0x7c>)
 80035b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035b6:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <HAL_HRTIM_MspInit+0x7c>)
 80035b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_HRTIM_MspInit+0x7c>)
 80035c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 5, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2105      	movs	r1, #5
 80035d2:	2067      	movs	r0, #103	; 0x67
 80035d4:	f002 f938 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 80035d8:	2067      	movs	r0, #103	; 0x67
 80035da:	f002 f94f 	bl	800587c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80035de:	bf00      	nop
 80035e0:	37c8      	adds	r7, #200	; 0xc8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40017400 	.word	0x40017400
 80035ec:	58024400 	.word	0x58024400

080035f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b0bc      	sub	sp, #240	; 0xf0
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003608:	f107 0320 	add.w	r3, r7, #32
 800360c:	22bc      	movs	r2, #188	; 0xbc
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f017 ff19 	bl	801b448 <memset>
  if(hi2c->Instance==I2C1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6d      	ldr	r2, [pc, #436]	; (80037d0 <HAL_I2C_MspInit+0x1e0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d143      	bne.n	80036a8 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003620:	2308      	movs	r3, #8
 8003622:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362a:	f107 0320 	add.w	r3, r7, #32
 800362e:	4618      	mov	r0, r3
 8003630:	f008 fa0a 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800363a:	f7ff fe81 	bl	8003340 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003644:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_EXPANDER_SCL_Pin|GPIO_EXPANDER_SDA_Pin;
 800365c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003664:	2312      	movs	r3, #18
 8003666:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003676:	2304      	movs	r3, #4
 8003678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003680:	4619      	mov	r1, r3
 8003682:	4855      	ldr	r0, [pc, #340]	; (80037d8 <HAL_I2C_MspInit+0x1e8>)
 8003684:	f004 ff8a 	bl	800859c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003688:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 800368a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800368e:	4a51      	ldr	r2, [pc, #324]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003694:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003698:	4b4e      	ldr	r3, [pc, #312]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 800369a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800369e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80036a6:	e08f      	b.n	80037c8 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a4b      	ldr	r2, [pc, #300]	; (80037dc <HAL_I2C_MspInit+0x1ec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d142      	bne.n	8003738 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80036b2:	2308      	movs	r3, #8
 80036b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036bc:	f107 0320 	add.w	r3, r7, #32
 80036c0:	4618      	mov	r0, r3
 80036c2:	f008 f9c1 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 80036cc:	f7ff fe38 	bl	8003340 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 80036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d6:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 80036d8:	f043 0320 	orr.w	r3, r3, #32
 80036dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e0:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 80036e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_EXPANDER_SDA_Pin|PWM_EXPANDER_SCL_Pin;
 80036ee:	2303      	movs	r3, #3
 80036f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f4:	2312      	movs	r3, #18
 80036f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003706:	2304      	movs	r3, #4
 8003708:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800370c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003710:	4619      	mov	r1, r3
 8003712:	4833      	ldr	r0, [pc, #204]	; (80037e0 <HAL_I2C_MspInit+0x1f0>)
 8003714:	f004 ff42 	bl	800859c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 800371a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371e:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003728:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 800372a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
}
 8003736:	e047      	b.n	80037c8 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C4)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a29      	ldr	r2, [pc, #164]	; (80037e4 <HAL_I2C_MspInit+0x1f4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d142      	bne.n	80037c8 <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003742:	2310      	movs	r3, #16
 8003744:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800374c:	f107 0320 	add.w	r3, r7, #32
 8003750:	4618      	mov	r0, r3
 8003752:	f008 f979 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 800375c:	f7ff fdf0 	bl	8003340 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003766:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800377e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003786:	2312      	movs	r3, #18
 8003788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003798:	2304      	movs	r3, #4
 800379a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800379e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037a2:	4619      	mov	r1, r3
 80037a4:	4810      	ldr	r0, [pc, #64]	; (80037e8 <HAL_I2C_MspInit+0x1f8>)
 80037a6:	f004 fef9 	bl	800859c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 80037ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037b0:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 80037b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_I2C_MspInit+0x1e4>)
 80037bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
}
 80037c8:	bf00      	nop
 80037ca:	37f0      	adds	r7, #240	; 0xf0
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40005400 	.word	0x40005400
 80037d4:	58024400 	.word	0x58024400
 80037d8:	58020400 	.word	0x58020400
 80037dc:	40005800 	.word	0x40005800
 80037e0:	58021400 	.word	0x58021400
 80037e4:	58001c00 	.word	0x58001c00
 80037e8:	58020c00 	.word	0x58020c00

080037ec <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b0ba      	sub	sp, #232	; 0xe8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003804:	f107 0318 	add.w	r3, r7, #24
 8003808:	22bc      	movs	r2, #188	; 0xbc
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f017 fe1b 	bl	801b448 <memset>
  if(hlptim->Instance==LPTIM2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <HAL_LPTIM_MspInit+0x108>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d167      	bne.n	80038ec <HAL_LPTIM_MspInit+0x100>
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800381c:	2340      	movs	r3, #64	; 0x40
 800381e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	4618      	mov	r0, r3
 800382c:	f008 f90c 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8003836:	f7ff fd83 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 800383c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 8003842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003846:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800384a:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 800384c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 800386a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 8003878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387c:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_LPTIM_MspInit+0x10c>)
 8003888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM2 GPIO Configuration
    PB10     ------> LPTIM2_IN1
    PD11     ------> LPTIM2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80038ae:	2303      	movs	r3, #3
 80038b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4810      	ldr	r0, [pc, #64]	; (80038fc <HAL_LPTIM_MspInit+0x110>)
 80038bc:	f004 fe6e 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80038da:	2303      	movs	r3, #3
 80038dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4806      	ldr	r0, [pc, #24]	; (8003900 <HAL_LPTIM_MspInit+0x114>)
 80038e8:	f004 fe58 	bl	800859c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80038ec:	bf00      	nop
 80038ee:	37e8      	adds	r7, #232	; 0xe8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	58002400 	.word	0x58002400
 80038f8:	58024400 	.word	0x58024400
 80038fc:	58020400 	.word	0x58020400
 8003900:	58020c00 	.word	0x58020c00

08003904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b0c0      	sub	sp, #256	; 0x100
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800391c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003920:	22bc      	movs	r2, #188	; 0xbc
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f017 fd8f 	bl	801b448 <memset>
  if(hspi->Instance==SPI1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4aa4      	ldr	r2, [pc, #656]	; (8003bc0 <HAL_SPI_MspInit+0x2bc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	f040 809f 	bne.w	8003a74 <HAL_SPI_MspInit+0x170>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800393c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003948:	4618      	mov	r0, r3
 800394a:	f008 f87d 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003954:	f7ff fcf4 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003958:	4b9a      	ldr	r3, [pc, #616]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 800395a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800395e:	4a99      	ldr	r2, [pc, #612]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003964:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003968:	4b96      	ldr	r3, [pc, #600]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 800396a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800396e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	4b93      	ldr	r3, [pc, #588]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800397c:	4a91      	ldr	r2, [pc, #580]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003986:	4b8f      	ldr	r3, [pc, #572]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003994:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a4:	4b87      	ldr	r3, [pc, #540]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 80039a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD1_SCK_Pin|LCD1_MISO_Pin|LCD1_NSS_Pin;
 80039b2:	f248 0360 	movw	r3, #32864	; 0x8060
 80039b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039cc:	2305      	movs	r3, #5
 80039ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039d6:	4619      	mov	r1, r3
 80039d8:	487b      	ldr	r0, [pc, #492]	; (8003bc8 <HAL_SPI_MspInit+0x2c4>)
 80039da:	f004 fddf 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD1_MOSI_Pin;
 80039de:	2320      	movs	r3, #32
 80039e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039f6:	2305      	movs	r3, #5
 80039f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(LCD1_MOSI_GPIO_Port, &GPIO_InitStruct);
 80039fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a00:	4619      	mov	r1, r3
 8003a02:	4872      	ldr	r0, [pc, #456]	; (8003bcc <HAL_SPI_MspInit+0x2c8>)
 8003a04:	f004 fdca 	bl	800859c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8003a08:	4b71      	ldr	r3, [pc, #452]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a0a:	4a72      	ldr	r2, [pc, #456]	; (8003bd4 <HAL_SPI_MspInit+0x2d0>)
 8003a0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003a0e:	4b70      	ldr	r3, [pc, #448]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a10:	2226      	movs	r2, #38	; 0x26
 8003a12:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a14:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a16:	2240      	movs	r2, #64	; 0x40
 8003a18:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a20:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a26:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a2e:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a40:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a46:	4862      	ldr	r0, [pc, #392]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a48:	f001 ff5e 	bl	8005908 <HAL_DMA_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8003a52:	f7ff fc75 	bl	8003340 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a5d      	ldr	r2, [pc, #372]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a5a:	679a      	str	r2, [r3, #120]	; 0x78
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_SPI_MspInit+0x2cc>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2105      	movs	r1, #5
 8003a66:	2023      	movs	r0, #35	; 0x23
 8003a68:	f001 feee 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003a6c:	2023      	movs	r0, #35	; 0x23
 8003a6e:	f001 ff05 	bl	800587c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003a72:	e160      	b.n	8003d36 <HAL_SPI_MspInit+0x432>
  else if(hspi->Instance==SPI3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_SPI_MspInit+0x2d4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f040 80b4 	bne.w	8003be8 <HAL_SPI_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003a86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a92:	4618      	mov	r0, r3
 8003a94:	f007 ffd8 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_SPI_MspInit+0x19e>
      Error_Handler();
 8003a9e:	f7ff fc4f 	bl	8003340 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003aa2:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa8:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ab2:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac6:	4a3f      	ldr	r2, [pc, #252]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad0:	4b3c      	ldr	r3, [pc, #240]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae4:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aee:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <HAL_SPI_MspInit+0x2c0>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LCD2_NSS_Pin;
 8003afc:	2310      	movs	r3, #16
 8003afe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b14:	2306      	movs	r3, #6
 8003b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(LCD2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003b1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4829      	ldr	r0, [pc, #164]	; (8003bc8 <HAL_SPI_MspInit+0x2c4>)
 8003b22:	f004 fd3b 	bl	800859c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD2_SCK_Pin|LCD2_MISO_Pin|LCD2_MOSI_Pin;
 8003b26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b40:	2306      	movs	r3, #6
 8003b42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b46:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4823      	ldr	r0, [pc, #140]	; (8003bdc <HAL_SPI_MspInit+0x2d8>)
 8003b4e:	f004 fd25 	bl	800859c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b54:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_SPI_MspInit+0x2e0>)
 8003b56:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003b58:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b5a:	223e      	movs	r2, #62	; 0x3e
 8003b5c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b60:	2240      	movs	r2, #64	; 0x40
 8003b62:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b70:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003b90:	4813      	ldr	r0, [pc, #76]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003b92:	f001 feb9 	bl	8005908 <HAL_DMA_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_SPI_MspInit+0x29c>
      Error_Handler();
 8003b9c:	f7ff fbd0 	bl	8003340 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003ba4:	679a      	str	r2, [r3, #120]	; 0x78
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <HAL_SPI_MspInit+0x2dc>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003bac:	2200      	movs	r2, #0
 8003bae:	2105      	movs	r1, #5
 8003bb0:	2033      	movs	r0, #51	; 0x33
 8003bb2:	f001 fe49 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003bb6:	2033      	movs	r0, #51	; 0x33
 8003bb8:	f001 fe60 	bl	800587c <HAL_NVIC_EnableIRQ>
}
 8003bbc:	e0bb      	b.n	8003d36 <HAL_SPI_MspInit+0x432>
 8003bbe:	bf00      	nop
 8003bc0:	40013000 	.word	0x40013000
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58020000 	.word	0x58020000
 8003bcc:	58020400 	.word	0x58020400
 8003bd0:	240007dc 	.word	0x240007dc
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40003c00 	.word	0x40003c00
 8003bdc:	58020800 	.word	0x58020800
 8003be0:	24000854 	.word	0x24000854
 8003be4:	40020010 	.word	0x40020010
  else if(hspi->Instance==SPI4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <HAL_SPI_MspInit+0x43c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d143      	bne.n	8003c7a <HAL_SPI_MspInit+0x376>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c02:	4618      	mov	r0, r3
 8003c04:	f007 ff20 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_SPI_MspInit+0x30e>
      Error_Handler();
 8003c0e:	f7ff fb97 	bl	8003340 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003c12:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c18:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c22:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c30:	4b44      	ldr	r3, [pc, #272]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c36:	4a43      	ldr	r2, [pc, #268]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003c38:	f043 0310 	orr.w	r3, r3, #16
 8003c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c40:	4b40      	ldr	r3, [pc, #256]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ETH_SCK_Pin|ETH_MISO_Pin|ETH_MOSI_Pin;
 8003c4e:	2364      	movs	r3, #100	; 0x64
 8003c50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003c66:	2305      	movs	r3, #5
 8003c68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c70:	4619      	mov	r1, r3
 8003c72:	4835      	ldr	r0, [pc, #212]	; (8003d48 <HAL_SPI_MspInit+0x444>)
 8003c74:	f004 fc92 	bl	800859c <HAL_GPIO_Init>
}
 8003c78:	e05d      	b.n	8003d36 <HAL_SPI_MspInit+0x432>
  else if(hspi->Instance==SPI5)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <HAL_SPI_MspInit+0x448>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d158      	bne.n	8003d36 <HAL_SPI_MspInit+0x432>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c94:	4618      	mov	r0, r3
 8003c96:	f007 fed7 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_SPI_MspInit+0x3a0>
      Error_Handler();
 8003ca0:	f7ff fb4e 	bl	8003340 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003ca4:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003caa:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003cca:	f043 0320 	orr.w	r3, r3, #32
 8003cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <HAL_SPI_MspInit+0x440>)
 8003cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ce0:	23c0      	movs	r3, #192	; 0xc0
 8003ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cfe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d02:	4619      	mov	r1, r3
 8003d04:	4812      	ldr	r0, [pc, #72]	; (8003d50 <HAL_SPI_MspInit+0x44c>)
 8003d06:	f004 fc49 	bl	800859c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d12:	2302      	movs	r3, #2
 8003d14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d24:	2305      	movs	r3, #5
 8003d26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4807      	ldr	r0, [pc, #28]	; (8003d50 <HAL_SPI_MspInit+0x44c>)
 8003d32:	f004 fc33 	bl	800859c <HAL_GPIO_Init>
}
 8003d36:	bf00      	nop
 8003d38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40013400 	.word	0x40013400
 8003d44:	58024400 	.word	0x58024400
 8003d48:	58021000 	.word	0x58021000
 8003d4c:	40015000 	.word	0x40015000
 8003d50:	58021400 	.word	0x58021400

08003d54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d14d      	bne.n	8003e12 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d76:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d86:	4b58      	ldr	r3, [pc, #352]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d94:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d9a:	4a53      	ldr	r2, [pc, #332]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db2:	4b4d      	ldr	r3, [pc, #308]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db8:	4a4b      	ldr	r2, [pc, #300]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dc2:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003de0:	2301      	movs	r3, #1
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de8:	4619      	mov	r1, r3
 8003dea:	4840      	ldr	r0, [pc, #256]	; (8003eec <HAL_TIM_Encoder_MspInit+0x198>)
 8003dec:	f004 fbd6 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003df0:	2308      	movs	r3, #8
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e00:	2301      	movs	r3, #1
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4839      	ldr	r0, [pc, #228]	; (8003ef0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003e0c:	f004 fbc6 	bl	800859c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003e10:	e066      	b.n	8003ee0 <HAL_TIM_Encoder_MspInit+0x18c>
  else if(htim_encoder->Instance==TIM3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a37      	ldr	r2, [pc, #220]	; (8003ef4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d12e      	bne.n	8003e7a <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e22:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e40:	4a29      	ldr	r2, [pc, #164]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e58:	23c0      	movs	r3, #192	; 0xc0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e64:	2300      	movs	r3, #0
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e70:	4619      	mov	r1, r3
 8003e72:	4821      	ldr	r0, [pc, #132]	; (8003ef8 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8003e74:	f004 fb92 	bl	800859c <HAL_GPIO_Init>
}
 8003e78:	e032      	b.n	8003ee0 <HAL_TIM_Encoder_MspInit+0x18c>
  else if(htim_encoder->Instance==TIM4)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HAL_TIM_Encoder_MspInit+0x1a8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d12d      	bne.n	8003ee0 <HAL_TIM_Encoder_MspInit+0x18c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ea8:	4a0f      	ldr	r2, [pc, #60]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0x194>)
 8003eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ec0:	23c0      	movs	r3, #192	; 0xc0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003edc:	f004 fb5e 	bl	800859c <HAL_GPIO_Init>
}
 8003ee0:	bf00      	nop
 8003ee2:	3738      	adds	r7, #56	; 0x38
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	58020000 	.word	0x58020000
 8003ef0:	58020400 	.word	0x58020400
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	58020800 	.word	0x58020800
 8003efc:	40000800 	.word	0x40000800

08003f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b0be      	sub	sp, #248	; 0xf8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f1c:	22bc      	movs	r2, #188	; 0xbc
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f017 fa91 	bl	801b448 <memset>
  if(huart->Instance==UART4)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a8a      	ldr	r2, [pc, #552]	; (8004154 <HAL_UART_MspInit+0x254>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d157      	bne.n	8003fe0 <HAL_UART_MspInit+0xe0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003f30:	2302      	movs	r3, #2
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f007 fd82 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f4a:	f7ff f9f9 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f4e:	4b82      	ldr	r3, [pc, #520]	; (8004158 <HAL_UART_MspInit+0x258>)
 8003f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f54:	4a80      	ldr	r2, [pc, #512]	; (8004158 <HAL_UART_MspInit+0x258>)
 8003f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f5e:	4b7e      	ldr	r3, [pc, #504]	; (8004158 <HAL_UART_MspInit+0x258>)
 8003f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6c:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_UART_MspInit+0x258>)
 8003f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f72:	4a79      	ldr	r2, [pc, #484]	; (8004158 <HAL_UART_MspInit+0x258>)
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f7c:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_UART_MspInit+0x258>)
 8003f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003fac:	4619      	mov	r1, r3
 8003fae:	486b      	ldr	r0, [pc, #428]	; (800415c <HAL_UART_MspInit+0x25c>)
 8003fb0:	f004 faf4 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4860      	ldr	r0, [pc, #384]	; (800415c <HAL_UART_MspInit+0x25c>)
 8003fda:	f004 fadf 	bl	800859c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003fde:	e0b4      	b.n	800414a <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5e      	ldr	r2, [pc, #376]	; (8004160 <HAL_UART_MspInit+0x260>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d142      	bne.n	8004070 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fea:	2302      	movs	r3, #2
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f007 fd25 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8004004:	f7ff f99c 	bl	8003340 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004008:	4b53      	ldr	r3, [pc, #332]	; (8004158 <HAL_UART_MspInit+0x258>)
 800400a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800400e:	4a52      	ldr	r2, [pc, #328]	; (8004158 <HAL_UART_MspInit+0x258>)
 8004010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004014:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004018:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <HAL_UART_MspInit+0x258>)
 800401a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004026:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <HAL_UART_MspInit+0x258>)
 8004028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800402c:	4a4a      	ldr	r2, [pc, #296]	; (8004158 <HAL_UART_MspInit+0x258>)
 800402e:	f043 0308 	orr.w	r3, r3, #8
 8004032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004036:	4b48      	ldr	r3, [pc, #288]	; (8004158 <HAL_UART_MspInit+0x258>)
 8004038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004044:	2320      	movs	r3, #32
 8004046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800404a:	2312      	movs	r3, #18
 800404c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800405c:	2307      	movs	r3, #7
 800405e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004062:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004066:	4619      	mov	r1, r3
 8004068:	483c      	ldr	r0, [pc, #240]	; (800415c <HAL_UART_MspInit+0x25c>)
 800406a:	f004 fa97 	bl	800859c <HAL_GPIO_Init>
}
 800406e:	e06c      	b.n	800414a <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_UART_MspInit+0x264>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d167      	bne.n	800414a <HAL_UART_MspInit+0x24a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800407a:	2302      	movs	r3, #2
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004088:	4618      	mov	r0, r3
 800408a:	f007 fcdd 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8004094:	f7ff f954 	bl	8003340 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004098:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <HAL_UART_MspInit+0x258>)
 800409a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800409e:	4a2e      	ldr	r2, [pc, #184]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040bc:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040be:	f043 0302 	orr.w	r3, r3, #2
 80040c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d4:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040da:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040dc:	f043 0308 	orr.w	r3, r3, #8
 80040e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_UART_MspInit+0x258>)
 80040e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80040f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800410c:	2307      	movs	r3, #7
 800410e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004112:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004116:	4619      	mov	r1, r3
 8004118:	4813      	ldr	r0, [pc, #76]	; (8004168 <HAL_UART_MspInit+0x268>)
 800411a:	f004 fa3f 	bl	800859c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800411e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2302      	movs	r3, #2
 8004128:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004138:	2307      	movs	r3, #7
 800413a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800413e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004142:	4619      	mov	r1, r3
 8004144:	4805      	ldr	r0, [pc, #20]	; (800415c <HAL_UART_MspInit+0x25c>)
 8004146:	f004 fa29 	bl	800859c <HAL_GPIO_Init>
}
 800414a:	bf00      	nop
 800414c:	37f8      	adds	r7, #248	; 0xf8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40004c00 	.word	0x40004c00
 8004158:	58024400 	.word	0x58024400
 800415c:	58020c00 	.word	0x58020c00
 8004160:	40004400 	.word	0x40004400
 8004164:	40004800 	.word	0x40004800
 8004168:	58020400 	.word	0x58020400

0800416c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b0b8      	sub	sp, #224	; 0xe0
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004174:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004184:	f107 0310 	add.w	r3, r7, #16
 8004188:	22bc      	movs	r2, #188	; 0xbc
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f017 f95b 	bl	801b448 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <HAL_PCD_MspInit+0xe8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d156      	bne.n	800424a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800419c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80041a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041aa:	f107 0310 	add.w	r3, r7, #16
 80041ae:	4618      	mov	r0, r3
 80041b0:	f007 fc4a 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80041ba:	f7ff f8c1 	bl	8003340 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80041be:	f006 fc37 	bl	800aa30 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_PCD_MspInit+0xec>)
 80041c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <HAL_PCD_MspInit+0xec>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d2:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_PCD_MspInit+0xec>)
 80041d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80041e0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80041e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80041fa:	230a      	movs	r3, #10
 80041fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004200:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004204:	4619      	mov	r1, r3
 8004206:	4815      	ldr	r0, [pc, #84]	; (800425c <HAL_PCD_MspInit+0xf0>)
 8004208:	f004 f9c8 	bl	800859c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800420c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004224:	4619      	mov	r1, r3
 8004226:	480d      	ldr	r0, [pc, #52]	; (800425c <HAL_PCD_MspInit+0xf0>)
 8004228:	f004 f9b8 	bl	800859c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_PCD_MspInit+0xec>)
 800422e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_PCD_MspInit+0xec>)
 8004234:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004238:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_PCD_MspInit+0xec>)
 800423e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800424a:	bf00      	nop
 800424c:	37e0      	adds	r7, #224	; 0xe0
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40080000 	.word	0x40080000
 8004258:	58024400 	.word	0x58024400
 800425c:	58020000 	.word	0x58020000

08004260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d844      	bhi.n	80042f8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800426e:	2200      	movs	r2, #0
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	2019      	movs	r0, #25
 8004274:	f001 fae8 	bl	8005848 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004278:	2019      	movs	r0, #25
 800427a:	f001 faff 	bl	800587c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800427e:	4a24      	ldr	r2, [pc, #144]	; (8004310 <HAL_InitTick+0xb0>)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004284:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_InitTick+0xb4>)
 8004286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800428a:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_InitTick+0xb4>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004294:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <HAL_InitTick+0xb4>)
 8004296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042a2:	f107 020c 	add.w	r2, r7, #12
 80042a6:	f107 0310 	add.w	r3, r7, #16
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f007 fb89 	bl	800b9c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80042b2:	f007 fb71 	bl	800b998 <HAL_RCC_GetPCLK2Freq>
 80042b6:	4603      	mov	r3, r0
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_InitTick+0xb8>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	0c9b      	lsrs	r3, r3, #18
 80042c6:	3b01      	subs	r3, #1
 80042c8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_InitTick+0xbc>)
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_InitTick+0xc0>)
 80042ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_InitTick+0xbc>)
 80042d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80042d8:	4a10      	ldr	r2, [pc, #64]	; (800431c <HAL_InitTick+0xbc>)
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_InitTick+0xbc>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_InitTick+0xbc>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80042ea:	480c      	ldr	r0, [pc, #48]	; (800431c <HAL_InitTick+0xbc>)
 80042ec:	f00b f9b7 	bl	800f65e <HAL_TIM_Base_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <HAL_InitTick+0xa6>
 80042f6:	e001      	b.n	80042fc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e005      	b.n	8004308 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80042fc:	4807      	ldr	r0, [pc, #28]	; (800431c <HAL_InitTick+0xbc>)
 80042fe:	f00b fa0f 	bl	800f720 <HAL_TIM_Base_Start_IT>
 8004302:	4603      	mov	r3, r0
 8004304:	e000      	b.n	8004308 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	3738      	adds	r7, #56	; 0x38
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	24000030 	.word	0x24000030
 8004314:	58024400 	.word	0x58024400
 8004318:	431bde83 	.word	0x431bde83
 800431c:	24001440 	.word	0x24001440
 8004320:	40010000 	.word	0x40010000

08004324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, USER_LED_R_Pin, GPIO_PIN_SET);
 8004338:	2201      	movs	r2, #1
 800433a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800433e:	4802      	ldr	r0, [pc, #8]	; (8004348 <HardFault_Handler+0x14>)
 8004340:	f004 faf4 	bl	800892c <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <HardFault_Handler+0x10>
 8004346:	bf00      	nop
 8004348:	58020400 	.word	0x58020400

0800434c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004350:	e7fe      	b.n	8004350 <MemManage_Handler+0x4>

08004352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004356:	e7fe      	b.n	8004356 <BusFault_Handler+0x4>

08004358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800435c:	e7fe      	b.n	800435c <UsageFault_Handler+0x4>

0800435e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <DMA1_Stream0_IRQHandler+0x10>)
 8004372:	f002 fad5 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	24000854 	.word	0x24000854

08004380 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <DMA1_Stream4_IRQHandler+0x10>)
 8004386:	f002 facb 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	240007dc 	.word	0x240007dc

08004394 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <TIM1_UP_IRQHandler+0x10>)
 800439a:	f00b fb6d 	bl	800fa78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	24001440 	.word	0x24001440

080043a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <SPI1_IRQHandler+0x10>)
 80043ae:	f00a fdf7 	bl	800efa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	240005bc 	.word	0x240005bc

080043bc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80043c0:	4802      	ldr	r0, [pc, #8]	; (80043cc <SPI3_IRQHandler+0x10>)
 80043c2:	f00a fded 	bl	800efa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	24000644 	.word	0x24000644

080043d0 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_MASTER);
 80043d4:	2105      	movs	r1, #5
 80043d6:	4805      	ldr	r0, [pc, #20]	; (80043ec <HRTIM1_Master_IRQHandler+0x1c>)
 80043d8:	f004 fc78 	bl	8008ccc <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  //TODO take care of overflow after 429498 seconds
  hrtim_count++;
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <HRTIM1_Master_IRQHandler+0x20>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	4a03      	ldr	r2, [pc, #12]	; (80043f0 <HRTIM1_Master_IRQHandler+0x20>)
 80043e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	240003c4 	.word	0x240003c4
 80043f0:	2400148c 	.word	0x2400148c

080043f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
	return 1;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_kill>:

int _kill(int pid, int sig)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800440e:	f016 ffd3 	bl	801b3b8 <__errno>
 8004412:	4603      	mov	r3, r0
 8004414:	2216      	movs	r2, #22
 8004416:	601a      	str	r2, [r3, #0]
	return -1;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_exit>:

void _exit (int status)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800442c:	f04f 31ff 	mov.w	r1, #4294967295
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ffe7 	bl	8004404 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004436:	e7fe      	b.n	8004436 <_exit+0x12>

08004438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e00a      	b.n	8004460 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800444a:	f3af 8000 	nop.w
 800444e:	4601      	mov	r1, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	60ba      	str	r2, [r7, #8]
 8004456:	b2ca      	uxtb	r2, r1
 8004458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	3301      	adds	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	dbf0      	blt.n	800444a <_read+0x12>
	}

return len;
 8004468:	687b      	ldr	r3, [r7, #4]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e009      	b.n	8004498 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	60ba      	str	r2, [r7, #8]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	3301      	adds	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	429a      	cmp	r2, r3
 800449e:	dbf1      	blt.n	8004484 <_write+0x12>
	}
	return len;
 80044a0:	687b      	ldr	r3, [r7, #4]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_close>:

int _close(int file)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
	return -1;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044d2:	605a      	str	r2, [r3, #4]
	return 0;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <_isatty>:

int _isatty(int file)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
	return 1;
 80044ea:	2301      	movs	r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
	return 0;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <_sbrk+0x50>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <_sbrk+0x16>
		heap_end = &end;
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <_sbrk+0x50>)
 8004526:	4a10      	ldr	r2, [pc, #64]	; (8004568 <_sbrk+0x54>)
 8004528:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800452a:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <_sbrk+0x50>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <_sbrk+0x50>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	466a      	mov	r2, sp
 800453a:	4293      	cmp	r3, r2
 800453c:	d907      	bls.n	800454e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800453e:	f016 ff3b 	bl	801b3b8 <__errno>
 8004542:	4603      	mov	r3, r0
 8004544:	220c      	movs	r2, #12
 8004546:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e006      	b.n	800455c <_sbrk+0x48>
	}

	heap_end += incr;
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <_sbrk+0x50>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	4a03      	ldr	r2, [pc, #12]	; (8004564 <_sbrk+0x50>)
 8004558:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	24001490 	.word	0x24001490
 8004568:	2407f6e0 	.word	0x2407f6e0

0800456c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004570:	4b29      	ldr	r3, [pc, #164]	; (8004618 <SystemInit+0xac>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	4a28      	ldr	r2, [pc, #160]	; (8004618 <SystemInit+0xac>)
 8004578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800457c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004580:	4b26      	ldr	r3, [pc, #152]	; (800461c <SystemInit+0xb0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a25      	ldr	r2, [pc, #148]	; (800461c <SystemInit+0xb0>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <SystemInit+0xb0>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <SystemInit+0xb0>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4921      	ldr	r1, [pc, #132]	; (800461c <SystemInit+0xb0>)
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <SystemInit+0xb4>)
 800459a:	4013      	ands	r3, r2
 800459c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <SystemInit+0xb0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <SystemInit+0xb0>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <SystemInit+0xb0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <SystemInit+0xb0>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80045b6:	4b19      	ldr	r3, [pc, #100]	; (800461c <SystemInit+0xb0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80045bc:	4b17      	ldr	r3, [pc, #92]	; (800461c <SystemInit+0xb0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <SystemInit+0xb0>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <SystemInit+0xb0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <SystemInit+0xb0>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <SystemInit+0xb0>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <SystemInit+0xb0>)
 80045dc:	2200      	movs	r2, #0
 80045de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <SystemInit+0xb0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <SystemInit+0xb0>)
 80045e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <SystemInit+0xb0>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <SystemInit+0xb8>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <SystemInit+0xbc>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045fe:	d202      	bcs.n	8004606 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <SystemInit+0xc0>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <SystemInit+0xac>)
 8004608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800460c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00
 800461c:	58024400 	.word	0x58024400
 8004620:	eaf6ed7f 	.word	0xeaf6ed7f
 8004624:	5c001000 	.word	0x5c001000
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	51008108 	.word	0x51008108

08004630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004668 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004636:	e003      	b.n	8004640 <LoopCopyDataInit>

08004638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800463a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800463c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800463e:	3104      	adds	r1, #4

08004640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004640:	480b      	ldr	r0, [pc, #44]	; (8004670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004648:	d3f6      	bcc.n	8004638 <CopyDataInit>
  ldr  r2, =_sbss
 800464a:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800464c:	e002      	b.n	8004654 <LoopFillZerobss>

0800464e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800464e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004650:	f842 3b04 	str.w	r3, [r2], #4

08004654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004658:	d3f9      	bcc.n	800464e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800465a:	f7ff ff87 	bl	800456c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800465e:	f016 feb1 	bl	801b3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004662:	f7fd f9d1 	bl	8001a08 <main>
  bx  lr    
 8004666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004668:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800466c:	0803d794 	.word	0x0803d794
  ldr  r0, =_sdata
 8004670:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004674:	24000278 	.word	0x24000278
  ldr  r2, =_sbss
 8004678:	24000278 	.word	0x24000278
  ldr  r3, = _ebss
 800467c:	2407f6dc 	.word	0x2407f6dc

08004680 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004680:	e7fe      	b.n	8004680 <ADC3_IRQHandler>
	...

08004684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468a:	2003      	movs	r0, #3
 800468c:	f001 f8d1 	bl	8005832 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004690:	f006 ffc2 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_Init+0x68>)
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	4913      	ldr	r1, [pc, #76]	; (80046f0 <HAL_Init+0x6c>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <HAL_Init+0x68>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <HAL_Init+0x6c>)
 80046b8:	5cd3      	ldrb	r3, [r2, r3]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
 80046c4:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <HAL_Init+0x70>)
 80046c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046c8:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <HAL_Init+0x74>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff fdc6 	bl	8004260 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e002      	b.n	80046e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046de:	f7fe fe37 	bl	8003350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	58024400 	.word	0x58024400
 80046f0:	0803d330 	.word	0x0803d330
 80046f4:	2400002c 	.word	0x2400002c
 80046f8:	24000028 	.word	0x24000028

080046fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_IncTick+0x20>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_IncTick+0x24>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4413      	add	r3, r2
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_IncTick+0x24>)
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	24000034 	.word	0x24000034
 8004720:	24001494 	.word	0x24001494

08004724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return uwTick;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <HAL_GetTick+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	24001494 	.word	0x24001494

0800473c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7ff ffee 	bl	8004724 <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d005      	beq.n	8004762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_Delay+0x44>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004762:	bf00      	nop
 8004764:	f7ff ffde 	bl	8004724 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d8f7      	bhi.n	8004764 <HAL_Delay+0x28>
  {
  }
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	24000034 	.word	0x24000034

08004784 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_GetREVID+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0c1b      	lsrs	r3, r3, #16
}
 800478e:	4618      	mov	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	5c001000 	.word	0x5c001000

0800479c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	58000400 	.word	0x58000400

080047c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3360      	adds	r3, #96	; 0x60
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	431a      	orrs	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	431a      	orrs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	611a      	str	r2, [r3, #16]
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3360      	adds	r3, #96	; 0x60
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	601a      	str	r2, [r3, #0]
  }
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3330      	adds	r3, #48	; 0x30
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	4413      	add	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	211f      	movs	r1, #31
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	0e9b      	lsrs	r3, r3, #26
 8004910:	f003 011f 	and.w	r1, r3, #31
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	431a      	orrs	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3314      	adds	r3, #20
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	0e5b      	lsrs	r3, r3, #25
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0d1b      	lsrs	r3, r3, #20
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2107      	movs	r1, #7
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	401a      	ands	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	0d1b      	lsrs	r3, r3, #20
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	431a      	orrs	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0318 	and.w	r3, r3, #24
 80049aa:	4908      	ldr	r1, [pc, #32]	; (80049cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80049ac:	40d9      	lsrs	r1, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	400b      	ands	r3, r1
 80049b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	000fffff 	.word	0x000fffff

080049d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6093      	str	r3, [r2, #8]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	5fffffc0 	.word	0x5fffffc0

080049f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a08:	d101      	bne.n	8004a0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <LL_ADC_EnableInternalRegulator+0x24>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	6fffffc0 	.word	0x6fffffc0

08004a44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a58:	d101      	bne.n	8004a5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <LL_ADC_IsEnabled+0x18>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <LL_ADC_IsEnabled+0x1a>
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d101      	bne.n	8004aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d101      	bne.n	8004ad0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b089      	sub	sp, #36	; 0x24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e18f      	b.n	8004e1a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fe fc3f 	bl	800338c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff67 	bl	80049f4 <LL_ADC_IsDeepPowerDownEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff4d 	bl	80049d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff82 	bl	8004a44 <LL_ADC_IsInternalRegulatorEnabled>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d114      	bne.n	8004b70 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff66 	bl	8004a1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b50:	4b87      	ldr	r3, [pc, #540]	; (8004d70 <HAL_ADC_Init+0x290>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	4a87      	ldr	r2, [pc, #540]	; (8004d74 <HAL_ADC_Init+0x294>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004b62:	e002      	b.n	8004b6a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f9      	bne.n	8004b64 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff65 	bl	8004a44 <LL_ADC_IsInternalRegulatorEnabled>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f043 0210 	orr.w	r2, r3, #16
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	f043 0201 	orr.w	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff76 	bl	8004a92 <LL_ADC_REG_IsConversionOngoing>
 8004ba6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 8129 	bne.w	8004e08 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 8125 	bne.w	8004e08 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004bc6:	f043 0202 	orr.w	r2, r3, #2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff4a 	bl	8004a6c <LL_ADC_IsEnabled>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d136      	bne.n	8004c4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a65      	ldr	r2, [pc, #404]	; (8004d78 <HAL_ADC_Init+0x298>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_ADC_Init+0x112>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <HAL_ADC_Init+0x29c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10e      	bne.n	8004c10 <HAL_ADC_Init+0x130>
 8004bf2:	4861      	ldr	r0, [pc, #388]	; (8004d78 <HAL_ADC_Init+0x298>)
 8004bf4:	f7ff ff3a 	bl	8004a6c <LL_ADC_IsEnabled>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4860      	ldr	r0, [pc, #384]	; (8004d7c <HAL_ADC_Init+0x29c>)
 8004bfc:	f7ff ff36 	bl	8004a6c <LL_ADC_IsEnabled>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4323      	orrs	r3, r4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e008      	b.n	8004c22 <HAL_ADC_Init+0x142>
 8004c10:	485b      	ldr	r0, [pc, #364]	; (8004d80 <HAL_ADC_Init+0x2a0>)
 8004c12:	f7ff ff2b 	bl	8004a6c <LL_ADC_IsEnabled>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d012      	beq.n	8004c4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a53      	ldr	r2, [pc, #332]	; (8004d78 <HAL_ADC_Init+0x298>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_ADC_Init+0x15a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a51      	ldr	r2, [pc, #324]	; (8004d7c <HAL_ADC_Init+0x29c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_Init+0x15e>
 8004c3a:	4a52      	ldr	r2, [pc, #328]	; (8004d84 <HAL_ADC_Init+0x2a4>)
 8004c3c:	e000      	b.n	8004c40 <HAL_ADC_Init+0x160>
 8004c3e:	4a52      	ldr	r2, [pc, #328]	; (8004d88 <HAL_ADC_Init+0x2a8>)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7ff fdbe 	bl	80047c8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004c4c:	f7ff fd9a 	bl	8004784 <HAL_GetREVID>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d914      	bls.n	8004c84 <HAL_ADC_Init+0x1a4>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d110      	bne.n	8004c84 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7d5b      	ldrb	r3, [r3, #21]
 8004c66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004c72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7f1b      	ldrb	r3, [r3, #28]
 8004c78:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004c7a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c7c:	f043 030c 	orr.w	r3, r3, #12
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	e00d      	b.n	8004ca0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7d5b      	ldrb	r3, [r3, #21]
 8004c88:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c8e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004c94:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7f1b      	ldrb	r3, [r3, #28]
 8004c9a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7f1b      	ldrb	r3, [r3, #28]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	045b      	lsls	r3, r3, #17
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <HAL_ADC_Init+0x2ac>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fed1 	bl	8004a92 <LL_ADC_REG_IsConversionOngoing>
 8004cf0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fede 	bl	8004ab8 <LL_ADC_INJ_IsConversionOngoing>
 8004cfc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d15f      	bne.n	8004dc4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d15c      	bne.n	8004dc4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7d1b      	ldrb	r3, [r3, #20]
 8004d0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <HAL_ADC_Init+0x2b0>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	69b9      	ldr	r1, [r7, #24]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d130      	bne.n	8004d98 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <HAL_ADC_Init+0x2b4>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d4a:	3a01      	subs	r2, #1
 8004d4c:	0411      	lsls	r1, r2, #16
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	611a      	str	r2, [r3, #16]
 8004d6c:	e01c      	b.n	8004da8 <HAL_ADC_Init+0x2c8>
 8004d6e:	bf00      	nop
 8004d70:	24000028 	.word	0x24000028
 8004d74:	053e2d63 	.word	0x053e2d63
 8004d78:	40022000 	.word	0x40022000
 8004d7c:	40022100 	.word	0x40022100
 8004d80:	58026000 	.word	0x58026000
 8004d84:	40022300 	.word	0x40022300
 8004d88:	58026300 	.word	0x58026300
 8004d8c:	fff0c003 	.word	0xfff0c003
 8004d90:	ffffbffc 	.word	0xffffbffc
 8004d94:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb80 	bl	80054c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10c      	bne.n	8004de6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f023 010f 	bic.w	r1, r3, #15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
 8004de4:	e007      	b.n	8004df6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 020f 	bic.w	r2, r2, #15
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	f043 0201 	orr.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
 8004e06:	e007      	b.n	8004e18 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop

08004e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b0a1      	sub	sp, #132	; 0x84
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a9d      	ldr	r2, [pc, #628]	; (80050b4 <HAL_ADC_ConfigChannel+0x290>)
 8004e3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x2a>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e321      	b.n	8005492 <HAL_ADC_ConfigChannel+0x66e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fe19 	bl	8004a92 <LL_ADC_REG_IsConversionOngoing>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8306 	bne.w	8005474 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d108      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x62>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	0e9b      	lsrs	r3, r3, #26
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2201      	movs	r2, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	e016      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x90>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8e:	fa93 f3a3 	rbit	r3, r3
 8004e92:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e96:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	e003      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea4:	fab3 f383 	clz	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	2201      	movs	r2, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	69d1      	ldr	r1, [r2, #28]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f7ff fd02 	bl	80048d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fdda 	bl	8004a92 <LL_ADC_REG_IsConversionOngoing>
 8004ede:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fde7 	bl	8004ab8 <LL_ADC_INJ_IsConversionOngoing>
 8004eea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 80b3 	bne.w	800505a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 80af 	bne.w	800505a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f7ff fd11 	bl	8004930 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	; (80050b8 <HAL_ADC_ConfigChannel+0x294>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1a:	d10b      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x110>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	e01d      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x14c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x136>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	e00a      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x14c>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	089b      	lsrs	r3, r3, #2
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d027      	beq.n	8004fca <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6919      	ldr	r1, [r3, #16]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f88:	f7ff fc52 	bl	8004830 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6919      	ldr	r1, [r3, #16]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	7e5b      	ldrb	r3, [r3, #25]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d102      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x17e>
 8004f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fa0:	e000      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x180>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f7ff fc7c 	bl	80048a2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6919      	ldr	r1, [r3, #16]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	7e1b      	ldrb	r3, [r3, #24]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d102      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x19c>
 8004fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fbe:	e000      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x19e>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7ff fc54 	bl	8004870 <LL_ADC_SetDataRightShift>
 8004fc8:	e047      	b.n	800505a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	069b      	lsls	r3, r3, #26
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d107      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	069b      	lsls	r3, r3, #26
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d107      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005010:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	069b      	lsls	r3, r3, #26
 8005022:	429a      	cmp	r2, r3
 8005024:	d107      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005034:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	069b      	lsls	r3, r3, #26
 8005046:	429a      	cmp	r2, r3
 8005048:	d107      	bne.n	800505a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005058:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fd04 	bl	8004a6c <LL_ADC_IsEnabled>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	f040 820d 	bne.w	8005486 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	461a      	mov	r2, r3
 800507a:	f7ff fc85 	bl	8004988 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_ADC_ConfigChannel+0x290>)
 8005084:	4293      	cmp	r3, r2
 8005086:	f040 8133 	bne.w	80052f0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x298>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	0e9b      	lsrs	r3, r3, #26
 80050a0:	3301      	adds	r3, #1
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	bf94      	ite	ls
 80050aa:	2301      	movls	r3, #1
 80050ac:	2300      	movhi	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e01e      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x2cc>
 80050b2:	bf00      	nop
 80050b4:	47ff0000 	.word	0x47ff0000
 80050b8:	5c001000 	.word	0x5c001000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050c4:	fa93 f3a3 	rbit	r3, r3
 80050c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80050ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80050ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80050d4:	2320      	movs	r3, #32
 80050d6:	e003      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80050d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050da:	fab3 f383 	clz	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	bf94      	ite	ls
 80050ea:	2301      	movls	r3, #1
 80050ec:	2300      	movhi	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d079      	beq.n	80051e8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x2ec>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0e9b      	lsrs	r3, r3, #26
 8005106:	3301      	adds	r3, #1
 8005108:	069b      	lsls	r3, r3, #26
 800510a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800510e:	e015      	b.n	800513c <HAL_ADC_ConfigChannel+0x318>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005120:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005128:	2320      	movs	r3, #32
 800512a:	e003      	b.n	8005134 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800512c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512e:	fab3 f383 	clz	r3, r3
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3301      	adds	r3, #1
 8005136:	069b      	lsls	r3, r3, #26
 8005138:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <HAL_ADC_ConfigChannel+0x338>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0e9b      	lsrs	r3, r3, #26
 800514e:	3301      	adds	r3, #1
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	e017      	b.n	800518c <HAL_ADC_ConfigChannel+0x368>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800516e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e003      	b.n	8005180 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3301      	adds	r3, #1
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2101      	movs	r1, #1
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	ea42 0103 	orr.w	r1, r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x38e>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	0e9b      	lsrs	r3, r3, #26
 80051a2:	3301      	adds	r3, #1
 80051a4:	f003 021f 	and.w	r2, r3, #31
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	051b      	lsls	r3, r3, #20
 80051b0:	e018      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x3c0>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80051ca:	2320      	movs	r3, #32
 80051cc:	e003      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3301      	adds	r3, #1
 80051d8:	f003 021f 	and.w	r2, r3, #31
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e4:	430b      	orrs	r3, r1
 80051e6:	e07e      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x3e0>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	0e9b      	lsrs	r3, r3, #26
 80051fa:	3301      	adds	r3, #1
 80051fc:	069b      	lsls	r3, r3, #26
 80051fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005202:	e015      	b.n	8005230 <HAL_ADC_ConfigChannel+0x40c>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	fa93 f3a3 	rbit	r3, r3
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800521c:	2320      	movs	r3, #32
 800521e:	e003      	b.n	8005228 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	3301      	adds	r3, #1
 800522a:	069b      	lsls	r3, r3, #26
 800522c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x42c>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0e9b      	lsrs	r3, r3, #26
 8005242:	3301      	adds	r3, #1
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	e017      	b.n	8005280 <HAL_ADC_ConfigChannel+0x45c>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa93 f3a3 	rbit	r3, r3
 800525c:	61bb      	str	r3, [r7, #24]
  return result;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005268:	2320      	movs	r3, #32
 800526a:	e003      	b.n	8005274 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	3301      	adds	r3, #1
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2101      	movs	r1, #1
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	ea42 0103 	orr.w	r1, r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10d      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x488>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0e9b      	lsrs	r3, r3, #26
 8005296:	3301      	adds	r3, #1
 8005298:	f003 021f 	and.w	r2, r3, #31
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	3b1e      	subs	r3, #30
 80052a4:	051b      	lsls	r3, r3, #20
 80052a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052aa:	e01b      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x4c0>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	60fb      	str	r3, [r7, #12]
  return result;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80052c4:	2320      	movs	r3, #32
 80052c6:	e003      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	fab3 f383 	clz	r3, r3
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	3301      	adds	r3, #1
 80052d2:	f003 021f 	and.w	r2, r3, #31
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	3b1e      	subs	r3, #30
 80052de:	051b      	lsls	r3, r3, #20
 80052e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052e4:	430b      	orrs	r3, r1
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	6892      	ldr	r2, [r2, #8]
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7ff fb20 	bl	8004930 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f280 80c6 	bge.w	8005486 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a67      	ldr	r2, [pc, #412]	; (800549c <HAL_ADC_ConfigChannel+0x678>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_ADC_ConfigChannel+0x4ea>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a65      	ldr	r2, [pc, #404]	; (80054a0 <HAL_ADC_ConfigChannel+0x67c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x4ee>
 800530e:	4b65      	ldr	r3, [pc, #404]	; (80054a4 <HAL_ADC_ConfigChannel+0x680>)
 8005310:	e000      	b.n	8005314 <HAL_ADC_ConfigChannel+0x4f0>
 8005312:	4b65      	ldr	r3, [pc, #404]	; (80054a8 <HAL_ADC_ConfigChannel+0x684>)
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fa7d 	bl	8004814 <LL_ADC_GetCommonPathInternalCh>
 800531a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5e      	ldr	r2, [pc, #376]	; (800549c <HAL_ADC_ConfigChannel+0x678>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_ADC_ConfigChannel+0x50c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a5d      	ldr	r2, [pc, #372]	; (80054a0 <HAL_ADC_ConfigChannel+0x67c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10e      	bne.n	800534e <HAL_ADC_ConfigChannel+0x52a>
 8005330:	485a      	ldr	r0, [pc, #360]	; (800549c <HAL_ADC_ConfigChannel+0x678>)
 8005332:	f7ff fb9b 	bl	8004a6c <LL_ADC_IsEnabled>
 8005336:	4604      	mov	r4, r0
 8005338:	4859      	ldr	r0, [pc, #356]	; (80054a0 <HAL_ADC_ConfigChannel+0x67c>)
 800533a:	f7ff fb97 	bl	8004a6c <LL_ADC_IsEnabled>
 800533e:	4603      	mov	r3, r0
 8005340:	4323      	orrs	r3, r4
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e008      	b.n	8005360 <HAL_ADC_ConfigChannel+0x53c>
 800534e:	4857      	ldr	r0, [pc, #348]	; (80054ac <HAL_ADC_ConfigChannel+0x688>)
 8005350:	f7ff fb8c 	bl	8004a6c <LL_ADC_IsEnabled>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d07d      	beq.n	8005460 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a51      	ldr	r2, [pc, #324]	; (80054b0 <HAL_ADC_ConfigChannel+0x68c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d130      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x5ac>
 800536e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d12b      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a4b      	ldr	r2, [pc, #300]	; (80054ac <HAL_ADC_ConfigChannel+0x688>)
 800537e:	4293      	cmp	r3, r2
 8005380:	f040 8081 	bne.w	8005486 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a44      	ldr	r2, [pc, #272]	; (800549c <HAL_ADC_ConfigChannel+0x678>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x574>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a43      	ldr	r2, [pc, #268]	; (80054a0 <HAL_ADC_ConfigChannel+0x67c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d101      	bne.n	800539c <HAL_ADC_ConfigChannel+0x578>
 8005398:	4a42      	ldr	r2, [pc, #264]	; (80054a4 <HAL_ADC_ConfigChannel+0x680>)
 800539a:	e000      	b.n	800539e <HAL_ADC_ConfigChannel+0x57a>
 800539c:	4a42      	ldr	r2, [pc, #264]	; (80054a8 <HAL_ADC_ConfigChannel+0x684>)
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7ff fa21 	bl	80047ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053ac:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <HAL_ADC_ConfigChannel+0x690>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	099b      	lsrs	r3, r3, #6
 80053b2:	4a41      	ldr	r2, [pc, #260]	; (80054b8 <HAL_ADC_ConfigChannel+0x694>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	099b      	lsrs	r3, r3, #6
 80053ba:	3301      	adds	r3, #1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80053c0:	e002      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f9      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053ce:	e05a      	b.n	8005486 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a39      	ldr	r2, [pc, #228]	; (80054bc <HAL_ADC_ConfigChannel+0x698>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d11e      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x5f4>
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d119      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a30      	ldr	r2, [pc, #192]	; (80054ac <HAL_ADC_ConfigChannel+0x688>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d14b      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2a      	ldr	r2, [pc, #168]	; (800549c <HAL_ADC_ConfigChannel+0x678>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_ADC_ConfigChannel+0x5de>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <HAL_ADC_ConfigChannel+0x67c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x5e2>
 8005402:	4a28      	ldr	r2, [pc, #160]	; (80054a4 <HAL_ADC_ConfigChannel+0x680>)
 8005404:	e000      	b.n	8005408 <HAL_ADC_ConfigChannel+0x5e4>
 8005406:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <HAL_ADC_ConfigChannel+0x684>)
 8005408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7ff f9ec 	bl	80047ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005416:	e036      	b.n	8005486 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a28      	ldr	r2, [pc, #160]	; (80054c0 <HAL_ADC_ConfigChannel+0x69c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d131      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x662>
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d12c      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_ADC_ConfigChannel+0x688>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d127      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a18      	ldr	r2, [pc, #96]	; (800549c <HAL_ADC_ConfigChannel+0x678>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_ADC_ConfigChannel+0x626>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <HAL_ADC_ConfigChannel+0x67c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_ADC_ConfigChannel+0x62a>
 800544a:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <HAL_ADC_ConfigChannel+0x680>)
 800544c:	e000      	b.n	8005450 <HAL_ADC_ConfigChannel+0x62c>
 800544e:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <HAL_ADC_ConfigChannel+0x684>)
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7ff f9c8 	bl	80047ee <LL_ADC_SetCommonPathInternalCh>
 800545e:	e012      	b.n	8005486 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005472:	e008      	b.n	8005486 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800548e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005492:	4618      	mov	r0, r3
 8005494:	3784      	adds	r7, #132	; 0x84
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}
 800549a:	bf00      	nop
 800549c:	40022000 	.word	0x40022000
 80054a0:	40022100 	.word	0x40022100
 80054a4:	40022300 	.word	0x40022300
 80054a8:	58026300 	.word	0x58026300
 80054ac:	58026000 	.word	0x58026000
 80054b0:	cb840000 	.word	0xcb840000
 80054b4:	24000028 	.word	0x24000028
 80054b8:	053e2d63 	.word	0x053e2d63
 80054bc:	c7520000 	.word	0xc7520000
 80054c0:	cfb80000 	.word	0xcfb80000

080054c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a79      	ldr	r2, [pc, #484]	; (80056b8 <ADC_ConfigureBoostMode+0x1f4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <ADC_ConfigureBoostMode+0x1c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a78      	ldr	r2, [pc, #480]	; (80056bc <ADC_ConfigureBoostMode+0x1f8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d109      	bne.n	80054f4 <ADC_ConfigureBoostMode+0x30>
 80054e0:	4b77      	ldr	r3, [pc, #476]	; (80056c0 <ADC_ConfigureBoostMode+0x1fc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e008      	b.n	8005506 <ADC_ConfigureBoostMode+0x42>
 80054f4:	4b73      	ldr	r3, [pc, #460]	; (80056c4 <ADC_ConfigureBoostMode+0x200>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01c      	beq.n	8005544 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800550a:	f006 f9ff 	bl	800b90c <HAL_RCC_GetHCLKFreq>
 800550e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005518:	d010      	beq.n	800553c <ADC_ConfigureBoostMode+0x78>
 800551a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800551e:	d871      	bhi.n	8005604 <ADC_ConfigureBoostMode+0x140>
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005524:	d002      	beq.n	800552c <ADC_ConfigureBoostMode+0x68>
 8005526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800552a:	d16b      	bne.n	8005604 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	60fb      	str	r3, [r7, #12]
        break;
 800553a:	e066      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	089b      	lsrs	r3, r3, #2
 8005540:	60fb      	str	r3, [r7, #12]
        break;
 8005542:	e062      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005544:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005548:	f007 f9c4 	bl	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800554c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005556:	d051      	beq.n	80055fc <ADC_ConfigureBoostMode+0x138>
 8005558:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800555c:	d854      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 800555e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005562:	d047      	beq.n	80055f4 <ADC_ConfigureBoostMode+0x130>
 8005564:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005568:	d84e      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 800556a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800556e:	d03d      	beq.n	80055ec <ADC_ConfigureBoostMode+0x128>
 8005570:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005574:	d848      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 8005576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557a:	d033      	beq.n	80055e4 <ADC_ConfigureBoostMode+0x120>
 800557c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005580:	d842      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 8005582:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005586:	d029      	beq.n	80055dc <ADC_ConfigureBoostMode+0x118>
 8005588:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800558c:	d83c      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 800558e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005592:	d01a      	beq.n	80055ca <ADC_ConfigureBoostMode+0x106>
 8005594:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005598:	d836      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 800559a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800559e:	d014      	beq.n	80055ca <ADC_ConfigureBoostMode+0x106>
 80055a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80055a4:	d830      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	d00e      	beq.n	80055ca <ADC_ConfigureBoostMode+0x106>
 80055ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b0:	d82a      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 80055b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055b6:	d008      	beq.n	80055ca <ADC_ConfigureBoostMode+0x106>
 80055b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055bc:	d824      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x144>
 80055be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c2:	d002      	beq.n	80055ca <ADC_ConfigureBoostMode+0x106>
 80055c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055c8:	d11e      	bne.n	8005608 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	0c9b      	lsrs	r3, r3, #18
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	60fb      	str	r3, [r7, #12]
        break;
 80055da:	e016      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]
        break;
 80055e2:	e012      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	60fb      	str	r3, [r7, #12]
        break;
 80055ea:	e00e      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	099b      	lsrs	r3, r3, #6
 80055f0:	60fb      	str	r3, [r7, #12]
        break;
 80055f2:	e00a      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	09db      	lsrs	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
        break;
 80055fa:	e006      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	60fb      	str	r3, [r7, #12]
        break;
 8005602:	e002      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
        break;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005608:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800560a:	f7ff f8bb 	bl	8004784 <HAL_GetREVID>
 800560e:	4603      	mov	r3, r0
 8005610:	f241 0203 	movw	r2, #4099	; 0x1003
 8005614:	4293      	cmp	r3, r2
 8005616:	d815      	bhi.n	8005644 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <ADC_ConfigureBoostMode+0x204>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d908      	bls.n	8005632 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800562e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005630:	e03e      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005640:	609a      	str	r2, [r3, #8]
}
 8005642:	e035      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <ADC_ConfigureBoostMode+0x208>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d808      	bhi.n	8005664 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005660:	609a      	str	r2, [r3, #8]
}
 8005662:	e025      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <ADC_ConfigureBoostMode+0x20c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d80a      	bhi.n	8005682 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	e016      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <ADC_ConfigureBoostMode+0x210>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d80a      	bhi.n	80056a0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	e007      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40022100 	.word	0x40022100
 80056c0:	40022300 	.word	0x40022300
 80056c4:	58026300 	.word	0x58026300
 80056c8:	01312d00 	.word	0x01312d00
 80056cc:	005f5e10 	.word	0x005f5e10
 80056d0:	00bebc20 	.word	0x00bebc20
 80056d4:	017d7840 	.word	0x017d7840

080056d8 <__NVIC_SetPriorityGrouping>:
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <__NVIC_SetPriorityGrouping+0x40>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <__NVIC_SetPriorityGrouping+0x44>)
 8005702:	4313      	orrs	r3, r2
 8005704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005706:	4a04      	ldr	r2, [pc, #16]	; (8005718 <__NVIC_SetPriorityGrouping+0x40>)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	60d3      	str	r3, [r2, #12]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	e000ed00 	.word	0xe000ed00
 800571c:	05fa0000 	.word	0x05fa0000

08005720 <__NVIC_GetPriorityGrouping>:
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <__NVIC_GetPriorityGrouping+0x18>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	f003 0307 	and.w	r3, r3, #7
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <__NVIC_EnableIRQ>:
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	db0b      	blt.n	8005766 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	4907      	ldr	r1, [pc, #28]	; (8005774 <__NVIC_EnableIRQ+0x38>)
 8005756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2001      	movs	r0, #1
 800575e:	fa00 f202 	lsl.w	r2, r0, r2
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	e000e100 	.word	0xe000e100

08005778 <__NVIC_SetPriority>:
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	6039      	str	r1, [r7, #0]
 8005782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	db0a      	blt.n	80057a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	490c      	ldr	r1, [pc, #48]	; (80057c4 <__NVIC_SetPriority+0x4c>)
 8005792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	440b      	add	r3, r1
 800579c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057a0:	e00a      	b.n	80057b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	4908      	ldr	r1, [pc, #32]	; (80057c8 <__NVIC_SetPriority+0x50>)
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	3b04      	subs	r3, #4
 80057b0:	0112      	lsls	r2, r2, #4
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	440b      	add	r3, r1
 80057b6:	761a      	strb	r2, [r3, #24]
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000e100 	.word	0xe000e100
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <NVIC_EncodePriority>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	; 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f1c3 0307 	rsb	r3, r3, #7
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	bf28      	it	cs
 80057ea:	2304      	movcs	r3, #4
 80057ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d902      	bls.n	80057fc <NVIC_EncodePriority+0x30>
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3b03      	subs	r3, #3
 80057fa:	e000      	b.n	80057fe <NVIC_EncodePriority+0x32>
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005800:	f04f 32ff 	mov.w	r2, #4294967295
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43da      	mvns	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	401a      	ands	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005814:	f04f 31ff 	mov.w	r1, #4294967295
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	43d9      	mvns	r1, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005824:	4313      	orrs	r3, r2
}
 8005826:	4618      	mov	r0, r3
 8005828:	3724      	adds	r7, #36	; 0x24
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ff4c 	bl	80056d8 <__NVIC_SetPriorityGrouping>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005856:	f7ff ff63 	bl	8005720 <__NVIC_GetPriorityGrouping>
 800585a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	6978      	ldr	r0, [r7, #20]
 8005862:	f7ff ffb3 	bl	80057cc <NVIC_EncodePriority>
 8005866:	4602      	mov	r2, r0
 8005868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ff82 	bl	8005778 <__NVIC_SetPriority>
}
 8005874:	bf00      	nop
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff56 	bl	800573c <__NVIC_EnableIRQ>
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800589c:	f3bf 8f5f 	dmb	sy
}
 80058a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <HAL_MPU_Disable+0x28>)
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <HAL_MPU_Disable+0x28>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_MPU_Disable+0x2c>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000ed00 	.word	0xe000ed00
 80058c4:	e000ed90 	.word	0xe000ed90

080058c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80058d0:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <HAL_MPU_Enable+0x38>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_MPU_Enable+0x3c>)
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <HAL_MPU_Enable+0x3c>)
 80058e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80058e6:	f3bf 8f4f 	dsb	sy
}
 80058ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058ec:	f3bf 8f6f 	isb	sy
}
 80058f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	e000ed90 	.word	0xe000ed90
 8005904:	e000ed00 	.word	0xe000ed00

08005908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005910:	f7fe ff08 	bl	8004724 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e316      	b.n	8005f4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a66      	ldr	r2, [pc, #408]	; (8005ac0 <HAL_DMA_Init+0x1b8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d04a      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a65      	ldr	r2, [pc, #404]	; (8005ac4 <HAL_DMA_Init+0x1bc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d045      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a63      	ldr	r2, [pc, #396]	; (8005ac8 <HAL_DMA_Init+0x1c0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d040      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a62      	ldr	r2, [pc, #392]	; (8005acc <HAL_DMA_Init+0x1c4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d03b      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a60      	ldr	r2, [pc, #384]	; (8005ad0 <HAL_DMA_Init+0x1c8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d036      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a5f      	ldr	r2, [pc, #380]	; (8005ad4 <HAL_DMA_Init+0x1cc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d031      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a5d      	ldr	r2, [pc, #372]	; (8005ad8 <HAL_DMA_Init+0x1d0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d02c      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a5c      	ldr	r2, [pc, #368]	; (8005adc <HAL_DMA_Init+0x1d4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d027      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5a      	ldr	r2, [pc, #360]	; (8005ae0 <HAL_DMA_Init+0x1d8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d022      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a59      	ldr	r2, [pc, #356]	; (8005ae4 <HAL_DMA_Init+0x1dc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d01d      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a57      	ldr	r2, [pc, #348]	; (8005ae8 <HAL_DMA_Init+0x1e0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d018      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a56      	ldr	r2, [pc, #344]	; (8005aec <HAL_DMA_Init+0x1e4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d013      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a54      	ldr	r2, [pc, #336]	; (8005af0 <HAL_DMA_Init+0x1e8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00e      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a53      	ldr	r2, [pc, #332]	; (8005af4 <HAL_DMA_Init+0x1ec>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d009      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a51      	ldr	r2, [pc, #324]	; (8005af8 <HAL_DMA_Init+0x1f0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <HAL_DMA_Init+0xb8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a50      	ldr	r2, [pc, #320]	; (8005afc <HAL_DMA_Init+0x1f4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d101      	bne.n	80059c4 <HAL_DMA_Init+0xbc>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <HAL_DMA_Init+0xbe>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 813b 	beq.w	8005c42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a37      	ldr	r2, [pc, #220]	; (8005ac0 <HAL_DMA_Init+0x1b8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d04a      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a36      	ldr	r2, [pc, #216]	; (8005ac4 <HAL_DMA_Init+0x1bc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d045      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_DMA_Init+0x1c0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d040      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a33      	ldr	r2, [pc, #204]	; (8005acc <HAL_DMA_Init+0x1c4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d03b      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a31      	ldr	r2, [pc, #196]	; (8005ad0 <HAL_DMA_Init+0x1c8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d036      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a30      	ldr	r2, [pc, #192]	; (8005ad4 <HAL_DMA_Init+0x1cc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d031      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <HAL_DMA_Init+0x1d0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d02c      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2d      	ldr	r2, [pc, #180]	; (8005adc <HAL_DMA_Init+0x1d4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d027      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2b      	ldr	r2, [pc, #172]	; (8005ae0 <HAL_DMA_Init+0x1d8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d022      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <HAL_DMA_Init+0x1dc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d01d      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <HAL_DMA_Init+0x1e0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	; (8005aec <HAL_DMA_Init+0x1e4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <HAL_DMA_Init+0x1e8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a24      	ldr	r2, [pc, #144]	; (8005af4 <HAL_DMA_Init+0x1ec>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <HAL_DMA_Init+0x1f0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_DMA_Init+0x174>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a21      	ldr	r2, [pc, #132]	; (8005afc <HAL_DMA_Init+0x1f4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <HAL_DMA_Init+0x186>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e007      	b.n	8005a9e <HAL_DMA_Init+0x196>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a9e:	e02f      	b.n	8005b00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa0:	f7fe fe40 	bl	8004724 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d928      	bls.n	8005b00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e246      	b.n	8005f4e <HAL_DMA_Init+0x646>
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1c8      	bne.n	8005aa0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <HAL_DMA_Init+0x420>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005b26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d107      	bne.n	8005b64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005b64:	4b71      	ldr	r3, [pc, #452]	; (8005d2c <HAL_DMA_Init+0x424>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b71      	ldr	r3, [pc, #452]	; (8005d30 <HAL_DMA_Init+0x428>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b70:	d328      	bcc.n	8005bc4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b28      	cmp	r3, #40	; 0x28
 8005b78:	d903      	bls.n	8005b82 <HAL_DMA_Init+0x27a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b80:	d917      	bls.n	8005bb2 <HAL_DMA_Init+0x2aa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b3e      	cmp	r3, #62	; 0x3e
 8005b88:	d903      	bls.n	8005b92 <HAL_DMA_Init+0x28a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b42      	cmp	r3, #66	; 0x42
 8005b90:	d90f      	bls.n	8005bb2 <HAL_DMA_Init+0x2aa>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b46      	cmp	r3, #70	; 0x46
 8005b98:	d903      	bls.n	8005ba2 <HAL_DMA_Init+0x29a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b48      	cmp	r3, #72	; 0x48
 8005ba0:	d907      	bls.n	8005bb2 <HAL_DMA_Init+0x2aa>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b4e      	cmp	r3, #78	; 0x4e
 8005ba8:	d905      	bls.n	8005bb6 <HAL_DMA_Init+0x2ae>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b52      	cmp	r3, #82	; 0x52
 8005bb0:	d801      	bhi.n	8005bb6 <HAL_DMA_Init+0x2ae>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_DMA_Init+0x2b0>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0307 	bic.w	r3, r3, #7
 8005bda:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d117      	bne.n	8005c1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 f821 	bl	8007c48 <DMA_CheckFifoParam>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e197      	b.n	8005f4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 ff5c 	bl	8007ae4 <DMA_CalcBaseAndBitshift>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	223f      	movs	r2, #63	; 0x3f
 8005c3a:	409a      	lsls	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	e0cd      	b.n	8005dde <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <HAL_DMA_Init+0x42c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a39      	ldr	r2, [pc, #228]	; (8005d38 <HAL_DMA_Init+0x430>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a38      	ldr	r2, [pc, #224]	; (8005d3c <HAL_DMA_Init+0x434>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a36      	ldr	r2, [pc, #216]	; (8005d40 <HAL_DMA_Init+0x438>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a35      	ldr	r2, [pc, #212]	; (8005d44 <HAL_DMA_Init+0x43c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <HAL_DMA_Init+0x440>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a32      	ldr	r2, [pc, #200]	; (8005d4c <HAL_DMA_Init+0x444>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_DMA_Init+0x38a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a30      	ldr	r2, [pc, #192]	; (8005d50 <HAL_DMA_Init+0x448>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d101      	bne.n	8005c96 <HAL_DMA_Init+0x38e>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <HAL_DMA_Init+0x390>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 8097 	beq.w	8005dcc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <HAL_DMA_Init+0x42c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d021      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_DMA_Init+0x430>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01c      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_DMA_Init+0x434>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d017      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_DMA_Init+0x438>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d012      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_DMA_Init+0x43c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00d      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_DMA_Init+0x440>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d008      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_DMA_Init+0x444>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <HAL_DMA_Init+0x3e4>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_DMA_Init+0x448>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_DMA_Init+0x44c>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d020      	beq.n	8005d58 <HAL_DMA_Init+0x450>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d102      	bne.n	8005d24 <HAL_DMA_Init+0x41c>
 8005d1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d22:	e01a      	b.n	8005d5a <HAL_DMA_Init+0x452>
 8005d24:	2300      	movs	r3, #0
 8005d26:	e018      	b.n	8005d5a <HAL_DMA_Init+0x452>
 8005d28:	fe10803f 	.word	0xfe10803f
 8005d2c:	5c001000 	.word	0x5c001000
 8005d30:	ffff0000 	.word	0xffff0000
 8005d34:	58025408 	.word	0x58025408
 8005d38:	5802541c 	.word	0x5802541c
 8005d3c:	58025430 	.word	0x58025430
 8005d40:	58025444 	.word	0x58025444
 8005d44:	58025458 	.word	0x58025458
 8005d48:	5802546c 	.word	0x5802546c
 8005d4c:	58025480 	.word	0x58025480
 8005d50:	58025494 	.word	0x58025494
 8005d54:	fffe000f 	.word	0xfffe000f
 8005d58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68d2      	ldr	r2, [r2, #12]
 8005d5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b6e      	ldr	r3, [pc, #440]	; (8005f58 <HAL_DMA_Init+0x650>)
 8005da0:	4413      	add	r3, r2
 8005da2:	4a6e      	ldr	r2, [pc, #440]	; (8005f5c <HAL_DMA_Init+0x654>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	009a      	lsls	r2, r3, #2
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 fe97 	bl	8007ae4 <DMA_CalcBaseAndBitshift>
 8005db6:	4603      	mov	r3, r0
 8005db8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	409a      	lsls	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	e008      	b.n	8005dde <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0b7      	b.n	8005f4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a5f      	ldr	r2, [pc, #380]	; (8005f60 <HAL_DMA_Init+0x658>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d072      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a5d      	ldr	r2, [pc, #372]	; (8005f64 <HAL_DMA_Init+0x65c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d06d      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a5c      	ldr	r2, [pc, #368]	; (8005f68 <HAL_DMA_Init+0x660>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d068      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5a      	ldr	r2, [pc, #360]	; (8005f6c <HAL_DMA_Init+0x664>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d063      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a59      	ldr	r2, [pc, #356]	; (8005f70 <HAL_DMA_Init+0x668>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d05e      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a57      	ldr	r2, [pc, #348]	; (8005f74 <HAL_DMA_Init+0x66c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d059      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a56      	ldr	r2, [pc, #344]	; (8005f78 <HAL_DMA_Init+0x670>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d054      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a54      	ldr	r2, [pc, #336]	; (8005f7c <HAL_DMA_Init+0x674>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d04f      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a53      	ldr	r2, [pc, #332]	; (8005f80 <HAL_DMA_Init+0x678>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d04a      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a51      	ldr	r2, [pc, #324]	; (8005f84 <HAL_DMA_Init+0x67c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d045      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a50      	ldr	r2, [pc, #320]	; (8005f88 <HAL_DMA_Init+0x680>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d040      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a4e      	ldr	r2, [pc, #312]	; (8005f8c <HAL_DMA_Init+0x684>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d03b      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a4d      	ldr	r2, [pc, #308]	; (8005f90 <HAL_DMA_Init+0x688>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d036      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a4b      	ldr	r2, [pc, #300]	; (8005f94 <HAL_DMA_Init+0x68c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d031      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <HAL_DMA_Init+0x690>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d02c      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a48      	ldr	r2, [pc, #288]	; (8005f9c <HAL_DMA_Init+0x694>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d027      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a47      	ldr	r2, [pc, #284]	; (8005fa0 <HAL_DMA_Init+0x698>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d022      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a45      	ldr	r2, [pc, #276]	; (8005fa4 <HAL_DMA_Init+0x69c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01d      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a44      	ldr	r2, [pc, #272]	; (8005fa8 <HAL_DMA_Init+0x6a0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a42      	ldr	r2, [pc, #264]	; (8005fac <HAL_DMA_Init+0x6a4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a41      	ldr	r2, [pc, #260]	; (8005fb0 <HAL_DMA_Init+0x6a8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3f      	ldr	r2, [pc, #252]	; (8005fb4 <HAL_DMA_Init+0x6ac>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a3e      	ldr	r2, [pc, #248]	; (8005fb8 <HAL_DMA_Init+0x6b0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_DMA_Init+0x5c6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a3c      	ldr	r2, [pc, #240]	; (8005fbc <HAL_DMA_Init+0x6b4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d101      	bne.n	8005ed2 <HAL_DMA_Init+0x5ca>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <HAL_DMA_Init+0x5cc>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d032      	beq.n	8005f3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 ff31 	bl	8007d40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d102      	bne.n	8005eec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d010      	beq.n	8005f2c <HAL_DMA_Init+0x624>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d80c      	bhi.n	8005f2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 ffae 	bl	8007e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	e008      	b.n	8005f3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	a7fdabf8 	.word	0xa7fdabf8
 8005f5c:	cccccccd 	.word	0xcccccccd
 8005f60:	40020010 	.word	0x40020010
 8005f64:	40020028 	.word	0x40020028
 8005f68:	40020040 	.word	0x40020040
 8005f6c:	40020058 	.word	0x40020058
 8005f70:	40020070 	.word	0x40020070
 8005f74:	40020088 	.word	0x40020088
 8005f78:	400200a0 	.word	0x400200a0
 8005f7c:	400200b8 	.word	0x400200b8
 8005f80:	40020410 	.word	0x40020410
 8005f84:	40020428 	.word	0x40020428
 8005f88:	40020440 	.word	0x40020440
 8005f8c:	40020458 	.word	0x40020458
 8005f90:	40020470 	.word	0x40020470
 8005f94:	40020488 	.word	0x40020488
 8005f98:	400204a0 	.word	0x400204a0
 8005f9c:	400204b8 	.word	0x400204b8
 8005fa0:	58025408 	.word	0x58025408
 8005fa4:	5802541c 	.word	0x5802541c
 8005fa8:	58025430 	.word	0x58025430
 8005fac:	58025444 	.word	0x58025444
 8005fb0:	58025458 	.word	0x58025458
 8005fb4:	5802546c 	.word	0x5802546c
 8005fb8:	58025480 	.word	0x58025480
 8005fbc:	58025494 	.word	0x58025494

08005fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e226      	b.n	800642a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_DMA_Start_IT+0x2a>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e21f      	b.n	800642a <HAL_DMA_Start_IT+0x46a>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	f040 820a 	bne.w	8006414 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a68      	ldr	r2, [pc, #416]	; (80061b4 <HAL_DMA_Start_IT+0x1f4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d04a      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a66      	ldr	r2, [pc, #408]	; (80061b8 <HAL_DMA_Start_IT+0x1f8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d045      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a65      	ldr	r2, [pc, #404]	; (80061bc <HAL_DMA_Start_IT+0x1fc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d040      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a63      	ldr	r2, [pc, #396]	; (80061c0 <HAL_DMA_Start_IT+0x200>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d03b      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a62      	ldr	r2, [pc, #392]	; (80061c4 <HAL_DMA_Start_IT+0x204>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d036      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a60      	ldr	r2, [pc, #384]	; (80061c8 <HAL_DMA_Start_IT+0x208>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d031      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a5f      	ldr	r2, [pc, #380]	; (80061cc <HAL_DMA_Start_IT+0x20c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d02c      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a5d      	ldr	r2, [pc, #372]	; (80061d0 <HAL_DMA_Start_IT+0x210>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d027      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a5c      	ldr	r2, [pc, #368]	; (80061d4 <HAL_DMA_Start_IT+0x214>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d022      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a5a      	ldr	r2, [pc, #360]	; (80061d8 <HAL_DMA_Start_IT+0x218>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01d      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a59      	ldr	r2, [pc, #356]	; (80061dc <HAL_DMA_Start_IT+0x21c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d018      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a57      	ldr	r2, [pc, #348]	; (80061e0 <HAL_DMA_Start_IT+0x220>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a56      	ldr	r2, [pc, #344]	; (80061e4 <HAL_DMA_Start_IT+0x224>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a54      	ldr	r2, [pc, #336]	; (80061e8 <HAL_DMA_Start_IT+0x228>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a53      	ldr	r2, [pc, #332]	; (80061ec <HAL_DMA_Start_IT+0x22c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_DMA_Start_IT+0xee>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a51      	ldr	r2, [pc, #324]	; (80061f0 <HAL_DMA_Start_IT+0x230>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d108      	bne.n	80060c0 <HAL_DMA_Start_IT+0x100>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e007      	b.n	80060d0 <HAL_DMA_Start_IT+0x110>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f001 fb58 	bl	800778c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a34      	ldr	r2, [pc, #208]	; (80061b4 <HAL_DMA_Start_IT+0x1f4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04a      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <HAL_DMA_Start_IT+0x1f8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d045      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a31      	ldr	r2, [pc, #196]	; (80061bc <HAL_DMA_Start_IT+0x1fc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d040      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a30      	ldr	r2, [pc, #192]	; (80061c0 <HAL_DMA_Start_IT+0x200>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d03b      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2e      	ldr	r2, [pc, #184]	; (80061c4 <HAL_DMA_Start_IT+0x204>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d036      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2d      	ldr	r2, [pc, #180]	; (80061c8 <HAL_DMA_Start_IT+0x208>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d031      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2b      	ldr	r2, [pc, #172]	; (80061cc <HAL_DMA_Start_IT+0x20c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02c      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <HAL_DMA_Start_IT+0x210>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d027      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <HAL_DMA_Start_IT+0x214>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <HAL_DMA_Start_IT+0x218>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d01d      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a25      	ldr	r2, [pc, #148]	; (80061dc <HAL_DMA_Start_IT+0x21c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a24      	ldr	r2, [pc, #144]	; (80061e0 <HAL_DMA_Start_IT+0x220>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_DMA_Start_IT+0x224>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_DMA_Start_IT+0x228>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <HAL_DMA_Start_IT+0x22c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_DMA_Start_IT+0x1bc>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <HAL_DMA_Start_IT+0x230>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <HAL_DMA_Start_IT+0x1c0>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_DMA_Start_IT+0x1c2>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d036      	beq.n	80061f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 021e 	bic.w	r2, r3, #30
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0216 	orr.w	r2, r2, #22
 8006198:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d03e      	beq.n	8006220 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0208 	orr.w	r2, r2, #8
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e035      	b.n	8006220 <HAL_DMA_Start_IT+0x260>
 80061b4:	40020010 	.word	0x40020010
 80061b8:	40020028 	.word	0x40020028
 80061bc:	40020040 	.word	0x40020040
 80061c0:	40020058 	.word	0x40020058
 80061c4:	40020070 	.word	0x40020070
 80061c8:	40020088 	.word	0x40020088
 80061cc:	400200a0 	.word	0x400200a0
 80061d0:	400200b8 	.word	0x400200b8
 80061d4:	40020410 	.word	0x40020410
 80061d8:	40020428 	.word	0x40020428
 80061dc:	40020440 	.word	0x40020440
 80061e0:	40020458 	.word	0x40020458
 80061e4:	40020470 	.word	0x40020470
 80061e8:	40020488 	.word	0x40020488
 80061ec:	400204a0 	.word	0x400204a0
 80061f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 020e 	bic.w	r2, r3, #14
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 020a 	orr.w	r2, r2, #10
 8006206:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0204 	orr.w	r2, r2, #4
 800621e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a83      	ldr	r2, [pc, #524]	; (8006434 <HAL_DMA_Start_IT+0x474>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d072      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a82      	ldr	r2, [pc, #520]	; (8006438 <HAL_DMA_Start_IT+0x478>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d06d      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a80      	ldr	r2, [pc, #512]	; (800643c <HAL_DMA_Start_IT+0x47c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d068      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7f      	ldr	r2, [pc, #508]	; (8006440 <HAL_DMA_Start_IT+0x480>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d063      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a7d      	ldr	r2, [pc, #500]	; (8006444 <HAL_DMA_Start_IT+0x484>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d05e      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7c      	ldr	r2, [pc, #496]	; (8006448 <HAL_DMA_Start_IT+0x488>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d059      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a7a      	ldr	r2, [pc, #488]	; (800644c <HAL_DMA_Start_IT+0x48c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d054      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a79      	ldr	r2, [pc, #484]	; (8006450 <HAL_DMA_Start_IT+0x490>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d04f      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a77      	ldr	r2, [pc, #476]	; (8006454 <HAL_DMA_Start_IT+0x494>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d04a      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a76      	ldr	r2, [pc, #472]	; (8006458 <HAL_DMA_Start_IT+0x498>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d045      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a74      	ldr	r2, [pc, #464]	; (800645c <HAL_DMA_Start_IT+0x49c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d040      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a73      	ldr	r2, [pc, #460]	; (8006460 <HAL_DMA_Start_IT+0x4a0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d03b      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a71      	ldr	r2, [pc, #452]	; (8006464 <HAL_DMA_Start_IT+0x4a4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d036      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a70      	ldr	r2, [pc, #448]	; (8006468 <HAL_DMA_Start_IT+0x4a8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d031      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a6e      	ldr	r2, [pc, #440]	; (800646c <HAL_DMA_Start_IT+0x4ac>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d02c      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a6d      	ldr	r2, [pc, #436]	; (8006470 <HAL_DMA_Start_IT+0x4b0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d027      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a6b      	ldr	r2, [pc, #428]	; (8006474 <HAL_DMA_Start_IT+0x4b4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d022      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6a      	ldr	r2, [pc, #424]	; (8006478 <HAL_DMA_Start_IT+0x4b8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d01d      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a68      	ldr	r2, [pc, #416]	; (800647c <HAL_DMA_Start_IT+0x4bc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d018      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a67      	ldr	r2, [pc, #412]	; (8006480 <HAL_DMA_Start_IT+0x4c0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a65      	ldr	r2, [pc, #404]	; (8006484 <HAL_DMA_Start_IT+0x4c4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00e      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a64      	ldr	r2, [pc, #400]	; (8006488 <HAL_DMA_Start_IT+0x4c8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a62      	ldr	r2, [pc, #392]	; (800648c <HAL_DMA_Start_IT+0x4cc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_DMA_Start_IT+0x350>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a61      	ldr	r2, [pc, #388]	; (8006490 <HAL_DMA_Start_IT+0x4d0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_DMA_Start_IT+0x354>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_DMA_Start_IT+0x356>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01a      	beq.n	8006350 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006336:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800634e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a37      	ldr	r2, [pc, #220]	; (8006434 <HAL_DMA_Start_IT+0x474>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d04a      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a36      	ldr	r2, [pc, #216]	; (8006438 <HAL_DMA_Start_IT+0x478>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d045      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a34      	ldr	r2, [pc, #208]	; (800643c <HAL_DMA_Start_IT+0x47c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d040      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a33      	ldr	r2, [pc, #204]	; (8006440 <HAL_DMA_Start_IT+0x480>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d03b      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a31      	ldr	r2, [pc, #196]	; (8006444 <HAL_DMA_Start_IT+0x484>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d036      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a30      	ldr	r2, [pc, #192]	; (8006448 <HAL_DMA_Start_IT+0x488>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d031      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a2e      	ldr	r2, [pc, #184]	; (800644c <HAL_DMA_Start_IT+0x48c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02c      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2d      	ldr	r2, [pc, #180]	; (8006450 <HAL_DMA_Start_IT+0x490>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d027      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2b      	ldr	r2, [pc, #172]	; (8006454 <HAL_DMA_Start_IT+0x494>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_DMA_Start_IT+0x498>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a28      	ldr	r2, [pc, #160]	; (800645c <HAL_DMA_Start_IT+0x49c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a27      	ldr	r2, [pc, #156]	; (8006460 <HAL_DMA_Start_IT+0x4a0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <HAL_DMA_Start_IT+0x4a4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a24      	ldr	r2, [pc, #144]	; (8006468 <HAL_DMA_Start_IT+0x4a8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_DMA_Start_IT+0x4ac>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_DMA_Start_IT+0x430>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <HAL_DMA_Start_IT+0x4b0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_DMA_Start_IT+0x442>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e012      	b.n	8006428 <HAL_DMA_Start_IT+0x468>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e009      	b.n	8006428 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800641a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40020010 	.word	0x40020010
 8006438:	40020028 	.word	0x40020028
 800643c:	40020040 	.word	0x40020040
 8006440:	40020058 	.word	0x40020058
 8006444:	40020070 	.word	0x40020070
 8006448:	40020088 	.word	0x40020088
 800644c:	400200a0 	.word	0x400200a0
 8006450:	400200b8 	.word	0x400200b8
 8006454:	40020410 	.word	0x40020410
 8006458:	40020428 	.word	0x40020428
 800645c:	40020440 	.word	0x40020440
 8006460:	40020458 	.word	0x40020458
 8006464:	40020470 	.word	0x40020470
 8006468:	40020488 	.word	0x40020488
 800646c:	400204a0 	.word	0x400204a0
 8006470:	400204b8 	.word	0x400204b8
 8006474:	58025408 	.word	0x58025408
 8006478:	5802541c 	.word	0x5802541c
 800647c:	58025430 	.word	0x58025430
 8006480:	58025444 	.word	0x58025444
 8006484:	58025458 	.word	0x58025458
 8006488:	5802546c 	.word	0x5802546c
 800648c:	58025480 	.word	0x58025480
 8006490:	58025494 	.word	0x58025494

08006494 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e237      	b.n	8006916 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d004      	beq.n	80064bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2280      	movs	r2, #128	; 0x80
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e22c      	b.n	8006916 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5c      	ldr	r2, [pc, #368]	; (8006634 <HAL_DMA_Abort_IT+0x1a0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d04a      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5b      	ldr	r2, [pc, #364]	; (8006638 <HAL_DMA_Abort_IT+0x1a4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d045      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a59      	ldr	r2, [pc, #356]	; (800663c <HAL_DMA_Abort_IT+0x1a8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d040      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a58      	ldr	r2, [pc, #352]	; (8006640 <HAL_DMA_Abort_IT+0x1ac>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d03b      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a56      	ldr	r2, [pc, #344]	; (8006644 <HAL_DMA_Abort_IT+0x1b0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d036      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a55      	ldr	r2, [pc, #340]	; (8006648 <HAL_DMA_Abort_IT+0x1b4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d031      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a53      	ldr	r2, [pc, #332]	; (800664c <HAL_DMA_Abort_IT+0x1b8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d02c      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a52      	ldr	r2, [pc, #328]	; (8006650 <HAL_DMA_Abort_IT+0x1bc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d027      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a50      	ldr	r2, [pc, #320]	; (8006654 <HAL_DMA_Abort_IT+0x1c0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d022      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a4f      	ldr	r2, [pc, #316]	; (8006658 <HAL_DMA_Abort_IT+0x1c4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d01d      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a4d      	ldr	r2, [pc, #308]	; (800665c <HAL_DMA_Abort_IT+0x1c8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d018      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4c      	ldr	r2, [pc, #304]	; (8006660 <HAL_DMA_Abort_IT+0x1cc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a4a      	ldr	r2, [pc, #296]	; (8006664 <HAL_DMA_Abort_IT+0x1d0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00e      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a49      	ldr	r2, [pc, #292]	; (8006668 <HAL_DMA_Abort_IT+0x1d4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d009      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a47      	ldr	r2, [pc, #284]	; (800666c <HAL_DMA_Abort_IT+0x1d8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <HAL_DMA_Abort_IT+0xc8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a46      	ldr	r2, [pc, #280]	; (8006670 <HAL_DMA_Abort_IT+0x1dc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d101      	bne.n	8006560 <HAL_DMA_Abort_IT+0xcc>
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <HAL_DMA_Abort_IT+0xce>
 8006560:	2300      	movs	r3, #0
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8086 	beq.w	8006674 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2204      	movs	r2, #4
 800656c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a2f      	ldr	r2, [pc, #188]	; (8006634 <HAL_DMA_Abort_IT+0x1a0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d04a      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2e      	ldr	r2, [pc, #184]	; (8006638 <HAL_DMA_Abort_IT+0x1a4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d045      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <HAL_DMA_Abort_IT+0x1a8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d040      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_DMA_Abort_IT+0x1ac>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d03b      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a29      	ldr	r2, [pc, #164]	; (8006644 <HAL_DMA_Abort_IT+0x1b0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d036      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a28      	ldr	r2, [pc, #160]	; (8006648 <HAL_DMA_Abort_IT+0x1b4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d031      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a26      	ldr	r2, [pc, #152]	; (800664c <HAL_DMA_Abort_IT+0x1b8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d02c      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <HAL_DMA_Abort_IT+0x1bc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d027      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a23      	ldr	r2, [pc, #140]	; (8006654 <HAL_DMA_Abort_IT+0x1c0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a22      	ldr	r2, [pc, #136]	; (8006658 <HAL_DMA_Abort_IT+0x1c4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01d      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a20      	ldr	r2, [pc, #128]	; (800665c <HAL_DMA_Abort_IT+0x1c8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_DMA_Abort_IT+0x1cc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_DMA_Abort_IT+0x1d0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <HAL_DMA_Abort_IT+0x1d4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <HAL_DMA_Abort_IT+0x1d8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_DMA_Abort_IT+0x17c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a19      	ldr	r2, [pc, #100]	; (8006670 <HAL_DMA_Abort_IT+0x1dc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <HAL_DMA_Abort_IT+0x18e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e178      	b.n	8006914 <HAL_DMA_Abort_IT+0x480>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e16f      	b.n	8006914 <HAL_DMA_Abort_IT+0x480>
 8006634:	40020010 	.word	0x40020010
 8006638:	40020028 	.word	0x40020028
 800663c:	40020040 	.word	0x40020040
 8006640:	40020058 	.word	0x40020058
 8006644:	40020070 	.word	0x40020070
 8006648:	40020088 	.word	0x40020088
 800664c:	400200a0 	.word	0x400200a0
 8006650:	400200b8 	.word	0x400200b8
 8006654:	40020410 	.word	0x40020410
 8006658:	40020428 	.word	0x40020428
 800665c:	40020440 	.word	0x40020440
 8006660:	40020458 	.word	0x40020458
 8006664:	40020470 	.word	0x40020470
 8006668:	40020488 	.word	0x40020488
 800666c:	400204a0 	.word	0x400204a0
 8006670:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 020e 	bic.w	r2, r2, #14
 8006682:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a6c      	ldr	r2, [pc, #432]	; (800683c <HAL_DMA_Abort_IT+0x3a8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d04a      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a6b      	ldr	r2, [pc, #428]	; (8006840 <HAL_DMA_Abort_IT+0x3ac>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d045      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a69      	ldr	r2, [pc, #420]	; (8006844 <HAL_DMA_Abort_IT+0x3b0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d040      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a68      	ldr	r2, [pc, #416]	; (8006848 <HAL_DMA_Abort_IT+0x3b4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d03b      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a66      	ldr	r2, [pc, #408]	; (800684c <HAL_DMA_Abort_IT+0x3b8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d036      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a65      	ldr	r2, [pc, #404]	; (8006850 <HAL_DMA_Abort_IT+0x3bc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d031      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a63      	ldr	r2, [pc, #396]	; (8006854 <HAL_DMA_Abort_IT+0x3c0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d02c      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a62      	ldr	r2, [pc, #392]	; (8006858 <HAL_DMA_Abort_IT+0x3c4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d027      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a60      	ldr	r2, [pc, #384]	; (800685c <HAL_DMA_Abort_IT+0x3c8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d022      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a5f      	ldr	r2, [pc, #380]	; (8006860 <HAL_DMA_Abort_IT+0x3cc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01d      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a5d      	ldr	r2, [pc, #372]	; (8006864 <HAL_DMA_Abort_IT+0x3d0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d018      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a5c      	ldr	r2, [pc, #368]	; (8006868 <HAL_DMA_Abort_IT+0x3d4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a5a      	ldr	r2, [pc, #360]	; (800686c <HAL_DMA_Abort_IT+0x3d8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a59      	ldr	r2, [pc, #356]	; (8006870 <HAL_DMA_Abort_IT+0x3dc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a57      	ldr	r2, [pc, #348]	; (8006874 <HAL_DMA_Abort_IT+0x3e0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_DMA_Abort_IT+0x290>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a56      	ldr	r2, [pc, #344]	; (8006878 <HAL_DMA_Abort_IT+0x3e4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <HAL_DMA_Abort_IT+0x2a2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e007      	b.n	8006746 <HAL_DMA_Abort_IT+0x2b2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3c      	ldr	r2, [pc, #240]	; (800683c <HAL_DMA_Abort_IT+0x3a8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d072      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3a      	ldr	r2, [pc, #232]	; (8006840 <HAL_DMA_Abort_IT+0x3ac>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d06d      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a39      	ldr	r2, [pc, #228]	; (8006844 <HAL_DMA_Abort_IT+0x3b0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d068      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a37      	ldr	r2, [pc, #220]	; (8006848 <HAL_DMA_Abort_IT+0x3b4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d063      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a36      	ldr	r2, [pc, #216]	; (800684c <HAL_DMA_Abort_IT+0x3b8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d05e      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a34      	ldr	r2, [pc, #208]	; (8006850 <HAL_DMA_Abort_IT+0x3bc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d059      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a33      	ldr	r2, [pc, #204]	; (8006854 <HAL_DMA_Abort_IT+0x3c0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d054      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a31      	ldr	r2, [pc, #196]	; (8006858 <HAL_DMA_Abort_IT+0x3c4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d04f      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a30      	ldr	r2, [pc, #192]	; (800685c <HAL_DMA_Abort_IT+0x3c8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d04a      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2e      	ldr	r2, [pc, #184]	; (8006860 <HAL_DMA_Abort_IT+0x3cc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d045      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2d      	ldr	r2, [pc, #180]	; (8006864 <HAL_DMA_Abort_IT+0x3d0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d040      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <HAL_DMA_Abort_IT+0x3d4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d03b      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2a      	ldr	r2, [pc, #168]	; (800686c <HAL_DMA_Abort_IT+0x3d8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d036      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a28      	ldr	r2, [pc, #160]	; (8006870 <HAL_DMA_Abort_IT+0x3dc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d031      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a27      	ldr	r2, [pc, #156]	; (8006874 <HAL_DMA_Abort_IT+0x3e0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d02c      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a25      	ldr	r2, [pc, #148]	; (8006878 <HAL_DMA_Abort_IT+0x3e4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d027      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a24      	ldr	r2, [pc, #144]	; (800687c <HAL_DMA_Abort_IT+0x3e8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d022      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a22      	ldr	r2, [pc, #136]	; (8006880 <HAL_DMA_Abort_IT+0x3ec>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01d      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a21      	ldr	r2, [pc, #132]	; (8006884 <HAL_DMA_Abort_IT+0x3f0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d018      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <HAL_DMA_Abort_IT+0x3f4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1e      	ldr	r2, [pc, #120]	; (800688c <HAL_DMA_Abort_IT+0x3f8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <HAL_DMA_Abort_IT+0x3fc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <HAL_DMA_Abort_IT+0x400>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_DMA_Abort_IT+0x3a2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a19      	ldr	r2, [pc, #100]	; (8006898 <HAL_DMA_Abort_IT+0x404>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d132      	bne.n	800689c <HAL_DMA_Abort_IT+0x408>
 8006836:	2301      	movs	r3, #1
 8006838:	e031      	b.n	800689e <HAL_DMA_Abort_IT+0x40a>
 800683a:	bf00      	nop
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
 800687c:	58025408 	.word	0x58025408
 8006880:	5802541c 	.word	0x5802541c
 8006884:	58025430 	.word	0x58025430
 8006888:	58025444 	.word	0x58025444
 800688c:	58025458 	.word	0x58025458
 8006890:	5802546c 	.word	0x5802546c
 8006894:	58025480 	.word	0x58025480
 8006898:	58025494 	.word	0x58025494
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d028      	beq.n	80068f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800692c:	4b67      	ldr	r3, [pc, #412]	; (8006acc <HAL_DMA_IRQHandler+0x1ac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a67      	ldr	r2, [pc, #412]	; (8006ad0 <HAL_DMA_IRQHandler+0x1b0>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	0a9b      	lsrs	r3, r3, #10
 8006938:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006944:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a5f      	ldr	r2, [pc, #380]	; (8006ad4 <HAL_DMA_IRQHandler+0x1b4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d04a      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5d      	ldr	r2, [pc, #372]	; (8006ad8 <HAL_DMA_IRQHandler+0x1b8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d045      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a5c      	ldr	r2, [pc, #368]	; (8006adc <HAL_DMA_IRQHandler+0x1bc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d040      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a5a      	ldr	r2, [pc, #360]	; (8006ae0 <HAL_DMA_IRQHandler+0x1c0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d03b      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a59      	ldr	r2, [pc, #356]	; (8006ae4 <HAL_DMA_IRQHandler+0x1c4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d036      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a57      	ldr	r2, [pc, #348]	; (8006ae8 <HAL_DMA_IRQHandler+0x1c8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d031      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a56      	ldr	r2, [pc, #344]	; (8006aec <HAL_DMA_IRQHandler+0x1cc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d02c      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a54      	ldr	r2, [pc, #336]	; (8006af0 <HAL_DMA_IRQHandler+0x1d0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d027      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a53      	ldr	r2, [pc, #332]	; (8006af4 <HAL_DMA_IRQHandler+0x1d4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d022      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a51      	ldr	r2, [pc, #324]	; (8006af8 <HAL_DMA_IRQHandler+0x1d8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01d      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a50      	ldr	r2, [pc, #320]	; (8006afc <HAL_DMA_IRQHandler+0x1dc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d018      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a4e      	ldr	r2, [pc, #312]	; (8006b00 <HAL_DMA_IRQHandler+0x1e0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a4d      	ldr	r2, [pc, #308]	; (8006b04 <HAL_DMA_IRQHandler+0x1e4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00e      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a4b      	ldr	r2, [pc, #300]	; (8006b08 <HAL_DMA_IRQHandler+0x1e8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a4a      	ldr	r2, [pc, #296]	; (8006b0c <HAL_DMA_IRQHandler+0x1ec>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d004      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a48      	ldr	r2, [pc, #288]	; (8006b10 <HAL_DMA_IRQHandler+0x1f0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d101      	bne.n	80069f6 <HAL_DMA_IRQHandler+0xd6>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <HAL_DMA_IRQHandler+0xd8>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 842b 	beq.w	8007254 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	2208      	movs	r2, #8
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 80a2 	beq.w	8006b58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2e      	ldr	r2, [pc, #184]	; (8006ad4 <HAL_DMA_IRQHandler+0x1b4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d04a      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2d      	ldr	r2, [pc, #180]	; (8006ad8 <HAL_DMA_IRQHandler+0x1b8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d045      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <HAL_DMA_IRQHandler+0x1bc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d040      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <HAL_DMA_IRQHandler+0x1c0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d03b      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <HAL_DMA_IRQHandler+0x1c4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d036      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <HAL_DMA_IRQHandler+0x1c8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d031      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_DMA_IRQHandler+0x1cc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d02c      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <HAL_DMA_IRQHandler+0x1d0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d027      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <HAL_DMA_IRQHandler+0x1d4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <HAL_DMA_IRQHandler+0x1d8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <HAL_DMA_IRQHandler+0x1dc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <HAL_DMA_IRQHandler+0x1e0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_DMA_IRQHandler+0x1e4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_DMA_IRQHandler+0x1e8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_DMA_IRQHandler+0x1ec>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <HAL_DMA_IRQHandler+0x1f0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d12f      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x1f4>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	e02e      	b.n	8006b28 <HAL_DMA_IRQHandler+0x208>
 8006aca:	bf00      	nop
 8006acc:	24000028 	.word	0x24000028
 8006ad0:	1b4e81b5 	.word	0x1b4e81b5
 8006ad4:	40020010 	.word	0x40020010
 8006ad8:	40020028 	.word	0x40020028
 8006adc:	40020040 	.word	0x40020040
 8006ae0:	40020058 	.word	0x40020058
 8006ae4:	40020070 	.word	0x40020070
 8006ae8:	40020088 	.word	0x40020088
 8006aec:	400200a0 	.word	0x400200a0
 8006af0:	400200b8 	.word	0x400200b8
 8006af4:	40020410 	.word	0x40020410
 8006af8:	40020428 	.word	0x40020428
 8006afc:	40020440 	.word	0x40020440
 8006b00:	40020458 	.word	0x40020458
 8006b04:	40020470 	.word	0x40020470
 8006b08:	40020488 	.word	0x40020488
 8006b0c:	400204a0 	.word	0x400204a0
 8006b10:	400204b8 	.word	0x400204b8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf14      	ite	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	2300      	moveq	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d015      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0204 	bic.w	r2, r2, #4
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2208      	movs	r2, #8
 8006b46:	409a      	lsls	r2, r3
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	f043 0201 	orr.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	fa22 f303 	lsr.w	r3, r2, r3
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d06e      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a69      	ldr	r2, [pc, #420]	; (8006d18 <HAL_DMA_IRQHandler+0x3f8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a67      	ldr	r2, [pc, #412]	; (8006d1c <HAL_DMA_IRQHandler+0x3fc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a66      	ldr	r2, [pc, #408]	; (8006d20 <HAL_DMA_IRQHandler+0x400>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a64      	ldr	r2, [pc, #400]	; (8006d24 <HAL_DMA_IRQHandler+0x404>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a63      	ldr	r2, [pc, #396]	; (8006d28 <HAL_DMA_IRQHandler+0x408>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a61      	ldr	r2, [pc, #388]	; (8006d2c <HAL_DMA_IRQHandler+0x40c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a60      	ldr	r2, [pc, #384]	; (8006d30 <HAL_DMA_IRQHandler+0x410>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a5e      	ldr	r2, [pc, #376]	; (8006d34 <HAL_DMA_IRQHandler+0x414>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a5d      	ldr	r2, [pc, #372]	; (8006d38 <HAL_DMA_IRQHandler+0x418>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a5b      	ldr	r2, [pc, #364]	; (8006d3c <HAL_DMA_IRQHandler+0x41c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a5a      	ldr	r2, [pc, #360]	; (8006d40 <HAL_DMA_IRQHandler+0x420>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <HAL_DMA_IRQHandler+0x424>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <HAL_DMA_IRQHandler+0x428>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a55      	ldr	r2, [pc, #340]	; (8006d4c <HAL_DMA_IRQHandler+0x42c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a54      	ldr	r2, [pc, #336]	; (8006d50 <HAL_DMA_IRQHandler+0x430>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a52      	ldr	r2, [pc, #328]	; (8006d54 <HAL_DMA_IRQHandler+0x434>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10a      	bne.n	8006c24 <HAL_DMA_IRQHandler+0x304>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e003      	b.n	8006c2c <HAL_DMA_IRQHandler+0x30c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2201      	movs	r2, #1
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c44:	f043 0202 	orr.w	r2, r3, #2
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	2204      	movs	r2, #4
 8006c56:	409a      	lsls	r2, r3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 808f 	beq.w	8006d80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_DMA_IRQHandler+0x3f8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04a      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <HAL_DMA_IRQHandler+0x3fc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d045      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <HAL_DMA_IRQHandler+0x400>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d040      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a27      	ldr	r2, [pc, #156]	; (8006d24 <HAL_DMA_IRQHandler+0x404>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_DMA_IRQHandler+0x408>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d036      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <HAL_DMA_IRQHandler+0x40c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d031      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a23      	ldr	r2, [pc, #140]	; (8006d30 <HAL_DMA_IRQHandler+0x410>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d02c      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_DMA_IRQHandler+0x414>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <HAL_DMA_IRQHandler+0x418>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <HAL_DMA_IRQHandler+0x41c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_DMA_IRQHandler+0x420>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <HAL_DMA_IRQHandler+0x424>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_DMA_IRQHandler+0x428>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_DMA_IRQHandler+0x42c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_DMA_IRQHandler+0x430>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <HAL_DMA_IRQHandler+0x434>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d12a      	bne.n	8006d58 <HAL_DMA_IRQHandler+0x438>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bf14      	ite	ne
 8006d10:	2301      	movne	r3, #1
 8006d12:	2300      	moveq	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	e023      	b.n	8006d60 <HAL_DMA_IRQHandler+0x440>
 8006d18:	40020010 	.word	0x40020010
 8006d1c:	40020028 	.word	0x40020028
 8006d20:	40020040 	.word	0x40020040
 8006d24:	40020058 	.word	0x40020058
 8006d28:	40020070 	.word	0x40020070
 8006d2c:	40020088 	.word	0x40020088
 8006d30:	400200a0 	.word	0x400200a0
 8006d34:	400200b8 	.word	0x400200b8
 8006d38:	40020410 	.word	0x40020410
 8006d3c:	40020428 	.word	0x40020428
 8006d40:	40020440 	.word	0x40020440
 8006d44:	40020458 	.word	0x40020458
 8006d48:	40020470 	.word	0x40020470
 8006d4c:	40020488 	.word	0x40020488
 8006d50:	400204a0 	.word	0x400204a0
 8006d54:	400204b8 	.word	0x400204b8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f043 0204 	orr.w	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2210      	movs	r2, #16
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80a6 	beq.w	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a85      	ldr	r2, [pc, #532]	; (8006fb0 <HAL_DMA_IRQHandler+0x690>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04a      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a83      	ldr	r2, [pc, #524]	; (8006fb4 <HAL_DMA_IRQHandler+0x694>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d045      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a82      	ldr	r2, [pc, #520]	; (8006fb8 <HAL_DMA_IRQHandler+0x698>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d040      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a80      	ldr	r2, [pc, #512]	; (8006fbc <HAL_DMA_IRQHandler+0x69c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a7f      	ldr	r2, [pc, #508]	; (8006fc0 <HAL_DMA_IRQHandler+0x6a0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d036      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a7d      	ldr	r2, [pc, #500]	; (8006fc4 <HAL_DMA_IRQHandler+0x6a4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d031      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a7c      	ldr	r2, [pc, #496]	; (8006fc8 <HAL_DMA_IRQHandler+0x6a8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a7a      	ldr	r2, [pc, #488]	; (8006fcc <HAL_DMA_IRQHandler+0x6ac>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d027      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a79      	ldr	r2, [pc, #484]	; (8006fd0 <HAL_DMA_IRQHandler+0x6b0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a77      	ldr	r2, [pc, #476]	; (8006fd4 <HAL_DMA_IRQHandler+0x6b4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a76      	ldr	r2, [pc, #472]	; (8006fd8 <HAL_DMA_IRQHandler+0x6b8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a74      	ldr	r2, [pc, #464]	; (8006fdc <HAL_DMA_IRQHandler+0x6bc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a73      	ldr	r2, [pc, #460]	; (8006fe0 <HAL_DMA_IRQHandler+0x6c0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a71      	ldr	r2, [pc, #452]	; (8006fe4 <HAL_DMA_IRQHandler+0x6c4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a70      	ldr	r2, [pc, #448]	; (8006fe8 <HAL_DMA_IRQHandler+0x6c8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6e      	ldr	r2, [pc, #440]	; (8006fec <HAL_DMA_IRQHandler+0x6cc>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d10a      	bne.n	8006e4c <HAL_DMA_IRQHandler+0x52c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf14      	ite	ne
 8006e44:	2301      	movne	r3, #1
 8006e46:	2300      	moveq	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	e009      	b.n	8006e60 <HAL_DMA_IRQHandler+0x540>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bf14      	ite	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	2300      	moveq	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d03e      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d018      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d024      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	e01f      	b.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01b      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
 8006eb2:	e016      	b.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d107      	bne.n	8006ed2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0208 	bic.w	r2, r2, #8
 8006ed0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	2220      	movs	r2, #32
 8006eec:	409a      	lsls	r2, r3
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8110 	beq.w	8007118 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a2c      	ldr	r2, [pc, #176]	; (8006fb0 <HAL_DMA_IRQHandler+0x690>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d04a      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2b      	ldr	r2, [pc, #172]	; (8006fb4 <HAL_DMA_IRQHandler+0x694>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d045      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <HAL_DMA_IRQHandler+0x698>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d040      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <HAL_DMA_IRQHandler+0x69c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d03b      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <HAL_DMA_IRQHandler+0x6a0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d036      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <HAL_DMA_IRQHandler+0x6a4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d031      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a23      	ldr	r2, [pc, #140]	; (8006fc8 <HAL_DMA_IRQHandler+0x6a8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d02c      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a22      	ldr	r2, [pc, #136]	; (8006fcc <HAL_DMA_IRQHandler+0x6ac>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d027      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <HAL_DMA_IRQHandler+0x6b0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <HAL_DMA_IRQHandler+0x6b4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d01d      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <HAL_DMA_IRQHandler+0x6b8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <HAL_DMA_IRQHandler+0x6bc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <HAL_DMA_IRQHandler+0x6c0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <HAL_DMA_IRQHandler+0x6c4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <HAL_DMA_IRQHandler+0x6c8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <HAL_DMA_IRQHandler+0x6cc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d12b      	bne.n	8006ff0 <HAL_DMA_IRQHandler+0x6d0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	e02a      	b.n	8007004 <HAL_DMA_IRQHandler+0x6e4>
 8006fae:	bf00      	nop
 8006fb0:	40020010 	.word	0x40020010
 8006fb4:	40020028 	.word	0x40020028
 8006fb8:	40020040 	.word	0x40020040
 8006fbc:	40020058 	.word	0x40020058
 8006fc0:	40020070 	.word	0x40020070
 8006fc4:	40020088 	.word	0x40020088
 8006fc8:	400200a0 	.word	0x400200a0
 8006fcc:	400200b8 	.word	0x400200b8
 8006fd0:	40020410 	.word	0x40020410
 8006fd4:	40020428 	.word	0x40020428
 8006fd8:	40020440 	.word	0x40020440
 8006fdc:	40020458 	.word	0x40020458
 8006fe0:	40020470 	.word	0x40020470
 8006fe4:	40020488 	.word	0x40020488
 8006fe8:	400204a0 	.word	0x400204a0
 8006fec:	400204b8 	.word	0x400204b8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8087 	beq.w	8007118 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2220      	movs	r2, #32
 8007014:	409a      	lsls	r2, r3
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b04      	cmp	r3, #4
 8007024:	d139      	bne.n	800709a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0216 	bic.w	r2, r2, #22
 8007034:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695a      	ldr	r2, [r3, #20]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007044:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <HAL_DMA_IRQHandler+0x736>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0208 	bic.w	r2, r2, #8
 8007064:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	223f      	movs	r2, #63	; 0x3f
 8007070:	409a      	lsls	r2, r3
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 834a 	beq.w	8007724 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
          }
          return;
 8007098:	e344      	b.n	8007724 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d018      	beq.n	80070da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d108      	bne.n	80070c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02c      	beq.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
 80070c6:	e027      	b.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d023      	beq.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
 80070d8:	e01e      	b.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10f      	bne.n	8007108 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0210 	bic.w	r2, r2, #16
 80070f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8306 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8088 	beq.w	8007240 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a7a      	ldr	r2, [pc, #488]	; (8007328 <HAL_DMA_IRQHandler+0xa08>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d04a      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a79      	ldr	r2, [pc, #484]	; (800732c <HAL_DMA_IRQHandler+0xa0c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d045      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a77      	ldr	r2, [pc, #476]	; (8007330 <HAL_DMA_IRQHandler+0xa10>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d040      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a76      	ldr	r2, [pc, #472]	; (8007334 <HAL_DMA_IRQHandler+0xa14>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d03b      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a74      	ldr	r2, [pc, #464]	; (8007338 <HAL_DMA_IRQHandler+0xa18>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d036      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a73      	ldr	r2, [pc, #460]	; (800733c <HAL_DMA_IRQHandler+0xa1c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d031      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a71      	ldr	r2, [pc, #452]	; (8007340 <HAL_DMA_IRQHandler+0xa20>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02c      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a70      	ldr	r2, [pc, #448]	; (8007344 <HAL_DMA_IRQHandler+0xa24>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d027      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a6e      	ldr	r2, [pc, #440]	; (8007348 <HAL_DMA_IRQHandler+0xa28>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d022      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a6d      	ldr	r2, [pc, #436]	; (800734c <HAL_DMA_IRQHandler+0xa2c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d01d      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a6b      	ldr	r2, [pc, #428]	; (8007350 <HAL_DMA_IRQHandler+0xa30>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d018      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a6a      	ldr	r2, [pc, #424]	; (8007354 <HAL_DMA_IRQHandler+0xa34>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a68      	ldr	r2, [pc, #416]	; (8007358 <HAL_DMA_IRQHandler+0xa38>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a67      	ldr	r2, [pc, #412]	; (800735c <HAL_DMA_IRQHandler+0xa3c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a65      	ldr	r2, [pc, #404]	; (8007360 <HAL_DMA_IRQHandler+0xa40>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a64      	ldr	r2, [pc, #400]	; (8007364 <HAL_DMA_IRQHandler+0xa44>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d108      	bne.n	80071ea <HAL_DMA_IRQHandler+0x8ca>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e007      	b.n	80071fa <HAL_DMA_IRQHandler+0x8da>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007202:	429a      	cmp	r2, r3
 8007204:	d307      	bcc.n	8007216 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f2      	bne.n	80071fa <HAL_DMA_IRQHandler+0x8da>
 8007214:	e000      	b.n	8007218 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007216:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800722e:	e003      	b.n	8007238 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8272 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	e26c      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a43      	ldr	r2, [pc, #268]	; (8007368 <HAL_DMA_IRQHandler+0xa48>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d022      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a42      	ldr	r2, [pc, #264]	; (800736c <HAL_DMA_IRQHandler+0xa4c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d01d      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a40      	ldr	r2, [pc, #256]	; (8007370 <HAL_DMA_IRQHandler+0xa50>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d018      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3f      	ldr	r2, [pc, #252]	; (8007374 <HAL_DMA_IRQHandler+0xa54>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a3d      	ldr	r2, [pc, #244]	; (8007378 <HAL_DMA_IRQHandler+0xa58>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00e      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3c      	ldr	r2, [pc, #240]	; (800737c <HAL_DMA_IRQHandler+0xa5c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a3a      	ldr	r2, [pc, #232]	; (8007380 <HAL_DMA_IRQHandler+0xa60>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a39      	ldr	r2, [pc, #228]	; (8007384 <HAL_DMA_IRQHandler+0xa64>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d101      	bne.n	80072a8 <HAL_DMA_IRQHandler+0x988>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <HAL_DMA_IRQHandler+0x98a>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 823f 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2204      	movs	r2, #4
 80072c2:	409a      	lsls	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80cd 	beq.w	8007468 <HAL_DMA_IRQHandler+0xb48>
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80c7 	beq.w	8007468 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2204      	movs	r2, #4
 80072e4:	409a      	lsls	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d049      	beq.n	8007388 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8210 	beq.w	8007728 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007310:	e20a      	b.n	8007728 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8206 	beq.w	8007728 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007324:	e200      	b.n	8007728 <HAL_DMA_IRQHandler+0xe08>
 8007326:	bf00      	nop
 8007328:	40020010 	.word	0x40020010
 800732c:	40020028 	.word	0x40020028
 8007330:	40020040 	.word	0x40020040
 8007334:	40020058 	.word	0x40020058
 8007338:	40020070 	.word	0x40020070
 800733c:	40020088 	.word	0x40020088
 8007340:	400200a0 	.word	0x400200a0
 8007344:	400200b8 	.word	0x400200b8
 8007348:	40020410 	.word	0x40020410
 800734c:	40020428 	.word	0x40020428
 8007350:	40020440 	.word	0x40020440
 8007354:	40020458 	.word	0x40020458
 8007358:	40020470 	.word	0x40020470
 800735c:	40020488 	.word	0x40020488
 8007360:	400204a0 	.word	0x400204a0
 8007364:	400204b8 	.word	0x400204b8
 8007368:	58025408 	.word	0x58025408
 800736c:	5802541c 	.word	0x5802541c
 8007370:	58025430 	.word	0x58025430
 8007374:	58025444 	.word	0x58025444
 8007378:	58025458 	.word	0x58025458
 800737c:	5802546c 	.word	0x5802546c
 8007380:	58025480 	.word	0x58025480
 8007384:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d160      	bne.n	8007454 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a7f      	ldr	r2, [pc, #508]	; (8007594 <HAL_DMA_IRQHandler+0xc74>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d04a      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a7d      	ldr	r2, [pc, #500]	; (8007598 <HAL_DMA_IRQHandler+0xc78>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d045      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7c      	ldr	r2, [pc, #496]	; (800759c <HAL_DMA_IRQHandler+0xc7c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d040      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a7a      	ldr	r2, [pc, #488]	; (80075a0 <HAL_DMA_IRQHandler+0xc80>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d03b      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a79      	ldr	r2, [pc, #484]	; (80075a4 <HAL_DMA_IRQHandler+0xc84>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d036      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a77      	ldr	r2, [pc, #476]	; (80075a8 <HAL_DMA_IRQHandler+0xc88>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d031      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a76      	ldr	r2, [pc, #472]	; (80075ac <HAL_DMA_IRQHandler+0xc8c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02c      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a74      	ldr	r2, [pc, #464]	; (80075b0 <HAL_DMA_IRQHandler+0xc90>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d027      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a73      	ldr	r2, [pc, #460]	; (80075b4 <HAL_DMA_IRQHandler+0xc94>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a71      	ldr	r2, [pc, #452]	; (80075b8 <HAL_DMA_IRQHandler+0xc98>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a70      	ldr	r2, [pc, #448]	; (80075bc <HAL_DMA_IRQHandler+0xc9c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a6e      	ldr	r2, [pc, #440]	; (80075c0 <HAL_DMA_IRQHandler+0xca0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a6d      	ldr	r2, [pc, #436]	; (80075c4 <HAL_DMA_IRQHandler+0xca4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a6b      	ldr	r2, [pc, #428]	; (80075c8 <HAL_DMA_IRQHandler+0xca8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a6a      	ldr	r2, [pc, #424]	; (80075cc <HAL_DMA_IRQHandler+0xcac>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a68      	ldr	r2, [pc, #416]	; (80075d0 <HAL_DMA_IRQHandler+0xcb0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <HAL_DMA_IRQHandler+0xb24>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0208 	bic.w	r2, r2, #8
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e007      	b.n	8007454 <HAL_DMA_IRQHandler+0xb34>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0204 	bic.w	r2, r2, #4
 8007452:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8165 	beq.w	8007728 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007466:	e15f      	b.n	8007728 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2202      	movs	r2, #2
 8007472:	409a      	lsls	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80c5 	beq.w	8007608 <HAL_DMA_IRQHandler+0xce8>
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80bf 	beq.w	8007608 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2202      	movs	r2, #2
 8007494:	409a      	lsls	r2, r3
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d018      	beq.n	80074d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 813a 	beq.w	800772c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c0:	e134      	b.n	800772c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8130 	beq.w	800772c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d4:	e12a      	b.n	800772c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8089 	bne.w	80075f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a2b      	ldr	r2, [pc, #172]	; (8007594 <HAL_DMA_IRQHandler+0xc74>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a29      	ldr	r2, [pc, #164]	; (8007598 <HAL_DMA_IRQHandler+0xc78>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a28      	ldr	r2, [pc, #160]	; (800759c <HAL_DMA_IRQHandler+0xc7c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a26      	ldr	r2, [pc, #152]	; (80075a0 <HAL_DMA_IRQHandler+0xc80>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a25      	ldr	r2, [pc, #148]	; (80075a4 <HAL_DMA_IRQHandler+0xc84>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a23      	ldr	r2, [pc, #140]	; (80075a8 <HAL_DMA_IRQHandler+0xc88>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a22      	ldr	r2, [pc, #136]	; (80075ac <HAL_DMA_IRQHandler+0xc8c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a20      	ldr	r2, [pc, #128]	; (80075b0 <HAL_DMA_IRQHandler+0xc90>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <HAL_DMA_IRQHandler+0xc94>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <HAL_DMA_IRQHandler+0xc98>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <HAL_DMA_IRQHandler+0xc9c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1a      	ldr	r2, [pc, #104]	; (80075c0 <HAL_DMA_IRQHandler+0xca0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_DMA_IRQHandler+0xca4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_DMA_IRQHandler+0xca8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a16      	ldr	r2, [pc, #88]	; (80075cc <HAL_DMA_IRQHandler+0xcac>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_DMA_IRQHandler+0xc62>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <HAL_DMA_IRQHandler+0xcb0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d128      	bne.n	80075d4 <HAL_DMA_IRQHandler+0xcb4>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0214 	bic.w	r2, r2, #20
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e027      	b.n	80075e4 <HAL_DMA_IRQHandler+0xcc4>
 8007594:	40020010 	.word	0x40020010
 8007598:	40020028 	.word	0x40020028
 800759c:	40020040 	.word	0x40020040
 80075a0:	40020058 	.word	0x40020058
 80075a4:	40020070 	.word	0x40020070
 80075a8:	40020088 	.word	0x40020088
 80075ac:	400200a0 	.word	0x400200a0
 80075b0:	400200b8 	.word	0x400200b8
 80075b4:	40020410 	.word	0x40020410
 80075b8:	40020428 	.word	0x40020428
 80075bc:	40020440 	.word	0x40020440
 80075c0:	40020458 	.word	0x40020458
 80075c4:	40020470 	.word	0x40020470
 80075c8:	40020488 	.word	0x40020488
 80075cc:	400204a0 	.word	0x400204a0
 80075d0:	400204b8 	.word	0x400204b8
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 020a 	bic.w	r2, r2, #10
 80075e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8097 	beq.w	800772c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007606:	e091      	b.n	800772c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2208      	movs	r2, #8
 8007612:	409a      	lsls	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8088 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8082 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a41      	ldr	r2, [pc, #260]	; (8007734 <HAL_DMA_IRQHandler+0xe14>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d04a      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <HAL_DMA_IRQHandler+0xe18>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d045      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a3e      	ldr	r2, [pc, #248]	; (800773c <HAL_DMA_IRQHandler+0xe1c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d040      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <HAL_DMA_IRQHandler+0xe20>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d03b      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a3b      	ldr	r2, [pc, #236]	; (8007744 <HAL_DMA_IRQHandler+0xe24>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d036      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a39      	ldr	r2, [pc, #228]	; (8007748 <HAL_DMA_IRQHandler+0xe28>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d031      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a38      	ldr	r2, [pc, #224]	; (800774c <HAL_DMA_IRQHandler+0xe2c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d02c      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a36      	ldr	r2, [pc, #216]	; (8007750 <HAL_DMA_IRQHandler+0xe30>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d027      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a35      	ldr	r2, [pc, #212]	; (8007754 <HAL_DMA_IRQHandler+0xe34>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d022      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a33      	ldr	r2, [pc, #204]	; (8007758 <HAL_DMA_IRQHandler+0xe38>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01d      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a32      	ldr	r2, [pc, #200]	; (800775c <HAL_DMA_IRQHandler+0xe3c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d018      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a30      	ldr	r2, [pc, #192]	; (8007760 <HAL_DMA_IRQHandler+0xe40>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2f      	ldr	r2, [pc, #188]	; (8007764 <HAL_DMA_IRQHandler+0xe44>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00e      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <HAL_DMA_IRQHandler+0xe48>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d009      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2c      	ldr	r2, [pc, #176]	; (800776c <HAL_DMA_IRQHandler+0xe4c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <HAL_DMA_IRQHandler+0xe50>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d108      	bne.n	80076dc <HAL_DMA_IRQHandler+0xdbc>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 021c 	bic.w	r2, r2, #28
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e007      	b.n	80076ec <HAL_DMA_IRQHandler+0xdcc>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 020e 	bic.w	r2, r2, #14
 80076ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
 8007722:	e004      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800772c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40020010 	.word	0x40020010
 8007738:	40020028 	.word	0x40020028
 800773c:	40020040 	.word	0x40020040
 8007740:	40020058 	.word	0x40020058
 8007744:	40020070 	.word	0x40020070
 8007748:	40020088 	.word	0x40020088
 800774c:	400200a0 	.word	0x400200a0
 8007750:	400200b8 	.word	0x400200b8
 8007754:	40020410 	.word	0x40020410
 8007758:	40020428 	.word	0x40020428
 800775c:	40020440 	.word	0x40020440
 8007760:	40020458 	.word	0x40020458
 8007764:	40020470 	.word	0x40020470
 8007768:	40020488 	.word	0x40020488
 800776c:	400204a0 	.word	0x400204a0
 8007770:	400204b8 	.word	0x400204b8

08007774 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a7f      	ldr	r2, [pc, #508]	; (80079a8 <DMA_SetConfig+0x21c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d072      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a7d      	ldr	r2, [pc, #500]	; (80079ac <DMA_SetConfig+0x220>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d06d      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a7c      	ldr	r2, [pc, #496]	; (80079b0 <DMA_SetConfig+0x224>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d068      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a7a      	ldr	r2, [pc, #488]	; (80079b4 <DMA_SetConfig+0x228>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d063      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a79      	ldr	r2, [pc, #484]	; (80079b8 <DMA_SetConfig+0x22c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d05e      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a77      	ldr	r2, [pc, #476]	; (80079bc <DMA_SetConfig+0x230>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d059      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a76      	ldr	r2, [pc, #472]	; (80079c0 <DMA_SetConfig+0x234>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d054      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a74      	ldr	r2, [pc, #464]	; (80079c4 <DMA_SetConfig+0x238>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04f      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a73      	ldr	r2, [pc, #460]	; (80079c8 <DMA_SetConfig+0x23c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d04a      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a71      	ldr	r2, [pc, #452]	; (80079cc <DMA_SetConfig+0x240>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d045      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a70      	ldr	r2, [pc, #448]	; (80079d0 <DMA_SetConfig+0x244>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d040      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a6e      	ldr	r2, [pc, #440]	; (80079d4 <DMA_SetConfig+0x248>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d03b      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a6d      	ldr	r2, [pc, #436]	; (80079d8 <DMA_SetConfig+0x24c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d036      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a6b      	ldr	r2, [pc, #428]	; (80079dc <DMA_SetConfig+0x250>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d031      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a6a      	ldr	r2, [pc, #424]	; (80079e0 <DMA_SetConfig+0x254>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d02c      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a68      	ldr	r2, [pc, #416]	; (80079e4 <DMA_SetConfig+0x258>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d027      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a67      	ldr	r2, [pc, #412]	; (80079e8 <DMA_SetConfig+0x25c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d022      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a65      	ldr	r2, [pc, #404]	; (80079ec <DMA_SetConfig+0x260>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01d      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a64      	ldr	r2, [pc, #400]	; (80079f0 <DMA_SetConfig+0x264>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a62      	ldr	r2, [pc, #392]	; (80079f4 <DMA_SetConfig+0x268>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a61      	ldr	r2, [pc, #388]	; (80079f8 <DMA_SetConfig+0x26c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5f      	ldr	r2, [pc, #380]	; (80079fc <DMA_SetConfig+0x270>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a5e      	ldr	r2, [pc, #376]	; (8007a00 <DMA_SetConfig+0x274>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a5c      	ldr	r2, [pc, #368]	; (8007a04 <DMA_SetConfig+0x278>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <DMA_SetConfig+0x10e>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <DMA_SetConfig+0x110>
 800789a:	2300      	movs	r3, #0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00d      	beq.n	80078bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a39      	ldr	r2, [pc, #228]	; (80079a8 <DMA_SetConfig+0x21c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d04a      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <DMA_SetConfig+0x220>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d045      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a36      	ldr	r2, [pc, #216]	; (80079b0 <DMA_SetConfig+0x224>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d040      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <DMA_SetConfig+0x228>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d03b      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a33      	ldr	r2, [pc, #204]	; (80079b8 <DMA_SetConfig+0x22c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d036      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a32      	ldr	r2, [pc, #200]	; (80079bc <DMA_SetConfig+0x230>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d031      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a30      	ldr	r2, [pc, #192]	; (80079c0 <DMA_SetConfig+0x234>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d02c      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a2f      	ldr	r2, [pc, #188]	; (80079c4 <DMA_SetConfig+0x238>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d027      	beq.n	800795c <DMA_SetConfig+0x1d0>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2d      	ldr	r2, [pc, #180]	; (80079c8 <DMA_SetConfig+0x23c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d022      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a2c      	ldr	r2, [pc, #176]	; (80079cc <DMA_SetConfig+0x240>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d01d      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <DMA_SetConfig+0x244>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d018      	beq.n	800795c <DMA_SetConfig+0x1d0>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a29      	ldr	r2, [pc, #164]	; (80079d4 <DMA_SetConfig+0x248>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d013      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a27      	ldr	r2, [pc, #156]	; (80079d8 <DMA_SetConfig+0x24c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00e      	beq.n	800795c <DMA_SetConfig+0x1d0>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a26      	ldr	r2, [pc, #152]	; (80079dc <DMA_SetConfig+0x250>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d009      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a24      	ldr	r2, [pc, #144]	; (80079e0 <DMA_SetConfig+0x254>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a23      	ldr	r2, [pc, #140]	; (80079e4 <DMA_SetConfig+0x258>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d101      	bne.n	8007960 <DMA_SetConfig+0x1d4>
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <DMA_SetConfig+0x1d6>
 8007960:	2300      	movs	r3, #0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d059      	beq.n	8007a1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	223f      	movs	r2, #63	; 0x3f
 8007970:	409a      	lsls	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007984:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d138      	bne.n	8007a08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079a6:	e086      	b.n	8007ab6 <DMA_SetConfig+0x32a>
 80079a8:	40020010 	.word	0x40020010
 80079ac:	40020028 	.word	0x40020028
 80079b0:	40020040 	.word	0x40020040
 80079b4:	40020058 	.word	0x40020058
 80079b8:	40020070 	.word	0x40020070
 80079bc:	40020088 	.word	0x40020088
 80079c0:	400200a0 	.word	0x400200a0
 80079c4:	400200b8 	.word	0x400200b8
 80079c8:	40020410 	.word	0x40020410
 80079cc:	40020428 	.word	0x40020428
 80079d0:	40020440 	.word	0x40020440
 80079d4:	40020458 	.word	0x40020458
 80079d8:	40020470 	.word	0x40020470
 80079dc:	40020488 	.word	0x40020488
 80079e0:	400204a0 	.word	0x400204a0
 80079e4:	400204b8 	.word	0x400204b8
 80079e8:	58025408 	.word	0x58025408
 80079ec:	5802541c 	.word	0x5802541c
 80079f0:	58025430 	.word	0x58025430
 80079f4:	58025444 	.word	0x58025444
 80079f8:	58025458 	.word	0x58025458
 80079fc:	5802546c 	.word	0x5802546c
 8007a00:	58025480 	.word	0x58025480
 8007a04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	60da      	str	r2, [r3, #12]
}
 8007a18:	e04d      	b.n	8007ab6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <DMA_SetConfig+0x338>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d022      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <DMA_SetConfig+0x33c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01d      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a26      	ldr	r2, [pc, #152]	; (8007acc <DMA_SetConfig+0x340>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d018      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a24      	ldr	r2, [pc, #144]	; (8007ad0 <DMA_SetConfig+0x344>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d013      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a23      	ldr	r2, [pc, #140]	; (8007ad4 <DMA_SetConfig+0x348>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00e      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a21      	ldr	r2, [pc, #132]	; (8007ad8 <DMA_SetConfig+0x34c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d009      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a20      	ldr	r2, [pc, #128]	; (8007adc <DMA_SetConfig+0x350>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <DMA_SetConfig+0x2de>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <DMA_SetConfig+0x354>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d101      	bne.n	8007a6e <DMA_SetConfig+0x2e2>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <DMA_SetConfig+0x2e4>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d020      	beq.n	8007ab6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d108      	bne.n	8007aa6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	60da      	str	r2, [r3, #12]
}
 8007aa4:	e007      	b.n	8007ab6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	60da      	str	r2, [r3, #12]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	58025408 	.word	0x58025408
 8007ac8:	5802541c 	.word	0x5802541c
 8007acc:	58025430 	.word	0x58025430
 8007ad0:	58025444 	.word	0x58025444
 8007ad4:	58025458 	.word	0x58025458
 8007ad8:	5802546c 	.word	0x5802546c
 8007adc:	58025480 	.word	0x58025480
 8007ae0:	58025494 	.word	0x58025494

08007ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a42      	ldr	r2, [pc, #264]	; (8007bfc <DMA_CalcBaseAndBitshift+0x118>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d04a      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a41      	ldr	r2, [pc, #260]	; (8007c00 <DMA_CalcBaseAndBitshift+0x11c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d045      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a3f      	ldr	r2, [pc, #252]	; (8007c04 <DMA_CalcBaseAndBitshift+0x120>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d040      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a3e      	ldr	r2, [pc, #248]	; (8007c08 <DMA_CalcBaseAndBitshift+0x124>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d03b      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a3c      	ldr	r2, [pc, #240]	; (8007c0c <DMA_CalcBaseAndBitshift+0x128>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d036      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a3b      	ldr	r2, [pc, #236]	; (8007c10 <DMA_CalcBaseAndBitshift+0x12c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d031      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a39      	ldr	r2, [pc, #228]	; (8007c14 <DMA_CalcBaseAndBitshift+0x130>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d02c      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a38      	ldr	r2, [pc, #224]	; (8007c18 <DMA_CalcBaseAndBitshift+0x134>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d027      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a36      	ldr	r2, [pc, #216]	; (8007c1c <DMA_CalcBaseAndBitshift+0x138>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d022      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a35      	ldr	r2, [pc, #212]	; (8007c20 <DMA_CalcBaseAndBitshift+0x13c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d01d      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a33      	ldr	r2, [pc, #204]	; (8007c24 <DMA_CalcBaseAndBitshift+0x140>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d018      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a32      	ldr	r2, [pc, #200]	; (8007c28 <DMA_CalcBaseAndBitshift+0x144>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d013      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a30      	ldr	r2, [pc, #192]	; (8007c2c <DMA_CalcBaseAndBitshift+0x148>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00e      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2f      	ldr	r2, [pc, #188]	; (8007c30 <DMA_CalcBaseAndBitshift+0x14c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d009      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <DMA_CalcBaseAndBitshift+0x150>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <DMA_CalcBaseAndBitshift+0xa8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2c      	ldr	r2, [pc, #176]	; (8007c38 <DMA_CalcBaseAndBitshift+0x154>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d101      	bne.n	8007b90 <DMA_CalcBaseAndBitshift+0xac>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <DMA_CalcBaseAndBitshift+0xae>
 8007b90:	2300      	movs	r3, #0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d024      	beq.n	8007be0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	3b10      	subs	r3, #16
 8007b9e:	4a27      	ldr	r2, [pc, #156]	; (8007c3c <DMA_CalcBaseAndBitshift+0x158>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <DMA_CalcBaseAndBitshift+0x15c>)
 8007bb0:	5cd3      	ldrb	r3, [r2, r3]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d908      	bls.n	8007bd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4b1f      	ldr	r3, [pc, #124]	; (8007c44 <DMA_CalcBaseAndBitshift+0x160>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	1d1a      	adds	r2, r3, #4
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8007bce:	e00d      	b.n	8007bec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b1b      	ldr	r3, [pc, #108]	; (8007c44 <DMA_CalcBaseAndBitshift+0x160>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8007bde:	e005      	b.n	8007bec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40020010 	.word	0x40020010
 8007c00:	40020028 	.word	0x40020028
 8007c04:	40020040 	.word	0x40020040
 8007c08:	40020058 	.word	0x40020058
 8007c0c:	40020070 	.word	0x40020070
 8007c10:	40020088 	.word	0x40020088
 8007c14:	400200a0 	.word	0x400200a0
 8007c18:	400200b8 	.word	0x400200b8
 8007c1c:	40020410 	.word	0x40020410
 8007c20:	40020428 	.word	0x40020428
 8007c24:	40020440 	.word	0x40020440
 8007c28:	40020458 	.word	0x40020458
 8007c2c:	40020470 	.word	0x40020470
 8007c30:	40020488 	.word	0x40020488
 8007c34:	400204a0 	.word	0x400204a0
 8007c38:	400204b8 	.word	0x400204b8
 8007c3c:	aaaaaaab 	.word	0xaaaaaaab
 8007c40:	0803d340 	.word	0x0803d340
 8007c44:	fffffc00 	.word	0xfffffc00

08007c48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d120      	bne.n	8007c9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d858      	bhi.n	8007d16 <DMA_CheckFifoParam+0xce>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <DMA_CheckFifoParam+0x24>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007c8f 	.word	0x08007c8f
 8007c74:	08007c7d 	.word	0x08007c7d
 8007c78:	08007d17 	.word	0x08007d17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d048      	beq.n	8007d1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c8c:	e045      	b.n	8007d1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c96:	d142      	bne.n	8007d1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c9c:	e03f      	b.n	8007d1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca6:	d123      	bne.n	8007cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d838      	bhi.n	8007d22 <DMA_CheckFifoParam+0xda>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <DMA_CheckFifoParam+0x70>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007ccf 	.word	0x08007ccf
 8007cc0:	08007cc9 	.word	0x08007cc9
 8007cc4:	08007ce1 	.word	0x08007ce1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
        break;
 8007ccc:	e030      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d025      	beq.n	8007d26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cde:	e022      	b.n	8007d26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ce8:	d11f      	bne.n	8007d2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cee:	e01c      	b.n	8007d2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d902      	bls.n	8007cfe <DMA_CheckFifoParam+0xb6>
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d003      	beq.n	8007d04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007cfc:	e018      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	73fb      	strb	r3, [r7, #15]
        break;
 8007d02:	e015      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00e      	beq.n	8007d2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
    break;
 8007d14:	e00b      	b.n	8007d2e <DMA_CheckFifoParam+0xe6>
        break;
 8007d16:	bf00      	nop
 8007d18:	e00a      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        break;
 8007d1a:	bf00      	nop
 8007d1c:	e008      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        break;
 8007d1e:	bf00      	nop
 8007d20:	e006      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        break;
 8007d22:	bf00      	nop
 8007d24:	e004      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        break;
 8007d26:	bf00      	nop
 8007d28:	e002      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
        break;
 8007d2a:	bf00      	nop
 8007d2c:	e000      	b.n	8007d30 <DMA_CheckFifoParam+0xe8>
    break;
 8007d2e:	bf00      	nop
    }
  }

  return status;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a38      	ldr	r2, [pc, #224]	; (8007e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a36      	ldr	r2, [pc, #216]	; (8007e38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01d      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a35      	ldr	r2, [pc, #212]	; (8007e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a33      	ldr	r2, [pc, #204]	; (8007e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a32      	ldr	r2, [pc, #200]	; (8007e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	; (8007e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2d      	ldr	r2, [pc, #180]	; (8007e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d101      	bne.n	8007da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01a      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	3b08      	subs	r3, #8
 8007db0:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	091b      	lsrs	r3, r3, #4
 8007db8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4b26      	ldr	r3, [pc, #152]	; (8007e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a24      	ldr	r2, [pc, #144]	; (8007e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007dcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ddc:	e024      	b.n	8007e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	3b10      	subs	r3, #16
 8007de6:	4a1e      	ldr	r2, [pc, #120]	; (8007e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	091b      	lsrs	r3, r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d806      	bhi.n	8007e06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4a1b      	ldr	r2, [pc, #108]	; (8007e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d902      	bls.n	8007e06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3308      	adds	r3, #8
 8007e04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	2201      	movs	r2, #1
 8007e22:	409a      	lsls	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	58025408 	.word	0x58025408
 8007e38:	5802541c 	.word	0x5802541c
 8007e3c:	58025430 	.word	0x58025430
 8007e40:	58025444 	.word	0x58025444
 8007e44:	58025458 	.word	0x58025458
 8007e48:	5802546c 	.word	0x5802546c
 8007e4c:	58025480 	.word	0x58025480
 8007e50:	58025494 	.word	0x58025494
 8007e54:	cccccccd 	.word	0xcccccccd
 8007e58:	16009600 	.word	0x16009600
 8007e5c:	58025880 	.word	0x58025880
 8007e60:	aaaaaaab 	.word	0xaaaaaaab
 8007e64:	400204b8 	.word	0x400204b8
 8007e68:	4002040f 	.word	0x4002040f
 8007e6c:	10008200 	.word	0x10008200
 8007e70:	40020880 	.word	0x40020880

08007e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d04a      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d847      	bhi.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d022      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d01d      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a22      	ldr	r2, [pc, #136]	; (8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d018      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a21      	ldr	r2, [pc, #132]	; (8007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d013      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1f      	ldr	r2, [pc, #124]	; (8007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00e      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d009      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1c      	ldr	r2, [pc, #112]	; (8007f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d004      	beq.n	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1b      	ldr	r2, [pc, #108]	; (8007f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d101      	bne.n	8007ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a15      	ldr	r2, [pc, #84]	; (8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007efc:	671a      	str	r2, [r3, #112]	; 0x70
 8007efe:	e009      	b.n	8007f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	2201      	movs	r2, #1
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	58025408 	.word	0x58025408
 8007f30:	5802541c 	.word	0x5802541c
 8007f34:	58025430 	.word	0x58025430
 8007f38:	58025444 	.word	0x58025444
 8007f3c:	58025458 	.word	0x58025458
 8007f40:	5802546c 	.word	0x5802546c
 8007f44:	58025480 	.word	0x58025480
 8007f48:	58025494 	.word	0x58025494
 8007f4c:	1600963f 	.word	0x1600963f
 8007f50:	58025940 	.word	0x58025940
 8007f54:	1000823f 	.word	0x1000823f
 8007f58:	40020940 	.word	0x40020940

08007f5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e04f      	b.n	800800e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fb fad2 	bl	800352c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	4b20      	ldr	r3, [pc, #128]	; (8008018 <HAL_DMA2D_Init+0xbc>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6851      	ldr	r1, [r2, #4]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	69d2      	ldr	r2, [r2, #28]
 8007fa2:	4311      	orrs	r1, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb2:	4b1a      	ldr	r3, [pc, #104]	; (800801c <HAL_DMA2D_Init+0xc0>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6891      	ldr	r1, [r2, #8]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6992      	ldr	r2, [r2, #24]
 8007fbe:	4311      	orrs	r1, r2
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fce:	4b14      	ldr	r3, [pc, #80]	; (8008020 <HAL_DMA2D_Init+0xc4>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68d1      	ldr	r1, [r2, #12]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	430b      	orrs	r3, r1
 8007fdc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	051a      	lsls	r2, r3, #20
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	055b      	lsls	r3, r3, #21
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	fff8ffbf 	.word	0xfff8ffbf
 800801c:	fffffef8 	.word	0xfffffef8
 8008020:	ffff0000 	.word	0xffff0000

08008024 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_DMA2D_Start+0x1c>
 800803c:	2302      	movs	r3, #2
 800803e:	e018      	b.n	8008072 <HAL_DMA2D_Start+0x4e>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f9f8 	bl	8008450 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_DMA2D_BlendingStart>:
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2,
                                          uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af02      	add	r7, sp, #8
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_DMA2D_BlendingStart+0x1c>
 8008092:	2302      	movs	r3, #2
 8008094:	e040      	b.n	8008118 <HAL_DMA2D_BlendingStart+0x9e>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080ae:	d10c      	bne.n	80080ca <HAL_DMA2D_BlendingStart+0x50>
  {
    /*blending & fixed FG*/
    WRITE_REG(hdma2d->Instance->FGCOLR, SrcAddress1);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	621a      	str	r2, [r3, #32]
    /* Configure the source, destination address and the data size */
    DMA2D_SetConfig(hdma2d, SrcAddress2, DstAddress, Width, Height);
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f9c4 	bl	8008450 <DMA2D_SetConfig>
 80080c8:	e01d      	b.n	8008106 <HAL_DMA2D_BlendingStart+0x8c>
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_BG)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080d2:	d10c      	bne.n	80080ee <HAL_DMA2D_BlendingStart+0x74>
  {
    /*blending & fixed BG*/
    WRITE_REG(hdma2d->Instance->BGCOLR, SrcAddress2);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure the source, destination address and the data size */
    DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f9b2 	bl	8008450 <DMA2D_SetConfig>
 80080ec:	e00b      	b.n	8008106 <HAL_DMA2D_BlendingStart+0x8c>
  }
  else
  {
    /* Configure DMA2D Stream source2 address */
    WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	615a      	str	r2, [r3, #20]

    /* Configure the source, destination address and the data size */
    DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f9a5 	bl	8008450 <DMA2D_SetConfig>
  }

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f042 0201 	orr.w	r2, r2, #1
 8008114:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d056      	beq.n	80081ea <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800813c:	f7fc faf2 	bl	8004724 <HAL_GetTick>
 8008140:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008142:	e04b      	b.n	80081dc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008152:	2b00      	cmp	r3, #0
 8008154:	d023      	beq.n	800819e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008164:	f043 0202 	orr.w	r2, r3, #2
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817a:	f043 0201 	orr.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2221      	movs	r2, #33	; 0x21
 8008188:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2204      	movs	r2, #4
 800818e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e0a5      	b.n	80082ea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d01a      	beq.n	80081dc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081a6:	f7fc fabd 	bl	8004724 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <HAL_DMA2D_PollForTransfer+0x9c>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10f      	bne.n	80081dc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c0:	f043 0220 	orr.w	r2, r3, #32
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2203      	movs	r2, #3
 80081cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e086      	b.n	80082ea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0ac      	beq.n	8008144 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f003 0320 	and.w	r3, r3, #32
 80081f4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	f003 0320 	and.w	r3, r3, #32
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4313      	orrs	r3, r2
 8008204:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d061      	beq.n	80082d0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800820c:	f7fc fa8a 	bl	8004724 <HAL_GetTick>
 8008210:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008212:	e056      	b.n	80082c2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008222:	2b00      	cmp	r3, #0
 8008224:	d02e      	beq.n	8008284 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008234:	f043 0204 	orr.w	r2, r3, #4
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824a:	f043 0202 	orr.w	r2, r3, #2
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008260:	f043 0201 	orr.w	r2, r3, #1
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2229      	movs	r2, #41	; 0x29
 800826e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2204      	movs	r2, #4
 8008274:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e032      	b.n	80082ea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d01a      	beq.n	80082c2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800828c:	f7fc fa4a 	bl	8004724 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d302      	bcc.n	80082a2 <HAL_DMA2D_PollForTransfer+0x182>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10f      	bne.n	80082c2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a6:	f043 0220 	orr.w	r2, r3, #32
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2203      	movs	r2, #3
 80082b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e013      	b.n	80082ea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0a1      	beq.n	8008214 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2212      	movs	r2, #18
 80082d6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_DMA2D_ConfigLayer+0x24>
 8008314:	2302      	movs	r3, #2
 8008316:	e092      	b.n	800843e <HAL_DMA2D_ConfigLayer+0x14a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	3328      	adds	r3, #40	; 0x28
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	041b      	lsls	r3, r3, #16
 8008344:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800834c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008358:	4b3c      	ldr	r3, [pc, #240]	; (800844c <HAL_DMA2D_ConfigLayer+0x158>)
 800835a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2b0a      	cmp	r3, #10
 8008362:	d003      	beq.n	800836c <HAL_DMA2D_ConfigLayer+0x78>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	2b09      	cmp	r3, #9
 800836a:	d107      	bne.n	800837c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	e005      	b.n	8008388 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	061b      	lsls	r3, r3, #24
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d120      	bne.n	80083d0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	43db      	mvns	r3, r3
 8008398:	ea02 0103 	and.w	r1, r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	2b0a      	cmp	r3, #10
 80083b6:	d003      	beq.n	80083c0 <HAL_DMA2D_ConfigLayer+0xcc>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b09      	cmp	r3, #9
 80083be:	d135      	bne.n	800842c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80083cc:	629a      	str	r2, [r3, #40]	; 0x28
 80083ce:	e02d      	b.n	800842c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b0b      	cmp	r3, #11
 80083d6:	d109      	bne.n	80083ec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	049b      	lsls	r3, r3, #18
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80083ea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	43db      	mvns	r3, r3
 80083f6:	ea02 0103 	and.w	r1, r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	430a      	orrs	r2, r1
 8008402:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	6812      	ldr	r2, [r2, #0]
 800840c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	2b0a      	cmp	r3, #10
 8008414:	d003      	beq.n	800841e <HAL_DMA2D_ConfigLayer+0x12a>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d106      	bne.n	800842c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800842a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	ff33000f 	.word	0xff33000f

08008450 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008450:	b480      	push	{r7}
 8008452:	b08b      	sub	sp, #44	; 0x2c
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008464:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	041a      	lsls	r2, r3, #16
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	431a      	orrs	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008488:	d174      	bne.n	8008574 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008490:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008498:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d108      	bne.n	80084c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	431a      	orrs	r2, r3
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4313      	orrs	r3, r2
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
 80084c0:	e053      	b.n	800856a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d106      	bne.n	80084d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
 80084d6:	e048      	b.n	800856a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d111      	bne.n	8008504 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	0cdb      	lsrs	r3, r3, #19
 80084e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	0a9b      	lsrs	r3, r3, #10
 80084ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	08db      	lsrs	r3, r3, #3
 80084f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	02db      	lsls	r3, r3, #11
 80084fa:	4313      	orrs	r3, r2
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
 8008502:	e032      	b.n	800856a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b03      	cmp	r3, #3
 800850a:	d117      	bne.n	800853c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	0fdb      	lsrs	r3, r3, #31
 8008510:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	0cdb      	lsrs	r3, r3, #19
 8008516:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	0adb      	lsrs	r3, r3, #11
 800851c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	08db      	lsrs	r3, r3, #3
 8008522:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	431a      	orrs	r2, r3
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	03db      	lsls	r3, r3, #15
 8008532:	4313      	orrs	r3, r2
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
 800853a:	e016      	b.n	800856a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	0f1b      	lsrs	r3, r3, #28
 8008540:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	0d1b      	lsrs	r3, r3, #20
 8008546:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	0b1b      	lsrs	r3, r3, #12
 800854c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	091b      	lsrs	r3, r3, #4
 8008552:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	011a      	lsls	r2, r3, #4
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	431a      	orrs	r2, r3
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	031b      	lsls	r3, r3, #12
 8008562:	4313      	orrs	r3, r2
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008570:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008572:	e00d      	b.n	8008590 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800857c:	d104      	bne.n	8008588 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	615a      	str	r2, [r3, #20]
}
 8008586:	e003      	b.n	8008590 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	60da      	str	r2, [r3, #12]
}
 8008590:	bf00      	nop
 8008592:	372c      	adds	r7, #44	; 0x2c
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800859c:	b480      	push	{r7}
 800859e:	b089      	sub	sp, #36	; 0x24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80085aa:	4b89      	ldr	r3, [pc, #548]	; (80087d0 <HAL_GPIO_Init+0x234>)
 80085ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085ae:	e194      	b.n	80088da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	2101      	movs	r1, #1
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	fa01 f303 	lsl.w	r3, r1, r3
 80085bc:	4013      	ands	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8186 	beq.w	80088d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d005      	beq.n	80085e0 <HAL_GPIO_Init+0x44>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 0303 	and.w	r3, r3, #3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d130      	bne.n	8008642 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	2203      	movs	r2, #3
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	4013      	ands	r3, r2
 80085f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	4313      	orrs	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008616:	2201      	movs	r2, #1
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	43db      	mvns	r3, r3
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	4013      	ands	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	091b      	lsrs	r3, r3, #4
 800862c:	f003 0201 	and.w	r2, r3, #1
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	4313      	orrs	r3, r2
 800863a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d017      	beq.n	800867e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	2203      	movs	r2, #3
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	43db      	mvns	r3, r3
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	4013      	ands	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	4313      	orrs	r3, r2
 8008676:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d123      	bne.n	80086d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	08da      	lsrs	r2, r3, #3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3208      	adds	r2, #8
 8008692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	220f      	movs	r2, #15
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	43db      	mvns	r3, r3
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	4013      	ands	r3, r2
 80086ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	fa02 f303 	lsl.w	r3, r2, r3
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	08da      	lsrs	r2, r3, #3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3208      	adds	r2, #8
 80086cc:	69b9      	ldr	r1, [r7, #24]
 80086ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	2203      	movs	r2, #3
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f003 0203 	and.w	r2, r3, #3
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80e0 	beq.w	80088d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008714:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <HAL_GPIO_Init+0x238>)
 8008716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800871a:	4a2e      	ldr	r2, [pc, #184]	; (80087d4 <HAL_GPIO_Init+0x238>)
 800871c:	f043 0302 	orr.w	r3, r3, #2
 8008720:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008724:	4b2b      	ldr	r3, [pc, #172]	; (80087d4 <HAL_GPIO_Init+0x238>)
 8008726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008732:	4a29      	ldr	r2, [pc, #164]	; (80087d8 <HAL_GPIO_Init+0x23c>)
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	089b      	lsrs	r3, r3, #2
 8008738:	3302      	adds	r3, #2
 800873a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800873e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	220f      	movs	r2, #15
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	43db      	mvns	r3, r3
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a20      	ldr	r2, [pc, #128]	; (80087dc <HAL_GPIO_Init+0x240>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d052      	beq.n	8008804 <HAL_GPIO_Init+0x268>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <HAL_GPIO_Init+0x244>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d031      	beq.n	80087ca <HAL_GPIO_Init+0x22e>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a1e      	ldr	r2, [pc, #120]	; (80087e4 <HAL_GPIO_Init+0x248>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d02b      	beq.n	80087c6 <HAL_GPIO_Init+0x22a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a1d      	ldr	r2, [pc, #116]	; (80087e8 <HAL_GPIO_Init+0x24c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d025      	beq.n	80087c2 <HAL_GPIO_Init+0x226>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <HAL_GPIO_Init+0x250>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d01f      	beq.n	80087be <HAL_GPIO_Init+0x222>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <HAL_GPIO_Init+0x254>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d019      	beq.n	80087ba <HAL_GPIO_Init+0x21e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a1a      	ldr	r2, [pc, #104]	; (80087f4 <HAL_GPIO_Init+0x258>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <HAL_GPIO_Init+0x21a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <HAL_GPIO_Init+0x25c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00d      	beq.n	80087b2 <HAL_GPIO_Init+0x216>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a18      	ldr	r2, [pc, #96]	; (80087fc <HAL_GPIO_Init+0x260>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d007      	beq.n	80087ae <HAL_GPIO_Init+0x212>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a17      	ldr	r2, [pc, #92]	; (8008800 <HAL_GPIO_Init+0x264>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d101      	bne.n	80087aa <HAL_GPIO_Init+0x20e>
 80087a6:	2309      	movs	r3, #9
 80087a8:	e02d      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087aa:	230a      	movs	r3, #10
 80087ac:	e02b      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087ae:	2308      	movs	r3, #8
 80087b0:	e029      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087b2:	2307      	movs	r3, #7
 80087b4:	e027      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087b6:	2306      	movs	r3, #6
 80087b8:	e025      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087ba:	2305      	movs	r3, #5
 80087bc:	e023      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087be:	2304      	movs	r3, #4
 80087c0:	e021      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087c2:	2303      	movs	r3, #3
 80087c4:	e01f      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087c6:	2302      	movs	r3, #2
 80087c8:	e01d      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e01b      	b.n	8008806 <HAL_GPIO_Init+0x26a>
 80087ce:	bf00      	nop
 80087d0:	58000080 	.word	0x58000080
 80087d4:	58024400 	.word	0x58024400
 80087d8:	58000400 	.word	0x58000400
 80087dc:	58020000 	.word	0x58020000
 80087e0:	58020400 	.word	0x58020400
 80087e4:	58020800 	.word	0x58020800
 80087e8:	58020c00 	.word	0x58020c00
 80087ec:	58021000 	.word	0x58021000
 80087f0:	58021400 	.word	0x58021400
 80087f4:	58021800 	.word	0x58021800
 80087f8:	58021c00 	.word	0x58021c00
 80087fc:	58022000 	.word	0x58022000
 8008800:	58022400 	.word	0x58022400
 8008804:	2300      	movs	r3, #0
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	f002 0203 	and.w	r2, r2, #3
 800880c:	0092      	lsls	r2, r2, #2
 800880e:	4093      	lsls	r3, r2
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	4313      	orrs	r3, r2
 8008814:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008816:	4938      	ldr	r1, [pc, #224]	; (80088f8 <HAL_GPIO_Init+0x35c>)
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	089b      	lsrs	r3, r3, #2
 800881c:	3302      	adds	r3, #2
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	43db      	mvns	r3, r3
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	4013      	ands	r3, r2
 8008834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800884a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	43db      	mvns	r3, r3
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	4013      	ands	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	43db      	mvns	r3, r3
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	4013      	ands	r3, r2
 800888e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	43db      	mvns	r3, r3
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	4013      	ands	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f47f ae63 	bne.w	80085b0 <HAL_GPIO_Init+0x14>
  }
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	3724      	adds	r7, #36	; 0x24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	58000400 	.word	0x58000400

080088fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	887b      	ldrh	r3, [r7, #2]
 800890e:	4013      	ands	r3, r2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	e001      	b.n	800891e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
 8008938:	4613      	mov	r3, r2
 800893a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800893c:	787b      	ldrb	r3, [r7, #1]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008942:	887a      	ldrh	r2, [r7, #2]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008948:	e003      	b.n	8008952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800894a:	887b      	ldrh	r3, [r7, #2]
 800894c:	041a      	lsls	r2, r3, #16
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	619a      	str	r2, [r3, #24]
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e0bd      	b.n	8008aee <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d031      	beq.n	8008a1a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a4f      	ldr	r2, [pc, #316]	; (8008af8 <HAL_HRTIM_Init+0x198>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10e      	bne.n	80089de <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80089c0:	4b4e      	ldr	r3, [pc, #312]	; (8008afc <HAL_HRTIM_Init+0x19c>)
 80089c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089c6:	4a4d      	ldr	r2, [pc, #308]	; (8008afc <HAL_HRTIM_Init+0x19c>)
 80089c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80089d0:	4b4a      	ldr	r3, [pc, #296]	; (8008afc <HAL_HRTIM_Init+0x19c>)
 80089d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80089ec:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008a02:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fa fda8 	bl	8003570 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d012      	beq.n	8008a52 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	e03e      	b.n	8008ae6 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8008a68:	7dfa      	ldrb	r2, [r7, #23]
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	3318      	adds	r3, #24
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008a7c:	7dfa      	ldrb	r2, [r7, #23]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	331c      	adds	r3, #28
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008a90:	7dfa      	ldrb	r2, [r7, #23]
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3320      	adds	r3, #32
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8008aa4:	7dfa      	ldrb	r2, [r7, #23]
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8008ab8:	7dfa      	ldrb	r2, [r7, #23]
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	4613      	mov	r3, r2
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3328      	adds	r3, #40	; 0x28
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8008acc:	7dfa      	ldrb	r2, [r7, #23]
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	3330      	adds	r3, #48	; 0x30
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b05      	cmp	r3, #5
 8008aea:	d9bd      	bls.n	8008a68 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40017400 	.word	0x40017400
 8008afc:	58024400 	.word	0x58024400

08008b00 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d101      	bne.n	8008b1c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e015      	b.n	8008b48 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d104      	bne.n	8008b34 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 f9d2 	bl	8008ed6 <HRTIM_MasterBase_Config>
 8008b32:	e004      	b.n	8008b3e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f9fb 	bl	8008f34 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_HRTIM_SimpleBaseStart_IT>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_HRTIM_SimpleBaseStart_IT+0x18>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e037      	b.n	8008bd8 <HAL_HRTIM_SimpleBaseStart_IT+0x88>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the repetition interrupt */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	d108      	bne.n	8008b90 <HAL_HRTIM_SimpleBaseStart_IT+0x40>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0210 	orr.w	r2, r2, #16
 8008b8c:	60da      	str	r2, [r3, #12]
 8008b8e:	e00f      	b.n	8008bb0 <HAL_HRTIM_SimpleBaseStart_IT+0x60>
  }
  else
  {
    __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	01db      	lsls	r3, r3, #7
 8008b98:	4413      	add	r3, r2
 8008b9a:	338c      	adds	r3, #140	; 0x8c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6811      	ldr	r1, [r2, #0]
 8008ba2:	f043 0210 	orr.w	r2, r3, #16
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	01db      	lsls	r3, r3, #7
 8008baa:	440b      	add	r3, r1
 8008bac:	338c      	adds	r3, #140	; 0x8c
 8008bae:	601a      	str	r2, [r3, #0]
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6819      	ldr	r1, [r3, #0]
 8008bb6:	4a0b      	ldr	r2, [pc, #44]	; (8008be4 <HAL_HRTIM_SimpleBaseStart_IT+0x94>)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	24000038 	.word	0x24000038

08008be8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d101      	bne.n	8008c04 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008c00:	2302      	movs	r3, #2
 8008c02:	e05f      	b.n	8008cc4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e058      	b.n	8008cc4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b05      	cmp	r3, #5
 8008c26:	d104      	bne.n	8008c32 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 f9c2 	bl	8008fb4 <HRTIM_MasterWaveform_Config>
 8008c30:	e004      	b.n	8008c3c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 fa22 	bl	8009080 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4403      	add	r3, r0
 8008c4e:	3320      	adds	r3, #32
 8008c50:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6859      	ldr	r1, [r3, #4]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4403      	add	r3, r0
 8008c64:	3324      	adds	r3, #36	; 0x24
 8008c66:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6899      	ldr	r1, [r3, #8]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4403      	add	r3, r0
 8008c7a:	3328      	adds	r3, #40	; 0x28
 8008c7c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68d9      	ldr	r1, [r3, #12]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4403      	add	r3, r0
 8008c90:	332c      	adds	r3, #44	; 0x2c
 8008c92:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6919      	ldr	r1, [r3, #16]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	1a9b      	subs	r3, r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4403      	add	r3, r0
 8008ca6:	3330      	adds	r3, #48	; 0x30
 8008ca8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fb27 	bl	8009300 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2bff      	cmp	r3, #255	; 0xff
 8008cda:	d103      	bne.n	8008ce4 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fb71 	bl	80093c4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008ce2:	e00a      	b.n	8008cfa <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	d103      	bne.n	8008cf2 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fbe8 	bl	80094c0 <HRTIM_Master_ISR>
}
 8008cf0:	e003      	b.n	8008cfa <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fc8d 	bl	8009614 <HRTIM_Timer_ISR>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_D for timer D
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0318 	bic.w	r3, r3, #24
 8008f00:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	6852      	ldr	r2, [r2, #4]
 8008f26:	619a      	str	r2, [r3, #24]
}
 8008f28:	bf00      	nop
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	3301      	adds	r3, #1
 8008f48:	01db      	lsls	r3, r3, #7
 8008f4a:	4413      	add	r3, r2
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 0318 	bic.w	r3, r3, #24
 8008f68:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	01db      	lsls	r3, r3, #7
 8008f7e:	4413      	add	r3, r2
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	01db      	lsls	r3, r3, #7
 8008f90:	440b      	add	r3, r1
 8008f92:	3394      	adds	r3, #148	; 0x94
 8008f94:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	01db      	lsls	r3, r3, #7
 8008fa2:	440b      	add	r3, r1
 8008fa4:	3398      	adds	r3, #152	; 0x98
 8008fa6:	601a      	str	r2, [r3, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008fce:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0320 	bic.w	r3, r3, #32
 8008fd6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fe8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ffa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800900c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800901e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009030:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009044:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009056:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	4313      	orrs	r3, r2
 8009060:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8009074:	bf00      	nop
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8009080:	b480      	push	{r7}
 8009082:	b08b      	sub	sp, #44	; 0x2c
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3301      	adds	r3, #1
 8009094:	01db      	lsls	r3, r3, #7
 8009096:	4413      	add	r3, r2
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	6811      	ldr	r1, [r2, #0]
 800909e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	3301      	adds	r3, #1
 80090a6:	01db      	lsls	r3, r3, #7
 80090a8:	440b      	add	r3, r1
 80090aa:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3301      	adds	r3, #1
 80090b4:	01db      	lsls	r3, r3, #7
 80090b6:	4413      	add	r3, r2
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	01db      	lsls	r3, r3, #7
 80090c4:	4413      	add	r3, r2
 80090c6:	33e8      	adds	r3, #232	; 0xe8
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	01db      	lsls	r3, r3, #7
 80090d4:	4413      	add	r3, r2
 80090d6:	33e4      	adds	r3, #228	; 0xe4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80090e4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	f023 0320 	bic.w	r3, r3, #32
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f4:	4313      	orrs	r3, r2
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009106:	4313      	orrs	r3, r2
 8009108:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009118:	4313      	orrs	r3, r2
 800911a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912a:	4313      	orrs	r3, r2
 800912c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913c:	4313      	orrs	r3, r2
 800913e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009146:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914e:	4313      	orrs	r3, r2
 8009150:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009162:	d103      	bne.n	800916c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800916a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917a:	4313      	orrs	r3, r2
 800917c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009184:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918c:	4313      	orrs	r3, r2
 800918e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919e:	4313      	orrs	r3, r2
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f023 031f 	bic.w	r3, r3, #31
 80091a8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	f003 031f 	and.w	r3, r3, #31
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091be:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d108      	bne.n	80091e4 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	6a3a      	ldr	r2, [r7, #32]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80091ec:	d004      	beq.n	80091f8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80091f6:	d103      	bne.n	8009200 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fc:	2b40      	cmp	r3, #64	; 0x40
 80091fe:	d108      	bne.n	8009212 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8009206:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	4313      	orrs	r3, r2
 8009210:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b04      	cmp	r3, #4
 800921c:	d843      	bhi.n	80092a6 <HRTIM_TimingUnitWaveform_Config+0x226>
 800921e:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8009220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009224:	08009239 	.word	0x08009239
 8009228:	0800924f 	.word	0x0800924f
 800922c:	08009265 	.word	0x08009265
 8009230:	0800927b 	.word	0x0800927b
 8009234:	08009291 	.word	0x08009291
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800923e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	4313      	orrs	r3, r2
 800924a:	61fb      	str	r3, [r7, #28]
      break;
 800924c:	e02c      	b.n	80092a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009254:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	4313      	orrs	r3, r2
 8009260:	61fb      	str	r3, [r7, #28]
      break;
 8009262:	e021      	b.n	80092a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800926a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	4313      	orrs	r3, r2
 8009276:	61fb      	str	r3, [r7, #28]
      break;
 8009278:	e016      	b.n	80092a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009280:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	4313      	orrs	r3, r2
 800928c:	61fb      	str	r3, [r7, #28]
      break;
 800928e:	e00b      	b.n	80092a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009296:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	015b      	lsls	r3, r3, #5
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	61fb      	str	r3, [r7, #28]
      break;
 80092a4:	e000      	b.n	80092a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80092a6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	3301      	adds	r3, #1
 80092b0:	01db      	lsls	r3, r3, #7
 80092b2:	4413      	add	r3, r2
 80092b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	01db      	lsls	r3, r3, #7
 80092c0:	4413      	add	r3, r2
 80092c2:	33e8      	adds	r3, #232	; 0xe8
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	01db      	lsls	r3, r3, #7
 80092d0:	4413      	add	r3, r2
 80092d2:	33e4      	adds	r3, #228	; 0xe4
 80092d4:	6a3a      	ldr	r2, [r7, #32]
 80092d6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	01db      	lsls	r3, r3, #7
 80092e0:	4413      	add	r3, r2
 80092e2:	33d4      	adds	r3, #212	; 0xd4
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69fa      	ldr	r2, [r7, #28]
 80092ee:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80092f2:	bf00      	nop
 80092f4:	372c      	adds	r7, #44	; 0x2c
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop

08009300 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b05      	cmp	r3, #5
 800930e:	d851      	bhi.n	80093b4 <HRTIM_ForceRegistersUpdate+0xb4>
 8009310:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <HRTIM_ForceRegistersUpdate+0x18>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	08009347 	.word	0x08009347
 800931c:	0800935d 	.word	0x0800935d
 8009320:	08009373 	.word	0x08009373
 8009324:	08009389 	.word	0x08009389
 8009328:	0800939f 	.word	0x0800939f
 800932c:	08009331 	.word	0x08009331
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0201 	orr.w	r2, r2, #1
 8009340:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009344:	e037      	b.n	80093b6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0202 	orr.w	r2, r2, #2
 8009356:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800935a:	e02c      	b.n	80093b6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0204 	orr.w	r2, r2, #4
 800936c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009370:	e021      	b.n	80093b6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0208 	orr.w	r2, r2, #8
 8009382:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009386:	e016      	b.n	80093b6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0210 	orr.w	r2, r2, #16
 8009398:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800939c:	e00b      	b.n	80093b6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0220 	orr.w	r2, r2, #32
 80093ae:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80093b2:	e000      	b.n	80093b6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80093b4:	bf00      	nop
  }
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop

080093c4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80093d4:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80093de:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d007      	beq.n	8009404 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fc7f 	bl	8008d02 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00c      	beq.n	8009428 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d007      	beq.n	8009428 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2202      	movs	r2, #2
 800941e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fc77 	bl	8008d16 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00c      	beq.n	800944c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d007      	beq.n	800944c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2204      	movs	r2, #4
 8009442:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff fc6f 	bl	8008d2a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00c      	beq.n	8009470 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f003 0308 	and.w	r3, r3, #8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2208      	movs	r2, #8
 8009466:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff fc67 	bl	8008d3e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b00      	cmp	r3, #0
 8009482:	d007      	beq.n	8009494 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2210      	movs	r2, #16
 800948a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff fc5f 	bl	8008d52 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00c      	beq.n	80094b8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff fc57 	bl	8008d66 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80094d0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80094da:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00d      	beq.n	8009512 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d008      	beq.n	8009512 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009508:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fc34 	bl	8008d7a <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2201      	movs	r2, #1
 800952c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800952e:	2105      	movs	r1, #5
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fc4c 	bl	8008dce <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00c      	beq.n	800955a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2202      	movs	r2, #2
 8009550:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009552:	2105      	movs	r1, #5
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff fc45 	bl	8008de4 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00c      	beq.n	800957e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2204      	movs	r2, #4
 8009574:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009576:	2105      	movs	r1, #5
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fc3e 	bl	8008dfa <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00c      	beq.n	80095a2 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f003 0308 	and.w	r3, r3, #8
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2208      	movs	r2, #8
 8009598:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800959a:	2105      	movs	r1, #5
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff fc37 	bl	8008e10 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f003 0310 	and.w	r3, r3, #16
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00c      	beq.n	80095c6 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d007      	beq.n	80095c6 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2210      	movs	r2, #16
 80095bc:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80095be:	2105      	movs	r1, #5
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fbf9 	bl	8008db8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f003 0320 	and.w	r3, r3, #32
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2220      	movs	r2, #32
 80095e0:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fbd3 	bl	8008d8e <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00c      	beq.n	800960c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d007      	beq.n	800960c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2240      	movs	r2, #64	; 0x40
 8009602:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009604:	2105      	movs	r1, #5
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff fbcb 	bl	8008da2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800960c:	bf00      	nop
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	01db      	lsls	r3, r3, #7
 8009628:	4413      	add	r3, r2
 800962a:	3304      	adds	r3, #4
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	01db      	lsls	r3, r3, #7
 8009638:	4413      	add	r3, r2
 800963a:	338c      	adds	r3, #140	; 0x8c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d010      	beq.n	800966c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	01db      	lsls	r3, r3, #7
 800965c:	4413      	add	r3, r2
 800965e:	3388      	adds	r3, #136	; 0x88
 8009660:	2201      	movs	r2, #1
 8009662:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fbb1 	bl	8008dce <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d010      	beq.n	8009698 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	01db      	lsls	r3, r3, #7
 8009688:	4413      	add	r3, r2
 800968a:	3388      	adds	r3, #136	; 0x88
 800968c:	2202      	movs	r2, #2
 800968e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff fba6 	bl	8008de4 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d010      	beq.n	80096c4 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	01db      	lsls	r3, r3, #7
 80096b4:	4413      	add	r3, r2
 80096b6:	3388      	adds	r3, #136	; 0x88
 80096b8:	2204      	movs	r2, #4
 80096ba:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fb9b 	bl	8008dfa <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 0308 	and.w	r3, r3, #8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d010      	beq.n	80096f0 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f003 0308 	and.w	r3, r3, #8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	01db      	lsls	r3, r3, #7
 80096e0:	4413      	add	r3, r2
 80096e2:	3388      	adds	r3, #136	; 0x88
 80096e4:	2208      	movs	r2, #8
 80096e6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff fb90 	bl	8008e10 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d010      	beq.n	800971c <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	01db      	lsls	r3, r3, #7
 800970c:	4413      	add	r3, r2
 800970e:	3388      	adds	r3, #136	; 0x88
 8009710:	2210      	movs	r2, #16
 8009712:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fb4e 	bl	8008db8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	2b00      	cmp	r3, #0
 8009724:	d010      	beq.n	8009748 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	01db      	lsls	r3, r3, #7
 8009738:	4413      	add	r3, r2
 800973a:	3388      	adds	r3, #136	; 0x88
 800973c:	2240      	movs	r2, #64	; 0x40
 800973e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fb2d 	bl	8008da2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	2b00      	cmp	r3, #0
 8009750:	d010      	beq.n	8009774 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	01db      	lsls	r3, r3, #7
 8009764:	4413      	add	r3, r2
 8009766:	3388      	adds	r3, #136	; 0x88
 8009768:	2280      	movs	r2, #128	; 0x80
 800976a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fb59 	bl	8008e26 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977a:	2b00      	cmp	r3, #0
 800977c:	d011      	beq.n	80097a2 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00c      	beq.n	80097a2 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	01db      	lsls	r3, r3, #7
 8009790:	4413      	add	r3, r2
 8009792:	3388      	adds	r3, #136	; 0x88
 8009794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009798:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff fb4d 	bl	8008e3c <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d011      	beq.n	80097d0 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	01db      	lsls	r3, r3, #7
 80097be:	4413      	add	r3, r2
 80097c0:	3388      	adds	r3, #136	; 0x88
 80097c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c6:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff fb57 	bl	8008e7e <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d011      	beq.n	80097fe <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00c      	beq.n	80097fe <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	01db      	lsls	r3, r3, #7
 80097ec:	4413      	add	r3, r2
 80097ee:	3388      	adds	r3, #136	; 0x88
 80097f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097f4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fb4b 	bl	8008e94 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009804:	2b00      	cmp	r3, #0
 8009806:	d011      	beq.n	800982c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00c      	beq.n	800982c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	01db      	lsls	r3, r3, #7
 800981a:	4413      	add	r3, r2
 800981c:	3388      	adds	r3, #136	; 0x88
 800981e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009822:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fb3f 	bl	8008eaa <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d011      	beq.n	800985a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	01db      	lsls	r3, r3, #7
 8009848:	4413      	add	r3, r2
 800984a:	3388      	adds	r3, #136	; 0x88
 800984c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009850:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff fb33 	bl	8008ec0 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d011      	beq.n	8009888 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00c      	beq.n	8009888 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	01db      	lsls	r3, r3, #7
 8009876:	4413      	add	r3, r2
 8009878:	3388      	adds	r3, #136	; 0x88
 800987a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800987e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff faf0 	bl	8008e68 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00c      	beq.n	80098b6 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	01db      	lsls	r3, r3, #7
 80098a4:	4413      	add	r3, r2
 80098a6:	3388      	adds	r3, #136	; 0x88
 80098a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80098ac:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff face 	bl	8008e52 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e07f      	b.n	80099d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7f9 fe82 	bl	80035f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2224      	movs	r2, #36	; 0x24
 80098f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0201 	bic.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d107      	bne.n	800993a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009936:	609a      	str	r2, [r3, #8]
 8009938:	e006      	b.n	8009948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d104      	bne.n	800995a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6859      	ldr	r1, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	4b1d      	ldr	r3, [pc, #116]	; (80099dc <HAL_I2C_Init+0x11c>)
 8009966:	430b      	orrs	r3, r1
 8009968:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009978:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691a      	ldr	r2, [r3, #16]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	69d9      	ldr	r1, [r3, #28]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1a      	ldr	r2, [r3, #32]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0201 	orr.w	r2, r2, #1
 80099b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	02008000 	.word	0x02008000

080099e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	461a      	mov	r2, r3
 80099ee:	4603      	mov	r3, r0
 80099f0:	817b      	strh	r3, [r7, #10]
 80099f2:	460b      	mov	r3, r1
 80099f4:	813b      	strh	r3, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	f040 80f9 	bne.w	8009bfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <HAL_I2C_Mem_Write+0x34>
 8009a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d105      	bne.n	8009a20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e0ed      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_I2C_Mem_Write+0x4e>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e0e6      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a36:	f7fa fe75 	bl	8004724 <HAL_GetTick>
 8009a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2319      	movs	r3, #25
 8009a42:	2201      	movs	r2, #1
 8009a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fac3 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e0d1      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2221      	movs	r2, #33	; 0x21
 8009a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2240      	movs	r2, #64	; 0x40
 8009a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a3a      	ldr	r2, [r7, #32]
 8009a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a80:	88f8      	ldrh	r0, [r7, #6]
 8009a82:	893a      	ldrh	r2, [r7, #8]
 8009a84:	8979      	ldrh	r1, [r7, #10]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	4603      	mov	r3, r0
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f9d3 	bl	8009e3c <I2C_RequestMemoryWrite>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e0a9      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2bff      	cmp	r3, #255	; 0xff
 8009ab0:	d90e      	bls.n	8009ad0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	22ff      	movs	r2, #255	; 0xff
 8009ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	8979      	ldrh	r1, [r7, #10]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 fc2b 	bl	800a324 <I2C_TransferConfig>
 8009ace:	e00f      	b.n	8009af0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	8979      	ldrh	r1, [r7, #10]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 fc1a 	bl	800a324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 faad 	bl	800a054 <I2C_WaitOnTXISFlagUntilTimeout>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e07b      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	781a      	ldrb	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	3b01      	subs	r3, #1
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d034      	beq.n	8009ba8 <HAL_I2C_Mem_Write+0x1c8>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d130      	bne.n	8009ba8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2180      	movs	r1, #128	; 0x80
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 fa3f 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e04d      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	d90e      	bls.n	8009b88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	22ff      	movs	r2, #255	; 0xff
 8009b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	8979      	ldrh	r1, [r7, #10]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 fbcf 	bl	800a324 <I2C_TransferConfig>
 8009b86:	e00f      	b.n	8009ba8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	8979      	ldrh	r1, [r7, #10]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fbbe 	bl	800a324 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d19e      	bne.n	8009af0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 fa8c 	bl	800a0d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e01a      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6859      	ldr	r1, [r3, #4]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <HAL_I2C_Mem_Write+0x224>)
 8009bda:	400b      	ands	r3, r1
 8009bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e000      	b.n	8009bfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009bfa:	2302      	movs	r3, #2
  }
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	fe00e800 	.word	0xfe00e800

08009c08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af02      	add	r7, sp, #8
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	4608      	mov	r0, r1
 8009c12:	4611      	mov	r1, r2
 8009c14:	461a      	mov	r2, r3
 8009c16:	4603      	mov	r3, r0
 8009c18:	817b      	strh	r3, [r7, #10]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	813b      	strh	r3, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	f040 80fd 	bne.w	8009e2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <HAL_I2C_Mem_Read+0x34>
 8009c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d105      	bne.n	8009c48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e0f1      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d101      	bne.n	8009c56 <HAL_I2C_Mem_Read+0x4e>
 8009c52:	2302      	movs	r3, #2
 8009c54:	e0ea      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c5e:	f7fa fd61 	bl	8004724 <HAL_GetTick>
 8009c62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2319      	movs	r3, #25
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f9af 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0d5      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2222      	movs	r2, #34	; 0x22
 8009c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2240      	movs	r2, #64	; 0x40
 8009c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a3a      	ldr	r2, [r7, #32]
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ca8:	88f8      	ldrh	r0, [r7, #6]
 8009caa:	893a      	ldrh	r2, [r7, #8]
 8009cac:	8979      	ldrh	r1, [r7, #10]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f913 	bl	8009ee4 <I2C_RequestMemoryRead>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e0ad      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	2bff      	cmp	r3, #255	; 0xff
 8009cd8:	d90e      	bls.n	8009cf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	22ff      	movs	r2, #255	; 0xff
 8009cde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	8979      	ldrh	r1, [r7, #10]
 8009ce8:	4b52      	ldr	r3, [pc, #328]	; (8009e34 <HAL_I2C_Mem_Read+0x22c>)
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 fb17 	bl	800a324 <I2C_TransferConfig>
 8009cf6:	e00f      	b.n	8009d18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	8979      	ldrh	r1, [r7, #10]
 8009d0a:	4b4a      	ldr	r3, [pc, #296]	; (8009e34 <HAL_I2C_Mem_Read+0x22c>)
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fb06 	bl	800a324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2104      	movs	r1, #4
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f956 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e07c      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d034      	beq.n	8009dd8 <HAL_I2C_Mem_Read+0x1d0>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d130      	bne.n	8009dd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2180      	movs	r1, #128	; 0x80
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f927 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e04d      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2bff      	cmp	r3, #255	; 0xff
 8009d98:	d90e      	bls.n	8009db8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	22ff      	movs	r2, #255	; 0xff
 8009d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	8979      	ldrh	r1, [r7, #10]
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fab7 	bl	800a324 <I2C_TransferConfig>
 8009db6:	e00f      	b.n	8009dd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	8979      	ldrh	r1, [r7, #10]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 faa6 	bl	800a324 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d19a      	bne.n	8009d18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 f974 	bl	800a0d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e01a      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6859      	ldr	r1, [r3, #4]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <HAL_I2C_Mem_Read+0x230>)
 8009e0a:	400b      	ands	r3, r1
 8009e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	e000      	b.n	8009e2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009e2a:	2302      	movs	r3, #2
  }
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	80002400 	.word	0x80002400
 8009e38:	fe00e800 	.word	0xfe00e800

08009e3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	817b      	strh	r3, [r7, #10]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	813b      	strh	r3, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009e56:	88fb      	ldrh	r3, [r7, #6]
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	8979      	ldrh	r1, [r7, #10]
 8009e5c:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <I2C_RequestMemoryWrite+0xa4>)
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fa5d 	bl	800a324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	69b9      	ldr	r1, [r7, #24]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f8f0 	bl	800a054 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e02c      	b.n	8009ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d105      	bne.n	8009e90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e84:	893b      	ldrh	r3, [r7, #8]
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8009e8e:	e015      	b.n	8009ebc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e90:	893b      	ldrh	r3, [r7, #8]
 8009e92:	0a1b      	lsrs	r3, r3, #8
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	69b9      	ldr	r1, [r7, #24]
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 f8d6 	bl	800a054 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e012      	b.n	8009ed8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009eb2:	893b      	ldrh	r3, [r7, #8]
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2180      	movs	r1, #128	; 0x80
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 f884 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e000      	b.n	8009ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	80002000 	.word	0x80002000

08009ee4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	817b      	strh	r3, [r7, #10]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	813b      	strh	r3, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	8979      	ldrh	r1, [r7, #10]
 8009f04:	4b20      	ldr	r3, [pc, #128]	; (8009f88 <I2C_RequestMemoryRead+0xa4>)
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fa0a 	bl	800a324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f10:	69fa      	ldr	r2, [r7, #28]
 8009f12:	69b9      	ldr	r1, [r7, #24]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f89d 	bl	800a054 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e02c      	b.n	8009f7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f24:	88fb      	ldrh	r3, [r7, #6]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d105      	bne.n	8009f36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f2a:	893b      	ldrh	r3, [r7, #8]
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	629a      	str	r2, [r3, #40]	; 0x28
 8009f34:	e015      	b.n	8009f62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009f36:	893b      	ldrh	r3, [r7, #8]
 8009f38:	0a1b      	lsrs	r3, r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	69b9      	ldr	r1, [r7, #24]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f883 	bl	800a054 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e012      	b.n	8009f7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f58:	893b      	ldrh	r3, [r7, #8]
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2140      	movs	r1, #64	; 0x40
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f831 	bl	8009fd4 <I2C_WaitOnFlagUntilTimeout>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e000      	b.n	8009f7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	80002000 	.word	0x80002000

08009f8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d103      	bne.n	8009faa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d007      	beq.n	8009fc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	699a      	ldr	r2, [r3, #24]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f042 0201 	orr.w	r2, r2, #1
 8009fc6:	619a      	str	r2, [r3, #24]
  }
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fe4:	e022      	b.n	800a02c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fec:	d01e      	beq.n	800a02c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fee:	f7fa fb99 	bl	8004724 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d302      	bcc.n	800a004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d113      	bne.n	800a02c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a008:	f043 0220 	orr.w	r2, r3, #32
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2220      	movs	r2, #32
 800a014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e00f      	b.n	800a04c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4013      	ands	r3, r2
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	429a      	cmp	r2, r3
 800a03a:	bf0c      	ite	eq
 800a03c:	2301      	moveq	r3, #1
 800a03e:	2300      	movne	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	461a      	mov	r2, r3
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	429a      	cmp	r2, r3
 800a048:	d0cd      	beq.n	8009fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a060:	e02c      	b.n	800a0bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 f870 	bl	800a14c <I2C_IsErrorOccurred>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e02a      	b.n	800a0cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d01e      	beq.n	800a0bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a07e:	f7fa fb51 	bl	8004724 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d113      	bne.n	800a0bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a098:	f043 0220 	orr.w	r2, r3, #32
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e007      	b.n	800a0cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d1cb      	bne.n	800a062 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0e0:	e028      	b.n	800a134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f830 	bl	800a14c <I2C_IsErrorOccurred>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e026      	b.n	800a144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0f6:	f7fa fb15 	bl	8004724 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	429a      	cmp	r2, r3
 800a104:	d302      	bcc.n	800a10c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d113      	bne.n	800a134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a110:	f043 0220 	orr.w	r2, r3, #32
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e007      	b.n	800a144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b20      	cmp	r3, #32
 800a140:	d1cf      	bne.n	800a0e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b00      	cmp	r3, #0
 800a176:	d075      	beq.n	800a264 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2210      	movs	r2, #16
 800a17e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a180:	e056      	b.n	800a230 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d052      	beq.n	800a230 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a18a:	f7fa facb 	bl	8004724 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	429a      	cmp	r2, r3
 800a198:	d302      	bcc.n	800a1a0 <I2C_IsErrorOccurred+0x54>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d147      	bne.n	800a230 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c2:	d12e      	bne.n	800a222 <I2C_IsErrorOccurred+0xd6>
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1ca:	d02a      	beq.n	800a222 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a1cc:	7cfb      	ldrb	r3, [r7, #19]
 800a1ce:	2b20      	cmp	r3, #32
 800a1d0:	d027      	beq.n	800a222 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a1e2:	f7fa fa9f 	bl	8004724 <HAL_GetTick>
 800a1e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1e8:	e01b      	b.n	800a222 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a1ea:	f7fa fa9b 	bl	8004724 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b19      	cmp	r3, #25
 800a1f6:	d914      	bls.n	800a222 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fc:	f043 0220 	orr.w	r2, r3, #32
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2220      	movs	r2, #32
 800a208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	f003 0320 	and.w	r3, r3, #32
 800a22c:	2b20      	cmp	r3, #32
 800a22e:	d1dc      	bne.n	800a1ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d003      	beq.n	800a246 <I2C_IsErrorOccurred+0xfa>
 800a23e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a242:	2b00      	cmp	r3, #0
 800a244:	d09d      	beq.n	800a182 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2220      	movs	r2, #32
 800a254:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	f043 0304 	orr.w	r3, r3, #4
 800a25c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00b      	beq.n	800a28e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a286:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00b      	beq.n	800a2b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	f043 0308 	orr.w	r3, r3, #8
 800a29e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	f043 0302 	orr.w	r3, r3, #2
 800a2c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01c      	beq.n	800a314 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff fe56 	bl	8009f8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6859      	ldr	r1, [r3, #4]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <I2C_IsErrorOccurred+0x1d4>)
 800a2ec:	400b      	ands	r3, r1
 800a2ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3728      	adds	r7, #40	; 0x28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	fe00e800 	.word	0xfe00e800

0800a324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	607b      	str	r3, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	817b      	strh	r3, [r7, #10]
 800a332:	4613      	mov	r3, r2
 800a334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a336:	897b      	ldrh	r3, [r7, #10]
 800a338:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a33c:	7a7b      	ldrb	r3, [r7, #9]
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a344:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a352:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	0d5b      	lsrs	r3, r3, #21
 800a35e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a362:	4b08      	ldr	r3, [pc, #32]	; (800a384 <I2C_TransferConfig+0x60>)
 800a364:	430b      	orrs	r3, r1
 800a366:	43db      	mvns	r3, r3
 800a368:	ea02 0103 	and.w	r1, r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a376:	bf00      	nop
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	03ff63ff 	.word	0x03ff63ff

0800a388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d138      	bne.n	800a410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e032      	b.n	800a412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2224      	movs	r2, #36	; 0x24
 800a3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0201 	bic.w	r2, r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6819      	ldr	r1, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	e000      	b.n	800a412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a410:	2302      	movs	r3, #2
  }
}
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b20      	cmp	r3, #32
 800a432:	d139      	bne.n	800a4a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a43e:	2302      	movs	r3, #2
 800a440:	e033      	b.n	800a4aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2224      	movs	r2, #36	; 0x24
 800a44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 0201 	bic.w	r2, r2, #1
 800a460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a470:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0201 	orr.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e000      	b.n	800a4aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a4a8:	2302      	movs	r3, #2
  }
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e097      	b.n	800a5fa <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7f9 f981 	bl	80037ec <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d004      	beq.n	800a50c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a50a:	d103      	bne.n	800a514 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 031e 	bic.w	r3, r3, #30
 800a512:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4b38      	ldr	r3, [pc, #224]	; (800a604 <HAL_LPTIM_Init+0x14c>)
 800a524:	4013      	ands	r3, r2
 800a526:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4b37      	ldr	r3, [pc, #220]	; (800a608 <HAL_LPTIM_Init+0x150>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a538:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800a53e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800a544:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800a54a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d107      	bne.n	800a56a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800a562:	4313      	orrs	r3, r2
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d004      	beq.n	800a57c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a57a:	d107      	bne.n	800a58c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800a584:	4313      	orrs	r3, r2
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a594:	4293      	cmp	r3, r2
 800a596:	d00a      	beq.n	800a5ae <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a5a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800a5a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a14      	ldr	r2, [pc, #80]	; (800a60c <HAL_LPTIM_Init+0x154>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d004      	beq.n	800a5ca <HAL_LPTIM_Init+0x112>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a12      	ldr	r2, [pc, #72]	; (800a610 <HAL_LPTIM_Init+0x158>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d108      	bne.n	800a5dc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a5da:	e009      	b.n	800a5f0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <HAL_LPTIM_Init+0x15c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d104      	bne.n	800a5f0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	ffff1f3f 	.word	0xffff1f3f
 800a608:	ff19f1fe 	.word	0xff19f1fe
 800a60c:	40002400 	.word	0x40002400
 800a610:	58002400 	.word	0x58002400
 800a614:	58002800 	.word	0x58002800

0800a618 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2202      	movs	r2, #2
 800a626:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f023 0306 	bic.w	r3, r3, #6
 800a638:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	4313      	orrs	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a65a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	691a      	ldr	r2, [r3, #16]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0201 	orr.w	r2, r2, #1
 800a66a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2210      	movs	r2, #16
 800a672:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800a67c:	2110      	movs	r1, #16
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f824 	bl	800a6cc <LPTIM_WaitForFlag>
 800a684:	4603      	mov	r3, r0
 800a686:	2b03      	cmp	r3, #3
 800a688:	d101      	bne.n	800a68e <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e00c      	b.n	800a6a8 <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0204 	orr.w	r2, r2, #4
 800a69c:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	69db      	ldr	r3, [r3, #28]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <LPTIM_WaitForFlag+0x58>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a12      	ldr	r2, [pc, #72]	; (800a728 <LPTIM_WaitForFlag+0x5c>)
 800a6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e4:	0b9b      	lsrs	r3, r3, #14
 800a6e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
 800a6ee:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	4013      	ands	r3, r2
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d002      	beq.n	800a716 <LPTIM_WaitForFlag+0x4a>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1ec      	bne.n	800a6f0 <LPTIM_WaitForFlag+0x24>

  return result;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	24000028 	.word	0x24000028
 800a728:	d1b71759 	.word	0xd1b71759

0800a72c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b08f      	sub	sp, #60	; 0x3c
 800a730:	af0a      	add	r7, sp, #40	; 0x28
 800a732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e116      	b.n	800a96c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7f9 fd07 	bl	800416c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2203      	movs	r2, #3
 800a762:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d102      	bne.n	800a778 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f007 ff47 	bl	8012610 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	687e      	ldr	r6, [r7, #4]
 800a78a:	466d      	mov	r5, sp
 800a78c:	f106 0410 	add.w	r4, r6, #16
 800a790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a798:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a79c:	e885 0003 	stmia.w	r5, {r0, r1}
 800a7a0:	1d33      	adds	r3, r6, #4
 800a7a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7a4:	6838      	ldr	r0, [r7, #0]
 800a7a6:	f007 fec5 	bl	8012534 <USB_CoreInit>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e0d7      	b.n	800a96c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f007 ff35 	bl	8012632 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73fb      	strb	r3, [r7, #15]
 800a7cc:	e04a      	b.n	800a864 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a7ce:	7bfa      	ldrb	r2, [r7, #15]
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	1a9b      	subs	r3, r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	440b      	add	r3, r1
 800a7dc:	333d      	adds	r3, #61	; 0x3d
 800a7de:	2201      	movs	r2, #1
 800a7e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a7e2:	7bfa      	ldrb	r2, [r7, #15]
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	440b      	add	r3, r1
 800a7f0:	333c      	adds	r3, #60	; 0x3c
 800a7f2:	7bfa      	ldrb	r2, [r7, #15]
 800a7f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a7f6:	7bfa      	ldrb	r2, [r7, #15]
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	b298      	uxth	r0, r3
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4613      	mov	r3, r2
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	1a9b      	subs	r3, r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	3342      	adds	r3, #66	; 0x42
 800a80a:	4602      	mov	r2, r0
 800a80c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a80e:	7bfa      	ldrb	r2, [r7, #15]
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	333f      	adds	r3, #63	; 0x3f
 800a81e:	2200      	movs	r2, #0
 800a820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a822:	7bfa      	ldrb	r2, [r7, #15]
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	1a9b      	subs	r3, r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	440b      	add	r3, r1
 800a830:	3344      	adds	r3, #68	; 0x44
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a836:	7bfa      	ldrb	r2, [r7, #15]
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4613      	mov	r3, r2
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	3348      	adds	r3, #72	; 0x48
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a84a:	7bfa      	ldrb	r2, [r7, #15]
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	4613      	mov	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	440b      	add	r3, r1
 800a858:	3350      	adds	r3, #80	; 0x50
 800a85a:	2200      	movs	r2, #0
 800a85c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	3301      	adds	r3, #1
 800a862:	73fb      	strb	r3, [r7, #15]
 800a864:	7bfa      	ldrb	r2, [r7, #15]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d3af      	bcc.n	800a7ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
 800a872:	e044      	b.n	800a8fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a874:	7bfa      	ldrb	r2, [r7, #15]
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	4613      	mov	r3, r2
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	1a9b      	subs	r3, r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	440b      	add	r3, r1
 800a882:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a88a:	7bfa      	ldrb	r2, [r7, #15]
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	4613      	mov	r3, r2
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	440b      	add	r3, r1
 800a898:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a89c:	7bfa      	ldrb	r2, [r7, #15]
 800a89e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a8a0:	7bfa      	ldrb	r2, [r7, #15]
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	1a9b      	subs	r3, r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a8b6:	7bfa      	ldrb	r2, [r7, #15]
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	00db      	lsls	r3, r3, #3
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	440b      	add	r3, r1
 800a8c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a8cc:	7bfa      	ldrb	r2, [r7, #15]
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	440b      	add	r3, r1
 800a8da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a8e2:	7bfa      	ldrb	r2, [r7, #15]
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	00db      	lsls	r3, r3, #3
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	73fb      	strb	r3, [r7, #15]
 800a8fe:	7bfa      	ldrb	r2, [r7, #15]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d3b5      	bcc.n	800a874 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	603b      	str	r3, [r7, #0]
 800a90e:	687e      	ldr	r6, [r7, #4]
 800a910:	466d      	mov	r5, sp
 800a912:	f106 0410 	add.w	r4, r6, #16
 800a916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a91a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a91c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a91e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a922:	e885 0003 	stmia.w	r5, {r0, r1}
 800a926:	1d33      	adds	r3, r6, #4
 800a928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a92a:	6838      	ldr	r0, [r7, #0]
 800a92c:	f007 fece 	bl	80126cc <USB_DevInit>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2202      	movs	r2, #2
 800a93a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e014      	b.n	800a96c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b01      	cmp	r3, #1
 800a958:	d102      	bne.n	800a960 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f80a 	bl	800a974 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4618      	mov	r0, r3
 800a966:	f008 f888 	bl	8012a7a <USB_DevDisconnect>

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a974 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9a2:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <HAL_PCDEx_ActivateLPM+0x44>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	10000003 	.word	0x10000003

0800a9bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a9c4:	4b19      	ldr	r3, [pc, #100]	; (800aa2c <HAL_PWREx_ConfigSupply+0x70>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d00a      	beq.n	800a9e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a9d0:	4b16      	ldr	r3, [pc, #88]	; (800aa2c <HAL_PWREx_ConfigSupply+0x70>)
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d001      	beq.n	800a9e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e01f      	b.n	800aa22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e01d      	b.n	800aa22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a9e6:	4b11      	ldr	r3, [pc, #68]	; (800aa2c <HAL_PWREx_ConfigSupply+0x70>)
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	f023 0207 	bic.w	r2, r3, #7
 800a9ee:	490f      	ldr	r1, [pc, #60]	; (800aa2c <HAL_PWREx_ConfigSupply+0x70>)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a9f6:	f7f9 fe95 	bl	8004724 <HAL_GetTick>
 800a9fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9fc:	e009      	b.n	800aa12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a9fe:	f7f9 fe91 	bl	8004724 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa0c:	d901      	bls.n	800aa12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e007      	b.n	800aa22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa12:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <HAL_PWREx_ConfigSupply+0x70>)
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa1e:	d1ee      	bne.n	800a9fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	58024800 	.word	0x58024800

0800aa30 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	4a04      	ldr	r2, [pc, #16]	; (800aa4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aa3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa3e:	60d3      	str	r3, [r2, #12]
}
 800aa40:	bf00      	nop
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	58024800 	.word	0x58024800

0800aa50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08c      	sub	sp, #48	; 0x30
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f000 bc1d 	b.w	800b29e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8087 	beq.w	800ab80 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa72:	4b99      	ldr	r3, [pc, #612]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa7c:	4b96      	ldr	r3, [pc, #600]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	d007      	beq.n	800aa98 <HAL_RCC_OscConfig+0x48>
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	2b18      	cmp	r3, #24
 800aa8c:	d110      	bne.n	800aab0 <HAL_RCC_OscConfig+0x60>
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d10b      	bne.n	800aab0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa98:	4b8f      	ldr	r3, [pc, #572]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d06c      	beq.n	800ab7e <HAL_RCC_OscConfig+0x12e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d168      	bne.n	800ab7e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e3f6      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab8:	d106      	bne.n	800aac8 <HAL_RCC_OscConfig+0x78>
 800aaba:	4b87      	ldr	r3, [pc, #540]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a86      	ldr	r2, [pc, #536]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	e02e      	b.n	800ab26 <HAL_RCC_OscConfig+0xd6>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10c      	bne.n	800aaea <HAL_RCC_OscConfig+0x9a>
 800aad0:	4b81      	ldr	r3, [pc, #516]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a80      	ldr	r2, [pc, #512]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	4b7e      	ldr	r3, [pc, #504]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a7d      	ldr	r2, [pc, #500]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	e01d      	b.n	800ab26 <HAL_RCC_OscConfig+0xd6>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aaf2:	d10c      	bne.n	800ab0e <HAL_RCC_OscConfig+0xbe>
 800aaf4:	4b78      	ldr	r3, [pc, #480]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a77      	ldr	r2, [pc, #476]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800aafa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	4b75      	ldr	r3, [pc, #468]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a74      	ldr	r2, [pc, #464]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	e00b      	b.n	800ab26 <HAL_RCC_OscConfig+0xd6>
 800ab0e:	4b72      	ldr	r3, [pc, #456]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a71      	ldr	r2, [pc, #452]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	4b6f      	ldr	r3, [pc, #444]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a6e      	ldr	r2, [pc, #440]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d013      	beq.n	800ab56 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2e:	f7f9 fdf9 	bl	8004724 <HAL_GetTick>
 800ab32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab34:	e008      	b.n	800ab48 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab36:	f7f9 fdf5 	bl	8004724 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	2b64      	cmp	r3, #100	; 0x64
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e3aa      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab48:	4b63      	ldr	r3, [pc, #396]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0f0      	beq.n	800ab36 <HAL_RCC_OscConfig+0xe6>
 800ab54:	e014      	b.n	800ab80 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab56:	f7f9 fde5 	bl	8004724 <HAL_GetTick>
 800ab5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab5e:	f7f9 fde1 	bl	8004724 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b64      	cmp	r3, #100	; 0x64
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e396      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab70:	4b59      	ldr	r3, [pc, #356]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1f0      	bne.n	800ab5e <HAL_RCC_OscConfig+0x10e>
 800ab7c:	e000      	b.n	800ab80 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80cb 	beq.w	800ad24 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab8e:	4b52      	ldr	r3, [pc, #328]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab96:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab98:	4b4f      	ldr	r3, [pc, #316]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d007      	beq.n	800abb4 <HAL_RCC_OscConfig+0x164>
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	2b18      	cmp	r3, #24
 800aba8:	d156      	bne.n	800ac58 <HAL_RCC_OscConfig+0x208>
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f003 0303 	and.w	r3, r3, #3
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d151      	bne.n	800ac58 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abb4:	4b48      	ldr	r3, [pc, #288]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <HAL_RCC_OscConfig+0x17c>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e368      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abcc:	4b42      	ldr	r3, [pc, #264]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f023 0219 	bic.w	r2, r3, #25
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	493f      	ldr	r1, [pc, #252]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800abde:	f7f9 fda1 	bl	8004724 <HAL_GetTick>
 800abe2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abe4:	e008      	b.n	800abf8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abe6:	f7f9 fd9d 	bl	8004724 <HAL_GetTick>
 800abea:	4602      	mov	r2, r0
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d901      	bls.n	800abf8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e352      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abf8:	4b37      	ldr	r3, [pc, #220]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0f0      	beq.n	800abe6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac04:	f7f9 fdbe 	bl	8004784 <HAL_GetREVID>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d817      	bhi.n	800ac42 <HAL_RCC_OscConfig+0x1f2>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b40      	cmp	r3, #64	; 0x40
 800ac18:	d108      	bne.n	800ac2c <HAL_RCC_OscConfig+0x1dc>
 800ac1a:	4b2f      	ldr	r3, [pc, #188]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ac22:	4a2d      	ldr	r2, [pc, #180]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac28:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac2a:	e07b      	b.n	800ad24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac2c:	4b2a      	ldr	r3, [pc, #168]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	031b      	lsls	r3, r3, #12
 800ac3a:	4927      	ldr	r1, [pc, #156]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac40:	e070      	b.n	800ad24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac42:	4b25      	ldr	r3, [pc, #148]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	061b      	lsls	r3, r3, #24
 800ac50:	4921      	ldr	r1, [pc, #132]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac56:	e065      	b.n	800ad24 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d048      	beq.n	800acf2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac60:	4b1d      	ldr	r3, [pc, #116]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f023 0219 	bic.w	r2, r3, #25
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	491a      	ldr	r1, [pc, #104]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac72:	f7f9 fd57 	bl	8004724 <HAL_GetTick>
 800ac76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac7a:	f7f9 fd53 	bl	8004724 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e308      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0f0      	beq.n	800ac7a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac98:	f7f9 fd74 	bl	8004784 <HAL_GetREVID>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f241 0203 	movw	r2, #4099	; 0x1003
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d81a      	bhi.n	800acdc <HAL_RCC_OscConfig+0x28c>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	2b40      	cmp	r3, #64	; 0x40
 800acac:	d108      	bne.n	800acc0 <HAL_RCC_OscConfig+0x270>
 800acae:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800acb6:	4a08      	ldr	r2, [pc, #32]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800acb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acbc:	6053      	str	r3, [r2, #4]
 800acbe:	e031      	b.n	800ad24 <HAL_RCC_OscConfig+0x2d4>
 800acc0:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	031b      	lsls	r3, r3, #12
 800acce:	4902      	ldr	r1, [pc, #8]	; (800acd8 <HAL_RCC_OscConfig+0x288>)
 800acd0:	4313      	orrs	r3, r2
 800acd2:	604b      	str	r3, [r1, #4]
 800acd4:	e026      	b.n	800ad24 <HAL_RCC_OscConfig+0x2d4>
 800acd6:	bf00      	nop
 800acd8:	58024400 	.word	0x58024400
 800acdc:	4b9a      	ldr	r3, [pc, #616]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	061b      	lsls	r3, r3, #24
 800acea:	4997      	ldr	r1, [pc, #604]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800acec:	4313      	orrs	r3, r2
 800acee:	604b      	str	r3, [r1, #4]
 800acf0:	e018      	b.n	800ad24 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acf2:	4b95      	ldr	r3, [pc, #596]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a94      	ldr	r2, [pc, #592]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acfe:	f7f9 fd11 	bl	8004724 <HAL_GetTick>
 800ad02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad04:	e008      	b.n	800ad18 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad06:	f7f9 fd0d 	bl	8004724 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d901      	bls.n	800ad18 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e2c2      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad18:	4b8b      	ldr	r3, [pc, #556]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1f0      	bne.n	800ad06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 80a9 	beq.w	800ae84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad32:	4b85      	ldr	r3, [pc, #532]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad3a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad3c:	4b82      	ldr	r3, [pc, #520]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad40:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	2b08      	cmp	r3, #8
 800ad46:	d007      	beq.n	800ad58 <HAL_RCC_OscConfig+0x308>
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b18      	cmp	r3, #24
 800ad4c:	d13a      	bne.n	800adc4 <HAL_RCC_OscConfig+0x374>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d135      	bne.n	800adc4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad58:	4b7b      	ldr	r3, [pc, #492]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d005      	beq.n	800ad70 <HAL_RCC_OscConfig+0x320>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	2b80      	cmp	r3, #128	; 0x80
 800ad6a:	d001      	beq.n	800ad70 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e296      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad70:	f7f9 fd08 	bl	8004784 <HAL_GetREVID>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d817      	bhi.n	800adae <HAL_RCC_OscConfig+0x35e>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	2b20      	cmp	r3, #32
 800ad84:	d108      	bne.n	800ad98 <HAL_RCC_OscConfig+0x348>
 800ad86:	4b70      	ldr	r3, [pc, #448]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad8e:	4a6e      	ldr	r2, [pc, #440]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad94:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad96:	e075      	b.n	800ae84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad98:	4b6b      	ldr	r3, [pc, #428]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	069b      	lsls	r3, r3, #26
 800ada6:	4968      	ldr	r1, [pc, #416]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800adac:	e06a      	b.n	800ae84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adae:	4b66      	ldr	r3, [pc, #408]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	061b      	lsls	r3, r3, #24
 800adbc:	4962      	ldr	r1, [pc, #392]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800adc2:	e05f      	b.n	800ae84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d042      	beq.n	800ae52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800adcc:	4b5e      	ldr	r3, [pc, #376]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a5d      	ldr	r2, [pc, #372]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800add2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add8:	f7f9 fca4 	bl	8004724 <HAL_GetTick>
 800addc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adde:	e008      	b.n	800adf2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ade0:	f7f9 fca0 	bl	8004724 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	2b02      	cmp	r3, #2
 800adec:	d901      	bls.n	800adf2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e255      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adf2:	4b55      	ldr	r3, [pc, #340]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0f0      	beq.n	800ade0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adfe:	f7f9 fcc1 	bl	8004784 <HAL_GetREVID>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f241 0203 	movw	r2, #4099	; 0x1003
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d817      	bhi.n	800ae3c <HAL_RCC_OscConfig+0x3ec>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	2b20      	cmp	r3, #32
 800ae12:	d108      	bne.n	800ae26 <HAL_RCC_OscConfig+0x3d6>
 800ae14:	4b4c      	ldr	r3, [pc, #304]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ae1c:	4a4a      	ldr	r2, [pc, #296]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae22:	6053      	str	r3, [r2, #4]
 800ae24:	e02e      	b.n	800ae84 <HAL_RCC_OscConfig+0x434>
 800ae26:	4b48      	ldr	r3, [pc, #288]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	069b      	lsls	r3, r3, #26
 800ae34:	4944      	ldr	r1, [pc, #272]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	604b      	str	r3, [r1, #4]
 800ae3a:	e023      	b.n	800ae84 <HAL_RCC_OscConfig+0x434>
 800ae3c:	4b42      	ldr	r3, [pc, #264]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	061b      	lsls	r3, r3, #24
 800ae4a:	493f      	ldr	r1, [pc, #252]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60cb      	str	r3, [r1, #12]
 800ae50:	e018      	b.n	800ae84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae52:	4b3d      	ldr	r3, [pc, #244]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a3c      	ldr	r2, [pc, #240]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae5e:	f7f9 fc61 	bl	8004724 <HAL_GetTick>
 800ae62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae64:	e008      	b.n	800ae78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ae66:	f7f9 fc5d 	bl	8004724 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d901      	bls.n	800ae78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e212      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae78:	4b33      	ldr	r3, [pc, #204]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f0      	bne.n	800ae66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0308 	and.w	r3, r3, #8
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d036      	beq.n	800aefe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	695b      	ldr	r3, [r3, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d019      	beq.n	800aecc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae9c:	4a2a      	ldr	r2, [pc, #168]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aea4:	f7f9 fc3e 	bl	8004724 <HAL_GetTick>
 800aea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aeaa:	e008      	b.n	800aebe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aeac:	f7f9 fc3a 	bl	8004724 <HAL_GetTick>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d901      	bls.n	800aebe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e1ef      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aebe:	4b22      	ldr	r3, [pc, #136]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800aec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec2:	f003 0302 	and.w	r3, r3, #2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0f0      	beq.n	800aeac <HAL_RCC_OscConfig+0x45c>
 800aeca:	e018      	b.n	800aefe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aecc:	4b1e      	ldr	r3, [pc, #120]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800aece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed0:	4a1d      	ldr	r2, [pc, #116]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800aed2:	f023 0301 	bic.w	r3, r3, #1
 800aed6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aed8:	f7f9 fc24 	bl	8004724 <HAL_GetTick>
 800aedc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aede:	e008      	b.n	800aef2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aee0:	f7f9 fc20 	bl	8004724 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d901      	bls.n	800aef2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e1d5      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aef2:	4b15      	ldr	r3, [pc, #84]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800aef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1f0      	bne.n	800aee0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b00      	cmp	r3, #0
 800af08:	d039      	beq.n	800af7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d01c      	beq.n	800af4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af12:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a0c      	ldr	r2, [pc, #48]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800af18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af1e:	f7f9 fc01 	bl	8004724 <HAL_GetTick>
 800af22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af24:	e008      	b.n	800af38 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800af26:	f7f9 fbfd 	bl	8004724 <HAL_GetTick>
 800af2a:	4602      	mov	r2, r0
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	2b02      	cmp	r3, #2
 800af32:	d901      	bls.n	800af38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	e1b2      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af38:	4b03      	ldr	r3, [pc, #12]	; (800af48 <HAL_RCC_OscConfig+0x4f8>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0f0      	beq.n	800af26 <HAL_RCC_OscConfig+0x4d6>
 800af44:	e01b      	b.n	800af7e <HAL_RCC_OscConfig+0x52e>
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af4c:	4b9b      	ldr	r3, [pc, #620]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a9a      	ldr	r2, [pc, #616]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800af52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af58:	f7f9 fbe4 	bl	8004724 <HAL_GetTick>
 800af5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af5e:	e008      	b.n	800af72 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800af60:	f7f9 fbe0 	bl	8004724 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d901      	bls.n	800af72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e195      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af72:	4b92      	ldr	r3, [pc, #584]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f0      	bne.n	800af60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0304 	and.w	r3, r3, #4
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 8081 	beq.w	800b08e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af8c:	4b8c      	ldr	r3, [pc, #560]	; (800b1c0 <HAL_RCC_OscConfig+0x770>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a8b      	ldr	r2, [pc, #556]	; (800b1c0 <HAL_RCC_OscConfig+0x770>)
 800af92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af98:	f7f9 fbc4 	bl	8004724 <HAL_GetTick>
 800af9c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af9e:	e008      	b.n	800afb2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800afa0:	f7f9 fbc0 	bl	8004724 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b64      	cmp	r3, #100	; 0x64
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e175      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afb2:	4b83      	ldr	r3, [pc, #524]	; (800b1c0 <HAL_RCC_OscConfig+0x770>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0f0      	beq.n	800afa0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d106      	bne.n	800afd4 <HAL_RCC_OscConfig+0x584>
 800afc6:	4b7d      	ldr	r3, [pc, #500]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	4a7c      	ldr	r2, [pc, #496]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800afcc:	f043 0301 	orr.w	r3, r3, #1
 800afd0:	6713      	str	r3, [r2, #112]	; 0x70
 800afd2:	e02d      	b.n	800b030 <HAL_RCC_OscConfig+0x5e0>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10c      	bne.n	800aff6 <HAL_RCC_OscConfig+0x5a6>
 800afdc:	4b77      	ldr	r3, [pc, #476]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800afde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe0:	4a76      	ldr	r2, [pc, #472]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800afe2:	f023 0301 	bic.w	r3, r3, #1
 800afe6:	6713      	str	r3, [r2, #112]	; 0x70
 800afe8:	4b74      	ldr	r3, [pc, #464]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800afea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afec:	4a73      	ldr	r2, [pc, #460]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800afee:	f023 0304 	bic.w	r3, r3, #4
 800aff2:	6713      	str	r3, [r2, #112]	; 0x70
 800aff4:	e01c      	b.n	800b030 <HAL_RCC_OscConfig+0x5e0>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	2b05      	cmp	r3, #5
 800affc:	d10c      	bne.n	800b018 <HAL_RCC_OscConfig+0x5c8>
 800affe:	4b6f      	ldr	r3, [pc, #444]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b002:	4a6e      	ldr	r2, [pc, #440]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b004:	f043 0304 	orr.w	r3, r3, #4
 800b008:	6713      	str	r3, [r2, #112]	; 0x70
 800b00a:	4b6c      	ldr	r3, [pc, #432]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	4a6b      	ldr	r2, [pc, #428]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b010:	f043 0301 	orr.w	r3, r3, #1
 800b014:	6713      	str	r3, [r2, #112]	; 0x70
 800b016:	e00b      	b.n	800b030 <HAL_RCC_OscConfig+0x5e0>
 800b018:	4b68      	ldr	r3, [pc, #416]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01c:	4a67      	ldr	r2, [pc, #412]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b01e:	f023 0301 	bic.w	r3, r3, #1
 800b022:	6713      	str	r3, [r2, #112]	; 0x70
 800b024:	4b65      	ldr	r3, [pc, #404]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b028:	4a64      	ldr	r2, [pc, #400]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b02a:	f023 0304 	bic.w	r3, r3, #4
 800b02e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d015      	beq.n	800b064 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b038:	f7f9 fb74 	bl	8004724 <HAL_GetTick>
 800b03c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b03e:	e00a      	b.n	800b056 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b040:	f7f9 fb70 	bl	8004724 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b04e:	4293      	cmp	r3, r2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e123      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b056:	4b59      	ldr	r3, [pc, #356]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d0ee      	beq.n	800b040 <HAL_RCC_OscConfig+0x5f0>
 800b062:	e014      	b.n	800b08e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b064:	f7f9 fb5e 	bl	8004724 <HAL_GetTick>
 800b068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b06a:	e00a      	b.n	800b082 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b06c:	f7f9 fb5a 	bl	8004724 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	f241 3288 	movw	r2, #5000	; 0x1388
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d901      	bls.n	800b082 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e10d      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b082:	4b4e      	ldr	r3, [pc, #312]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1ee      	bne.n	800b06c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8102 	beq.w	800b29c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b098:	4b48      	ldr	r3, [pc, #288]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0a0:	2b18      	cmp	r3, #24
 800b0a2:	f000 80bd 	beq.w	800b220 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	f040 809e 	bne.w	800b1ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0b0:	4b42      	ldr	r3, [pc, #264]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a41      	ldr	r2, [pc, #260]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b0b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0bc:	f7f9 fb32 	bl	8004724 <HAL_GetTick>
 800b0c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0c2:	e008      	b.n	800b0d6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0c4:	f7f9 fb2e 	bl	8004724 <HAL_GetTick>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d901      	bls.n	800b0d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	e0e3      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0d6:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f0      	bne.n	800b0c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0e2:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b0e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0e6:	4b37      	ldr	r3, [pc, #220]	; (800b1c4 <HAL_RCC_OscConfig+0x774>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b0f2:	0112      	lsls	r2, r2, #4
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	4931      	ldr	r1, [pc, #196]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	628b      	str	r3, [r1, #40]	; 0x28
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	3b01      	subs	r3, #1
 800b102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10a:	3b01      	subs	r3, #1
 800b10c:	025b      	lsls	r3, r3, #9
 800b10e:	b29b      	uxth	r3, r3
 800b110:	431a      	orrs	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b116:	3b01      	subs	r3, #1
 800b118:	041b      	lsls	r3, r3, #16
 800b11a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b11e:	431a      	orrs	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b124:	3b01      	subs	r3, #1
 800b126:	061b      	lsls	r3, r3, #24
 800b128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b12c:	4923      	ldr	r1, [pc, #140]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b132:	4b22      	ldr	r3, [pc, #136]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	4a21      	ldr	r2, [pc, #132]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b138:	f023 0301 	bic.w	r3, r3, #1
 800b13c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b13e:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b142:	4b21      	ldr	r3, [pc, #132]	; (800b1c8 <HAL_RCC_OscConfig+0x778>)
 800b144:	4013      	ands	r3, r2
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b14a:	00d2      	lsls	r2, r2, #3
 800b14c:	491b      	ldr	r1, [pc, #108]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b152:	4b1a      	ldr	r3, [pc, #104]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b156:	f023 020c 	bic.w	r2, r3, #12
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	4917      	ldr	r1, [pc, #92]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b160:	4313      	orrs	r3, r2
 800b162:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b164:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b168:	f023 0202 	bic.w	r2, r3, #2
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b170:	4912      	ldr	r1, [pc, #72]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b172:	4313      	orrs	r3, r2
 800b174:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17a:	4a10      	ldr	r2, [pc, #64]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b182:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	4a0d      	ldr	r2, [pc, #52]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b18c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b18e:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b192:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b19a:	4b08      	ldr	r3, [pc, #32]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19e:	4a07      	ldr	r2, [pc, #28]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b1a0:	f043 0301 	orr.w	r3, r3, #1
 800b1a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a04      	ldr	r2, [pc, #16]	; (800b1bc <HAL_RCC_OscConfig+0x76c>)
 800b1ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b2:	f7f9 fab7 	bl	8004724 <HAL_GetTick>
 800b1b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1b8:	e011      	b.n	800b1de <HAL_RCC_OscConfig+0x78e>
 800b1ba:	bf00      	nop
 800b1bc:	58024400 	.word	0x58024400
 800b1c0:	58024800 	.word	0x58024800
 800b1c4:	fffffc0c 	.word	0xfffffc0c
 800b1c8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1cc:	f7f9 faaa 	bl	8004724 <HAL_GetTick>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d901      	bls.n	800b1de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	e05f      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1de:	4b32      	ldr	r3, [pc, #200]	; (800b2a8 <HAL_RCC_OscConfig+0x858>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0f0      	beq.n	800b1cc <HAL_RCC_OscConfig+0x77c>
 800b1ea:	e057      	b.n	800b29c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1ec:	4b2e      	ldr	r3, [pc, #184]	; (800b2a8 <HAL_RCC_OscConfig+0x858>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a2d      	ldr	r2, [pc, #180]	; (800b2a8 <HAL_RCC_OscConfig+0x858>)
 800b1f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f8:	f7f9 fa94 	bl	8004724 <HAL_GetTick>
 800b1fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1fe:	e008      	b.n	800b212 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b200:	f7f9 fa90 	bl	8004724 <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d901      	bls.n	800b212 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b20e:	2303      	movs	r3, #3
 800b210:	e045      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b212:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <HAL_RCC_OscConfig+0x858>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1f0      	bne.n	800b200 <HAL_RCC_OscConfig+0x7b0>
 800b21e:	e03d      	b.n	800b29c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b220:	4b21      	ldr	r3, [pc, #132]	; (800b2a8 <HAL_RCC_OscConfig+0x858>)
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b226:	4b20      	ldr	r3, [pc, #128]	; (800b2a8 <HAL_RCC_OscConfig+0x858>)
 800b228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b230:	2b01      	cmp	r3, #1
 800b232:	d031      	beq.n	800b298 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f003 0203 	and.w	r2, r3, #3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b23e:	429a      	cmp	r2, r3
 800b240:	d12a      	bne.n	800b298 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	091b      	lsrs	r3, r3, #4
 800b246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b24e:	429a      	cmp	r2, r3
 800b250:	d122      	bne.n	800b298 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b25e:	429a      	cmp	r2, r3
 800b260:	d11a      	bne.n	800b298 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	0a5b      	lsrs	r3, r3, #9
 800b266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b270:	429a      	cmp	r2, r3
 800b272:	d111      	bne.n	800b298 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	0c1b      	lsrs	r3, r3, #16
 800b278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b280:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b282:	429a      	cmp	r2, r3
 800b284:	d108      	bne.n	800b298 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	0e1b      	lsrs	r3, r3, #24
 800b28a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b292:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b294:	429a      	cmp	r2, r3
 800b296:	d001      	beq.n	800b29c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e000      	b.n	800b29e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3730      	adds	r7, #48	; 0x30
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	58024400 	.word	0x58024400

0800b2ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e19c      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b2c0:	4b8a      	ldr	r3, [pc, #552]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d910      	bls.n	800b2f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2ce:	4b87      	ldr	r3, [pc, #540]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f023 020f 	bic.w	r2, r3, #15
 800b2d6:	4985      	ldr	r1, [pc, #532]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2de:	4b83      	ldr	r3, [pc, #524]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 030f 	and.w	r3, r3, #15
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d001      	beq.n	800b2f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e184      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0304 	and.w	r3, r3, #4
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d010      	beq.n	800b31e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691a      	ldr	r2, [r3, #16]
 800b300:	4b7b      	ldr	r3, [pc, #492]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b308:	429a      	cmp	r2, r3
 800b30a:	d908      	bls.n	800b31e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b30c:	4b78      	ldr	r3, [pc, #480]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4975      	ldr	r1, [pc, #468]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0308 	and.w	r3, r3, #8
 800b326:	2b00      	cmp	r3, #0
 800b328:	d010      	beq.n	800b34c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	695a      	ldr	r2, [r3, #20]
 800b32e:	4b70      	ldr	r3, [pc, #448]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b336:	429a      	cmp	r2, r3
 800b338:	d908      	bls.n	800b34c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b33a:	4b6d      	ldr	r3, [pc, #436]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	496a      	ldr	r1, [pc, #424]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	2b00      	cmp	r3, #0
 800b356:	d010      	beq.n	800b37a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699a      	ldr	r2, [r3, #24]
 800b35c:	4b64      	ldr	r3, [pc, #400]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b364:	429a      	cmp	r2, r3
 800b366:	d908      	bls.n	800b37a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b368:	4b61      	ldr	r3, [pc, #388]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	495e      	ldr	r1, [pc, #376]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b376:	4313      	orrs	r3, r2
 800b378:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d010      	beq.n	800b3a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	69da      	ldr	r2, [r3, #28]
 800b38a:	4b59      	ldr	r3, [pc, #356]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b392:	429a      	cmp	r2, r3
 800b394:	d908      	bls.n	800b3a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b396:	4b56      	ldr	r3, [pc, #344]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	4953      	ldr	r1, [pc, #332]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d010      	beq.n	800b3d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	4b4d      	ldr	r3, [pc, #308]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	f003 030f 	and.w	r3, r3, #15
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d908      	bls.n	800b3d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3c4:	4b4a      	ldr	r3, [pc, #296]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	f023 020f 	bic.w	r2, r3, #15
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	4947      	ldr	r1, [pc, #284]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d055      	beq.n	800b48e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b3e2:	4b43      	ldr	r3, [pc, #268]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	4940      	ldr	r1, [pc, #256]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d107      	bne.n	800b40c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3fc:	4b3c      	ldr	r3, [pc, #240]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d121      	bne.n	800b44c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e0f6      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	2b03      	cmp	r3, #3
 800b412:	d107      	bne.n	800b424 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b414:	4b36      	ldr	r3, [pc, #216]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d115      	bne.n	800b44c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	e0ea      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d107      	bne.n	800b43c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b42c:	4b30      	ldr	r3, [pc, #192]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b434:	2b00      	cmp	r3, #0
 800b436:	d109      	bne.n	800b44c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e0de      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b43c:	4b2c      	ldr	r3, [pc, #176]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e0d6      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b44c:	4b28      	ldr	r3, [pc, #160]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	f023 0207 	bic.w	r2, r3, #7
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	4925      	ldr	r1, [pc, #148]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b45a:	4313      	orrs	r3, r2
 800b45c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b45e:	f7f9 f961 	bl	8004724 <HAL_GetTick>
 800b462:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b464:	e00a      	b.n	800b47c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b466:	f7f9 f95d 	bl	8004724 <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	f241 3288 	movw	r2, #5000	; 0x1388
 800b474:	4293      	cmp	r3, r2
 800b476:	d901      	bls.n	800b47c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e0be      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b47c:	4b1c      	ldr	r3, [pc, #112]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	00db      	lsls	r3, r3, #3
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d1eb      	bne.n	800b466 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d010      	beq.n	800b4bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	4b14      	ldr	r3, [pc, #80]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	f003 030f 	and.w	r3, r3, #15
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d208      	bcs.n	800b4bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4aa:	4b11      	ldr	r3, [pc, #68]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	f023 020f 	bic.w	r2, r3, #15
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	490e      	ldr	r1, [pc, #56]	; (800b4f0 <HAL_RCC_ClockConfig+0x244>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4bc:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 030f 	and.w	r3, r3, #15
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d214      	bcs.n	800b4f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ca:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f023 020f 	bic.w	r2, r3, #15
 800b4d2:	4906      	ldr	r1, [pc, #24]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4da:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <HAL_RCC_ClockConfig+0x240>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 030f 	and.w	r3, r3, #15
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d005      	beq.n	800b4f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e086      	b.n	800b5fa <HAL_RCC_ClockConfig+0x34e>
 800b4ec:	52002000 	.word	0x52002000
 800b4f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d010      	beq.n	800b522 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	691a      	ldr	r2, [r3, #16]
 800b504:	4b3f      	ldr	r3, [pc, #252]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d208      	bcs.n	800b522 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b510:	4b3c      	ldr	r3, [pc, #240]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	4939      	ldr	r1, [pc, #228]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b51e:	4313      	orrs	r3, r2
 800b520:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0308 	and.w	r3, r3, #8
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d010      	beq.n	800b550 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	4b34      	ldr	r3, [pc, #208]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d208      	bcs.n	800b550 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b53e:	4b31      	ldr	r3, [pc, #196]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	492e      	ldr	r1, [pc, #184]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b54c:	4313      	orrs	r3, r2
 800b54e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0310 	and.w	r3, r3, #16
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d010      	beq.n	800b57e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	699a      	ldr	r2, [r3, #24]
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b562:	69db      	ldr	r3, [r3, #28]
 800b564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b568:	429a      	cmp	r2, r3
 800b56a:	d208      	bcs.n	800b57e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b56c:	4b25      	ldr	r3, [pc, #148]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	4922      	ldr	r1, [pc, #136]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d010      	beq.n	800b5ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	69da      	ldr	r2, [r3, #28]
 800b58e:	4b1d      	ldr	r3, [pc, #116]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b596:	429a      	cmp	r2, r3
 800b598:	d208      	bcs.n	800b5ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b59a:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	4917      	ldr	r1, [pc, #92]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b5ac:	f000 f834 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	4b14      	ldr	r3, [pc, #80]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	0a1b      	lsrs	r3, r3, #8
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	4912      	ldr	r1, [pc, #72]	; (800b608 <HAL_RCC_ClockConfig+0x35c>)
 800b5be:	5ccb      	ldrb	r3, [r1, r3]
 800b5c0:	f003 031f 	and.w	r3, r3, #31
 800b5c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b5ca:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <HAL_RCC_ClockConfig+0x358>)
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	f003 030f 	and.w	r3, r3, #15
 800b5d2:	4a0d      	ldr	r2, [pc, #52]	; (800b608 <HAL_RCC_ClockConfig+0x35c>)
 800b5d4:	5cd3      	ldrb	r3, [r2, r3]
 800b5d6:	f003 031f 	and.w	r3, r3, #31
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e0:	4a0a      	ldr	r2, [pc, #40]	; (800b60c <HAL_RCC_ClockConfig+0x360>)
 800b5e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b5e4:	4a0a      	ldr	r2, [pc, #40]	; (800b610 <HAL_RCC_ClockConfig+0x364>)
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b5ea:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <HAL_RCC_ClockConfig+0x368>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f8 fe36 	bl	8004260 <HAL_InitTick>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
 800b608:	0803d330 	.word	0x0803d330
 800b60c:	2400002c 	.word	0x2400002c
 800b610:	24000028 	.word	0x24000028
 800b614:	24000030 	.word	0x24000030

0800b618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	b089      	sub	sp, #36	; 0x24
 800b61c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b61e:	4bb3      	ldr	r3, [pc, #716]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b626:	2b18      	cmp	r3, #24
 800b628:	f200 8155 	bhi.w	800b8d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b62c:	a201      	add	r2, pc, #4	; (adr r2, 800b634 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b632:	bf00      	nop
 800b634:	0800b699 	.word	0x0800b699
 800b638:	0800b8d7 	.word	0x0800b8d7
 800b63c:	0800b8d7 	.word	0x0800b8d7
 800b640:	0800b8d7 	.word	0x0800b8d7
 800b644:	0800b8d7 	.word	0x0800b8d7
 800b648:	0800b8d7 	.word	0x0800b8d7
 800b64c:	0800b8d7 	.word	0x0800b8d7
 800b650:	0800b8d7 	.word	0x0800b8d7
 800b654:	0800b6bf 	.word	0x0800b6bf
 800b658:	0800b8d7 	.word	0x0800b8d7
 800b65c:	0800b8d7 	.word	0x0800b8d7
 800b660:	0800b8d7 	.word	0x0800b8d7
 800b664:	0800b8d7 	.word	0x0800b8d7
 800b668:	0800b8d7 	.word	0x0800b8d7
 800b66c:	0800b8d7 	.word	0x0800b8d7
 800b670:	0800b8d7 	.word	0x0800b8d7
 800b674:	0800b6c5 	.word	0x0800b6c5
 800b678:	0800b8d7 	.word	0x0800b8d7
 800b67c:	0800b8d7 	.word	0x0800b8d7
 800b680:	0800b8d7 	.word	0x0800b8d7
 800b684:	0800b8d7 	.word	0x0800b8d7
 800b688:	0800b8d7 	.word	0x0800b8d7
 800b68c:	0800b8d7 	.word	0x0800b8d7
 800b690:	0800b8d7 	.word	0x0800b8d7
 800b694:	0800b6cb 	.word	0x0800b6cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b698:	4b94      	ldr	r3, [pc, #592]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0320 	and.w	r3, r3, #32
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d009      	beq.n	800b6b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b6a4:	4b91      	ldr	r3, [pc, #580]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	08db      	lsrs	r3, r3, #3
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	4a90      	ldr	r2, [pc, #576]	; (800b8f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b6b6:	e111      	b.n	800b8dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b6b8:	4b8d      	ldr	r3, [pc, #564]	; (800b8f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6ba:	61bb      	str	r3, [r7, #24]
    break;
 800b6bc:	e10e      	b.n	800b8dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b6be:	4b8d      	ldr	r3, [pc, #564]	; (800b8f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b6c0:	61bb      	str	r3, [r7, #24]
    break;
 800b6c2:	e10b      	b.n	800b8dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b6c4:	4b8c      	ldr	r3, [pc, #560]	; (800b8f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b6c6:	61bb      	str	r3, [r7, #24]
    break;
 800b6c8:	e108      	b.n	800b8dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6ca:	4b88      	ldr	r3, [pc, #544]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b6d4:	4b85      	ldr	r3, [pc, #532]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d8:	091b      	lsrs	r3, r3, #4
 800b6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b6e0:	4b82      	ldr	r3, [pc, #520]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b6ea:	4b80      	ldr	r3, [pc, #512]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ee:	08db      	lsrs	r3, r3, #3
 800b6f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	fb02 f303 	mul.w	r3, r2, r3
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b702:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 80e1 	beq.w	800b8d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b02      	cmp	r3, #2
 800b712:	f000 8083 	beq.w	800b81c <HAL_RCC_GetSysClockFreq+0x204>
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	f200 80a1 	bhi.w	800b860 <HAL_RCC_GetSysClockFreq+0x248>
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <HAL_RCC_GetSysClockFreq+0x114>
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d056      	beq.n	800b7d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b72a:	e099      	b.n	800b860 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b72c:	4b6f      	ldr	r3, [pc, #444]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0320 	and.w	r3, r3, #32
 800b734:	2b00      	cmp	r3, #0
 800b736:	d02d      	beq.n	800b794 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b738:	4b6c      	ldr	r3, [pc, #432]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	08db      	lsrs	r3, r3, #3
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	4a6b      	ldr	r2, [pc, #428]	; (800b8f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b744:	fa22 f303 	lsr.w	r3, r2, r3
 800b748:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	ee07 3a90 	vmov	s15, r3
 800b750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b762:	4b62      	ldr	r3, [pc, #392]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b772:	ed97 6a02 	vldr	s12, [r7, #8]
 800b776:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b8fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b78e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b792:	e087      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	ee07 3a90 	vmov	s15, r3
 800b79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b900 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7a6:	4b51      	ldr	r3, [pc, #324]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b8fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7d6:	e065      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b904 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ea:	4b40      	ldr	r3, [pc, #256]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b8fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b81a:	e043      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b826:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b908 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b82e:	4b2f      	ldr	r3, [pc, #188]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b842:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b8fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b85e:	e021      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b904 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b872:	4b1e      	ldr	r3, [pc, #120]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b882:	ed97 6a02 	vldr	s12, [r7, #8]
 800b886:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b8fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b89e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b8a4:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a8:	0a5b      	lsrs	r3, r3, #9
 800b8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	ee07 3a90 	vmov	s15, r3
 800b8b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b8bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c8:	ee17 3a90 	vmov	r3, s15
 800b8cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b8ce:	e005      	b.n	800b8dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61bb      	str	r3, [r7, #24]
    break;
 800b8d4:	e002      	b.n	800b8dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b8d6:	4b07      	ldr	r3, [pc, #28]	; (800b8f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b8d8:	61bb      	str	r3, [r7, #24]
    break;
 800b8da:	bf00      	nop
  }

  return sysclockfreq;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3724      	adds	r7, #36	; 0x24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	58024400 	.word	0x58024400
 800b8f0:	03d09000 	.word	0x03d09000
 800b8f4:	003d0900 	.word	0x003d0900
 800b8f8:	007a1200 	.word	0x007a1200
 800b8fc:	46000000 	.word	0x46000000
 800b900:	4c742400 	.word	0x4c742400
 800b904:	4a742400 	.word	0x4a742400
 800b908:	4af42400 	.word	0x4af42400

0800b90c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b912:	f7ff fe81 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800b916:	4602      	mov	r2, r0
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <HAL_RCC_GetHCLKFreq+0x50>)
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	490f      	ldr	r1, [pc, #60]	; (800b960 <HAL_RCC_GetHCLKFreq+0x54>)
 800b924:	5ccb      	ldrb	r3, [r1, r3]
 800b926:	f003 031f 	and.w	r3, r3, #31
 800b92a:	fa22 f303 	lsr.w	r3, r2, r3
 800b92e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b930:	4b0a      	ldr	r3, [pc, #40]	; (800b95c <HAL_RCC_GetHCLKFreq+0x50>)
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	f003 030f 	and.w	r3, r3, #15
 800b938:	4a09      	ldr	r2, [pc, #36]	; (800b960 <HAL_RCC_GetHCLKFreq+0x54>)
 800b93a:	5cd3      	ldrb	r3, [r2, r3]
 800b93c:	f003 031f 	and.w	r3, r3, #31
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	fa22 f303 	lsr.w	r3, r2, r3
 800b946:	4a07      	ldr	r2, [pc, #28]	; (800b964 <HAL_RCC_GetHCLKFreq+0x58>)
 800b948:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b94a:	4a07      	ldr	r2, [pc, #28]	; (800b968 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b950:	4b04      	ldr	r3, [pc, #16]	; (800b964 <HAL_RCC_GetHCLKFreq+0x58>)
 800b952:	681b      	ldr	r3, [r3, #0]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	58024400 	.word	0x58024400
 800b960:	0803d330 	.word	0x0803d330
 800b964:	2400002c 	.word	0x2400002c
 800b968:	24000028 	.word	0x24000028

0800b96c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b970:	f7ff ffcc 	bl	800b90c <HAL_RCC_GetHCLKFreq>
 800b974:	4602      	mov	r2, r0
 800b976:	4b06      	ldr	r3, [pc, #24]	; (800b990 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	091b      	lsrs	r3, r3, #4
 800b97c:	f003 0307 	and.w	r3, r3, #7
 800b980:	4904      	ldr	r1, [pc, #16]	; (800b994 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b982:	5ccb      	ldrb	r3, [r1, r3]
 800b984:	f003 031f 	and.w	r3, r3, #31
 800b988:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	58024400 	.word	0x58024400
 800b994:	0803d330 	.word	0x0803d330

0800b998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b99c:	f7ff ffb6 	bl	800b90c <HAL_RCC_GetHCLKFreq>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	0a1b      	lsrs	r3, r3, #8
 800b9a8:	f003 0307 	and.w	r3, r3, #7
 800b9ac:	4904      	ldr	r1, [pc, #16]	; (800b9c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b9ae:	5ccb      	ldrb	r3, [r1, r3]
 800b9b0:	f003 031f 	and.w	r3, r3, #31
 800b9b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	0803d330 	.word	0x0803d330

0800b9c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	223f      	movs	r2, #63	; 0x3f
 800b9d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	f003 0207 	and.w	r2, r3, #7
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b9e0:	4b17      	ldr	r3, [pc, #92]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b9ec:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	f003 020f 	and.w	r2, r3, #15
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b9f8:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ba04:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800ba06:	69db      	ldr	r3, [r3, #28]
 800ba08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ba10:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800ba12:	69db      	ldr	r3, [r3, #28]
 800ba14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ba1c:	4b08      	ldr	r3, [pc, #32]	; (800ba40 <HAL_RCC_GetClockConfig+0x7c>)
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ba28:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <HAL_RCC_GetClockConfig+0x80>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 020f 	and.w	r2, r3, #15
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	58024400 	.word	0x58024400
 800ba44:	52002000 	.word	0x52002000

0800ba48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba54:	2300      	movs	r3, #0
 800ba56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d03f      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba6c:	d02a      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ba6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba72:	d824      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba78:	d018      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ba7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba7e:	d81e      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ba84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba88:	d007      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ba8a:	e018      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba8c:	4ba3      	ldr	r3, [pc, #652]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	4aa2      	ldr	r2, [pc, #648]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ba98:	e015      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	2102      	movs	r1, #2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fff9 	bl	800da98 <RCCEx_PLL2_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800baaa:	e00c      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3324      	adds	r3, #36	; 0x24
 800bab0:	2102      	movs	r1, #2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f002 f8a2 	bl	800dbfc <RCCEx_PLL3_Config>
 800bab8:	4603      	mov	r3, r0
 800baba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800babc:	e003      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	75fb      	strb	r3, [r7, #23]
      break;
 800bac2:	e000      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bac6:	7dfb      	ldrb	r3, [r7, #23]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d109      	bne.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bacc:	4b93      	ldr	r3, [pc, #588]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bad8:	4990      	ldr	r1, [pc, #576]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bada:	4313      	orrs	r3, r2
 800badc:	650b      	str	r3, [r1, #80]	; 0x50
 800bade:	e001      	b.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
 800bae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baec:	2b00      	cmp	r3, #0
 800baee:	d03d      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf4:	2b04      	cmp	r3, #4
 800baf6:	d826      	bhi.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800baf8:	a201      	add	r2, pc, #4	; (adr r2, 800bb00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800bafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafe:	bf00      	nop
 800bb00:	0800bb15 	.word	0x0800bb15
 800bb04:	0800bb23 	.word	0x0800bb23
 800bb08:	0800bb35 	.word	0x0800bb35
 800bb0c:	0800bb4d 	.word	0x0800bb4d
 800bb10:	0800bb4d 	.word	0x0800bb4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb14:	4b81      	ldr	r3, [pc, #516]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	4a80      	ldr	r2, [pc, #512]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb20:	e015      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3304      	adds	r3, #4
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 ffb5 	bl	800da98 <RCCEx_PLL2_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb32:	e00c      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3324      	adds	r3, #36	; 0x24
 800bb38:	2100      	movs	r1, #0
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f002 f85e 	bl	800dbfc <RCCEx_PLL3_Config>
 800bb40:	4603      	mov	r3, r0
 800bb42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb44:	e003      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]
      break;
 800bb4a:	e000      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800bb4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d109      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb54:	4b71      	ldr	r3, [pc, #452]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb58:	f023 0207 	bic.w	r2, r3, #7
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb60:	496e      	ldr	r1, [pc, #440]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	650b      	str	r3, [r1, #80]	; 0x50
 800bb66:	e001      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d042      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb80:	d02b      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x192>
 800bb82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb86:	d825      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bb88:	2bc0      	cmp	r3, #192	; 0xc0
 800bb8a:	d028      	beq.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bb8c:	2bc0      	cmp	r3, #192	; 0xc0
 800bb8e:	d821      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bb90:	2b80      	cmp	r3, #128	; 0x80
 800bb92:	d016      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800bb94:	2b80      	cmp	r3, #128	; 0x80
 800bb96:	d81d      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800bb9c:	2b40      	cmp	r3, #64	; 0x40
 800bb9e:	d007      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bba0:	e018      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba2:	4b5e      	ldr	r3, [pc, #376]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba6:	4a5d      	ldr	r2, [pc, #372]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bbae:	e017      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f001 ff6e 	bl	800da98 <RCCEx_PLL2_Config>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bbc0:	e00e      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3324      	adds	r3, #36	; 0x24
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f002 f817 	bl	800dbfc <RCCEx_PLL3_Config>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bbd2:	e005      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbd8:	e002      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bbda:	bf00      	nop
 800bbdc:	e000      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bbde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d109      	bne.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bbe6:	4b4d      	ldr	r3, [pc, #308]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf2:	494a      	ldr	r1, [pc, #296]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	650b      	str	r3, [r1, #80]	; 0x50
 800bbf8:	e001      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d049      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc14:	d030      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bc16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc1a:	d82a      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc20:	d02c      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bc22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc26:	d824      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc2c:	d018      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bc2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc32:	d81e      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bc38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc3c:	d007      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bc3e:	e018      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc40:	4b36      	ldr	r3, [pc, #216]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	4a35      	ldr	r2, [pc, #212]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc4c:	e017      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	3304      	adds	r3, #4
 800bc52:	2100      	movs	r1, #0
 800bc54:	4618      	mov	r0, r3
 800bc56:	f001 ff1f 	bl	800da98 <RCCEx_PLL2_Config>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bc5e:	e00e      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3324      	adds	r3, #36	; 0x24
 800bc64:	2100      	movs	r1, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 ffc8 	bl	800dbfc <RCCEx_PLL3_Config>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc70:	e005      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	75fb      	strb	r3, [r7, #23]
      break;
 800bc76:	e002      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bc78:	bf00      	nop
 800bc7a:	e000      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bc7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bc84:	4b25      	ldr	r3, [pc, #148]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc92:	4922      	ldr	r1, [pc, #136]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	658b      	str	r3, [r1, #88]	; 0x58
 800bc98:	e001      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d04b      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bcb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcb4:	d030      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bcb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcba:	d82a      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bcbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcc0:	d02e      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bcc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcc6:	d824      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bcc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bccc:	d018      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bcce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcd2:	d81e      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bcd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcdc:	d007      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bcde:	e018      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce0:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	4a0d      	ldr	r2, [pc, #52]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bcec:	e019      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 fecf 	bl	800da98 <RCCEx_PLL2_Config>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bcfe:	e010      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3324      	adds	r3, #36	; 0x24
 800bd04:	2100      	movs	r1, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 ff78 	bl	800dbfc <RCCEx_PLL3_Config>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bd10:	e007      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	75fb      	strb	r3, [r7, #23]
      break;
 800bd16:	e004      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e002      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bd1c:	58024400 	.word	0x58024400
      break;
 800bd20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bd28:	4b99      	ldr	r3, [pc, #612]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd36:	4996      	ldr	r1, [pc, #600]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	658b      	str	r3, [r1, #88]	; 0x58
 800bd3c:	e001      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d032      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd52:	2b30      	cmp	r3, #48	; 0x30
 800bd54:	d01c      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800bd56:	2b30      	cmp	r3, #48	; 0x30
 800bd58:	d817      	bhi.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d00c      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d813      	bhi.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d016      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bd66:	2b10      	cmp	r3, #16
 800bd68:	d10f      	bne.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd6a:	4b89      	ldr	r3, [pc, #548]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6e:	4a88      	ldr	r2, [pc, #544]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bd76:	e00e      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	2102      	movs	r1, #2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fe8a 	bl	800da98 <RCCEx_PLL2_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bd88:	e005      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd8e:	e002      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bd90:	bf00      	nop
 800bd92:	e000      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bd94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bd9c:	4b7c      	ldr	r3, [pc, #496]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bda8:	4979      	ldr	r1, [pc, #484]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bdae:	e001      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d047      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc8:	d030      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bdca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdce:	d82a      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bdd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdd4:	d02c      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800bdd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdda:	d824      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde0:	d018      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bde2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde6:	d81e      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d003      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bdec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf0:	d007      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bdf2:	e018      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdf4:	4b66      	ldr	r3, [pc, #408]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	4a65      	ldr	r2, [pc, #404]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bdfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800be00:	e017      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3304      	adds	r3, #4
 800be06:	2100      	movs	r1, #0
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 fe45 	bl	800da98 <RCCEx_PLL2_Config>
 800be0e:	4603      	mov	r3, r0
 800be10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800be12:	e00e      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3324      	adds	r3, #36	; 0x24
 800be18:	2100      	movs	r1, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f001 feee 	bl	800dbfc <RCCEx_PLL3_Config>
 800be20:	4603      	mov	r3, r0
 800be22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800be24:	e005      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	75fb      	strb	r3, [r7, #23]
      break;
 800be2a:	e002      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800be2c:	bf00      	nop
 800be2e:	e000      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800be30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d109      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800be38:	4b55      	ldr	r3, [pc, #340]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be3c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be44:	4952      	ldr	r1, [pc, #328]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be46:	4313      	orrs	r3, r2
 800be48:	650b      	str	r3, [r1, #80]	; 0x50
 800be4a:	e001      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d049      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be64:	d02e      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800be66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be6a:	d828      	bhi.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be70:	d02a      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800be72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be76:	d822      	bhi.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be7c:	d026      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800be7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be82:	d81c      	bhi.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be88:	d010      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800be8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be8e:	d816      	bhi.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be90:	2b00      	cmp	r3, #0
 800be92:	d01d      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800be94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be98:	d111      	bne.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3304      	adds	r3, #4
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 fdf9 	bl	800da98 <RCCEx_PLL2_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800beaa:	e012      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	3324      	adds	r3, #36	; 0x24
 800beb0:	2101      	movs	r1, #1
 800beb2:	4618      	mov	r0, r3
 800beb4:	f001 fea2 	bl	800dbfc <RCCEx_PLL3_Config>
 800beb8:	4603      	mov	r3, r0
 800beba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bebc:	e009      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	75fb      	strb	r3, [r7, #23]
      break;
 800bec2:	e006      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bec4:	bf00      	nop
 800bec6:	e004      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bec8:	bf00      	nop
 800beca:	e002      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800becc:	bf00      	nop
 800bece:	e000      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d109      	bne.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bed8:	4b2d      	ldr	r3, [pc, #180]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800beda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bedc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bee4:	492a      	ldr	r1, [pc, #168]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	650b      	str	r3, [r1, #80]	; 0x50
 800beea:	e001      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d04d      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf06:	d02e      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bf08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf0c:	d828      	bhi.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf12:	d02a      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bf14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf18:	d822      	bhi.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf1e:	d026      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bf20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf24:	d81c      	bhi.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf2a:	d010      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bf2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf30:	d816      	bhi.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d01d      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bf36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf3a:	d111      	bne.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	2101      	movs	r1, #1
 800bf42:	4618      	mov	r0, r3
 800bf44:	f001 fda8 	bl	800da98 <RCCEx_PLL2_Config>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bf4c:	e012      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3324      	adds	r3, #36	; 0x24
 800bf52:	2101      	movs	r1, #1
 800bf54:	4618      	mov	r0, r3
 800bf56:	f001 fe51 	bl	800dbfc <RCCEx_PLL3_Config>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bf5e:	e009      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	75fb      	strb	r3, [r7, #23]
      break;
 800bf64:	e006      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf66:	bf00      	nop
 800bf68:	e004      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10c      	bne.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf88:	4901      	ldr	r1, [pc, #4]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	658b      	str	r3, [r1, #88]	; 0x58
 800bf8e:	e003      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bf90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d02f      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfac:	d00e      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bfae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb2:	d814      	bhi.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d015      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bfb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfbc:	d10f      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfbe:	4baf      	ldr	r3, [pc, #700]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc2:	4aae      	ldr	r2, [pc, #696]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bfc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bfca:	e00c      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f001 fd60 	bl	800da98 <RCCEx_PLL2_Config>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bfdc:	e003      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	75fb      	strb	r3, [r7, #23]
      break;
 800bfe2:	e000      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bfe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d109      	bne.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bfec:	4ba3      	ldr	r3, [pc, #652]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bff8:	49a0      	ldr	r1, [pc, #640]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	650b      	str	r3, [r1, #80]	; 0x50
 800bffe:	e001      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d032      	beq.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c014:	2b03      	cmp	r3, #3
 800c016:	d81b      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c057 	.word	0x0800c057
 800c024:	0800c031 	.word	0x0800c031
 800c028:	0800c03f 	.word	0x0800c03f
 800c02c:	0800c057 	.word	0x0800c057
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c030:	4b92      	ldr	r3, [pc, #584]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	4a91      	ldr	r2, [pc, #580]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c03a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c03c:	e00c      	b.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3304      	adds	r3, #4
 800c042:	2102      	movs	r1, #2
 800c044:	4618      	mov	r0, r3
 800c046:	f001 fd27 	bl	800da98 <RCCEx_PLL2_Config>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c04e:	e003      	b.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	75fb      	strb	r3, [r7, #23]
      break;
 800c054:	e000      	b.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c056:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c058:	7dfb      	ldrb	r3, [r7, #23]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c05e:	4b87      	ldr	r3, [pc, #540]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c062:	f023 0203 	bic.w	r2, r3, #3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06a:	4984      	ldr	r1, [pc, #528]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c070:	e001      	b.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c072:	7dfb      	ldrb	r3, [r7, #23]
 800c074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8086 	beq.w	800c190 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c084:	4b7e      	ldr	r3, [pc, #504]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a7d      	ldr	r2, [pc, #500]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c08e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c090:	f7f8 fb48 	bl	8004724 <HAL_GetTick>
 800c094:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c096:	e009      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c098:	f7f8 fb44 	bl	8004724 <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	2b64      	cmp	r3, #100	; 0x64
 800c0a4:	d902      	bls.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	75fb      	strb	r3, [r7, #23]
        break;
 800c0aa:	e005      	b.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0ac:	4b74      	ldr	r3, [pc, #464]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0ef      	beq.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d166      	bne.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c0be:	4b6f      	ldr	r3, [pc, #444]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0c8:	4053      	eors	r3, r2
 800c0ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d013      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0d2:	4b6a      	ldr	r3, [pc, #424]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0dc:	4b67      	ldr	r3, [pc, #412]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e0:	4a66      	ldr	r2, [pc, #408]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0e8:	4b64      	ldr	r3, [pc, #400]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ec:	4a63      	ldr	r2, [pc, #396]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c0f4:	4a61      	ldr	r2, [pc, #388]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c104:	d115      	bne.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c106:	f7f8 fb0d 	bl	8004724 <HAL_GetTick>
 800c10a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c10c:	e00b      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c10e:	f7f8 fb09 	bl	8004724 <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d902      	bls.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	75fb      	strb	r3, [r7, #23]
            break;
 800c124:	e005      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c126:	4b55      	ldr	r3, [pc, #340]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12a:	f003 0302 	and.w	r3, r3, #2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0ed      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d126      	bne.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c146:	d10d      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c148:	4b4c      	ldr	r3, [pc, #304]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c156:	0919      	lsrs	r1, r3, #4
 800c158:	4b4a      	ldr	r3, [pc, #296]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c15a:	400b      	ands	r3, r1
 800c15c:	4947      	ldr	r1, [pc, #284]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	610b      	str	r3, [r1, #16]
 800c162:	e005      	b.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c164:	4b45      	ldr	r3, [pc, #276]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	4a44      	ldr	r2, [pc, #272]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c16a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c16e:	6113      	str	r3, [r2, #16]
 800c170:	4b42      	ldr	r3, [pc, #264]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c17a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c17e:	493f      	ldr	r1, [pc, #252]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c180:	4313      	orrs	r3, r2
 800c182:	670b      	str	r3, [r1, #112]	; 0x70
 800c184:	e004      	b.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
 800c188:	75bb      	strb	r3, [r7, #22]
 800c18a:	e001      	b.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c18c:	7dfb      	ldrb	r3, [r7, #23]
 800c18e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8085 	beq.w	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1a2:	2b28      	cmp	r3, #40	; 0x28
 800c1a4:	d866      	bhi.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c1a6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ac:	0800c289 	.word	0x0800c289
 800c1b0:	0800c275 	.word	0x0800c275
 800c1b4:	0800c275 	.word	0x0800c275
 800c1b8:	0800c275 	.word	0x0800c275
 800c1bc:	0800c275 	.word	0x0800c275
 800c1c0:	0800c275 	.word	0x0800c275
 800c1c4:	0800c275 	.word	0x0800c275
 800c1c8:	0800c275 	.word	0x0800c275
 800c1cc:	0800c251 	.word	0x0800c251
 800c1d0:	0800c275 	.word	0x0800c275
 800c1d4:	0800c275 	.word	0x0800c275
 800c1d8:	0800c275 	.word	0x0800c275
 800c1dc:	0800c275 	.word	0x0800c275
 800c1e0:	0800c275 	.word	0x0800c275
 800c1e4:	0800c275 	.word	0x0800c275
 800c1e8:	0800c275 	.word	0x0800c275
 800c1ec:	0800c263 	.word	0x0800c263
 800c1f0:	0800c275 	.word	0x0800c275
 800c1f4:	0800c275 	.word	0x0800c275
 800c1f8:	0800c275 	.word	0x0800c275
 800c1fc:	0800c275 	.word	0x0800c275
 800c200:	0800c275 	.word	0x0800c275
 800c204:	0800c275 	.word	0x0800c275
 800c208:	0800c275 	.word	0x0800c275
 800c20c:	0800c289 	.word	0x0800c289
 800c210:	0800c275 	.word	0x0800c275
 800c214:	0800c275 	.word	0x0800c275
 800c218:	0800c275 	.word	0x0800c275
 800c21c:	0800c275 	.word	0x0800c275
 800c220:	0800c275 	.word	0x0800c275
 800c224:	0800c275 	.word	0x0800c275
 800c228:	0800c275 	.word	0x0800c275
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c275 	.word	0x0800c275
 800c234:	0800c275 	.word	0x0800c275
 800c238:	0800c275 	.word	0x0800c275
 800c23c:	0800c275 	.word	0x0800c275
 800c240:	0800c275 	.word	0x0800c275
 800c244:	0800c275 	.word	0x0800c275
 800c248:	0800c275 	.word	0x0800c275
 800c24c:	0800c289 	.word	0x0800c289
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	3304      	adds	r3, #4
 800c254:	2101      	movs	r1, #1
 800c256:	4618      	mov	r0, r3
 800c258:	f001 fc1e 	bl	800da98 <RCCEx_PLL2_Config>
 800c25c:	4603      	mov	r3, r0
 800c25e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c260:	e013      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3324      	adds	r3, #36	; 0x24
 800c266:	2101      	movs	r1, #1
 800c268:	4618      	mov	r0, r3
 800c26a:	f001 fcc7 	bl	800dbfc <RCCEx_PLL3_Config>
 800c26e:	4603      	mov	r3, r0
 800c270:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c272:	e00a      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	75fb      	strb	r3, [r7, #23]
      break;
 800c278:	e007      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c27a:	bf00      	nop
 800c27c:	58024400 	.word	0x58024400
 800c280:	58024800 	.word	0x58024800
 800c284:	00ffffcf 	.word	0x00ffffcf
      break;
 800c288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d109      	bne.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c290:	4b96      	ldr	r3, [pc, #600]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c294:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c29c:	4993      	ldr	r1, [pc, #588]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	654b      	str	r3, [r1, #84]	; 0x54
 800c2a2:	e001      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 0302 	and.w	r3, r3, #2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d038      	beq.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b8:	2b05      	cmp	r3, #5
 800c2ba:	d821      	bhi.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c2bc:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c2:	bf00      	nop
 800c2c4:	0800c307 	.word	0x0800c307
 800c2c8:	0800c2dd 	.word	0x0800c2dd
 800c2cc:	0800c2ef 	.word	0x0800c2ef
 800c2d0:	0800c307 	.word	0x0800c307
 800c2d4:	0800c307 	.word	0x0800c307
 800c2d8:	0800c307 	.word	0x0800c307
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	2101      	movs	r1, #1
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f001 fbd8 	bl	800da98 <RCCEx_PLL2_Config>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c2ec:	e00c      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3324      	adds	r3, #36	; 0x24
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f001 fc81 	bl	800dbfc <RCCEx_PLL3_Config>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c2fe:	e003      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	75fb      	strb	r3, [r7, #23]
      break;
 800c304:	e000      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c306:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d109      	bne.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c30e:	4b77      	ldr	r3, [pc, #476]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c312:	f023 0207 	bic.w	r2, r3, #7
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c31a:	4974      	ldr	r1, [pc, #464]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	654b      	str	r3, [r1, #84]	; 0x54
 800c320:	e001      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0304 	and.w	r3, r3, #4
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d03a      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c338:	2b05      	cmp	r3, #5
 800c33a:	d821      	bhi.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c33c:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c342:	bf00      	nop
 800c344:	0800c387 	.word	0x0800c387
 800c348:	0800c35d 	.word	0x0800c35d
 800c34c:	0800c36f 	.word	0x0800c36f
 800c350:	0800c387 	.word	0x0800c387
 800c354:	0800c387 	.word	0x0800c387
 800c358:	0800c387 	.word	0x0800c387
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3304      	adds	r3, #4
 800c360:	2101      	movs	r1, #1
 800c362:	4618      	mov	r0, r3
 800c364:	f001 fb98 	bl	800da98 <RCCEx_PLL2_Config>
 800c368:	4603      	mov	r3, r0
 800c36a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c36c:	e00c      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	3324      	adds	r3, #36	; 0x24
 800c372:	2101      	movs	r1, #1
 800c374:	4618      	mov	r0, r3
 800c376:	f001 fc41 	bl	800dbfc <RCCEx_PLL3_Config>
 800c37a:	4603      	mov	r3, r0
 800c37c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c37e:	e003      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	75fb      	strb	r3, [r7, #23]
      break;
 800c384:	e000      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c386:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c38e:	4b57      	ldr	r3, [pc, #348]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c392:	f023 0207 	bic.w	r2, r3, #7
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c39c:	4953      	ldr	r1, [pc, #332]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	658b      	str	r3, [r1, #88]	; 0x58
 800c3a2:	e001      	b.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 0320 	and.w	r3, r3, #32
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d04b      	beq.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3be:	d02e      	beq.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c3c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3c4:	d828      	bhi.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3ca:	d02a      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d0:	d822      	bhi.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3d6:	d026      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c3d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3dc:	d81c      	bhi.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e2:	d010      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e8:	d816      	bhi.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d01d      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c3ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3f2:	d111      	bne.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f001 fb4c 	bl	800da98 <RCCEx_PLL2_Config>
 800c400:	4603      	mov	r3, r0
 800c402:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c404:	e012      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	3324      	adds	r3, #36	; 0x24
 800c40a:	2102      	movs	r1, #2
 800c40c:	4618      	mov	r0, r3
 800c40e:	f001 fbf5 	bl	800dbfc <RCCEx_PLL3_Config>
 800c412:	4603      	mov	r3, r0
 800c414:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c416:	e009      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	75fb      	strb	r3, [r7, #23]
      break;
 800c41c:	e006      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c41e:	bf00      	nop
 800c420:	e004      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c422:	bf00      	nop
 800c424:	e002      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c426:	bf00      	nop
 800c428:	e000      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c42a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10a      	bne.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c432:	4b2e      	ldr	r3, [pc, #184]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c436:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c440:	492a      	ldr	r1, [pc, #168]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c442:	4313      	orrs	r3, r2
 800c444:	654b      	str	r3, [r1, #84]	; 0x54
 800c446:	e001      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c448:	7dfb      	ldrb	r3, [r7, #23]
 800c44a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c454:	2b00      	cmp	r3, #0
 800c456:	d04d      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c45e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c462:	d02e      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c464:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c468:	d828      	bhi.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c46a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c46e:	d02a      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c474:	d822      	bhi.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c476:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c47a:	d026      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c47c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c480:	d81c      	bhi.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c486:	d010      	beq.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c48c:	d816      	bhi.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d01d      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c496:	d111      	bne.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3304      	adds	r3, #4
 800c49c:	2100      	movs	r1, #0
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f001 fafa 	bl	800da98 <RCCEx_PLL2_Config>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c4a8:	e012      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	3324      	adds	r3, #36	; 0x24
 800c4ae:	2102      	movs	r1, #2
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f001 fba3 	bl	800dbfc <RCCEx_PLL3_Config>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c4ba:	e009      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	75fb      	strb	r3, [r7, #23]
      break;
 800c4c0:	e006      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4c2:	bf00      	nop
 800c4c4:	e004      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4c6:	bf00      	nop
 800c4c8:	e002      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4ca:	bf00      	nop
 800c4cc:	e000      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10c      	bne.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c4d6:	4b05      	ldr	r3, [pc, #20]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4e4:	4901      	ldr	r1, [pc, #4]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	658b      	str	r3, [r1, #88]	; 0x58
 800c4ea:	e003      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c4ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d04b      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c506:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c50a:	d02e      	beq.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c50c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c510:	d828      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c516:	d02a      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c51c:	d822      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c51e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c522:	d026      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c524:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c528:	d81c      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c52a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c52e:	d010      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c534:	d816      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c536:	2b00      	cmp	r3, #0
 800c538:	d01d      	beq.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c53a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c53e:	d111      	bne.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3304      	adds	r3, #4
 800c544:	2100      	movs	r1, #0
 800c546:	4618      	mov	r0, r3
 800c548:	f001 faa6 	bl	800da98 <RCCEx_PLL2_Config>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c550:	e012      	b.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3324      	adds	r3, #36	; 0x24
 800c556:	2102      	movs	r1, #2
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 fb4f 	bl	800dbfc <RCCEx_PLL3_Config>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c562:	e009      	b.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	75fb      	strb	r3, [r7, #23]
      break;
 800c568:	e006      	b.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c56a:	bf00      	nop
 800c56c:	e004      	b.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c56e:	bf00      	nop
 800c570:	e002      	b.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c572:	bf00      	nop
 800c574:	e000      	b.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c576:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c578:	7dfb      	ldrb	r3, [r7, #23]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c57e:	4b9d      	ldr	r3, [pc, #628]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c58c:	4999      	ldr	r1, [pc, #612]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	658b      	str	r3, [r1, #88]	; 0x58
 800c592:	e001      	b.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0308 	and.w	r3, r3, #8
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d01a      	beq.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ae:	d10a      	bne.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	3324      	adds	r3, #36	; 0x24
 800c5b4:	2102      	movs	r1, #2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f001 fb20 	bl	800dbfc <RCCEx_PLL3_Config>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c5c6:	4b8b      	ldr	r3, [pc, #556]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5d4:	4987      	ldr	r1, [pc, #540]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 0310 	and.w	r3, r3, #16
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d01a      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f0:	d10a      	bne.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3324      	adds	r3, #36	; 0x24
 800c5f6:	2102      	movs	r1, #2
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f001 faff 	bl	800dbfc <RCCEx_PLL3_Config>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c608:	4b7a      	ldr	r3, [pc, #488]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c60a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c616:	4977      	ldr	r1, [pc, #476]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c624:	2b00      	cmp	r3, #0
 800c626:	d034      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c62e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c632:	d01d      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c638:	d817      	bhi.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c63e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c642:	d009      	beq.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c644:	e011      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3304      	adds	r3, #4
 800c64a:	2100      	movs	r1, #0
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 fa23 	bl	800da98 <RCCEx_PLL2_Config>
 800c652:	4603      	mov	r3, r0
 800c654:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c656:	e00c      	b.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3324      	adds	r3, #36	; 0x24
 800c65c:	2102      	movs	r1, #2
 800c65e:	4618      	mov	r0, r3
 800c660:	f001 facc 	bl	800dbfc <RCCEx_PLL3_Config>
 800c664:	4603      	mov	r3, r0
 800c666:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c668:	e003      	b.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	75fb      	strb	r3, [r7, #23]
      break;
 800c66e:	e000      	b.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c670:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10a      	bne.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c678:	4b5e      	ldr	r3, [pc, #376]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c67c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c686:	495b      	ldr	r1, [pc, #364]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c688:	4313      	orrs	r3, r2
 800c68a:	658b      	str	r3, [r1, #88]	; 0x58
 800c68c:	e001      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c68e:	7dfb      	ldrb	r3, [r7, #23]
 800c690:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d033      	beq.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6a8:	d01c      	beq.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c6aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6ae:	d816      	bhi.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c6b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6b4:	d003      	beq.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6ba:	d007      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c6bc:	e00f      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6be:	4b4d      	ldr	r3, [pc, #308]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c2:	4a4c      	ldr	r2, [pc, #304]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c6ca:	e00c      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3324      	adds	r3, #36	; 0x24
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fa92 	bl	800dbfc <RCCEx_PLL3_Config>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c6dc:	e003      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	75fb      	strb	r3, [r7, #23]
      break;
 800c6e2:	e000      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c6e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10a      	bne.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6ec:	4b41      	ldr	r3, [pc, #260]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6fa:	493e      	ldr	r1, [pc, #248]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	654b      	str	r3, [r1, #84]	; 0x54
 800c700:	e001      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d029      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c71a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c71e:	d007      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c720:	e00f      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c722:	4b34      	ldr	r3, [pc, #208]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c726:	4a33      	ldr	r2, [pc, #204]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c72c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c72e:	e00b      	b.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	3304      	adds	r3, #4
 800c734:	2102      	movs	r1, #2
 800c736:	4618      	mov	r0, r3
 800c738:	f001 f9ae 	bl	800da98 <RCCEx_PLL2_Config>
 800c73c:	4603      	mov	r3, r0
 800c73e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c740:	e002      	b.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	75fb      	strb	r3, [r7, #23]
      break;
 800c746:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d109      	bne.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c74e:	4b29      	ldr	r3, [pc, #164]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75a:	4926      	ldr	r1, [pc, #152]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c75c:	4313      	orrs	r3, r2
 800c75e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c760:	e001      	b.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00a      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3324      	adds	r3, #36	; 0x24
 800c776:	2102      	movs	r1, #2
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 fa3f 	bl	800dbfc <RCCEx_PLL3_Config>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c790:	2b00      	cmp	r3, #0
 800c792:	d033      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c79c:	d017      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c79e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7a2:	d811      	bhi.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7a8:	d013      	beq.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ae:	d80b      	bhi.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d010      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c7b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7b8:	d106      	bne.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7ba:	4b0e      	ldr	r3, [pc, #56]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7be:	4a0d      	ldr	r2, [pc, #52]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c7c6:	e007      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	75fb      	strb	r3, [r7, #23]
      break;
 800c7cc:	e004      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c7ce:	bf00      	nop
 800c7d0:	e002      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c7d2:	bf00      	nop
 800c7d4:	e000      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c7d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10c      	bne.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c7de:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ea:	4902      	ldr	r1, [pc, #8]	; (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	654b      	str	r3, [r1, #84]	; 0x54
 800c7f0:	e004      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c7f2:	bf00      	nop
 800c7f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d008      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c808:	4b31      	ldr	r3, [pc, #196]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c80c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c814:	492e      	ldr	r1, [pc, #184]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c816:	4313      	orrs	r3, r2
 800c818:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c826:	4b2a      	ldr	r3, [pc, #168]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c834:	4926      	ldr	r1, [pc, #152]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c836:	4313      	orrs	r3, r2
 800c838:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c842:	2b00      	cmp	r3, #0
 800c844:	d008      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c846:	4b22      	ldr	r3, [pc, #136]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c84a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c852:	491f      	ldr	r1, [pc, #124]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c854:	4313      	orrs	r3, r2
 800c856:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00d      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c864:	4b1a      	ldr	r3, [pc, #104]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	4a19      	ldr	r2, [pc, #100]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c86a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c86e:	6113      	str	r3, [r2, #16]
 800c870:	4b17      	ldr	r3, [pc, #92]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c87a:	4915      	ldr	r1, [pc, #84]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c87c:	4313      	orrs	r3, r2
 800c87e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	da08      	bge.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c888:	4b11      	ldr	r3, [pc, #68]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c88c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c894:	490e      	ldr	r1, [pc, #56]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c896:	4313      	orrs	r3, r2
 800c898:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d009      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c8a6:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b4:	4906      	ldr	r1, [pc, #24]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c8ba:	7dbb      	ldrb	r3, [r7, #22]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e000      	b.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	58024400 	.word	0x58024400

0800c8d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b090      	sub	sp, #64	; 0x40
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e2:	f040 8095 	bne.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800c8e6:	4b97      	ldr	r3, [pc, #604]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	f200 8088 	bhi.w	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c8f8:	a201      	add	r2, pc, #4	; (adr r2, 800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800c8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fe:	bf00      	nop
 800c900:	0800c915 	.word	0x0800c915
 800c904:	0800c93d 	.word	0x0800c93d
 800c908:	0800c965 	.word	0x0800c965
 800c90c:	0800ca01 	.word	0x0800ca01
 800c910:	0800c98d 	.word	0x0800c98d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c914:	4b8b      	ldr	r3, [pc, #556]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c91c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c920:	d108      	bne.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c926:	4618      	mov	r0, r3
 800c928:	f000 ff64 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c930:	f000 bc94 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c938:	f000 bc90 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c93c:	4b81      	ldr	r3, [pc, #516]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c948:	d108      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94a:	f107 0318 	add.w	r3, r7, #24
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 fca8 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c958:	f000 bc80 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c960:	f000 bc7c 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c964:	4b77      	ldr	r3, [pc, #476]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c970:	d108      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c972:	f107 030c 	add.w	r3, r7, #12
 800c976:	4618      	mov	r0, r3
 800c978:	f000 fde8 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c980:	f000 bc6c 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c988:	f000 bc68 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c98c:	4b6d      	ldr	r3, [pc, #436]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c98e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c994:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c996:	4b6b      	ldr	r3, [pc, #428]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0304 	and.w	r3, r3, #4
 800c99e:	2b04      	cmp	r3, #4
 800c9a0:	d10c      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800c9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d109      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c9a8:	4b66      	ldr	r3, [pc, #408]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	08db      	lsrs	r3, r3, #3
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	4a65      	ldr	r2, [pc, #404]	; (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ba:	e01f      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9bc:	4b61      	ldr	r3, [pc, #388]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c8:	d106      	bne.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800c9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9d0:	d102      	bne.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c9d2:	4b5e      	ldr	r3, [pc, #376]	; (800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d6:	e011      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9d8:	4b5a      	ldr	r3, [pc, #360]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9e4:	d106      	bne.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ec:	d102      	bne.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c9ee:	4b58      	ldr	r3, [pc, #352]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9f2:	e003      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c9f8:	f000 bc30 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c9fc:	f000 bc2e 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ca00:	4b54      	ldr	r3, [pc, #336]	; (800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ca02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca04:	f000 bc2a 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca0c:	f000 bc26 	b.w	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca16:	f040 809f 	bne.w	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ca1a:	4b4a      	ldr	r3, [pc, #296]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ca1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ca22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca2a:	d04d      	beq.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca32:	f200 8084 	bhi.w	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	2bc0      	cmp	r3, #192	; 0xc0
 800ca3a:	d07d      	beq.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ca40:	d87d      	bhi.n	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	2b80      	cmp	r3, #128	; 0x80
 800ca46:	d02d      	beq.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	2b80      	cmp	r3, #128	; 0x80
 800ca4c:	d877      	bhi.n	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d003      	beq.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	2b40      	cmp	r3, #64	; 0x40
 800ca58:	d012      	beq.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ca5a:	e070      	b.n	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca5c:	4b39      	ldr	r3, [pc, #228]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca68:	d107      	bne.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fec0 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ca78:	e3f0      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca7e:	e3ed      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca80:	4b30      	ldr	r3, [pc, #192]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca8c:	d107      	bne.n	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca8e:	f107 0318 	add.w	r3, r7, #24
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 fc06 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ca9c:	e3de      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800caa2:	e3db      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caa4:	4b27      	ldr	r3, [pc, #156]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800caac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab0:	d107      	bne.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cab2:	f107 030c 	add.w	r3, r7, #12
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fd48 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cac0:	e3cc      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cac6:	e3c9      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cac8:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800caca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cacc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cad0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0304 	and.w	r3, r3, #4
 800cada:	2b04      	cmp	r3, #4
 800cadc:	d10c      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800cade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d109      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cae4:	4b17      	ldr	r3, [pc, #92]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	08db      	lsrs	r3, r3, #3
 800caea:	f003 0303 	and.w	r3, r3, #3
 800caee:	4a16      	ldr	r2, [pc, #88]	; (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800caf0:	fa22 f303 	lsr.w	r3, r2, r3
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caf6:	e01e      	b.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800caf8:	4b12      	ldr	r3, [pc, #72]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb04:	d106      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb0c:	d102      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cb0e:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb12:	e010      	b.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb14:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb20:	d106      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800cb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb28:	d102      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cb2a:	4b09      	ldr	r3, [pc, #36]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb2e:	e002      	b.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cb34:	e392      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800cb36:	e391      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cb38:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb3c:	e38e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb42:	e38b      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800cb44:	58024400 	.word	0x58024400
 800cb48:	03d09000 	.word	0x03d09000
 800cb4c:	003d0900 	.word	0x003d0900
 800cb50:	007a1200 	.word	0x007a1200
 800cb54:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb5e:	f040 809c 	bne.w	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800cb62:	4b9d      	ldr	r3, [pc, #628]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cb6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb72:	d054      	beq.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb7a:	f200 808b 	bhi.w	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb84:	f000 8083 	beq.w	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb8e:	f200 8081 	bhi.w	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb98:	d02f      	beq.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cba0:	d878      	bhi.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbae:	d012      	beq.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800cbb0:	e070      	b.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbb2:	4b89      	ldr	r3, [pc, #548]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbbe:	d107      	bne.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fe15 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cbce:	e345      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbd4:	e342      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbd6:	4b80      	ldr	r3, [pc, #512]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbe2:	d107      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbe4:	f107 0318 	add.w	r3, r7, #24
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f000 fb5b 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cbf2:	e333      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbf8:	e330      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbfa:	4b77      	ldr	r3, [pc, #476]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc06:	d107      	bne.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc08:	f107 030c 	add.w	r3, r7, #12
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 fc9d 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cc16:	e321      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc1c:	e31e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cc1e:	4b6e      	ldr	r3, [pc, #440]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc26:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc28:	4b6b      	ldr	r3, [pc, #428]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d10c      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800cc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d109      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc3a:	4b67      	ldr	r3, [pc, #412]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	08db      	lsrs	r3, r3, #3
 800cc40:	f003 0303 	and.w	r3, r3, #3
 800cc44:	4a65      	ldr	r2, [pc, #404]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800cc46:	fa22 f303 	lsr.w	r3, r2, r3
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc4c:	e01e      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc4e:	4b62      	ldr	r3, [pc, #392]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5a:	d106      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc62:	d102      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cc64:	4b5e      	ldr	r3, [pc, #376]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc68:	e010      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc6a:	4b5b      	ldr	r3, [pc, #364]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc76:	d106      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc7e:	d102      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cc80:	4b58      	ldr	r3, [pc, #352]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc84:	e002      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cc8a:	e2e7      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800cc8c:	e2e6      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cc8e:	4b56      	ldr	r3, [pc, #344]	; (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc92:	e2e3      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc98:	e2e0      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cca0:	f040 80a7 	bne.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800cca4:	4b4c      	ldr	r3, [pc, #304]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ccac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccb4:	d055      	beq.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccbc:	f200 8096 	bhi.w	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccc6:	f000 8084 	beq.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccd0:	f200 808c 	bhi.w	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccda:	d030      	beq.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cce2:	f200 8083 	bhi.w	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d004      	beq.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ccf2:	d012      	beq.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800ccf4:	e07a      	b.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccf6:	4b38      	ldr	r3, [pc, #224]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd02:	d107      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 fd73 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cd12:	e2a3      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd18:	e2a0      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd1a:	4b2f      	ldr	r3, [pc, #188]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd26:	d107      	bne.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd28:	f107 0318 	add.w	r3, r7, #24
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 fab9 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800cd36:	e291      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd3c:	e28e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd3e:	4b26      	ldr	r3, [pc, #152]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd4a:	d107      	bne.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd4c:	f107 030c 	add.w	r3, r7, #12
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fbfb 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cd5a:	e27f      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd60:	e27c      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cd62:	4b1d      	ldr	r3, [pc, #116]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cd64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd6a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd6c:	4b1a      	ldr	r3, [pc, #104]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f003 0304 	and.w	r3, r3, #4
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d10c      	bne.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d109      	bne.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd7e:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	08db      	lsrs	r3, r3, #3
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	4a14      	ldr	r2, [pc, #80]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800cd8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd90:	e01e      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd92:	4b11      	ldr	r3, [pc, #68]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd9e:	d106      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800cda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cda6:	d102      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdac:	e010      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdae:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdba:	d106      	bne.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdc2:	d102      	bne.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cdc4:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc8:	e002      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cdce:	e245      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800cdd0:	e244      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cdd2:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdd6:	e241      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800cdd8:	58024400 	.word	0x58024400
 800cddc:	03d09000 	.word	0x03d09000
 800cde0:	003d0900 	.word	0x003d0900
 800cde4:	007a1200 	.word	0x007a1200
 800cde8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdf0:	e234      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdf8:	f040 809c 	bne.w	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800cdfc:	4b9b      	ldr	r3, [pc, #620]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cdfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ce04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce0c:	d054      	beq.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce14:	f200 808b 	bhi.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce1e:	f000 8083 	beq.w	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce28:	f200 8081 	bhi.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce32:	d02f      	beq.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce3a:	d878      	bhi.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d004      	beq.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce48:	d012      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800ce4a:	e070      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce4c:	4b87      	ldr	r3, [pc, #540]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce58:	d107      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 fcc8 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ce68:	e1f8      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce6e:	e1f5      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce70:	4b7e      	ldr	r3, [pc, #504]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce7c:	d107      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce7e:	f107 0318 	add.w	r3, r7, #24
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fa0e 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ce8c:	e1e6      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce92:	e1e3      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce94:	4b75      	ldr	r3, [pc, #468]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea0:	d107      	bne.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea2:	f107 030c 	add.w	r3, r7, #12
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 fb50 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ceb0:	e1d4      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ceb6:	e1d1      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ceb8:	4b6c      	ldr	r3, [pc, #432]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ceba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cec0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cec2:	4b6a      	ldr	r3, [pc, #424]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0304 	and.w	r3, r3, #4
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	d10c      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d109      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ced4:	4b65      	ldr	r3, [pc, #404]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	08db      	lsrs	r3, r3, #3
 800ceda:	f003 0303 	and.w	r3, r3, #3
 800cede:	4a64      	ldr	r2, [pc, #400]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800cee0:	fa22 f303 	lsr.w	r3, r2, r3
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee6:	e01e      	b.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cee8:	4b60      	ldr	r3, [pc, #384]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cef4:	d106      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cefc:	d102      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cefe:	4b5d      	ldr	r3, [pc, #372]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf02:	e010      	b.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf04:	4b59      	ldr	r3, [pc, #356]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf10:	d106      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cf12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf18:	d102      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cf1a:	4b57      	ldr	r3, [pc, #348]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800cf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf1e:	e002      	b.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cf24:	e19a      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800cf26:	e199      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cf28:	4b54      	ldr	r3, [pc, #336]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf2c:	e196      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf32:	e193      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cf3a:	d173      	bne.n	800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800cf3c:	4b4b      	ldr	r3, [pc, #300]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cf3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cf44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf4c:	d02f      	beq.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf54:	d863      	bhi.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf62:	d012      	beq.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800cf64:	e05b      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf66:	4b41      	ldr	r3, [pc, #260]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf72:	d107      	bne.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf74:	f107 0318 	add.w	r3, r7, #24
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 f993 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cf82:	e16b      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf88:	e168      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf8a:	4b38      	ldr	r3, [pc, #224]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf96:	d107      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf98:	f107 030c 	add.w	r3, r7, #12
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 fad5 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cfa6:	e159      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cfac:	e156      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cfae:	4b2f      	ldr	r3, [pc, #188]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cfb6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfb8:	4b2c      	ldr	r3, [pc, #176]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d10c      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d109      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cfca:	4b28      	ldr	r3, [pc, #160]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	08db      	lsrs	r3, r3, #3
 800cfd0:	f003 0303 	and.w	r3, r3, #3
 800cfd4:	4a26      	ldr	r2, [pc, #152]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800cfd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfdc:	e01e      	b.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfde:	4b23      	ldr	r3, [pc, #140]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfea:	d106      	bne.n	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800cfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cff2:	d102      	bne.n	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cff4:	4b1f      	ldr	r3, [pc, #124]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800cff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cff8:	e010      	b.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cffa:	4b1c      	ldr	r3, [pc, #112]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d006:	d106      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800d008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d00e:	d102      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d010:	4b19      	ldr	r3, [pc, #100]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800d012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d014:	e002      	b.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d01a:	e11f      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d01c:	e11e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d022:	e11b      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d02a:	d13e      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800d02c:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800d02e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d034:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d042:	d01d      	beq.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800d044:	e02e      	b.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d046:	4b09      	ldr	r3, [pc, #36]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d04e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d052:	d107      	bne.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 fbcb 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d062:	e0fb      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d068:	e0f8      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d06a:	bf00      	nop
 800d06c:	58024400 	.word	0x58024400
 800d070:	03d09000 	.word	0x03d09000
 800d074:	003d0900 	.word	0x003d0900
 800d078:	007a1200 	.word	0x007a1200
 800d07c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d080:	4b79      	ldr	r3, [pc, #484]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d08c:	d107      	bne.n	800d09e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d08e:	f107 0318 	add.w	r3, r7, #24
 800d092:	4618      	mov	r0, r3
 800d094:	f000 f906 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d09c:	e0de      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0a2:	e0db      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0a8:	e0d8      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0b0:	f040 8085 	bne.w	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800d0b4:	4b6c      	ldr	r3, [pc, #432]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d0bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0c4:	d06b      	beq.n	800d19e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0cc:	d874      	bhi.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0d4:	d056      	beq.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0dc:	d86c      	bhi.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d0e4:	d03b      	beq.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d0ec:	d864      	bhi.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0f4:	d021      	beq.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0fc:	d85c      	bhi.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d10a:	d004      	beq.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800d10c:	e054      	b.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d10e:	f000 f8b3 	bl	800d278 <HAL_RCCEx_GetD3PCLK1Freq>
 800d112:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d114:	e0a2      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d116:	4b54      	ldr	r3, [pc, #336]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d11e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d122:	d107      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d124:	f107 0318 	add.w	r3, r7, #24
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 f8bb 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d132:	e093      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d138:	e090      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d13a:	4b4b      	ldr	r3, [pc, #300]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d146:	d107      	bne.n	800d158 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d148:	f107 030c 	add.w	r3, r7, #12
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 f9fd 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d156:	e081      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d158:	2300      	movs	r3, #0
 800d15a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d15c:	e07e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d15e:	4b42      	ldr	r3, [pc, #264]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0304 	and.w	r3, r3, #4
 800d166:	2b04      	cmp	r3, #4
 800d168:	d109      	bne.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d16a:	4b3f      	ldr	r3, [pc, #252]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	08db      	lsrs	r3, r3, #3
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	4a3d      	ldr	r2, [pc, #244]	; (800d26c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d176:	fa22 f303 	lsr.w	r3, r2, r3
 800d17a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d17c:	e06e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d182:	e06b      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d184:	4b38      	ldr	r3, [pc, #224]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d190:	d102      	bne.n	800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800d192:	4b37      	ldr	r3, [pc, #220]	; (800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d194:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d196:	e061      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d19c:	e05e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d19e:	4b32      	ldr	r3, [pc, #200]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1aa:	d102      	bne.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800d1ac:	4b31      	ldr	r3, [pc, #196]	; (800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d1b0:	e054      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1b6:	e051      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1bc:	e04e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1c4:	d148      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800d1c6:	4b28      	ldr	r3, [pc, #160]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d1ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1d6:	d02a      	beq.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1de:	d838      	bhi.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1ec:	d00d      	beq.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800d1ee:	e030      	b.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1f0:	4b1d      	ldr	r3, [pc, #116]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1fc:	d102      	bne.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800d1fe:	4b1d      	ldr	r3, [pc, #116]	; (800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d200:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d202:	e02b      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d208:	e028      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d20a:	4b17      	ldr	r3, [pc, #92]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d216:	d107      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 fae9 	bl	800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d224:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d226:	e019      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d22c:	e016      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d22e:	4b0e      	ldr	r3, [pc, #56]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d23a:	d107      	bne.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d23c:	f107 0318 	add.w	r3, r7, #24
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f82f 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d24a:	e007      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d250:	e004      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d256:	e001      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3740      	adds	r7, #64	; 0x40
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	58024400 	.word	0x58024400
 800d26c:	03d09000 	.word	0x03d09000
 800d270:	003d0900 	.word	0x003d0900
 800d274:	007a1200 	.word	0x007a1200

0800d278 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d27c:	f7fe fb46 	bl	800b90c <HAL_RCC_GetHCLKFreq>
 800d280:	4602      	mov	r2, r0
 800d282:	4b06      	ldr	r3, [pc, #24]	; (800d29c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	091b      	lsrs	r3, r3, #4
 800d288:	f003 0307 	and.w	r3, r3, #7
 800d28c:	4904      	ldr	r1, [pc, #16]	; (800d2a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d28e:	5ccb      	ldrb	r3, [r1, r3]
 800d290:	f003 031f 	and.w	r3, r3, #31
 800d294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d298:	4618      	mov	r0, r3
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	58024400 	.word	0x58024400
 800d2a0:	0803d330 	.word	0x0803d330

0800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b089      	sub	sp, #36	; 0x24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2ac:	4ba1      	ldr	r3, [pc, #644]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b0:	f003 0303 	and.w	r3, r3, #3
 800d2b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d2b6:	4b9f      	ldr	r3, [pc, #636]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ba:	0b1b      	lsrs	r3, r3, #12
 800d2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d2c2:	4b9c      	ldr	r3, [pc, #624]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c6:	091b      	lsrs	r3, r3, #4
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d2ce:	4b99      	ldr	r3, [pc, #612]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d2:	08db      	lsrs	r3, r3, #3
 800d2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	fb02 f303 	mul.w	r3, r2, r3
 800d2de:	ee07 3a90 	vmov	s15, r3
 800d2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8111 	beq.w	800d514 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	f000 8083 	beq.w	800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	f200 80a1 	bhi.w	800d444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d056      	beq.n	800d3bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d30e:	e099      	b.n	800d444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d310:	4b88      	ldr	r3, [pc, #544]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d02d      	beq.n	800d378 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d31c:	4b85      	ldr	r3, [pc, #532]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	08db      	lsrs	r3, r3, #3
 800d322:	f003 0303 	and.w	r3, r3, #3
 800d326:	4a84      	ldr	r2, [pc, #528]	; (800d538 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d328:	fa22 f303 	lsr.w	r3, r2, r3
 800d32c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	ee07 3a90 	vmov	s15, r3
 800d334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	ee07 3a90 	vmov	s15, r3
 800d33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d346:	4b7b      	ldr	r3, [pc, #492]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d356:	ed97 6a03 	vldr	s12, [r7, #12]
 800d35a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d372:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d376:	e087      	b.n	800d488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	ee07 3a90 	vmov	s15, r3
 800d37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d540 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d38a:	4b6a      	ldr	r3, [pc, #424]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d392:	ee07 3a90 	vmov	s15, r3
 800d396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d39e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3ba:	e065      	b.n	800d488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ce:	4b59      	ldr	r3, [pc, #356]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3fe:	e043      	b.n	800d488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d412:	4b48      	ldr	r3, [pc, #288]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41a:	ee07 3a90 	vmov	s15, r3
 800d41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d422:	ed97 6a03 	vldr	s12, [r7, #12]
 800d426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d43e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d442:	e021      	b.n	800d488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d456:	4b37      	ldr	r3, [pc, #220]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d466:	ed97 6a03 	vldr	s12, [r7, #12]
 800d46a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d486:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d488:	4b2a      	ldr	r3, [pc, #168]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48c:	0a5b      	lsrs	r3, r3, #9
 800d48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d492:	ee07 3a90 	vmov	s15, r3
 800d496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d49e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ae:	ee17 2a90 	vmov	r2, s15
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d4b6:	4b1f      	ldr	r3, [pc, #124]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	0c1b      	lsrs	r3, r3, #16
 800d4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4dc:	ee17 2a90 	vmov	r2, s15
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d4e4:	4b13      	ldr	r3, [pc, #76]	; (800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e8:	0e1b      	lsrs	r3, r3, #24
 800d4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50a:	ee17 2a90 	vmov	r2, s15
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d512:	e008      	b.n	800d526 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	609a      	str	r2, [r3, #8]
}
 800d526:	bf00      	nop
 800d528:	3724      	adds	r7, #36	; 0x24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	58024400 	.word	0x58024400
 800d538:	03d09000 	.word	0x03d09000
 800d53c:	46000000 	.word	0x46000000
 800d540:	4c742400 	.word	0x4c742400
 800d544:	4a742400 	.word	0x4a742400
 800d548:	4af42400 	.word	0x4af42400

0800d54c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b089      	sub	sp, #36	; 0x24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d554:	4ba1      	ldr	r3, [pc, #644]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d558:	f003 0303 	and.w	r3, r3, #3
 800d55c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d55e:	4b9f      	ldr	r3, [pc, #636]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	0d1b      	lsrs	r3, r3, #20
 800d564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d568:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d56a:	4b9c      	ldr	r3, [pc, #624]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56e:	0a1b      	lsrs	r3, r3, #8
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d576:	4b99      	ldr	r3, [pc, #612]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d57a:	08db      	lsrs	r3, r3, #3
 800d57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	fb02 f303 	mul.w	r3, r2, r3
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 8111 	beq.w	800d7bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	f000 8083 	beq.w	800d6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	f200 80a1 	bhi.w	800d6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d003      	beq.n	800d5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d056      	beq.n	800d664 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d5b6:	e099      	b.n	800d6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5b8:	4b88      	ldr	r3, [pc, #544]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 0320 	and.w	r3, r3, #32
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d02d      	beq.n	800d620 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5c4:	4b85      	ldr	r3, [pc, #532]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	08db      	lsrs	r3, r3, #3
 800d5ca:	f003 0303 	and.w	r3, r3, #3
 800d5ce:	4a84      	ldr	r2, [pc, #528]	; (800d7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	ee07 3a90 	vmov	s15, r3
 800d5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ee:	4b7b      	ldr	r3, [pc, #492]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d602:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d61e:	e087      	b.n	800d730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	ee07 3a90 	vmov	s15, r3
 800d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d632:	4b6a      	ldr	r3, [pc, #424]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d63a:	ee07 3a90 	vmov	s15, r3
 800d63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d642:	ed97 6a03 	vldr	s12, [r7, #12]
 800d646:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d65e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d662:	e065      	b.n	800d730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	ee07 3a90 	vmov	s15, r3
 800d66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d66e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d7ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d676:	4b59      	ldr	r3, [pc, #356]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d686:	ed97 6a03 	vldr	s12, [r7, #12]
 800d68a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6a6:	e043      	b.n	800d730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	ee07 3a90 	vmov	s15, r3
 800d6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ba:	4b48      	ldr	r3, [pc, #288]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c2:	ee07 3a90 	vmov	s15, r3
 800d6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6ea:	e021      	b.n	800d730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	ee07 3a90 	vmov	s15, r3
 800d6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d7ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6fe:	4b37      	ldr	r3, [pc, #220]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d706:	ee07 3a90 	vmov	s15, r3
 800d70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d712:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d72e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d730:	4b2a      	ldr	r3, [pc, #168]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d734:	0a5b      	lsrs	r3, r3, #9
 800d736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d73a:	ee07 3a90 	vmov	s15, r3
 800d73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d74a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d756:	ee17 2a90 	vmov	r2, s15
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d75e:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d762:	0c1b      	lsrs	r3, r3, #16
 800d764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d768:	ee07 3a90 	vmov	s15, r3
 800d76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d774:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d778:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d784:	ee17 2a90 	vmov	r2, s15
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d78c:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d790:	0e1b      	lsrs	r3, r3, #24
 800d792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d796:	ee07 3a90 	vmov	s15, r3
 800d79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d79e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7b2:	ee17 2a90 	vmov	r2, s15
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d7ba:	e008      	b.n	800d7ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	609a      	str	r2, [r3, #8]
}
 800d7ce:	bf00      	nop
 800d7d0:	3724      	adds	r7, #36	; 0x24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	58024400 	.word	0x58024400
 800d7e0:	03d09000 	.word	0x03d09000
 800d7e4:	46000000 	.word	0x46000000
 800d7e8:	4c742400 	.word	0x4c742400
 800d7ec:	4a742400 	.word	0x4a742400
 800d7f0:	4af42400 	.word	0x4af42400

0800d7f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b089      	sub	sp, #36	; 0x24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7fc:	4ba0      	ldr	r3, [pc, #640]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d800:	f003 0303 	and.w	r3, r3, #3
 800d804:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d806:	4b9e      	ldr	r3, [pc, #632]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80a:	091b      	lsrs	r3, r3, #4
 800d80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d810:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d812:	4b9b      	ldr	r3, [pc, #620]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d81c:	4b98      	ldr	r3, [pc, #608]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d820:	08db      	lsrs	r3, r3, #3
 800d822:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	fb02 f303 	mul.w	r3, r2, r3
 800d82c:	ee07 3a90 	vmov	s15, r3
 800d830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d834:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f000 8111 	beq.w	800da62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	2b02      	cmp	r3, #2
 800d844:	f000 8083 	beq.w	800d94e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	f200 80a1 	bhi.w	800d992 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d056      	beq.n	800d90a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d85c:	e099      	b.n	800d992 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d85e:	4b88      	ldr	r3, [pc, #544]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f003 0320 	and.w	r3, r3, #32
 800d866:	2b00      	cmp	r3, #0
 800d868:	d02d      	beq.n	800d8c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d86a:	4b85      	ldr	r3, [pc, #532]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	08db      	lsrs	r3, r3, #3
 800d870:	f003 0303 	and.w	r3, r3, #3
 800d874:	4a83      	ldr	r2, [pc, #524]	; (800da84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d876:	fa22 f303 	lsr.w	r3, r2, r3
 800d87a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	ee07 3a90 	vmov	s15, r3
 800d88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d894:	4b7a      	ldr	r3, [pc, #488]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d89c:	ee07 3a90 	vmov	s15, r3
 800d8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800da88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d8c4:	e087      	b.n	800d9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	ee07 3a90 	vmov	s15, r3
 800d8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800da8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d8d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8d8:	4b69      	ldr	r3, [pc, #420]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8e0:	ee07 3a90 	vmov	s15, r3
 800d8e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800da88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d900:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d904:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d908:	e065      	b.n	800d9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	ee07 3a90 	vmov	s15, r3
 800d910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d914:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800da90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d91c:	4b58      	ldr	r3, [pc, #352]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d924:	ee07 3a90 	vmov	s15, r3
 800d928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d92c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d930:	eddf 5a55 	vldr	s11, [pc, #340]	; 800da88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d93c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d944:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d94c:	e043      	b.n	800d9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	ee07 3a90 	vmov	s15, r3
 800d954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d958:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800da94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d95c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d960:	4b47      	ldr	r3, [pc, #284]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d968:	ee07 3a90 	vmov	s15, r3
 800d96c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d970:	ed97 6a03 	vldr	s12, [r7, #12]
 800d974:	eddf 5a44 	vldr	s11, [pc, #272]	; 800da88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d97c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d98c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d990:	e021      	b.n	800d9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	ee07 3a90 	vmov	s15, r3
 800d998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800da8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9a4:	4b36      	ldr	r3, [pc, #216]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ac:	ee07 3a90 	vmov	s15, r3
 800d9b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800da88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d9d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d9d6:	4b2a      	ldr	r3, [pc, #168]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9da:	0a5b      	lsrs	r3, r3, #9
 800d9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9e0:	ee07 3a90 	vmov	s15, r3
 800d9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9fc:	ee17 2a90 	vmov	r2, s15
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800da04:	4b1e      	ldr	r3, [pc, #120]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da08:	0c1b      	lsrs	r3, r3, #16
 800da0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da0e:	ee07 3a90 	vmov	s15, r3
 800da12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da2a:	ee17 2a90 	vmov	r2, s15
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800da32:	4b13      	ldr	r3, [pc, #76]	; (800da80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da36:	0e1b      	lsrs	r3, r3, #24
 800da38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da3c:	ee07 3a90 	vmov	s15, r3
 800da40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da58:	ee17 2a90 	vmov	r2, s15
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800da60:	e008      	b.n	800da74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	609a      	str	r2, [r3, #8]
}
 800da74:	bf00      	nop
 800da76:	3724      	adds	r7, #36	; 0x24
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	58024400 	.word	0x58024400
 800da84:	03d09000 	.word	0x03d09000
 800da88:	46000000 	.word	0x46000000
 800da8c:	4c742400 	.word	0x4c742400
 800da90:	4a742400 	.word	0x4a742400
 800da94:	4af42400 	.word	0x4af42400

0800da98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800daa6:	4b53      	ldr	r3, [pc, #332]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800daa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daaa:	f003 0303 	and.w	r3, r3, #3
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d101      	bne.n	800dab6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e099      	b.n	800dbea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dab6:	4b4f      	ldr	r3, [pc, #316]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a4e      	ldr	r2, [pc, #312]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dabc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dac2:	f7f6 fe2f 	bl	8004724 <HAL_GetTick>
 800dac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dac8:	e008      	b.n	800dadc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800daca:	f7f6 fe2b 	bl	8004724 <HAL_GetTick>
 800dace:	4602      	mov	r2, r0
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d901      	bls.n	800dadc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dad8:	2303      	movs	r3, #3
 800dada:	e086      	b.n	800dbea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dadc:	4b45      	ldr	r3, [pc, #276]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1f0      	bne.n	800daca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dae8:	4b42      	ldr	r3, [pc, #264]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800daea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	031b      	lsls	r3, r3, #12
 800daf6:	493f      	ldr	r1, [pc, #252]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800daf8:	4313      	orrs	r3, r2
 800dafa:	628b      	str	r3, [r1, #40]	; 0x28
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	3b01      	subs	r3, #1
 800db02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	025b      	lsls	r3, r3, #9
 800db0e:	b29b      	uxth	r3, r3
 800db10:	431a      	orrs	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	3b01      	subs	r3, #1
 800db18:	041b      	lsls	r3, r3, #16
 800db1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db1e:	431a      	orrs	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	3b01      	subs	r3, #1
 800db26:	061b      	lsls	r3, r3, #24
 800db28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db2c:	4931      	ldr	r1, [pc, #196]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db2e:	4313      	orrs	r3, r2
 800db30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db32:	4b30      	ldr	r3, [pc, #192]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	695b      	ldr	r3, [r3, #20]
 800db3e:	492d      	ldr	r1, [pc, #180]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db40:	4313      	orrs	r3, r2
 800db42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db44:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db48:	f023 0220 	bic.w	r2, r3, #32
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	699b      	ldr	r3, [r3, #24]
 800db50:	4928      	ldr	r1, [pc, #160]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db52:	4313      	orrs	r3, r2
 800db54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800db56:	4b27      	ldr	r3, [pc, #156]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5a:	4a26      	ldr	r2, [pc, #152]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db5c:	f023 0310 	bic.w	r3, r3, #16
 800db60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800db62:	4b24      	ldr	r3, [pc, #144]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db66:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <RCCEx_PLL2_Config+0x160>)
 800db68:	4013      	ands	r3, r2
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	69d2      	ldr	r2, [r2, #28]
 800db6e:	00d2      	lsls	r2, r2, #3
 800db70:	4920      	ldr	r1, [pc, #128]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db72:	4313      	orrs	r3, r2
 800db74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800db76:	4b1f      	ldr	r3, [pc, #124]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7a:	4a1e      	ldr	r2, [pc, #120]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db7c:	f043 0310 	orr.w	r3, r3, #16
 800db80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d106      	bne.n	800db96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800db88:	4b1a      	ldr	r3, [pc, #104]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8c:	4a19      	ldr	r2, [pc, #100]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db94:	e00f      	b.n	800dbb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d106      	bne.n	800dbaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800db9c:	4b15      	ldr	r3, [pc, #84]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800db9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba0:	4a14      	ldr	r2, [pc, #80]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dba8:	e005      	b.n	800dbb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbaa:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbae:	4a11      	ldr	r2, [pc, #68]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dbb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dbb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a0e      	ldr	r2, [pc, #56]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dbbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dbc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbc2:	f7f6 fdaf 	bl	8004724 <HAL_GetTick>
 800dbc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbc8:	e008      	b.n	800dbdc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800dbca:	f7f6 fdab 	bl	8004724 <HAL_GetTick>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d901      	bls.n	800dbdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	e006      	b.n	800dbea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <RCCEx_PLL2_Config+0x15c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d0f0      	beq.n	800dbca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	58024400 	.word	0x58024400
 800dbf8:	ffff0007 	.word	0xffff0007

0800dbfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc0a:	4b53      	ldr	r3, [pc, #332]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0e:	f003 0303 	and.w	r3, r3, #3
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d101      	bne.n	800dc1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e099      	b.n	800dd4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc1a:	4b4f      	ldr	r3, [pc, #316]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a4e      	ldr	r2, [pc, #312]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc26:	f7f6 fd7d 	bl	8004724 <HAL_GetTick>
 800dc2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc2c:	e008      	b.n	800dc40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800dc2e:	f7f6 fd79 	bl	8004724 <HAL_GetTick>
 800dc32:	4602      	mov	r2, r0
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d901      	bls.n	800dc40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	e086      	b.n	800dd4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc40:	4b45      	ldr	r3, [pc, #276]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1f0      	bne.n	800dc2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc4c:	4b42      	ldr	r3, [pc, #264]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	051b      	lsls	r3, r3, #20
 800dc5a:	493f      	ldr	r1, [pc, #252]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	628b      	str	r3, [r1, #40]	; 0x28
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	025b      	lsls	r3, r3, #9
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	431a      	orrs	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	041b      	lsls	r3, r3, #16
 800dc7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc82:	431a      	orrs	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	061b      	lsls	r3, r3, #24
 800dc8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc90:	4931      	ldr	r1, [pc, #196]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dc96:	4b30      	ldr	r3, [pc, #192]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	492d      	ldr	r1, [pc, #180]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dca4:	4313      	orrs	r3, r2
 800dca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dca8:	4b2b      	ldr	r3, [pc, #172]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	4928      	ldr	r1, [pc, #160]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dcba:	4b27      	ldr	r3, [pc, #156]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcbe:	4a26      	ldr	r2, [pc, #152]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dcc6:	4b24      	ldr	r3, [pc, #144]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcca:	4b24      	ldr	r3, [pc, #144]	; (800dd5c <RCCEx_PLL3_Config+0x160>)
 800dccc:	4013      	ands	r3, r2
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	69d2      	ldr	r2, [r2, #28]
 800dcd2:	00d2      	lsls	r2, r2, #3
 800dcd4:	4920      	ldr	r1, [pc, #128]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dcda:	4b1f      	ldr	r3, [pc, #124]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcde:	4a1e      	ldr	r2, [pc, #120]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d106      	bne.n	800dcfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dcec:	4b1a      	ldr	r3, [pc, #104]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf0:	4a19      	ldr	r2, [pc, #100]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dcf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dcf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dcf8:	e00f      	b.n	800dd1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d106      	bne.n	800dd0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd00:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd04:	4a14      	ldr	r2, [pc, #80]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dd0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd0c:	e005      	b.n	800dd1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd0e:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd12:	4a11      	ldr	r2, [pc, #68]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dd18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd1a:	4b0f      	ldr	r3, [pc, #60]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a0e      	ldr	r2, [pc, #56]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd26:	f7f6 fcfd 	bl	8004724 <HAL_GetTick>
 800dd2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd2c:	e008      	b.n	800dd40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800dd2e:	f7f6 fcf9 	bl	8004724 <HAL_GetTick>
 800dd32:	4602      	mov	r2, r0
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d901      	bls.n	800dd40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	e006      	b.n	800dd4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd40:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <RCCEx_PLL3_Config+0x15c>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d0f0      	beq.n	800dd2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	58024400 	.word	0x58024400
 800dd5c:	ffff0007 	.word	0xffff0007

0800dd60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d101      	bne.n	800dd72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e0f1      	b.n	800df56 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a78      	ldr	r2, [pc, #480]	; (800df60 <HAL_SPI_Init+0x200>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d00f      	beq.n	800dda2 <HAL_SPI_Init+0x42>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a77      	ldr	r2, [pc, #476]	; (800df64 <HAL_SPI_Init+0x204>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d00a      	beq.n	800dda2 <HAL_SPI_Init+0x42>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a75      	ldr	r2, [pc, #468]	; (800df68 <HAL_SPI_Init+0x208>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d005      	beq.n	800dda2 <HAL_SPI_Init+0x42>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	2b0f      	cmp	r3, #15
 800dd9c:	d901      	bls.n	800dda2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e0d9      	b.n	800df56 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f001 fc40 	bl	800f628 <SPI_GetPacketSize>
 800dda8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a6c      	ldr	r2, [pc, #432]	; (800df60 <HAL_SPI_Init+0x200>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d00c      	beq.n	800ddce <HAL_SPI_Init+0x6e>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a6a      	ldr	r2, [pc, #424]	; (800df64 <HAL_SPI_Init+0x204>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d007      	beq.n	800ddce <HAL_SPI_Init+0x6e>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a69      	ldr	r2, [pc, #420]	; (800df68 <HAL_SPI_Init+0x208>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d002      	beq.n	800ddce <HAL_SPI_Init+0x6e>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2b08      	cmp	r3, #8
 800ddcc:	d811      	bhi.n	800ddf2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddd2:	4a63      	ldr	r2, [pc, #396]	; (800df60 <HAL_SPI_Init+0x200>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d009      	beq.n	800ddec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a61      	ldr	r2, [pc, #388]	; (800df64 <HAL_SPI_Init+0x204>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d004      	beq.n	800ddec <HAL_SPI_Init+0x8c>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a60      	ldr	r2, [pc, #384]	; (800df68 <HAL_SPI_Init+0x208>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d104      	bne.n	800ddf6 <HAL_SPI_Init+0x96>
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b10      	cmp	r3, #16
 800ddf0:	d901      	bls.n	800ddf6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e0af      	b.n	800df56 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7f5 fd7a 	bl	8003904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2202      	movs	r2, #2
 800de14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f022 0201 	bic.w	r2, r2, #1
 800de26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800de32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de3c:	d119      	bne.n	800de72 <HAL_SPI_Init+0x112>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de46:	d103      	bne.n	800de50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d008      	beq.n	800de62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10c      	bne.n	800de72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de60:	d107      	bne.n	800de72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	69da      	ldr	r2, [r3, #28]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de7a:	431a      	orrs	r2, r3
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	431a      	orrs	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de84:	ea42 0103 	orr.w	r1, r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68da      	ldr	r2, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	430a      	orrs	r2, r1
 800de92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9c:	431a      	orrs	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea2:	431a      	orrs	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	431a      	orrs	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	431a      	orrs	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	695b      	ldr	r3, [r3, #20]
 800deb4:	431a      	orrs	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	431a      	orrs	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	431a      	orrs	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dec6:	431a      	orrs	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	431a      	orrs	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ded2:	ea42 0103 	orr.w	r1, r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	430a      	orrs	r2, r1
 800dee0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d113      	bne.n	800df12 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800defc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f022 0201 	bic.w	r2, r2, #1
 800df20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	430a      	orrs	r2, r1
 800df42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	40013000 	.word	0x40013000
 800df64:	40003800 	.word	0x40003800
 800df68:	40003c00 	.word	0x40003c00

0800df6c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b08a      	sub	sp, #40	; 0x28
 800df70:	af02      	add	r7, sp, #8
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	603b      	str	r3, [r7, #0]
 800df78:	4613      	mov	r3, r2
 800df7a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3320      	adds	r3, #32
 800df82:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df84:	2300      	movs	r3, #0
 800df86:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d101      	bne.n	800df96 <HAL_SPI_Transmit+0x2a>
 800df92:	2302      	movs	r3, #2
 800df94:	e1d7      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2201      	movs	r2, #1
 800df9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df9e:	f7f6 fbc1 	bl	8004724 <HAL_GetTick>
 800dfa2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d007      	beq.n	800dfc0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfbc:	7efb      	ldrb	r3, [r7, #27]
 800dfbe:	e1c2      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <HAL_SPI_Transmit+0x60>
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d107      	bne.n	800dfdc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfd8:	7efb      	ldrb	r3, [r7, #27]
 800dfda:	e1b4      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2203      	movs	r2, #3
 800dfe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	88fa      	ldrh	r2, [r7, #6]
 800dff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	88fa      	ldrh	r2, [r7, #6]
 800dffe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e02c:	d107      	bne.n	800e03e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e03c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	685a      	ldr	r2, [r3, #4]
 800e044:	4b96      	ldr	r3, [pc, #600]	; (800e2a0 <HAL_SPI_Transmit+0x334>)
 800e046:	4013      	ands	r3, r2
 800e048:	88f9      	ldrh	r1, [r7, #6]
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	6812      	ldr	r2, [r2, #0]
 800e04e:	430b      	orrs	r3, r1
 800e050:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f042 0201 	orr.w	r2, r2, #1
 800e060:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e06a:	d107      	bne.n	800e07c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e07a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	2b0f      	cmp	r3, #15
 800e082:	d947      	bls.n	800e114 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e084:	e03f      	b.n	800e106 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b02      	cmp	r3, #2
 800e092:	d114      	bne.n	800e0be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	6812      	ldr	r2, [r2, #0]
 800e09e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0a4:	1d1a      	adds	r2, r3, #4
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e0bc:	e023      	b.n	800e106 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0be:	f7f6 fb31 	bl	8004724 <HAL_GetTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d803      	bhi.n	800e0d6 <HAL_SPI_Transmit+0x16a>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d4:	d102      	bne.n	800e0dc <HAL_SPI_Transmit+0x170>
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d114      	bne.n	800e106 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f001 f9d5 	bl	800f48c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e102:	2303      	movs	r3, #3
 800e104:	e11f      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1b9      	bne.n	800e086 <HAL_SPI_Transmit+0x11a>
 800e112:	e0f2      	b.n	800e2fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	2b07      	cmp	r3, #7
 800e11a:	f240 80e7 	bls.w	800e2ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e11e:	e05d      	b.n	800e1dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	695b      	ldr	r3, [r3, #20]
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d132      	bne.n	800e194 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e134:	b29b      	uxth	r3, r3
 800e136:	2b01      	cmp	r3, #1
 800e138:	d918      	bls.n	800e16c <HAL_SPI_Transmit+0x200>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d014      	beq.n	800e16c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	6812      	ldr	r2, [r2, #0]
 800e14c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e152:	1d1a      	adds	r2, r3, #4
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3b02      	subs	r3, #2
 800e162:	b29a      	uxth	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e16a:	e037      	b.n	800e1dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e170:	881a      	ldrh	r2, [r3, #0]
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e17a:	1c9a      	adds	r2, r3, #2
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e186:	b29b      	uxth	r3, r3
 800e188:	3b01      	subs	r3, #1
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e192:	e023      	b.n	800e1dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e194:	f7f6 fac6 	bl	8004724 <HAL_GetTick>
 800e198:	4602      	mov	r2, r0
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	683a      	ldr	r2, [r7, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d803      	bhi.n	800e1ac <HAL_SPI_Transmit+0x240>
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1aa:	d102      	bne.n	800e1b2 <HAL_SPI_Transmit+0x246>
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d114      	bne.n	800e1dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f001 f96a 	bl	800f48c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	e0b4      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d19b      	bne.n	800e120 <HAL_SPI_Transmit+0x1b4>
 800e1e8:	e087      	b.n	800e2fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	695b      	ldr	r3, [r3, #20]
 800e1f0:	f003 0302 	and.w	r3, r3, #2
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d155      	bne.n	800e2a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	2b03      	cmp	r3, #3
 800e202:	d918      	bls.n	800e236 <HAL_SPI_Transmit+0x2ca>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e208:	2b40      	cmp	r3, #64	; 0x40
 800e20a:	d914      	bls.n	800e236 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	6812      	ldr	r2, [r2, #0]
 800e216:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e21c:	1d1a      	adds	r2, r3, #4
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e228:	b29b      	uxth	r3, r3
 800e22a:	3b04      	subs	r3, #4
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e234:	e05a      	b.n	800e2ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d917      	bls.n	800e272 <HAL_SPI_Transmit+0x306>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d013      	beq.n	800e272 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e24e:	881a      	ldrh	r2, [r3, #0]
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e258:	1c9a      	adds	r2, r3, #2
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e264:	b29b      	uxth	r3, r3
 800e266:	3b02      	subs	r3, #2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e270:	e03c      	b.n	800e2ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3320      	adds	r3, #32
 800e27c:	7812      	ldrb	r2, [r2, #0]
 800e27e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e284:	1c5a      	adds	r2, r3, #1
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e290:	b29b      	uxth	r3, r3
 800e292:	3b01      	subs	r3, #1
 800e294:	b29a      	uxth	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e29c:	e026      	b.n	800e2ec <HAL_SPI_Transmit+0x380>
 800e29e:	bf00      	nop
 800e2a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2a4:	f7f6 fa3e 	bl	8004724 <HAL_GetTick>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d803      	bhi.n	800e2bc <HAL_SPI_Transmit+0x350>
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ba:	d102      	bne.n	800e2c2 <HAL_SPI_Transmit+0x356>
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d114      	bne.n	800e2ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f001 f8e2 	bl	800f48c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	e02c      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f47f af78 	bne.w	800e1ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	2200      	movs	r2, #0
 800e302:	2108      	movs	r1, #8
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f001 f961 	bl	800f5cc <SPI_WaitOnFlagUntilTimeout>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d007      	beq.n	800e320 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e316:	f043 0220 	orr.w	r2, r3, #32
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f001 f8b3 	bl	800f48c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e000      	b.n	800e346 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e344:	7efb      	ldrb	r3, [r7, #27]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop

0800e350 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08a      	sub	sp, #40	; 0x28
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	4613      	mov	r3, r2
 800e35e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e360:	2300      	movs	r3, #0
 800e362:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3330      	adds	r3, #48	; 0x30
 800e36a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e374:	d112      	bne.n	800e39c <HAL_SPI_Receive+0x4c>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10e      	bne.n	800e39c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2204      	movs	r2, #4
 800e382:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e386:	88fa      	ldrh	r2, [r7, #6]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	4613      	mov	r3, r2
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 f9ce 	bl	800e734 <HAL_SPI_TransmitReceive>
 800e398:	4603      	mov	r3, r0
 800e39a:	e1c7      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d101      	bne.n	800e3aa <HAL_SPI_Receive+0x5a>
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	e1c0      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3b2:	f7f6 f9b7 	bl	8004724 <HAL_GetTick>
 800e3b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d007      	beq.n	800e3d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e3d0:	7ffb      	ldrb	r3, [r7, #31]
 800e3d2:	e1ab      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <HAL_SPI_Receive+0x90>
 800e3da:	88fb      	ldrh	r3, [r7, #6]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d107      	bne.n	800e3f0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e3ec:	7ffb      	ldrb	r3, [r7, #31]
 800e3ee:	e19d      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	88fa      	ldrh	r2, [r7, #6]
 800e40a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	88fa      	ldrh	r2, [r7, #6]
 800e412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2200      	movs	r2, #0
 800e436:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e440:	d107      	bne.n	800e452 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e450:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685a      	ldr	r2, [r3, #4]
 800e458:	4b94      	ldr	r3, [pc, #592]	; (800e6ac <HAL_SPI_Receive+0x35c>)
 800e45a:	4013      	ands	r3, r2
 800e45c:	88f9      	ldrh	r1, [r7, #6]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	6812      	ldr	r2, [r2, #0]
 800e462:	430b      	orrs	r3, r1
 800e464:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f042 0201 	orr.w	r2, r2, #1
 800e474:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e47e:	d107      	bne.n	800e490 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e48e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	2b0f      	cmp	r3, #15
 800e496:	d948      	bls.n	800e52a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e498:	e040      	b.n	800e51c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	695a      	ldr	r2, [r3, #20]
 800e4a0:	f248 0308 	movw	r3, #32776	; 0x8008
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d014      	beq.n	800e4d4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ba:	1d1a      	adds	r2, r3, #4
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4d2:	e023      	b.n	800e51c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4d4:	f7f6 f926 	bl	8004724 <HAL_GetTick>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	683a      	ldr	r2, [r7, #0]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d803      	bhi.n	800e4ec <HAL_SPI_Receive+0x19c>
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d102      	bne.n	800e4f2 <HAL_SPI_Receive+0x1a2>
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d114      	bne.n	800e51c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f000 ffca 	bl	800f48c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e518:	2303      	movs	r3, #3
 800e51a:	e107      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e522:	b29b      	uxth	r3, r3
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1b8      	bne.n	800e49a <HAL_SPI_Receive+0x14a>
 800e528:	e0ed      	b.n	800e706 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	2b07      	cmp	r3, #7
 800e530:	f240 80e2 	bls.w	800e6f8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e534:	e05b      	b.n	800e5ee <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e540:	2b00      	cmp	r3, #0
 800e542:	d030      	beq.n	800e5a6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d014      	beq.n	800e57c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e55c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e562:	1d1a      	adds	r2, r3, #4
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e56e:	b29b      	uxth	r3, r3
 800e570:	3b02      	subs	r3, #2
 800e572:	b29a      	uxth	r2, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e57a:	e038      	b.n	800e5ee <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e580:	69ba      	ldr	r2, [r7, #24]
 800e582:	8812      	ldrh	r2, [r2, #0]
 800e584:	b292      	uxth	r2, r2
 800e586:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e58c:	1c9a      	adds	r2, r3, #2
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e598:	b29b      	uxth	r3, r3
 800e59a:	3b01      	subs	r3, #1
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5a4:	e023      	b.n	800e5ee <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5a6:	f7f6 f8bd 	bl	8004724 <HAL_GetTick>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	683a      	ldr	r2, [r7, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d803      	bhi.n	800e5be <HAL_SPI_Receive+0x26e>
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5bc:	d102      	bne.n	800e5c4 <HAL_SPI_Receive+0x274>
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d114      	bne.n	800e5ee <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f000 ff61 	bl	800f48c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e5ea:	2303      	movs	r3, #3
 800e5ec:	e09e      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d19d      	bne.n	800e536 <HAL_SPI_Receive+0x1e6>
 800e5fa:	e084      	b.n	800e706 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	695b      	ldr	r3, [r3, #20]
 800e602:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e606:	2b00      	cmp	r3, #0
 800e608:	d052      	beq.n	800e6b0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d014      	beq.n	800e642 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e620:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e622:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e628:	1d1a      	adds	r2, r3, #4
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e634:	b29b      	uxth	r3, r3
 800e636:	3b04      	subs	r3, #4
 800e638:	b29a      	uxth	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e640:	e05a      	b.n	800e6f8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	695b      	ldr	r3, [r3, #20]
 800e648:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e64c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e650:	d914      	bls.n	800e67c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	8812      	ldrh	r2, [r2, #0]
 800e65a:	b292      	uxth	r2, r2
 800e65c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e662:	1c9a      	adds	r2, r3, #2
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e66e:	b29b      	uxth	r3, r3
 800e670:	3b02      	subs	r3, #2
 800e672:	b29a      	uxth	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e67a:	e03d      	b.n	800e6f8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e688:	7812      	ldrb	r2, [r2, #0]
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6aa:	e025      	b.n	800e6f8 <HAL_SPI_Receive+0x3a8>
 800e6ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6b0:	f7f6 f838 	bl	8004724 <HAL_GetTick>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	683a      	ldr	r2, [r7, #0]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d803      	bhi.n	800e6c8 <HAL_SPI_Receive+0x378>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c6:	d102      	bne.n	800e6ce <HAL_SPI_Receive+0x37e>
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d114      	bne.n	800e6f8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 fedc 	bl	800f48c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	e019      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	f47f af7b 	bne.w	800e5fc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	f000 fec0 	bl	800f48c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	e000      	b.n	800e72c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e72a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3720      	adds	r7, #32
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08e      	sub	sp, #56	; 0x38
 800e738:	af02      	add	r7, sp, #8
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3320      	adds	r3, #32
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	3330      	adds	r3, #48	; 0x30
 800e756:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d101      	bne.n	800e766 <HAL_SPI_TransmitReceive+0x32>
 800e762:	2302      	movs	r3, #2
 800e764:	e2ce      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e76e:	f7f5 ffd9 	bl	8004724 <HAL_GetTick>
 800e772:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e774:	887b      	ldrh	r3, [r7, #2]
 800e776:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e778:	887b      	ldrh	r3, [r7, #2]
 800e77a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e782:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e78a:	7efb      	ldrb	r3, [r7, #27]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d014      	beq.n	800e7ba <HAL_SPI_TransmitReceive+0x86>
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e796:	d106      	bne.n	800e7a6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e7a0:	7efb      	ldrb	r3, [r7, #27]
 800e7a2:	2b04      	cmp	r3, #4
 800e7a4:	d009      	beq.n	800e7ba <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e7b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7b8:	e2a4      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d005      	beq.n	800e7cc <HAL_SPI_TransmitReceive+0x98>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d002      	beq.n	800e7cc <HAL_SPI_TransmitReceive+0x98>
 800e7c6:	887b      	ldrh	r3, [r7, #2]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d109      	bne.n	800e7e0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e7da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7de:	e291      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b04      	cmp	r3, #4
 800e7ea:	d003      	beq.n	800e7f4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2205      	movs	r2, #5
 800e7f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	887a      	ldrh	r2, [r7, #2]
 800e806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	887a      	ldrh	r2, [r7, #2]
 800e80e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	887a      	ldrh	r2, [r7, #2]
 800e81c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	887a      	ldrh	r2, [r7, #2]
 800e824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2200      	movs	r2, #0
 800e82c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2200      	movs	r2, #0
 800e832:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	4b81      	ldr	r3, [pc, #516]	; (800ea40 <HAL_SPI_TransmitReceive+0x30c>)
 800e83c:	4013      	ands	r3, r2
 800e83e:	8879      	ldrh	r1, [r7, #2]
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	6812      	ldr	r2, [r2, #0]
 800e844:	430b      	orrs	r3, r1
 800e846:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f042 0201 	orr.w	r2, r2, #1
 800e856:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e860:	d107      	bne.n	800e872 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	2b0f      	cmp	r3, #15
 800e878:	d970      	bls.n	800e95c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e87a:	e068      	b.n	800e94e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	f003 0302 	and.w	r3, r3, #2
 800e886:	2b02      	cmp	r3, #2
 800e888:	d11a      	bne.n	800e8c0 <HAL_SPI_TransmitReceive+0x18c>
 800e88a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d017      	beq.n	800e8c0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6812      	ldr	r2, [r2, #0]
 800e89a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8a0:	1d1a      	adds	r2, r3, #4
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8be:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	695a      	ldr	r2, [r3, #20]
 800e8c6:	f248 0308 	movw	r3, #32776	; 0x8008
 800e8ca:	4013      	ands	r3, r2
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d01a      	beq.n	800e906 <HAL_SPI_TransmitReceive+0x1d2>
 800e8d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d017      	beq.n	800e906 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e8e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e6:	1d1a      	adds	r2, r3, #4
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e904:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e906:	f7f5 ff0d 	bl	8004724 <HAL_GetTick>
 800e90a:	4602      	mov	r2, r0
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e912:	429a      	cmp	r2, r3
 800e914:	d803      	bhi.n	800e91e <HAL_SPI_TransmitReceive+0x1ea>
 800e916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e91c:	d102      	bne.n	800e924 <HAL_SPI_TransmitReceive+0x1f0>
 800e91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e920:	2b00      	cmp	r3, #0
 800e922:	d114      	bne.n	800e94e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f000 fdb1 	bl	800f48c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2201      	movs	r2, #1
 800e946:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800e94a:	2303      	movs	r3, #3
 800e94c:	e1da      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e94e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e950:	2b00      	cmp	r3, #0
 800e952:	d193      	bne.n	800e87c <HAL_SPI_TransmitReceive+0x148>
 800e954:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e956:	2b00      	cmp	r3, #0
 800e958:	d190      	bne.n	800e87c <HAL_SPI_TransmitReceive+0x148>
 800e95a:	e1ac      	b.n	800ecb6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	2b07      	cmp	r3, #7
 800e962:	f240 81a0 	bls.w	800eca6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e966:	e0a9      	b.n	800eabc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	f003 0302 	and.w	r3, r3, #2
 800e972:	2b02      	cmp	r3, #2
 800e974:	d139      	bne.n	800e9ea <HAL_SPI_TransmitReceive+0x2b6>
 800e976:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d036      	beq.n	800e9ea <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e97c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d91c      	bls.n	800e9bc <HAL_SPI_TransmitReceive+0x288>
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e986:	2b00      	cmp	r3, #0
 800e988:	d018      	beq.n	800e9bc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	6812      	ldr	r2, [r2, #0]
 800e994:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e99a:	1d1a      	adds	r2, r3, #4
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	3b02      	subs	r3, #2
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e9ba:	e016      	b.n	800e9ea <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9c0:	881a      	ldrh	r2, [r3, #0]
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9ca:	1c9a      	adds	r2, r3, #2
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	695b      	ldr	r3, [r3, #20]
 800e9f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d03d      	beq.n	800ea74 <HAL_SPI_TransmitReceive+0x340>
 800e9f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d03a      	beq.n	800ea74 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	695b      	ldr	r3, [r3, #20]
 800ea04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d01b      	beq.n	800ea44 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ea16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea1c:	1d1a      	adds	r2, r3, #4
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	3b02      	subs	r3, #2
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ea3c:	e01a      	b.n	800ea74 <HAL_SPI_TransmitReceive+0x340>
 800ea3e:	bf00      	nop
 800ea40:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea48:	6a3a      	ldr	r2, [r7, #32]
 800ea4a:	8812      	ldrh	r2, [r2, #0]
 800ea4c:	b292      	uxth	r2, r2
 800ea4e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea54:	1c9a      	adds	r2, r3, #2
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	3b01      	subs	r3, #1
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea72:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea74:	f7f5 fe56 	bl	8004724 <HAL_GetTick>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d803      	bhi.n	800ea8c <HAL_SPI_TransmitReceive+0x358>
 800ea84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea8a:	d102      	bne.n	800ea92 <HAL_SPI_TransmitReceive+0x35e>
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d114      	bne.n	800eabc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ea92:	68f8      	ldr	r0, [r7, #12]
 800ea94:	f000 fcfa 	bl	800f48c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	e123      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eabc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	f47f af52 	bne.w	800e968 <HAL_SPI_TransmitReceive+0x234>
 800eac4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f47f af4e 	bne.w	800e968 <HAL_SPI_TransmitReceive+0x234>
 800eacc:	e0f3      	b.n	800ecb6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	f003 0302 	and.w	r3, r3, #2
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d15a      	bne.n	800eb92 <HAL_SPI_TransmitReceive+0x45e>
 800eadc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d057      	beq.n	800eb92 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eae4:	2b03      	cmp	r3, #3
 800eae6:	d91c      	bls.n	800eb22 <HAL_SPI_TransmitReceive+0x3ee>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaec:	2b40      	cmp	r3, #64	; 0x40
 800eaee:	d918      	bls.n	800eb22 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6812      	ldr	r2, [r2, #0]
 800eafa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb00:	1d1a      	adds	r2, r3, #4
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	3b04      	subs	r3, #4
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eb20:	e037      	b.n	800eb92 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d91b      	bls.n	800eb60 <HAL_SPI_TransmitReceive+0x42c>
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d017      	beq.n	800eb60 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb34:	881a      	ldrh	r2, [r3, #0]
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb3e:	1c9a      	adds	r2, r3, #2
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	3b02      	subs	r3, #2
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eb5e:	e018      	b.n	800eb92 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	3320      	adds	r3, #32
 800eb6a:	7812      	ldrb	r2, [r2, #0]
 800eb6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb72:	1c5a      	adds	r2, r3, #1
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	3b01      	subs	r3, #1
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb90:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d05e      	beq.n	800ec5e <HAL_SPI_TransmitReceive+0x52a>
 800eba0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d05b      	beq.n	800ec5e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d018      	beq.n	800ebe6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ebbe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebc4:	1d1a      	adds	r2, r3, #4
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	3b04      	subs	r3, #4
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebe2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ebe4:	e03b      	b.n	800ec5e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ebf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebf4:	d918      	bls.n	800ec28 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebfa:	6a3a      	ldr	r2, [r7, #32]
 800ebfc:	8812      	ldrh	r2, [r2, #0]
 800ebfe:	b292      	uxth	r2, r2
 800ec00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec06:	1c9a      	adds	r2, r3, #2
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	3b02      	subs	r3, #2
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec24:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ec26:	e01a      	b.n	800ec5e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec34:	7812      	ldrb	r2, [r2, #0]
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec5e:	f7f5 fd61 	bl	8004724 <HAL_GetTick>
 800ec62:	4602      	mov	r2, r0
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d803      	bhi.n	800ec76 <HAL_SPI_TransmitReceive+0x542>
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec74:	d102      	bne.n	800ec7c <HAL_SPI_TransmitReceive+0x548>
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d114      	bne.n	800eca6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 fc05 	bl	800f48c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2200      	movs	r2, #0
 800ec86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800eca2:	2303      	movs	r3, #3
 800eca4:	e02e      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f47f af10 	bne.w	800eace <HAL_SPI_TransmitReceive+0x39a>
 800ecae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f47f af0c 	bne.w	800eace <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ecb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2108      	movs	r1, #8
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f000 fc83 	bl	800f5cc <SPI_WaitOnFlagUntilTimeout>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d007      	beq.n	800ecdc <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd2:	f043 0220 	orr.w	r2, r3, #32
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f000 fbd5 	bl	800f48c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2201      	movs	r2, #1
 800ecee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e001      	b.n	800ed04 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800ed00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3730      	adds	r7, #48	; 0x30
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	4613      	mov	r3, r2
 800ed18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d101      	bne.n	800ed2c <HAL_SPI_Transmit_DMA+0x20>
 800ed28:	2302      	movs	r3, #2
 800ed2a:	e12c      	b.n	800ef86 <HAL_SPI_Transmit_DMA+0x27a>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d007      	beq.n	800ed50 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800ed40:	2302      	movs	r3, #2
 800ed42:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
 800ed4e:	e11a      	b.n	800ef86 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d002      	beq.n	800ed5c <HAL_SPI_Transmit_DMA+0x50>
 800ed56:	88fb      	ldrh	r3, [r7, #6]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d107      	bne.n	800ed6c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
 800ed6a:	e10c      	b.n	800ef86 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2203      	movs	r2, #3
 800ed70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	88fa      	ldrh	r2, [r7, #6]
 800ed86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	88fa      	ldrh	r2, [r7, #6]
 800ed8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2200      	movs	r2, #0
 800ed96:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800edbc:	d107      	bne.n	800edce <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edcc:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	2b0f      	cmp	r3, #15
 800edd4:	d905      	bls.n	800ede2 <HAL_SPI_Transmit_DMA+0xd6>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edda:	699b      	ldr	r3, [r3, #24]
 800eddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ede0:	d10f      	bne.n	800ee02 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ede6:	2b07      	cmp	r3, #7
 800ede8:	d913      	bls.n	800ee12 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edf4:	d00d      	beq.n	800ee12 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edfa:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800edfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee00:	d007      	beq.n	800ee12 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee0e:	7dfb      	ldrb	r3, [r7, #23]
 800ee10:	e0b9      	b.n	800ef86 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	2b07      	cmp	r3, #7
 800ee18:	d820      	bhi.n	800ee5c <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee24:	d109      	bne.n	800ee3a <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	3301      	adds	r3, #1
 800ee30:	105b      	asrs	r3, r3, #1
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee3e:	699b      	ldr	r3, [r3, #24]
 800ee40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee44:	d11e      	bne.n	800ee84 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	3303      	adds	r3, #3
 800ee50:	109b      	asrs	r3, r3, #2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee5a:	e013      	b.n	800ee84 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	2b0f      	cmp	r3, #15
 800ee62:	d80f      	bhi.n	800ee84 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee6e:	d109      	bne.n	800ee84 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	3301      	adds	r3, #1
 800ee7a:	105b      	asrs	r3, r3, #1
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee88:	4a41      	ldr	r2, [pc, #260]	; (800ef90 <HAL_SPI_Transmit_DMA+0x284>)
 800ee8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee90:	4a40      	ldr	r2, [pc, #256]	; (800ef94 <HAL_SPI_Transmit_DMA+0x288>)
 800ee92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee98:	4a3f      	ldr	r2, [pc, #252]	; (800ef98 <HAL_SPI_Transmit_DMA+0x28c>)
 800ee9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eea0:	2200      	movs	r2, #0
 800eea2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	689a      	ldr	r2, [r3, #8]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eeb2:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eebc:	4619      	mov	r1, r3
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3320      	adds	r3, #32
 800eec4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eecc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800eece:	f7f7 f877 	bl	8005fc0 <HAL_DMA_Start_IT>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d013      	beq.n	800ef00 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eede:	f043 0210 	orr.w	r2, r3, #16
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
 800eefe:	e042      	b.n	800ef86 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef0a:	d108      	bne.n	800ef1e <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6859      	ldr	r1, [r3, #4]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	4b21      	ldr	r3, [pc, #132]	; (800ef9c <HAL_SPI_Transmit_DMA+0x290>)
 800ef18:	400b      	ands	r3, r1
 800ef1a:	6053      	str	r3, [r2, #4]
 800ef1c:	e009      	b.n	800ef32 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	685a      	ldr	r2, [r3, #4]
 800ef24:	4b1d      	ldr	r3, [pc, #116]	; (800ef9c <HAL_SPI_Transmit_DMA+0x290>)
 800ef26:	4013      	ands	r3, r2
 800ef28:	88f9      	ldrh	r1, [r7, #6]
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	6812      	ldr	r2, [r2, #0]
 800ef2e:	430b      	orrs	r3, r1
 800ef30:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	689a      	ldr	r2, [r3, #8]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef40:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	691a      	ldr	r2, [r3, #16]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800ef50:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f042 0201 	orr.w	r2, r2, #1
 800ef60:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef6a:	d107      	bne.n	800ef7c <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef7a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	0800f3f7 	.word	0x0800f3f7
 800ef94:	0800f3b1 	.word	0x0800f3b1
 800ef98:	0800f413 	.word	0x0800f413
 800ef9c:	ffff0000 	.word	0xffff0000

0800efa0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08a      	sub	sp, #40	; 0x28
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	695b      	ldr	r3, [r3, #20]
 800efb6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800efb8:	6a3a      	ldr	r2, [r7, #32]
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	4013      	ands	r3, r2
 800efbe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800efc8:	2300      	movs	r3, #0
 800efca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efd2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3330      	adds	r3, #48	; 0x30
 800efda:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d113      	bne.n	800f00e <HAL_SPI_IRQHandler+0x6e>
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	f003 0320 	and.w	r3, r3, #32
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10e      	bne.n	800f00e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d009      	beq.n	800f00e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	4798      	blx	r3
    hspi->RxISR(hspi);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	4798      	blx	r3
    handled = 1UL;
 800f00a:	2301      	movs	r3, #1
 800f00c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f014:	2b00      	cmp	r3, #0
 800f016:	d10f      	bne.n	800f038 <HAL_SPI_IRQHandler+0x98>
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00a      	beq.n	800f038 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d105      	bne.n	800f038 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	4798      	blx	r3
    handled = 1UL;
 800f034:	2301      	movs	r3, #1
 800f036:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	f003 0320 	and.w	r3, r3, #32
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10f      	bne.n	800f062 <HAL_SPI_IRQHandler+0xc2>
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	f003 0302 	and.w	r3, r3, #2
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00a      	beq.n	800f062 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f052:	2b00      	cmp	r3, #0
 800f054:	d105      	bne.n	800f062 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	4798      	blx	r3
    handled = 1UL;
 800f05e:	2301      	movs	r3, #1
 800f060:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	2b00      	cmp	r3, #0
 800f066:	f040 816f 	bne.w	800f348 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	f003 0308 	and.w	r3, r3, #8
 800f070:	2b00      	cmp	r3, #0
 800f072:	f000 80a0 	beq.w	800f1b6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	699a      	ldr	r2, [r3, #24]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f042 0208 	orr.w	r2, r2, #8
 800f084:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	699a      	ldr	r2, [r3, #24]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f042 0210 	orr.w	r2, r2, #16
 800f094:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	699a      	ldr	r2, [r3, #24]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	691a      	ldr	r2, [r3, #16]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f022 0208 	bic.w	r2, r2, #8
 800f0b4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00f      	beq.n	800f0e0 <HAL_SPI_IRQHandler+0x140>
 800f0c0:	7cfb      	ldrb	r3, [r7, #19]
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	d004      	beq.n	800f0d0 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ca:	69db      	ldr	r3, [r3, #28]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d007      	beq.n	800f0e0 <HAL_SPI_IRQHandler+0x140>
 800f0d0:	7cfb      	ldrb	r3, [r7, #19]
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d059      	beq.n	800f18a <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0da:	69db      	ldr	r3, [r3, #28]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d154      	bne.n	800f18a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d13d      	bne.n	800f16a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800f0ee:	e036      	b.n	800f15e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	2b0f      	cmp	r3, #15
 800f0f6:	d90b      	bls.n	800f110 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f100:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f102:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f108:	1d1a      	adds	r2, r3, #4
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	665a      	str	r2, [r3, #100]	; 0x64
 800f10e:	e01d      	b.n	800f14c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	2b07      	cmp	r3, #7
 800f116:	d90b      	bls.n	800f130 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	8812      	ldrh	r2, [r2, #0]
 800f120:	b292      	uxth	r2, r2
 800f122:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f128:	1c9a      	adds	r2, r3, #2
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	665a      	str	r2, [r3, #100]	; 0x64
 800f12e:	e00d      	b.n	800f14c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f13c:	7812      	ldrb	r2, [r2, #0]
 800f13e:	b2d2      	uxtb	r2, r2
 800f140:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f152:	b29b      	uxth	r3, r3
 800f154:	3b01      	subs	r3, #1
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f164:	b29b      	uxth	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1c2      	bne.n	800f0f0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 f98e 	bl	800f48c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d003      	beq.n	800f18a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f90a 	bl	800f39c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800f188:	e0e3      	b.n	800f352 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800f18a:	7cfb      	ldrb	r3, [r7, #19]
 800f18c:	2b05      	cmp	r3, #5
 800f18e:	d103      	bne.n	800f198 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f8ef 	bl	800f374 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800f196:	e0d9      	b.n	800f34c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800f198:	7cfb      	ldrb	r3, [r7, #19]
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	d103      	bne.n	800f1a6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 f8de 	bl	800f360 <HAL_SPI_RxCpltCallback>
    return;
 800f1a4:	e0d2      	b.n	800f34c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800f1a6:	7cfb      	ldrb	r3, [r7, #19]
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	f040 80cf 	bne.w	800f34c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7f2 fc06 	bl	80019c0 <HAL_SPI_TxCpltCallback>
    return;
 800f1b4:	e0ca      	b.n	800f34c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00d      	beq.n	800f1dc <HAL_SPI_IRQHandler+0x23c>
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	f003 0308 	and.w	r3, r3, #8
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d008      	beq.n	800f1dc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	699a      	ldr	r2, [r3, #24]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1d8:	619a      	str	r2, [r3, #24]

    return;
 800f1da:	e0ba      	b.n	800f352 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f000 80b5 	beq.w	800f352 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00f      	beq.n	800f212 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1f8:	f043 0204 	orr.w	r2, r3, #4
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f210:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00f      	beq.n	800f23c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f222:	f043 0201 	orr.w	r2, r3, #1
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699a      	ldr	r2, [r3, #24]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f23a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00f      	beq.n	800f266 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f24c:	f043 0208 	orr.w	r2, r3, #8
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	699a      	ldr	r2, [r3, #24]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f264:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	f003 0320 	and.w	r3, r3, #32
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d00f      	beq.n	800f290 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f276:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	699a      	ldr	r2, [r3, #24]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f042 0220 	orr.w	r2, r2, #32
 800f28e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f296:	2b00      	cmp	r3, #0
 800f298:	d05a      	beq.n	800f350 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f022 0201 	bic.w	r2, r2, #1
 800f2a8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6919      	ldr	r1, [r3, #16]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	4b28      	ldr	r3, [pc, #160]	; (800f358 <HAL_SPI_IRQHandler+0x3b8>)
 800f2b6:	400b      	ands	r3, r1
 800f2b8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f2c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f2c4:	d138      	bne.n	800f338 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	689a      	ldr	r2, [r3, #8]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2d4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d013      	beq.n	800f306 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2e2:	4a1e      	ldr	r2, [pc, #120]	; (800f35c <HAL_SPI_IRQHandler+0x3bc>)
 800f2e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7f7 f8d2 	bl	8006494 <HAL_DMA_Abort_IT>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d007      	beq.n	800f306 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d020      	beq.n	800f350 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f312:	4a12      	ldr	r2, [pc, #72]	; (800f35c <HAL_SPI_IRQHandler+0x3bc>)
 800f314:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7f7 f8ba 	bl	8006494 <HAL_DMA_Abort_IT>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d014      	beq.n	800f350 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f32c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f336:	e00b      	b.n	800f350 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 f82b 	bl	800f39c <HAL_SPI_ErrorCallback>
    return;
 800f346:	e003      	b.n	800f350 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800f348:	bf00      	nop
 800f34a:	e002      	b.n	800f352 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800f34c:	bf00      	nop
 800f34e:	e000      	b.n	800f352 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800f350:	bf00      	nop
  }
}
 800f352:	3728      	adds	r7, #40	; 0x28
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	fffffc94 	.word	0xfffffc94
 800f35c:	0800f459 	.word	0x0800f459

0800f360 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f368:	bf00      	nop
 800f36a:	370c      	adds	r7, #12
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800f37c:	bf00      	nop
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3bc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b07      	cmp	r3, #7
 800f3c8:	d011      	beq.n	800f3ee <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ce:	69db      	ldr	r3, [r3, #28]
 800f3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3d4:	d103      	bne.n	800f3de <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f7f2 faf2 	bl	80019c0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800f3dc:	e007      	b.n	800f3ee <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	691a      	ldr	r2, [r3, #16]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f042 0208 	orr.w	r2, r2, #8
 800f3ec:	611a      	str	r2, [r3, #16]
}
 800f3ee:	bf00      	nop
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f402:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f7ff ffbf 	bl	800f388 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f40a:	bf00      	nop
 800f40c:	3710      	adds	r7, #16
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b084      	sub	sp, #16
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f41e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7f8 f9a7 	bl	8007774 <HAL_DMA_GetError>
 800f426:	4603      	mov	r3, r0
 800f428:	2b02      	cmp	r3, #2
 800f42a:	d011      	beq.n	800f450 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f000 f82d 	bl	800f48c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f438:	f043 0210 	orr.w	r2, r3, #16
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2201      	movs	r2, #1
 800f446:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f7ff ffa6 	bl	800f39c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800f450:	bf00      	nop
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f464:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7ff ff8c 	bl	800f39c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f484:	bf00      	nop
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	695b      	ldr	r3, [r3, #20]
 800f49a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	699a      	ldr	r2, [r3, #24]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f042 0208 	orr.w	r2, r2, #8
 800f4aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	699a      	ldr	r2, [r3, #24]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f042 0210 	orr.w	r2, r2, #16
 800f4ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f022 0201 	bic.w	r2, r2, #1
 800f4ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6919      	ldr	r1, [r3, #16]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	4b3c      	ldr	r3, [pc, #240]	; (800f5c8 <SPI_CloseTransfer+0x13c>)
 800f4d8:	400b      	ands	r3, r1
 800f4da:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	689a      	ldr	r2, [r3, #8]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f4ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b04      	cmp	r3, #4
 800f4f6:	d014      	beq.n	800f522 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f003 0320 	and.w	r3, r3, #32
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00f      	beq.n	800f522 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f508:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	699a      	ldr	r2, [r3, #24]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f042 0220 	orr.w	r2, r2, #32
 800f520:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d014      	beq.n	800f558 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00f      	beq.n	800f558 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f53e:	f043 0204 	orr.w	r2, r3, #4
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	699a      	ldr	r2, [r3, #24]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f556:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00f      	beq.n	800f582 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f568:	f043 0201 	orr.w	r2, r3, #1
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	699a      	ldr	r2, [r3, #24]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f580:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00f      	beq.n	800f5ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f592:	f043 0208 	orr.w	r2, r3, #8
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	699a      	ldr	r2, [r3, #24]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f5aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f5bc:	bf00      	nop
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr
 800f5c8:	fffffc90 	.word	0xfffffc90

0800f5cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	603b      	str	r3, [r7, #0]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f5dc:	e010      	b.n	800f600 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5de:	f7f5 f8a1 	bl	8004724 <HAL_GetTick>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	69ba      	ldr	r2, [r7, #24]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d803      	bhi.n	800f5f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f4:	d102      	bne.n	800f5fc <SPI_WaitOnFlagUntilTimeout+0x30>
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d101      	bne.n	800f600 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	e00f      	b.n	800f620 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	695a      	ldr	r2, [r3, #20]
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	4013      	ands	r3, r2
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	bf0c      	ite	eq
 800f610:	2301      	moveq	r3, #1
 800f612:	2300      	movne	r3, #0
 800f614:	b2db      	uxtb	r3, r3
 800f616:	461a      	mov	r2, r3
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d0df      	beq.n	800f5de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f634:	095b      	lsrs	r3, r3, #5
 800f636:	3301      	adds	r3, #1
 800f638:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	3301      	adds	r3, #1
 800f640:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	3307      	adds	r3, #7
 800f646:	08db      	lsrs	r3, r3, #3
 800f648:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f652:	4618      	mov	r0, r3
 800f654:	3714      	adds	r7, #20
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d101      	bne.n	800f670 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e049      	b.n	800f704 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f676:	b2db      	uxtb	r3, r3
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 f841 	bl	800f70c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2202      	movs	r2, #2
 800f68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	3304      	adds	r3, #4
 800f69a:	4619      	mov	r1, r3
 800f69c:	4610      	mov	r0, r2
 800f69e:	f000 fb33 	bl	800fd08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3708      	adds	r7, #8
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	2b01      	cmp	r3, #1
 800f732:	d001      	beq.n	800f738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f734:	2301      	movs	r3, #1
 800f736:	e054      	b.n	800f7e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2202      	movs	r2, #2
 800f73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68da      	ldr	r2, [r3, #12]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f042 0201 	orr.w	r2, r2, #1
 800f74e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a26      	ldr	r2, [pc, #152]	; (800f7f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d022      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f762:	d01d      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a22      	ldr	r2, [pc, #136]	; (800f7f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d018      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a21      	ldr	r2, [pc, #132]	; (800f7f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d013      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a1f      	ldr	r2, [pc, #124]	; (800f7fc <HAL_TIM_Base_Start_IT+0xdc>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d00e      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a1e      	ldr	r2, [pc, #120]	; (800f800 <HAL_TIM_Base_Start_IT+0xe0>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d009      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a1c      	ldr	r2, [pc, #112]	; (800f804 <HAL_TIM_Base_Start_IT+0xe4>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d004      	beq.n	800f7a0 <HAL_TIM_Base_Start_IT+0x80>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a1b      	ldr	r2, [pc, #108]	; (800f808 <HAL_TIM_Base_Start_IT+0xe8>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d115      	bne.n	800f7cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	689a      	ldr	r2, [r3, #8]
 800f7a6:	4b19      	ldr	r3, [pc, #100]	; (800f80c <HAL_TIM_Base_Start_IT+0xec>)
 800f7a8:	4013      	ands	r3, r2
 800f7aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b06      	cmp	r3, #6
 800f7b0:	d015      	beq.n	800f7de <HAL_TIM_Base_Start_IT+0xbe>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7b8:	d011      	beq.n	800f7de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f042 0201 	orr.w	r2, r2, #1
 800f7c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ca:	e008      	b.n	800f7de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f042 0201 	orr.w	r2, r2, #1
 800f7da:	601a      	str	r2, [r3, #0]
 800f7dc:	e000      	b.n	800f7e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	40010000 	.word	0x40010000
 800f7f4:	40000400 	.word	0x40000400
 800f7f8:	40000800 	.word	0x40000800
 800f7fc:	40000c00 	.word	0x40000c00
 800f800:	40010400 	.word	0x40010400
 800f804:	40001800 	.word	0x40001800
 800f808:	40014000 	.word	0x40014000
 800f80c:	00010007 	.word	0x00010007

0800f810 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d101      	bne.n	800f824 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f820:	2301      	movs	r3, #1
 800f822:	e08f      	b.n	800f944 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d106      	bne.n	800f83e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2200      	movs	r2, #0
 800f834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7f4 fa8b 	bl	8003d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2202      	movs	r2, #2
 800f842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6899      	ldr	r1, [r3, #8]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	4b3e      	ldr	r3, [pc, #248]	; (800f94c <HAL_TIM_Encoder_Init+0x13c>)
 800f852:	400b      	ands	r3, r1
 800f854:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	f000 fa51 	bl	800fd08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	699b      	ldr	r3, [r3, #24]
 800f874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	6a1b      	ldr	r3, [r3, #32]
 800f87c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	697a      	ldr	r2, [r7, #20]
 800f884:	4313      	orrs	r3, r2
 800f886:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f888:	693a      	ldr	r2, [r7, #16]
 800f88a:	4b31      	ldr	r3, [pc, #196]	; (800f950 <HAL_TIM_Encoder_Init+0x140>)
 800f88c:	4013      	ands	r3, r2
 800f88e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	689a      	ldr	r2, [r3, #8]
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	021b      	lsls	r3, r3, #8
 800f89a:	4313      	orrs	r3, r2
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f8a2:	693a      	ldr	r2, [r7, #16]
 800f8a4:	4b2b      	ldr	r3, [pc, #172]	; (800f954 <HAL_TIM_Encoder_Init+0x144>)
 800f8a6:	4013      	ands	r3, r2
 800f8a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f8aa:	693a      	ldr	r2, [r7, #16]
 800f8ac:	4b2a      	ldr	r3, [pc, #168]	; (800f958 <HAL_TIM_Encoder_Init+0x148>)
 800f8ae:	4013      	ands	r3, r2
 800f8b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	68da      	ldr	r2, [r3, #12]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	69db      	ldr	r3, [r3, #28]
 800f8ba:	021b      	lsls	r3, r3, #8
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	693a      	ldr	r2, [r7, #16]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	011a      	lsls	r2, r3, #4
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	031b      	lsls	r3, r3, #12
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f8de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f8e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	695b      	ldr	r3, [r3, #20]
 800f8f0:	011b      	lsls	r3, r3, #4
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	697a      	ldr	r2, [r7, #20]
 800f900:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	693a      	ldr	r2, [r7, #16]
 800f908:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2201      	movs	r2, #1
 800f91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2201      	movs	r2, #1
 800f926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2201      	movs	r2, #1
 800f92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2201      	movs	r2, #1
 800f936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	fffebff8 	.word	0xfffebff8
 800f950:	fffffcfc 	.word	0xfffffcfc
 800f954:	fffff3f3 	.word	0xfffff3f3
 800f958:	ffff0f0f 	.word	0xffff0f0f

0800f95c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f96c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f974:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f97c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f984:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d110      	bne.n	800f9ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d102      	bne.n	800f998 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800f992:	7b7b      	ldrb	r3, [r7, #13]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d001      	beq.n	800f99c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	e069      	b.n	800fa70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2202      	movs	r2, #2
 800f9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9ac:	e031      	b.n	800fa12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b04      	cmp	r3, #4
 800f9b2:	d110      	bne.n	800f9d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d102      	bne.n	800f9c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f9ba:	7b3b      	ldrb	r3, [r7, #12]
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d001      	beq.n	800f9c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e055      	b.n	800fa70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9d4:	e01d      	b.n	800fa12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d108      	bne.n	800f9ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9dc:	7bbb      	ldrb	r3, [r7, #14]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d105      	bne.n	800f9ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9e2:	7b7b      	ldrb	r3, [r7, #13]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d102      	bne.n	800f9ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f9e8:	7b3b      	ldrb	r3, [r7, #12]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d001      	beq.n	800f9f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e03e      	b.n	800fa70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2202      	movs	r2, #2
 800f9f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2202      	movs	r2, #2
 800fa06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2202      	movs	r2, #2
 800fa0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d003      	beq.n	800fa20 <HAL_TIM_Encoder_Start+0xc4>
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	2b04      	cmp	r3, #4
 800fa1c:	d008      	beq.n	800fa30 <HAL_TIM_Encoder_Start+0xd4>
 800fa1e:	e00f      	b.n	800fa40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2201      	movs	r2, #1
 800fa26:	2100      	movs	r1, #0
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f000 fa07 	bl	800fe3c <TIM_CCxChannelCmd>
      break;
 800fa2e:	e016      	b.n	800fa5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2201      	movs	r2, #1
 800fa36:	2104      	movs	r1, #4
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 f9ff 	bl	800fe3c <TIM_CCxChannelCmd>
      break;
 800fa3e:	e00e      	b.n	800fa5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2201      	movs	r2, #1
 800fa46:	2100      	movs	r1, #0
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f000 f9f7 	bl	800fe3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2201      	movs	r2, #1
 800fa54:	2104      	movs	r1, #4
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 f9f0 	bl	800fe3c <TIM_CCxChannelCmd>
      break;
 800fa5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f042 0201 	orr.w	r2, r2, #1
 800fa6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	f003 0302 	and.w	r3, r3, #2
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d122      	bne.n	800fad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	f003 0302 	and.w	r3, r3, #2
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d11b      	bne.n	800fad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f06f 0202 	mvn.w	r2, #2
 800faa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	699b      	ldr	r3, [r3, #24]
 800fab2:	f003 0303 	and.w	r3, r3, #3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d003      	beq.n	800fac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 f905 	bl	800fcca <HAL_TIM_IC_CaptureCallback>
 800fac0:	e005      	b.n	800face <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f8f7 	bl	800fcb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 f908 	bl	800fcde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	691b      	ldr	r3, [r3, #16]
 800fada:	f003 0304 	and.w	r3, r3, #4
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d122      	bne.n	800fb28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	f003 0304 	and.w	r3, r3, #4
 800faec:	2b04      	cmp	r3, #4
 800faee:	d11b      	bne.n	800fb28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f06f 0204 	mvn.w	r2, #4
 800faf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2202      	movs	r2, #2
 800fafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d003      	beq.n	800fb16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f8db 	bl	800fcca <HAL_TIM_IC_CaptureCallback>
 800fb14:	e005      	b.n	800fb22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f8cd 	bl	800fcb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f8de 	bl	800fcde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2200      	movs	r2, #0
 800fb26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	691b      	ldr	r3, [r3, #16]
 800fb2e:	f003 0308 	and.w	r3, r3, #8
 800fb32:	2b08      	cmp	r3, #8
 800fb34:	d122      	bne.n	800fb7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b08      	cmp	r3, #8
 800fb42:	d11b      	bne.n	800fb7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f06f 0208 	mvn.w	r2, #8
 800fb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2204      	movs	r2, #4
 800fb52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	f003 0303 	and.w	r3, r3, #3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f8b1 	bl	800fcca <HAL_TIM_IC_CaptureCallback>
 800fb68:	e005      	b.n	800fb76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 f8a3 	bl	800fcb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 f8b4 	bl	800fcde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	f003 0310 	and.w	r3, r3, #16
 800fb86:	2b10      	cmp	r3, #16
 800fb88:	d122      	bne.n	800fbd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	f003 0310 	and.w	r3, r3, #16
 800fb94:	2b10      	cmp	r3, #16
 800fb96:	d11b      	bne.n	800fbd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f06f 0210 	mvn.w	r2, #16
 800fba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2208      	movs	r2, #8
 800fba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d003      	beq.n	800fbbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f887 	bl	800fcca <HAL_TIM_IC_CaptureCallback>
 800fbbc:	e005      	b.n	800fbca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f879 	bl	800fcb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f88a 	bl	800fcde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d10e      	bne.n	800fbfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	f003 0301 	and.w	r3, r3, #1
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d107      	bne.n	800fbfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f06f 0201 	mvn.w	r2, #1
 800fbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7f3 fb90 	bl	800331c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc06:	2b80      	cmp	r3, #128	; 0x80
 800fc08:	d10e      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc14:	2b80      	cmp	r3, #128	; 0x80
 800fc16:	d107      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 f9c8 	bl	800ffb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc36:	d10e      	bne.n	800fc56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc42:	2b80      	cmp	r3, #128	; 0x80
 800fc44:	d107      	bne.n	800fc56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 f9bb 	bl	800ffcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b40      	cmp	r3, #64	; 0x40
 800fc62:	d10e      	bne.n	800fc82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc6e:	2b40      	cmp	r3, #64	; 0x40
 800fc70:	d107      	bne.n	800fc82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f838 	bl	800fcf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	f003 0320 	and.w	r3, r3, #32
 800fc8c:	2b20      	cmp	r3, #32
 800fc8e:	d10e      	bne.n	800fcae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	f003 0320 	and.w	r3, r3, #32
 800fc9a:	2b20      	cmp	r3, #32
 800fc9c:	d107      	bne.n	800fcae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f06f 0220 	mvn.w	r2, #32
 800fca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f97b 	bl	800ffa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcae:	bf00      	nop
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b083      	sub	sp, #12
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fcbe:	bf00      	nop
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fcca:	b480      	push	{r7}
 800fccc:	b083      	sub	sp, #12
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fcd2:	bf00      	nop
 800fcd4:	370c      	adds	r7, #12
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b083      	sub	sp, #12
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fce6:	bf00      	nop
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fcf2:	b480      	push	{r7}
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fcfa:	bf00      	nop
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
	...

0800fd08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a40      	ldr	r2, [pc, #256]	; (800fe1c <TIM_Base_SetConfig+0x114>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d013      	beq.n	800fd48 <TIM_Base_SetConfig+0x40>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd26:	d00f      	beq.n	800fd48 <TIM_Base_SetConfig+0x40>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4a3d      	ldr	r2, [pc, #244]	; (800fe20 <TIM_Base_SetConfig+0x118>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d00b      	beq.n	800fd48 <TIM_Base_SetConfig+0x40>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4a3c      	ldr	r2, [pc, #240]	; (800fe24 <TIM_Base_SetConfig+0x11c>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d007      	beq.n	800fd48 <TIM_Base_SetConfig+0x40>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a3b      	ldr	r2, [pc, #236]	; (800fe28 <TIM_Base_SetConfig+0x120>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d003      	beq.n	800fd48 <TIM_Base_SetConfig+0x40>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a3a      	ldr	r2, [pc, #232]	; (800fe2c <TIM_Base_SetConfig+0x124>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d108      	bne.n	800fd5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4a2f      	ldr	r2, [pc, #188]	; (800fe1c <TIM_Base_SetConfig+0x114>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d01f      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd68:	d01b      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a2c      	ldr	r2, [pc, #176]	; (800fe20 <TIM_Base_SetConfig+0x118>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d017      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a2b      	ldr	r2, [pc, #172]	; (800fe24 <TIM_Base_SetConfig+0x11c>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d013      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a2a      	ldr	r2, [pc, #168]	; (800fe28 <TIM_Base_SetConfig+0x120>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00f      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a29      	ldr	r2, [pc, #164]	; (800fe2c <TIM_Base_SetConfig+0x124>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d00b      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a28      	ldr	r2, [pc, #160]	; (800fe30 <TIM_Base_SetConfig+0x128>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d007      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a27      	ldr	r2, [pc, #156]	; (800fe34 <TIM_Base_SetConfig+0x12c>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d003      	beq.n	800fda2 <TIM_Base_SetConfig+0x9a>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4a26      	ldr	r2, [pc, #152]	; (800fe38 <TIM_Base_SetConfig+0x130>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d108      	bne.n	800fdb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fda8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	689a      	ldr	r2, [r3, #8]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4a10      	ldr	r2, [pc, #64]	; (800fe1c <TIM_Base_SetConfig+0x114>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d00f      	beq.n	800fe00 <TIM_Base_SetConfig+0xf8>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4a12      	ldr	r2, [pc, #72]	; (800fe2c <TIM_Base_SetConfig+0x124>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d00b      	beq.n	800fe00 <TIM_Base_SetConfig+0xf8>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4a11      	ldr	r2, [pc, #68]	; (800fe30 <TIM_Base_SetConfig+0x128>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d007      	beq.n	800fe00 <TIM_Base_SetConfig+0xf8>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4a10      	ldr	r2, [pc, #64]	; (800fe34 <TIM_Base_SetConfig+0x12c>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d003      	beq.n	800fe00 <TIM_Base_SetConfig+0xf8>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	4a0f      	ldr	r2, [pc, #60]	; (800fe38 <TIM_Base_SetConfig+0x130>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d103      	bne.n	800fe08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	691a      	ldr	r2, [r3, #16]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	615a      	str	r2, [r3, #20]
}
 800fe0e:	bf00      	nop
 800fe10:	3714      	adds	r7, #20
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	40010000 	.word	0x40010000
 800fe20:	40000400 	.word	0x40000400
 800fe24:	40000800 	.word	0x40000800
 800fe28:	40000c00 	.word	0x40000c00
 800fe2c:	40010400 	.word	0x40010400
 800fe30:	40014000 	.word	0x40014000
 800fe34:	40014400 	.word	0x40014400
 800fe38:	40014800 	.word	0x40014800

0800fe3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	f003 031f 	and.w	r3, r3, #31
 800fe4e:	2201      	movs	r2, #1
 800fe50:	fa02 f303 	lsl.w	r3, r2, r3
 800fe54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6a1a      	ldr	r2, [r3, #32]
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	43db      	mvns	r3, r3
 800fe5e:	401a      	ands	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6a1a      	ldr	r2, [r3, #32]
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	f003 031f 	and.w	r3, r3, #31
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	fa01 f303 	lsl.w	r3, r1, r3
 800fe74:	431a      	orrs	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	621a      	str	r2, [r3, #32]
}
 800fe7a:	bf00      	nop
 800fe7c:	371c      	adds	r7, #28
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
	...

0800fe88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d101      	bne.n	800fea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe9c:	2302      	movs	r3, #2
 800fe9e:	e06d      	b.n	800ff7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2202      	movs	r2, #2
 800feac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a30      	ldr	r2, [pc, #192]	; (800ff88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d004      	beq.n	800fed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a2f      	ldr	r2, [pc, #188]	; (800ff8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d108      	bne.n	800fee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800feda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a20      	ldr	r2, [pc, #128]	; (800ff88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d022      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff12:	d01d      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4a1d      	ldr	r2, [pc, #116]	; (800ff90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d018      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a1c      	ldr	r2, [pc, #112]	; (800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d013      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4a1a      	ldr	r2, [pc, #104]	; (800ff98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d00e      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a15      	ldr	r2, [pc, #84]	; (800ff8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d009      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a16      	ldr	r2, [pc, #88]	; (800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d004      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a15      	ldr	r2, [pc, #84]	; (800ffa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d10c      	bne.n	800ff6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	68ba      	ldr	r2, [r7, #8]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	40010000 	.word	0x40010000
 800ff8c:	40010400 	.word	0x40010400
 800ff90:	40000400 	.word	0x40000400
 800ff94:	40000800 	.word	0x40000800
 800ff98:	40000c00 	.word	0x40000c00
 800ff9c:	40001800 	.word	0x40001800
 800ffa0:	40014000 	.word	0x40014000

0800ffa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffac:	bf00      	nop
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ffd4:	bf00      	nop
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d101      	bne.n	800fff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ffee:	2301      	movs	r3, #1
 800fff0:	e042      	b.n	8010078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d106      	bne.n	801000a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7f3 ff7b 	bl	8003f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2224      	movs	r2, #36	; 0x24
 801000e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f022 0201 	bic.w	r2, r2, #1
 8010020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f996 	bl	8010354 <UART_SetConfig>
 8010028:	4603      	mov	r3, r0
 801002a:	2b01      	cmp	r3, #1
 801002c:	d101      	bne.n	8010032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801002e:	2301      	movs	r3, #1
 8010030:	e022      	b.n	8010078 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 fef2 	bl	8010e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	685a      	ldr	r2, [r3, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801004e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	689a      	ldr	r2, [r3, #8]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801005e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f042 0201 	orr.w	r2, r2, #1
 801006e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 ff79 	bl	8010f68 <UART_CheckIdleState>
 8010076:	4603      	mov	r3, r0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08a      	sub	sp, #40	; 0x28
 8010084:	af02      	add	r7, sp, #8
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	4613      	mov	r3, r2
 801008e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010096:	2b20      	cmp	r3, #32
 8010098:	f040 8083 	bne.w	80101a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d002      	beq.n	80100a8 <HAL_UART_Transmit+0x28>
 80100a2:	88fb      	ldrh	r3, [r7, #6]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80100a8:	2301      	movs	r3, #1
 80100aa:	e07b      	b.n	80101a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d101      	bne.n	80100ba <HAL_UART_Transmit+0x3a>
 80100b6:	2302      	movs	r3, #2
 80100b8:	e074      	b.n	80101a4 <HAL_UART_Transmit+0x124>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2221      	movs	r2, #33	; 0x21
 80100ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100d2:	f7f4 fb27 	bl	8004724 <HAL_GetTick>
 80100d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	88fa      	ldrh	r2, [r7, #6]
 80100dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	88fa      	ldrh	r2, [r7, #6]
 80100e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100f0:	d108      	bne.n	8010104 <HAL_UART_Transmit+0x84>
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d104      	bne.n	8010104 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	61bb      	str	r3, [r7, #24]
 8010102:	e003      	b.n	801010c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010108:	2300      	movs	r3, #0
 801010a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2200      	movs	r2, #0
 8010110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8010114:	e02c      	b.n	8010170 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2200      	movs	r2, #0
 801011e:	2180      	movs	r1, #128	; 0x80
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f000 ff6c 	bl	8010ffe <UART_WaitOnFlagUntilTimeout>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d001      	beq.n	8010130 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801012c:	2303      	movs	r3, #3
 801012e:	e039      	b.n	80101a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d10b      	bne.n	801014e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	881b      	ldrh	r3, [r3, #0]
 801013a:	461a      	mov	r2, r3
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010144:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	3302      	adds	r3, #2
 801014a:	61bb      	str	r3, [r7, #24]
 801014c:	e007      	b.n	801015e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	781a      	ldrb	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	3301      	adds	r3, #1
 801015c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010164:	b29b      	uxth	r3, r3
 8010166:	3b01      	subs	r3, #1
 8010168:	b29a      	uxth	r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010176:	b29b      	uxth	r3, r3
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1cc      	bne.n	8010116 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	2200      	movs	r2, #0
 8010184:	2140      	movs	r1, #64	; 0x40
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f000 ff39 	bl	8010ffe <UART_WaitOnFlagUntilTimeout>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8010192:	2303      	movs	r3, #3
 8010194:	e006      	b.n	80101a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2220      	movs	r2, #32
 801019a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	e000      	b.n	80101a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80101a2:	2302      	movs	r3, #2
  }
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3720      	adds	r7, #32
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b08a      	sub	sp, #40	; 0x28
 80101b0:	af02      	add	r7, sp, #8
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	603b      	str	r3, [r7, #0]
 80101b8:	4613      	mov	r3, r2
 80101ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101c2:	2b20      	cmp	r3, #32
 80101c4:	f040 80c0 	bne.w	8010348 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d002      	beq.n	80101d4 <HAL_UART_Receive+0x28>
 80101ce:	88fb      	ldrh	r3, [r7, #6]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d101      	bne.n	80101d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	e0b8      	b.n	801034a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d101      	bne.n	80101e6 <HAL_UART_Receive+0x3a>
 80101e2:	2302      	movs	r3, #2
 80101e4:	e0b1      	b.n	801034a <HAL_UART_Receive+0x19e>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2201      	movs	r2, #1
 80101ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2222      	movs	r2, #34	; 0x22
 80101fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2200      	movs	r2, #0
 8010202:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010204:	f7f4 fa8e 	bl	8004724 <HAL_GetTick>
 8010208:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	88fa      	ldrh	r2, [r7, #6]
 801020e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	88fa      	ldrh	r2, [r7, #6]
 8010216:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010222:	d10e      	bne.n	8010242 <HAL_UART_Receive+0x96>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d105      	bne.n	8010238 <HAL_UART_Receive+0x8c>
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010236:	e02d      	b.n	8010294 <HAL_UART_Receive+0xe8>
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	22ff      	movs	r2, #255	; 0xff
 801023c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010240:	e028      	b.n	8010294 <HAL_UART_Receive+0xe8>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10d      	bne.n	8010266 <HAL_UART_Receive+0xba>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d104      	bne.n	801025c <HAL_UART_Receive+0xb0>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	22ff      	movs	r2, #255	; 0xff
 8010256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801025a:	e01b      	b.n	8010294 <HAL_UART_Receive+0xe8>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	227f      	movs	r2, #127	; 0x7f
 8010260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010264:	e016      	b.n	8010294 <HAL_UART_Receive+0xe8>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801026e:	d10d      	bne.n	801028c <HAL_UART_Receive+0xe0>
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d104      	bne.n	8010282 <HAL_UART_Receive+0xd6>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	227f      	movs	r2, #127	; 0x7f
 801027c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010280:	e008      	b.n	8010294 <HAL_UART_Receive+0xe8>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	223f      	movs	r2, #63	; 0x3f
 8010286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801028a:	e003      	b.n	8010294 <HAL_UART_Receive+0xe8>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2200      	movs	r2, #0
 8010290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801029a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102a4:	d108      	bne.n	80102b8 <HAL_UART_Receive+0x10c>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d104      	bne.n	80102b8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80102ae:	2300      	movs	r3, #0
 80102b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	61bb      	str	r3, [r7, #24]
 80102b6:	e003      	b.n	80102c0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102bc:	2300      	movs	r3, #0
 80102be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80102c8:	e032      	b.n	8010330 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2200      	movs	r2, #0
 80102d2:	2120      	movs	r1, #32
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f000 fe92 	bl	8010ffe <UART_WaitOnFlagUntilTimeout>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d001      	beq.n	80102e4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80102e0:	2303      	movs	r3, #3
 80102e2:	e032      	b.n	801034a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d10c      	bne.n	8010304 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	8a7b      	ldrh	r3, [r7, #18]
 80102f4:	4013      	ands	r3, r2
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	3302      	adds	r3, #2
 8010300:	61bb      	str	r3, [r7, #24]
 8010302:	e00c      	b.n	801031e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801030a:	b2da      	uxtb	r2, r3
 801030c:	8a7b      	ldrh	r3, [r7, #18]
 801030e:	b2db      	uxtb	r3, r3
 8010310:	4013      	ands	r3, r2
 8010312:	b2da      	uxtb	r2, r3
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	3301      	adds	r3, #1
 801031c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010324:	b29b      	uxth	r3, r3
 8010326:	3b01      	subs	r3, #1
 8010328:	b29a      	uxth	r2, r3
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010336:	b29b      	uxth	r3, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1c6      	bne.n	80102ca <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2220      	movs	r2, #32
 8010340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	e000      	b.n	801034a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8010348:	2302      	movs	r3, #2
  }
}
 801034a:	4618      	mov	r0, r3
 801034c:	3720      	adds	r7, #32
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
	...

08010354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010358:	b092      	sub	sp, #72	; 0x48
 801035a:	af00      	add	r7, sp, #0
 801035c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801035e:	2300      	movs	r3, #0
 8010360:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	689a      	ldr	r2, [r3, #8]
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	691b      	ldr	r3, [r3, #16]
 801036c:	431a      	orrs	r2, r3
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	431a      	orrs	r2, r3
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	69db      	ldr	r3, [r3, #28]
 8010378:	4313      	orrs	r3, r2
 801037a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	4bbe      	ldr	r3, [pc, #760]	; (801067c <UART_SetConfig+0x328>)
 8010384:	4013      	ands	r3, r2
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	6812      	ldr	r2, [r2, #0]
 801038a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801038c:	430b      	orrs	r3, r1
 801038e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	68da      	ldr	r2, [r3, #12]
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	430a      	orrs	r2, r1
 80103a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	699b      	ldr	r3, [r3, #24]
 80103aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4ab3      	ldr	r2, [pc, #716]	; (8010680 <UART_SetConfig+0x32c>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d004      	beq.n	80103c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103bc:	4313      	orrs	r3, r2
 80103be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	689a      	ldr	r2, [r3, #8]
 80103c6:	4baf      	ldr	r3, [pc, #700]	; (8010684 <UART_SetConfig+0x330>)
 80103c8:	4013      	ands	r3, r2
 80103ca:	697a      	ldr	r2, [r7, #20]
 80103cc:	6812      	ldr	r2, [r2, #0]
 80103ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103d0:	430b      	orrs	r3, r1
 80103d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103da:	f023 010f 	bic.w	r1, r3, #15
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	430a      	orrs	r2, r1
 80103e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4aa6      	ldr	r2, [pc, #664]	; (8010688 <UART_SetConfig+0x334>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d177      	bne.n	80104e4 <UART_SetConfig+0x190>
 80103f4:	4ba5      	ldr	r3, [pc, #660]	; (801068c <UART_SetConfig+0x338>)
 80103f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80103fc:	2b28      	cmp	r3, #40	; 0x28
 80103fe:	d86d      	bhi.n	80104dc <UART_SetConfig+0x188>
 8010400:	a201      	add	r2, pc, #4	; (adr r2, 8010408 <UART_SetConfig+0xb4>)
 8010402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010406:	bf00      	nop
 8010408:	080104ad 	.word	0x080104ad
 801040c:	080104dd 	.word	0x080104dd
 8010410:	080104dd 	.word	0x080104dd
 8010414:	080104dd 	.word	0x080104dd
 8010418:	080104dd 	.word	0x080104dd
 801041c:	080104dd 	.word	0x080104dd
 8010420:	080104dd 	.word	0x080104dd
 8010424:	080104dd 	.word	0x080104dd
 8010428:	080104b5 	.word	0x080104b5
 801042c:	080104dd 	.word	0x080104dd
 8010430:	080104dd 	.word	0x080104dd
 8010434:	080104dd 	.word	0x080104dd
 8010438:	080104dd 	.word	0x080104dd
 801043c:	080104dd 	.word	0x080104dd
 8010440:	080104dd 	.word	0x080104dd
 8010444:	080104dd 	.word	0x080104dd
 8010448:	080104bd 	.word	0x080104bd
 801044c:	080104dd 	.word	0x080104dd
 8010450:	080104dd 	.word	0x080104dd
 8010454:	080104dd 	.word	0x080104dd
 8010458:	080104dd 	.word	0x080104dd
 801045c:	080104dd 	.word	0x080104dd
 8010460:	080104dd 	.word	0x080104dd
 8010464:	080104dd 	.word	0x080104dd
 8010468:	080104c5 	.word	0x080104c5
 801046c:	080104dd 	.word	0x080104dd
 8010470:	080104dd 	.word	0x080104dd
 8010474:	080104dd 	.word	0x080104dd
 8010478:	080104dd 	.word	0x080104dd
 801047c:	080104dd 	.word	0x080104dd
 8010480:	080104dd 	.word	0x080104dd
 8010484:	080104dd 	.word	0x080104dd
 8010488:	080104cd 	.word	0x080104cd
 801048c:	080104dd 	.word	0x080104dd
 8010490:	080104dd 	.word	0x080104dd
 8010494:	080104dd 	.word	0x080104dd
 8010498:	080104dd 	.word	0x080104dd
 801049c:	080104dd 	.word	0x080104dd
 80104a0:	080104dd 	.word	0x080104dd
 80104a4:	080104dd 	.word	0x080104dd
 80104a8:	080104d5 	.word	0x080104d5
 80104ac:	2301      	movs	r3, #1
 80104ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104b2:	e222      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104b4:	2304      	movs	r3, #4
 80104b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ba:	e21e      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104bc:	2308      	movs	r3, #8
 80104be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104c2:	e21a      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104c4:	2310      	movs	r3, #16
 80104c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ca:	e216      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104cc:	2320      	movs	r3, #32
 80104ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104d2:	e212      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104d4:	2340      	movs	r3, #64	; 0x40
 80104d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104da:	e20e      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104dc:	2380      	movs	r3, #128	; 0x80
 80104de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104e2:	e20a      	b.n	80108fa <UART_SetConfig+0x5a6>
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a69      	ldr	r2, [pc, #420]	; (8010690 <UART_SetConfig+0x33c>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d130      	bne.n	8010550 <UART_SetConfig+0x1fc>
 80104ee:	4b67      	ldr	r3, [pc, #412]	; (801068c <UART_SetConfig+0x338>)
 80104f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104f2:	f003 0307 	and.w	r3, r3, #7
 80104f6:	2b05      	cmp	r3, #5
 80104f8:	d826      	bhi.n	8010548 <UART_SetConfig+0x1f4>
 80104fa:	a201      	add	r2, pc, #4	; (adr r2, 8010500 <UART_SetConfig+0x1ac>)
 80104fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010500:	08010519 	.word	0x08010519
 8010504:	08010521 	.word	0x08010521
 8010508:	08010529 	.word	0x08010529
 801050c:	08010531 	.word	0x08010531
 8010510:	08010539 	.word	0x08010539
 8010514:	08010541 	.word	0x08010541
 8010518:	2300      	movs	r3, #0
 801051a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801051e:	e1ec      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010520:	2304      	movs	r3, #4
 8010522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010526:	e1e8      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010528:	2308      	movs	r3, #8
 801052a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801052e:	e1e4      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010530:	2310      	movs	r3, #16
 8010532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010536:	e1e0      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010538:	2320      	movs	r3, #32
 801053a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801053e:	e1dc      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010540:	2340      	movs	r3, #64	; 0x40
 8010542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010546:	e1d8      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010548:	2380      	movs	r3, #128	; 0x80
 801054a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801054e:	e1d4      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a4f      	ldr	r2, [pc, #316]	; (8010694 <UART_SetConfig+0x340>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d130      	bne.n	80105bc <UART_SetConfig+0x268>
 801055a:	4b4c      	ldr	r3, [pc, #304]	; (801068c <UART_SetConfig+0x338>)
 801055c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801055e:	f003 0307 	and.w	r3, r3, #7
 8010562:	2b05      	cmp	r3, #5
 8010564:	d826      	bhi.n	80105b4 <UART_SetConfig+0x260>
 8010566:	a201      	add	r2, pc, #4	; (adr r2, 801056c <UART_SetConfig+0x218>)
 8010568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801056c:	08010585 	.word	0x08010585
 8010570:	0801058d 	.word	0x0801058d
 8010574:	08010595 	.word	0x08010595
 8010578:	0801059d 	.word	0x0801059d
 801057c:	080105a5 	.word	0x080105a5
 8010580:	080105ad 	.word	0x080105ad
 8010584:	2300      	movs	r3, #0
 8010586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801058a:	e1b6      	b.n	80108fa <UART_SetConfig+0x5a6>
 801058c:	2304      	movs	r3, #4
 801058e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010592:	e1b2      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010594:	2308      	movs	r3, #8
 8010596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801059a:	e1ae      	b.n	80108fa <UART_SetConfig+0x5a6>
 801059c:	2310      	movs	r3, #16
 801059e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105a2:	e1aa      	b.n	80108fa <UART_SetConfig+0x5a6>
 80105a4:	2320      	movs	r3, #32
 80105a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105aa:	e1a6      	b.n	80108fa <UART_SetConfig+0x5a6>
 80105ac:	2340      	movs	r3, #64	; 0x40
 80105ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105b2:	e1a2      	b.n	80108fa <UART_SetConfig+0x5a6>
 80105b4:	2380      	movs	r3, #128	; 0x80
 80105b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ba:	e19e      	b.n	80108fa <UART_SetConfig+0x5a6>
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a35      	ldr	r2, [pc, #212]	; (8010698 <UART_SetConfig+0x344>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d130      	bne.n	8010628 <UART_SetConfig+0x2d4>
 80105c6:	4b31      	ldr	r3, [pc, #196]	; (801068c <UART_SetConfig+0x338>)
 80105c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105ca:	f003 0307 	and.w	r3, r3, #7
 80105ce:	2b05      	cmp	r3, #5
 80105d0:	d826      	bhi.n	8010620 <UART_SetConfig+0x2cc>
 80105d2:	a201      	add	r2, pc, #4	; (adr r2, 80105d8 <UART_SetConfig+0x284>)
 80105d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d8:	080105f1 	.word	0x080105f1
 80105dc:	080105f9 	.word	0x080105f9
 80105e0:	08010601 	.word	0x08010601
 80105e4:	08010609 	.word	0x08010609
 80105e8:	08010611 	.word	0x08010611
 80105ec:	08010619 	.word	0x08010619
 80105f0:	2300      	movs	r3, #0
 80105f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105f6:	e180      	b.n	80108fa <UART_SetConfig+0x5a6>
 80105f8:	2304      	movs	r3, #4
 80105fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105fe:	e17c      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010600:	2308      	movs	r3, #8
 8010602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010606:	e178      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010608:	2310      	movs	r3, #16
 801060a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801060e:	e174      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010610:	2320      	movs	r3, #32
 8010612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010616:	e170      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010618:	2340      	movs	r3, #64	; 0x40
 801061a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801061e:	e16c      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010620:	2380      	movs	r3, #128	; 0x80
 8010622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010626:	e168      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a1b      	ldr	r2, [pc, #108]	; (801069c <UART_SetConfig+0x348>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d142      	bne.n	80106b8 <UART_SetConfig+0x364>
 8010632:	4b16      	ldr	r3, [pc, #88]	; (801068c <UART_SetConfig+0x338>)
 8010634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010636:	f003 0307 	and.w	r3, r3, #7
 801063a:	2b05      	cmp	r3, #5
 801063c:	d838      	bhi.n	80106b0 <UART_SetConfig+0x35c>
 801063e:	a201      	add	r2, pc, #4	; (adr r2, 8010644 <UART_SetConfig+0x2f0>)
 8010640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010644:	0801065d 	.word	0x0801065d
 8010648:	08010665 	.word	0x08010665
 801064c:	0801066d 	.word	0x0801066d
 8010650:	08010675 	.word	0x08010675
 8010654:	080106a1 	.word	0x080106a1
 8010658:	080106a9 	.word	0x080106a9
 801065c:	2300      	movs	r3, #0
 801065e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010662:	e14a      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010664:	2304      	movs	r3, #4
 8010666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801066a:	e146      	b.n	80108fa <UART_SetConfig+0x5a6>
 801066c:	2308      	movs	r3, #8
 801066e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010672:	e142      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010674:	2310      	movs	r3, #16
 8010676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801067a:	e13e      	b.n	80108fa <UART_SetConfig+0x5a6>
 801067c:	cfff69f3 	.word	0xcfff69f3
 8010680:	58000c00 	.word	0x58000c00
 8010684:	11fff4ff 	.word	0x11fff4ff
 8010688:	40011000 	.word	0x40011000
 801068c:	58024400 	.word	0x58024400
 8010690:	40004400 	.word	0x40004400
 8010694:	40004800 	.word	0x40004800
 8010698:	40004c00 	.word	0x40004c00
 801069c:	40005000 	.word	0x40005000
 80106a0:	2320      	movs	r3, #32
 80106a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106a6:	e128      	b.n	80108fa <UART_SetConfig+0x5a6>
 80106a8:	2340      	movs	r3, #64	; 0x40
 80106aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ae:	e124      	b.n	80108fa <UART_SetConfig+0x5a6>
 80106b0:	2380      	movs	r3, #128	; 0x80
 80106b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106b6:	e120      	b.n	80108fa <UART_SetConfig+0x5a6>
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4acb      	ldr	r2, [pc, #812]	; (80109ec <UART_SetConfig+0x698>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d176      	bne.n	80107b0 <UART_SetConfig+0x45c>
 80106c2:	4bcb      	ldr	r3, [pc, #812]	; (80109f0 <UART_SetConfig+0x69c>)
 80106c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80106ca:	2b28      	cmp	r3, #40	; 0x28
 80106cc:	d86c      	bhi.n	80107a8 <UART_SetConfig+0x454>
 80106ce:	a201      	add	r2, pc, #4	; (adr r2, 80106d4 <UART_SetConfig+0x380>)
 80106d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d4:	08010779 	.word	0x08010779
 80106d8:	080107a9 	.word	0x080107a9
 80106dc:	080107a9 	.word	0x080107a9
 80106e0:	080107a9 	.word	0x080107a9
 80106e4:	080107a9 	.word	0x080107a9
 80106e8:	080107a9 	.word	0x080107a9
 80106ec:	080107a9 	.word	0x080107a9
 80106f0:	080107a9 	.word	0x080107a9
 80106f4:	08010781 	.word	0x08010781
 80106f8:	080107a9 	.word	0x080107a9
 80106fc:	080107a9 	.word	0x080107a9
 8010700:	080107a9 	.word	0x080107a9
 8010704:	080107a9 	.word	0x080107a9
 8010708:	080107a9 	.word	0x080107a9
 801070c:	080107a9 	.word	0x080107a9
 8010710:	080107a9 	.word	0x080107a9
 8010714:	08010789 	.word	0x08010789
 8010718:	080107a9 	.word	0x080107a9
 801071c:	080107a9 	.word	0x080107a9
 8010720:	080107a9 	.word	0x080107a9
 8010724:	080107a9 	.word	0x080107a9
 8010728:	080107a9 	.word	0x080107a9
 801072c:	080107a9 	.word	0x080107a9
 8010730:	080107a9 	.word	0x080107a9
 8010734:	08010791 	.word	0x08010791
 8010738:	080107a9 	.word	0x080107a9
 801073c:	080107a9 	.word	0x080107a9
 8010740:	080107a9 	.word	0x080107a9
 8010744:	080107a9 	.word	0x080107a9
 8010748:	080107a9 	.word	0x080107a9
 801074c:	080107a9 	.word	0x080107a9
 8010750:	080107a9 	.word	0x080107a9
 8010754:	08010799 	.word	0x08010799
 8010758:	080107a9 	.word	0x080107a9
 801075c:	080107a9 	.word	0x080107a9
 8010760:	080107a9 	.word	0x080107a9
 8010764:	080107a9 	.word	0x080107a9
 8010768:	080107a9 	.word	0x080107a9
 801076c:	080107a9 	.word	0x080107a9
 8010770:	080107a9 	.word	0x080107a9
 8010774:	080107a1 	.word	0x080107a1
 8010778:	2301      	movs	r3, #1
 801077a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801077e:	e0bc      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010780:	2304      	movs	r3, #4
 8010782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010786:	e0b8      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010788:	2308      	movs	r3, #8
 801078a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801078e:	e0b4      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010790:	2310      	movs	r3, #16
 8010792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010796:	e0b0      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010798:	2320      	movs	r3, #32
 801079a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801079e:	e0ac      	b.n	80108fa <UART_SetConfig+0x5a6>
 80107a0:	2340      	movs	r3, #64	; 0x40
 80107a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107a6:	e0a8      	b.n	80108fa <UART_SetConfig+0x5a6>
 80107a8:	2380      	movs	r3, #128	; 0x80
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ae:	e0a4      	b.n	80108fa <UART_SetConfig+0x5a6>
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4a8f      	ldr	r2, [pc, #572]	; (80109f4 <UART_SetConfig+0x6a0>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d130      	bne.n	801081c <UART_SetConfig+0x4c8>
 80107ba:	4b8d      	ldr	r3, [pc, #564]	; (80109f0 <UART_SetConfig+0x69c>)
 80107bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107be:	f003 0307 	and.w	r3, r3, #7
 80107c2:	2b05      	cmp	r3, #5
 80107c4:	d826      	bhi.n	8010814 <UART_SetConfig+0x4c0>
 80107c6:	a201      	add	r2, pc, #4	; (adr r2, 80107cc <UART_SetConfig+0x478>)
 80107c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107cc:	080107e5 	.word	0x080107e5
 80107d0:	080107ed 	.word	0x080107ed
 80107d4:	080107f5 	.word	0x080107f5
 80107d8:	080107fd 	.word	0x080107fd
 80107dc:	08010805 	.word	0x08010805
 80107e0:	0801080d 	.word	0x0801080d
 80107e4:	2300      	movs	r3, #0
 80107e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ea:	e086      	b.n	80108fa <UART_SetConfig+0x5a6>
 80107ec:	2304      	movs	r3, #4
 80107ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107f2:	e082      	b.n	80108fa <UART_SetConfig+0x5a6>
 80107f4:	2308      	movs	r3, #8
 80107f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107fa:	e07e      	b.n	80108fa <UART_SetConfig+0x5a6>
 80107fc:	2310      	movs	r3, #16
 80107fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010802:	e07a      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010804:	2320      	movs	r3, #32
 8010806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801080a:	e076      	b.n	80108fa <UART_SetConfig+0x5a6>
 801080c:	2340      	movs	r3, #64	; 0x40
 801080e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010812:	e072      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010814:	2380      	movs	r3, #128	; 0x80
 8010816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081a:	e06e      	b.n	80108fa <UART_SetConfig+0x5a6>
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4a75      	ldr	r2, [pc, #468]	; (80109f8 <UART_SetConfig+0x6a4>)
 8010822:	4293      	cmp	r3, r2
 8010824:	d130      	bne.n	8010888 <UART_SetConfig+0x534>
 8010826:	4b72      	ldr	r3, [pc, #456]	; (80109f0 <UART_SetConfig+0x69c>)
 8010828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082a:	f003 0307 	and.w	r3, r3, #7
 801082e:	2b05      	cmp	r3, #5
 8010830:	d826      	bhi.n	8010880 <UART_SetConfig+0x52c>
 8010832:	a201      	add	r2, pc, #4	; (adr r2, 8010838 <UART_SetConfig+0x4e4>)
 8010834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010838:	08010851 	.word	0x08010851
 801083c:	08010859 	.word	0x08010859
 8010840:	08010861 	.word	0x08010861
 8010844:	08010869 	.word	0x08010869
 8010848:	08010871 	.word	0x08010871
 801084c:	08010879 	.word	0x08010879
 8010850:	2300      	movs	r3, #0
 8010852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010856:	e050      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010858:	2304      	movs	r3, #4
 801085a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801085e:	e04c      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010860:	2308      	movs	r3, #8
 8010862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010866:	e048      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010868:	2310      	movs	r3, #16
 801086a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801086e:	e044      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010870:	2320      	movs	r3, #32
 8010872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010876:	e040      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010878:	2340      	movs	r3, #64	; 0x40
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e03c      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010880:	2380      	movs	r3, #128	; 0x80
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e038      	b.n	80108fa <UART_SetConfig+0x5a6>
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a5b      	ldr	r2, [pc, #364]	; (80109fc <UART_SetConfig+0x6a8>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d130      	bne.n	80108f4 <UART_SetConfig+0x5a0>
 8010892:	4b57      	ldr	r3, [pc, #348]	; (80109f0 <UART_SetConfig+0x69c>)
 8010894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010896:	f003 0307 	and.w	r3, r3, #7
 801089a:	2b05      	cmp	r3, #5
 801089c:	d826      	bhi.n	80108ec <UART_SetConfig+0x598>
 801089e:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <UART_SetConfig+0x550>)
 80108a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a4:	080108bd 	.word	0x080108bd
 80108a8:	080108c5 	.word	0x080108c5
 80108ac:	080108cd 	.word	0x080108cd
 80108b0:	080108d5 	.word	0x080108d5
 80108b4:	080108dd 	.word	0x080108dd
 80108b8:	080108e5 	.word	0x080108e5
 80108bc:	2302      	movs	r3, #2
 80108be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c2:	e01a      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108c4:	2304      	movs	r3, #4
 80108c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ca:	e016      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108cc:	2308      	movs	r3, #8
 80108ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d2:	e012      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108d4:	2310      	movs	r3, #16
 80108d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108da:	e00e      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108dc:	2320      	movs	r3, #32
 80108de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108e2:	e00a      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108e4:	2340      	movs	r3, #64	; 0x40
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ea:	e006      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108ec:	2380      	movs	r3, #128	; 0x80
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f2:	e002      	b.n	80108fa <UART_SetConfig+0x5a6>
 80108f4:	2380      	movs	r3, #128	; 0x80
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4a3f      	ldr	r2, [pc, #252]	; (80109fc <UART_SetConfig+0x6a8>)
 8010900:	4293      	cmp	r3, r2
 8010902:	f040 80f8 	bne.w	8010af6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010906:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801090a:	2b20      	cmp	r3, #32
 801090c:	dc46      	bgt.n	801099c <UART_SetConfig+0x648>
 801090e:	2b02      	cmp	r3, #2
 8010910:	f2c0 8082 	blt.w	8010a18 <UART_SetConfig+0x6c4>
 8010914:	3b02      	subs	r3, #2
 8010916:	2b1e      	cmp	r3, #30
 8010918:	d87e      	bhi.n	8010a18 <UART_SetConfig+0x6c4>
 801091a:	a201      	add	r2, pc, #4	; (adr r2, 8010920 <UART_SetConfig+0x5cc>)
 801091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010920:	080109a3 	.word	0x080109a3
 8010924:	08010a19 	.word	0x08010a19
 8010928:	080109ab 	.word	0x080109ab
 801092c:	08010a19 	.word	0x08010a19
 8010930:	08010a19 	.word	0x08010a19
 8010934:	08010a19 	.word	0x08010a19
 8010938:	080109bb 	.word	0x080109bb
 801093c:	08010a19 	.word	0x08010a19
 8010940:	08010a19 	.word	0x08010a19
 8010944:	08010a19 	.word	0x08010a19
 8010948:	08010a19 	.word	0x08010a19
 801094c:	08010a19 	.word	0x08010a19
 8010950:	08010a19 	.word	0x08010a19
 8010954:	08010a19 	.word	0x08010a19
 8010958:	080109cb 	.word	0x080109cb
 801095c:	08010a19 	.word	0x08010a19
 8010960:	08010a19 	.word	0x08010a19
 8010964:	08010a19 	.word	0x08010a19
 8010968:	08010a19 	.word	0x08010a19
 801096c:	08010a19 	.word	0x08010a19
 8010970:	08010a19 	.word	0x08010a19
 8010974:	08010a19 	.word	0x08010a19
 8010978:	08010a19 	.word	0x08010a19
 801097c:	08010a19 	.word	0x08010a19
 8010980:	08010a19 	.word	0x08010a19
 8010984:	08010a19 	.word	0x08010a19
 8010988:	08010a19 	.word	0x08010a19
 801098c:	08010a19 	.word	0x08010a19
 8010990:	08010a19 	.word	0x08010a19
 8010994:	08010a19 	.word	0x08010a19
 8010998:	08010a0b 	.word	0x08010a0b
 801099c:	2b40      	cmp	r3, #64	; 0x40
 801099e:	d037      	beq.n	8010a10 <UART_SetConfig+0x6bc>
 80109a0:	e03a      	b.n	8010a18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80109a2:	f7fc fc69 	bl	800d278 <HAL_RCCEx_GetD3PCLK1Freq>
 80109a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109a8:	e03c      	b.n	8010a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fc fc78 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80109b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109b8:	e034      	b.n	8010a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109ba:	f107 0318 	add.w	r3, r7, #24
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fc fdc4 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109c8:	e02c      	b.n	8010a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109ca:	4b09      	ldr	r3, [pc, #36]	; (80109f0 <UART_SetConfig+0x69c>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f003 0320 	and.w	r3, r3, #32
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d016      	beq.n	8010a04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80109d6:	4b06      	ldr	r3, [pc, #24]	; (80109f0 <UART_SetConfig+0x69c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	08db      	lsrs	r3, r3, #3
 80109dc:	f003 0303 	and.w	r3, r3, #3
 80109e0:	4a07      	ldr	r2, [pc, #28]	; (8010a00 <UART_SetConfig+0x6ac>)
 80109e2:	fa22 f303 	lsr.w	r3, r2, r3
 80109e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80109e8:	e01c      	b.n	8010a24 <UART_SetConfig+0x6d0>
 80109ea:	bf00      	nop
 80109ec:	40011400 	.word	0x40011400
 80109f0:	58024400 	.word	0x58024400
 80109f4:	40007800 	.word	0x40007800
 80109f8:	40007c00 	.word	0x40007c00
 80109fc:	58000c00 	.word	0x58000c00
 8010a00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010a04:	4b9d      	ldr	r3, [pc, #628]	; (8010c7c <UART_SetConfig+0x928>)
 8010a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a08:	e00c      	b.n	8010a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a0a:	4b9d      	ldr	r3, [pc, #628]	; (8010c80 <UART_SetConfig+0x92c>)
 8010a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a0e:	e009      	b.n	8010a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a16:	e005      	b.n	8010a24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010a22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f000 81de 	beq.w	8010de8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a30:	4a94      	ldr	r2, [pc, #592]	; (8010c84 <UART_SetConfig+0x930>)
 8010a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a36:	461a      	mov	r2, r3
 8010a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a3e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	4613      	mov	r3, r2
 8010a46:	005b      	lsls	r3, r3, #1
 8010a48:	4413      	add	r3, r2
 8010a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d305      	bcc.n	8010a5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d903      	bls.n	8010a64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010a62:	e1c1      	b.n	8010de8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a66:	2200      	movs	r2, #0
 8010a68:	60bb      	str	r3, [r7, #8]
 8010a6a:	60fa      	str	r2, [r7, #12]
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a70:	4a84      	ldr	r2, [pc, #528]	; (8010c84 <UART_SetConfig+0x930>)
 8010a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	2200      	movs	r2, #0
 8010a7a:	603b      	str	r3, [r7, #0]
 8010a7c:	607a      	str	r2, [r7, #4]
 8010a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010a86:	f7ef fc83 	bl	8000390 <__aeabi_uldivmod>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	4610      	mov	r0, r2
 8010a90:	4619      	mov	r1, r3
 8010a92:	f04f 0200 	mov.w	r2, #0
 8010a96:	f04f 0300 	mov.w	r3, #0
 8010a9a:	020b      	lsls	r3, r1, #8
 8010a9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010aa0:	0202      	lsls	r2, r0, #8
 8010aa2:	6979      	ldr	r1, [r7, #20]
 8010aa4:	6849      	ldr	r1, [r1, #4]
 8010aa6:	0849      	lsrs	r1, r1, #1
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	460c      	mov	r4, r1
 8010aac:	4605      	mov	r5, r0
 8010aae:	eb12 0804 	adds.w	r8, r2, r4
 8010ab2:	eb43 0905 	adc.w	r9, r3, r5
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	469a      	mov	sl, r3
 8010abe:	4693      	mov	fp, r2
 8010ac0:	4652      	mov	r2, sl
 8010ac2:	465b      	mov	r3, fp
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	4649      	mov	r1, r9
 8010ac8:	f7ef fc62 	bl	8000390 <__aeabi_uldivmod>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ada:	d308      	bcc.n	8010aee <UART_SetConfig+0x79a>
 8010adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ae2:	d204      	bcs.n	8010aee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010aea:	60da      	str	r2, [r3, #12]
 8010aec:	e17c      	b.n	8010de8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010aee:	2301      	movs	r3, #1
 8010af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010af4:	e178      	b.n	8010de8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	69db      	ldr	r3, [r3, #28]
 8010afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010afe:	f040 80c5 	bne.w	8010c8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010b02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010b06:	2b20      	cmp	r3, #32
 8010b08:	dc48      	bgt.n	8010b9c <UART_SetConfig+0x848>
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	db7b      	blt.n	8010c06 <UART_SetConfig+0x8b2>
 8010b0e:	2b20      	cmp	r3, #32
 8010b10:	d879      	bhi.n	8010c06 <UART_SetConfig+0x8b2>
 8010b12:	a201      	add	r2, pc, #4	; (adr r2, 8010b18 <UART_SetConfig+0x7c4>)
 8010b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b18:	08010ba3 	.word	0x08010ba3
 8010b1c:	08010bab 	.word	0x08010bab
 8010b20:	08010c07 	.word	0x08010c07
 8010b24:	08010c07 	.word	0x08010c07
 8010b28:	08010bb3 	.word	0x08010bb3
 8010b2c:	08010c07 	.word	0x08010c07
 8010b30:	08010c07 	.word	0x08010c07
 8010b34:	08010c07 	.word	0x08010c07
 8010b38:	08010bc3 	.word	0x08010bc3
 8010b3c:	08010c07 	.word	0x08010c07
 8010b40:	08010c07 	.word	0x08010c07
 8010b44:	08010c07 	.word	0x08010c07
 8010b48:	08010c07 	.word	0x08010c07
 8010b4c:	08010c07 	.word	0x08010c07
 8010b50:	08010c07 	.word	0x08010c07
 8010b54:	08010c07 	.word	0x08010c07
 8010b58:	08010bd3 	.word	0x08010bd3
 8010b5c:	08010c07 	.word	0x08010c07
 8010b60:	08010c07 	.word	0x08010c07
 8010b64:	08010c07 	.word	0x08010c07
 8010b68:	08010c07 	.word	0x08010c07
 8010b6c:	08010c07 	.word	0x08010c07
 8010b70:	08010c07 	.word	0x08010c07
 8010b74:	08010c07 	.word	0x08010c07
 8010b78:	08010c07 	.word	0x08010c07
 8010b7c:	08010c07 	.word	0x08010c07
 8010b80:	08010c07 	.word	0x08010c07
 8010b84:	08010c07 	.word	0x08010c07
 8010b88:	08010c07 	.word	0x08010c07
 8010b8c:	08010c07 	.word	0x08010c07
 8010b90:	08010c07 	.word	0x08010c07
 8010b94:	08010c07 	.word	0x08010c07
 8010b98:	08010bf9 	.word	0x08010bf9
 8010b9c:	2b40      	cmp	r3, #64	; 0x40
 8010b9e:	d02e      	beq.n	8010bfe <UART_SetConfig+0x8aa>
 8010ba0:	e031      	b.n	8010c06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ba2:	f7fa fee3 	bl	800b96c <HAL_RCC_GetPCLK1Freq>
 8010ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ba8:	e033      	b.n	8010c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010baa:	f7fa fef5 	bl	800b998 <HAL_RCC_GetPCLK2Freq>
 8010bae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010bb0:	e02f      	b.n	8010c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fc fb74 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bc0:	e027      	b.n	8010c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bc2:	f107 0318 	add.w	r3, r7, #24
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fc fcc0 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bd0:	e01f      	b.n	8010c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bd2:	4b2d      	ldr	r3, [pc, #180]	; (8010c88 <UART_SetConfig+0x934>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f003 0320 	and.w	r3, r3, #32
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d009      	beq.n	8010bf2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010bde:	4b2a      	ldr	r3, [pc, #168]	; (8010c88 <UART_SetConfig+0x934>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	08db      	lsrs	r3, r3, #3
 8010be4:	f003 0303 	and.w	r3, r3, #3
 8010be8:	4a24      	ldr	r2, [pc, #144]	; (8010c7c <UART_SetConfig+0x928>)
 8010bea:	fa22 f303 	lsr.w	r3, r2, r3
 8010bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010bf0:	e00f      	b.n	8010c12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010bf2:	4b22      	ldr	r3, [pc, #136]	; (8010c7c <UART_SetConfig+0x928>)
 8010bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bf6:	e00c      	b.n	8010c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010bf8:	4b21      	ldr	r3, [pc, #132]	; (8010c80 <UART_SetConfig+0x92c>)
 8010bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bfc:	e009      	b.n	8010c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c04:	e005      	b.n	8010c12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010c06:	2300      	movs	r3, #0
 8010c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f000 80e7 	beq.w	8010de8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1e:	4a19      	ldr	r2, [pc, #100]	; (8010c84 <UART_SetConfig+0x930>)
 8010c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c24:	461a      	mov	r2, r3
 8010c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c2c:	005a      	lsls	r2, r3, #1
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	085b      	lsrs	r3, r3, #1
 8010c34:	441a      	add	r2, r3
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c42:	2b0f      	cmp	r3, #15
 8010c44:	d916      	bls.n	8010c74 <UART_SetConfig+0x920>
 8010c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c4c:	d212      	bcs.n	8010c74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	f023 030f 	bic.w	r3, r3, #15
 8010c56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	085b      	lsrs	r3, r3, #1
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	f003 0307 	and.w	r3, r3, #7
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010c66:	4313      	orrs	r3, r2
 8010c68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010c70:	60da      	str	r2, [r3, #12]
 8010c72:	e0b9      	b.n	8010de8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010c74:	2301      	movs	r3, #1
 8010c76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010c7a:	e0b5      	b.n	8010de8 <UART_SetConfig+0xa94>
 8010c7c:	03d09000 	.word	0x03d09000
 8010c80:	003d0900 	.word	0x003d0900
 8010c84:	0803d348 	.word	0x0803d348
 8010c88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010c8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c90:	2b20      	cmp	r3, #32
 8010c92:	dc49      	bgt.n	8010d28 <UART_SetConfig+0x9d4>
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	db7c      	blt.n	8010d92 <UART_SetConfig+0xa3e>
 8010c98:	2b20      	cmp	r3, #32
 8010c9a:	d87a      	bhi.n	8010d92 <UART_SetConfig+0xa3e>
 8010c9c:	a201      	add	r2, pc, #4	; (adr r2, 8010ca4 <UART_SetConfig+0x950>)
 8010c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca2:	bf00      	nop
 8010ca4:	08010d2f 	.word	0x08010d2f
 8010ca8:	08010d37 	.word	0x08010d37
 8010cac:	08010d93 	.word	0x08010d93
 8010cb0:	08010d93 	.word	0x08010d93
 8010cb4:	08010d3f 	.word	0x08010d3f
 8010cb8:	08010d93 	.word	0x08010d93
 8010cbc:	08010d93 	.word	0x08010d93
 8010cc0:	08010d93 	.word	0x08010d93
 8010cc4:	08010d4f 	.word	0x08010d4f
 8010cc8:	08010d93 	.word	0x08010d93
 8010ccc:	08010d93 	.word	0x08010d93
 8010cd0:	08010d93 	.word	0x08010d93
 8010cd4:	08010d93 	.word	0x08010d93
 8010cd8:	08010d93 	.word	0x08010d93
 8010cdc:	08010d93 	.word	0x08010d93
 8010ce0:	08010d93 	.word	0x08010d93
 8010ce4:	08010d5f 	.word	0x08010d5f
 8010ce8:	08010d93 	.word	0x08010d93
 8010cec:	08010d93 	.word	0x08010d93
 8010cf0:	08010d93 	.word	0x08010d93
 8010cf4:	08010d93 	.word	0x08010d93
 8010cf8:	08010d93 	.word	0x08010d93
 8010cfc:	08010d93 	.word	0x08010d93
 8010d00:	08010d93 	.word	0x08010d93
 8010d04:	08010d93 	.word	0x08010d93
 8010d08:	08010d93 	.word	0x08010d93
 8010d0c:	08010d93 	.word	0x08010d93
 8010d10:	08010d93 	.word	0x08010d93
 8010d14:	08010d93 	.word	0x08010d93
 8010d18:	08010d93 	.word	0x08010d93
 8010d1c:	08010d93 	.word	0x08010d93
 8010d20:	08010d93 	.word	0x08010d93
 8010d24:	08010d85 	.word	0x08010d85
 8010d28:	2b40      	cmp	r3, #64	; 0x40
 8010d2a:	d02e      	beq.n	8010d8a <UART_SetConfig+0xa36>
 8010d2c:	e031      	b.n	8010d92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d2e:	f7fa fe1d 	bl	800b96c <HAL_RCC_GetPCLK1Freq>
 8010d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d34:	e033      	b.n	8010d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d36:	f7fa fe2f 	bl	800b998 <HAL_RCC_GetPCLK2Freq>
 8010d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d3c:	e02f      	b.n	8010d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fc faae 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d4c:	e027      	b.n	8010d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d4e:	f107 0318 	add.w	r3, r7, #24
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fc fbfa 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d5c:	e01f      	b.n	8010d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d5e:	4b2d      	ldr	r3, [pc, #180]	; (8010e14 <UART_SetConfig+0xac0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f003 0320 	and.w	r3, r3, #32
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d009      	beq.n	8010d7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d6a:	4b2a      	ldr	r3, [pc, #168]	; (8010e14 <UART_SetConfig+0xac0>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	08db      	lsrs	r3, r3, #3
 8010d70:	f003 0303 	and.w	r3, r3, #3
 8010d74:	4a28      	ldr	r2, [pc, #160]	; (8010e18 <UART_SetConfig+0xac4>)
 8010d76:	fa22 f303 	lsr.w	r3, r2, r3
 8010d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d7c:	e00f      	b.n	8010d9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010d7e:	4b26      	ldr	r3, [pc, #152]	; (8010e18 <UART_SetConfig+0xac4>)
 8010d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d82:	e00c      	b.n	8010d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d84:	4b25      	ldr	r3, [pc, #148]	; (8010e1c <UART_SetConfig+0xac8>)
 8010d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d88:	e009      	b.n	8010d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d90:	e005      	b.n	8010d9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010d92:	2300      	movs	r3, #0
 8010d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8010d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d021      	beq.n	8010de8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da8:	4a1d      	ldr	r2, [pc, #116]	; (8010e20 <UART_SetConfig+0xacc>)
 8010daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dae:	461a      	mov	r2, r3
 8010db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	085b      	lsrs	r3, r3, #1
 8010dbc:	441a      	add	r2, r3
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	2b0f      	cmp	r3, #15
 8010dcc:	d909      	bls.n	8010de2 <UART_SetConfig+0xa8e>
 8010dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dd4:	d205      	bcs.n	8010de2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	60da      	str	r2, [r3, #12]
 8010de0:	e002      	b.n	8010de8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010de2:	2301      	movs	r3, #1
 8010de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	2201      	movs	r2, #1
 8010dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2200      	movs	r2, #0
 8010e02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010e04:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3748      	adds	r7, #72	; 0x48
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e12:	bf00      	nop
 8010e14:	58024400 	.word	0x58024400
 8010e18:	03d09000 	.word	0x03d09000
 8010e1c:	003d0900 	.word	0x003d0900
 8010e20:	0803d348 	.word	0x0803d348

08010e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e30:	f003 0301 	and.w	r3, r3, #1
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00a      	beq.n	8010e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	430a      	orrs	r2, r1
 8010e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e52:	f003 0302 	and.w	r3, r3, #2
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00a      	beq.n	8010e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	430a      	orrs	r2, r1
 8010e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e74:	f003 0304 	and.w	r3, r3, #4
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00a      	beq.n	8010e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e96:	f003 0308 	and.w	r3, r3, #8
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00a      	beq.n	8010eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	430a      	orrs	r2, r1
 8010eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb8:	f003 0310 	and.w	r3, r3, #16
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00a      	beq.n	8010ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	430a      	orrs	r2, r1
 8010ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eda:	f003 0320 	and.w	r3, r3, #32
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	430a      	orrs	r2, r1
 8010ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01a      	beq.n	8010f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	430a      	orrs	r2, r1
 8010f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f22:	d10a      	bne.n	8010f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	430a      	orrs	r2, r1
 8010f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00a      	beq.n	8010f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	430a      	orrs	r2, r1
 8010f5a:	605a      	str	r2, [r3, #4]
  }
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b086      	sub	sp, #24
 8010f6c:	af02      	add	r7, sp, #8
 8010f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f78:	f7f3 fbd4 	bl	8004724 <HAL_GetTick>
 8010f7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f003 0308 	and.w	r3, r3, #8
 8010f88:	2b08      	cmp	r3, #8
 8010f8a:	d10e      	bne.n	8010faa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 f82f 	bl	8010ffe <UART_WaitOnFlagUntilTimeout>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d001      	beq.n	8010faa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	e025      	b.n	8010ff6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f003 0304 	and.w	r3, r3, #4
 8010fb4:	2b04      	cmp	r3, #4
 8010fb6:	d10e      	bne.n	8010fd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010fbc:	9300      	str	r3, [sp, #0]
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 f819 	bl	8010ffe <UART_WaitOnFlagUntilTimeout>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fd2:	2303      	movs	r3, #3
 8010fd4:	e00f      	b.n	8010ff6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2220      	movs	r2, #32
 8010fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2220      	movs	r2, #32
 8010fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b09c      	sub	sp, #112	; 0x70
 8011002:	af00      	add	r7, sp, #0
 8011004:	60f8      	str	r0, [r7, #12]
 8011006:	60b9      	str	r1, [r7, #8]
 8011008:	603b      	str	r3, [r7, #0]
 801100a:	4613      	mov	r3, r2
 801100c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801100e:	e0a9      	b.n	8011164 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011016:	f000 80a5 	beq.w	8011164 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801101a:	f7f3 fb83 	bl	8004724 <HAL_GetTick>
 801101e:	4602      	mov	r2, r0
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	1ad3      	subs	r3, r2, r3
 8011024:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011026:	429a      	cmp	r2, r3
 8011028:	d302      	bcc.n	8011030 <UART_WaitOnFlagUntilTimeout+0x32>
 801102a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801102c:	2b00      	cmp	r3, #0
 801102e:	d140      	bne.n	80110b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011038:	e853 3f00 	ldrex	r3, [r3]
 801103c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801103e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011044:	667b      	str	r3, [r7, #100]	; 0x64
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	461a      	mov	r2, r3
 801104c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801104e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011050:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011056:	e841 2300 	strex	r3, r2, [r1]
 801105a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801105c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1e6      	bne.n	8011030 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	3308      	adds	r3, #8
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801106c:	e853 3f00 	ldrex	r3, [r3]
 8011070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011074:	f023 0301 	bic.w	r3, r3, #1
 8011078:	663b      	str	r3, [r7, #96]	; 0x60
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3308      	adds	r3, #8
 8011080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011082:	64ba      	str	r2, [r7, #72]	; 0x48
 8011084:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801108a:	e841 2300 	strex	r3, r2, [r1]
 801108e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011092:	2b00      	cmp	r3, #0
 8011094:	d1e5      	bne.n	8011062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2220      	movs	r2, #32
 801109a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2220      	movs	r2, #32
 80110a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80110ae:	2303      	movs	r3, #3
 80110b0:	e069      	b.n	8011186 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f003 0304 	and.w	r3, r3, #4
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d051      	beq.n	8011164 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	69db      	ldr	r3, [r3, #28]
 80110c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110ce:	d149      	bne.n	8011164 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e2:	e853 3f00 	ldrex	r3, [r3]
 80110e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80110ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	461a      	mov	r2, r3
 80110f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110f8:	637b      	str	r3, [r7, #52]	; 0x34
 80110fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80110fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011100:	e841 2300 	strex	r3, r2, [r1]
 8011104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	2b00      	cmp	r3, #0
 801110a:	d1e6      	bne.n	80110da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	3308      	adds	r3, #8
 8011112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	e853 3f00 	ldrex	r3, [r3]
 801111a:	613b      	str	r3, [r7, #16]
   return(result);
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	f023 0301 	bic.w	r3, r3, #1
 8011122:	66bb      	str	r3, [r7, #104]	; 0x68
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	3308      	adds	r3, #8
 801112a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801112c:	623a      	str	r2, [r7, #32]
 801112e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011130:	69f9      	ldr	r1, [r7, #28]
 8011132:	6a3a      	ldr	r2, [r7, #32]
 8011134:	e841 2300 	strex	r3, r2, [r1]
 8011138:	61bb      	str	r3, [r7, #24]
   return(result);
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1e5      	bne.n	801110c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2220      	movs	r2, #32
 8011144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2220      	movs	r2, #32
 801114c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2220      	movs	r2, #32
 8011154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2200      	movs	r2, #0
 801115c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011160:	2303      	movs	r3, #3
 8011162:	e010      	b.n	8011186 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	69da      	ldr	r2, [r3, #28]
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	4013      	ands	r3, r2
 801116e:	68ba      	ldr	r2, [r7, #8]
 8011170:	429a      	cmp	r2, r3
 8011172:	bf0c      	ite	eq
 8011174:	2301      	moveq	r3, #1
 8011176:	2300      	movne	r3, #0
 8011178:	b2db      	uxtb	r3, r3
 801117a:	461a      	mov	r2, r3
 801117c:	79fb      	ldrb	r3, [r7, #7]
 801117e:	429a      	cmp	r2, r3
 8011180:	f43f af46 	beq.w	8011010 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011184:	2300      	movs	r3, #0
}
 8011186:	4618      	mov	r0, r3
 8011188:	3770      	adds	r7, #112	; 0x70
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}

0801118e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801118e:	b580      	push	{r7, lr}
 8011190:	b084      	sub	sp, #16
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801119c:	2b01      	cmp	r3, #1
 801119e:	d101      	bne.n	80111a4 <HAL_UARTEx_EnableFifoMode+0x16>
 80111a0:	2302      	movs	r3, #2
 80111a2:	e02b      	b.n	80111fc <HAL_UARTEx_EnableFifoMode+0x6e>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2201      	movs	r2, #1
 80111a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2224      	movs	r2, #36	; 0x24
 80111b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	f022 0201 	bic.w	r2, r2, #1
 80111ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80111d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80111da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f000 f8c3 	bl	8011370 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2220      	movs	r2, #32
 80111ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011212:	2b01      	cmp	r3, #1
 8011214:	d101      	bne.n	801121a <HAL_UARTEx_DisableFifoMode+0x16>
 8011216:	2302      	movs	r3, #2
 8011218:	e027      	b.n	801126a <HAL_UARTEx_DisableFifoMode+0x66>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2201      	movs	r2, #1
 801121e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2224      	movs	r2, #36	; 0x24
 8011226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f022 0201 	bic.w	r2, r2, #1
 8011240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2200      	movs	r2, #0
 801124e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	68fa      	ldr	r2, [r7, #12]
 8011256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2220      	movs	r2, #32
 801125c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2200      	movs	r2, #0
 8011264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3714      	adds	r7, #20
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b084      	sub	sp, #16
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011286:	2b01      	cmp	r3, #1
 8011288:	d101      	bne.n	801128e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801128a:	2302      	movs	r3, #2
 801128c:	e02d      	b.n	80112ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2201      	movs	r2, #1
 8011292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2224      	movs	r2, #36	; 0x24
 801129a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f022 0201 	bic.w	r2, r2, #1
 80112b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	683a      	ldr	r2, [r7, #0]
 80112c6:	430a      	orrs	r2, r1
 80112c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f000 f850 	bl	8011370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2220      	movs	r2, #32
 80112dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b084      	sub	sp, #16
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011302:	2b01      	cmp	r3, #1
 8011304:	d101      	bne.n	801130a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011306:	2302      	movs	r3, #2
 8011308:	e02d      	b.n	8011366 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2201      	movs	r2, #1
 801130e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2224      	movs	r2, #36	; 0x24
 8011316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f022 0201 	bic.w	r2, r2, #1
 8011330:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	430a      	orrs	r2, r1
 8011344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f000 f812 	bl	8011370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2220      	movs	r2, #32
 8011358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2200      	movs	r2, #0
 8011360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
	...

08011370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801137c:	2b00      	cmp	r3, #0
 801137e:	d108      	bne.n	8011392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2201      	movs	r2, #1
 8011384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2201      	movs	r2, #1
 801138c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011390:	e031      	b.n	80113f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011392:	2310      	movs	r3, #16
 8011394:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011396:	2310      	movs	r3, #16
 8011398:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	0e5b      	lsrs	r3, r3, #25
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	f003 0307 	and.w	r3, r3, #7
 80113a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	0f5b      	lsrs	r3, r3, #29
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	f003 0307 	and.w	r3, r3, #7
 80113b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113ba:	7bbb      	ldrb	r3, [r7, #14]
 80113bc:	7b3a      	ldrb	r2, [r7, #12]
 80113be:	4911      	ldr	r1, [pc, #68]	; (8011404 <UARTEx_SetNbDataToProcess+0x94>)
 80113c0:	5c8a      	ldrb	r2, [r1, r2]
 80113c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80113c6:	7b3a      	ldrb	r2, [r7, #12]
 80113c8:	490f      	ldr	r1, [pc, #60]	; (8011408 <UARTEx_SetNbDataToProcess+0x98>)
 80113ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80113d0:	b29a      	uxth	r2, r3
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
 80113da:	7b7a      	ldrb	r2, [r7, #13]
 80113dc:	4909      	ldr	r1, [pc, #36]	; (8011404 <UARTEx_SetNbDataToProcess+0x94>)
 80113de:	5c8a      	ldrb	r2, [r1, r2]
 80113e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80113e4:	7b7a      	ldrb	r2, [r7, #13]
 80113e6:	4908      	ldr	r1, [pc, #32]	; (8011408 <UARTEx_SetNbDataToProcess+0x98>)
 80113e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80113f6:	bf00      	nop
 80113f8:	3714      	adds	r7, #20
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	0803d360 	.word	0x0803d360
 8011408:	0803d368 	.word	0x0803d368

0801140c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d101      	bne.n	801141e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	e03c      	b.n	8011498 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011424:	b2db      	uxtb	r3, r3
 8011426:	2b00      	cmp	r3, #0
 8011428:	d106      	bne.n	8011438 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 f834 	bl	80114a0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2202      	movs	r2, #2
 801143c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f022 0201 	bic.w	r2, r2, #1
 801144e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f9f7 	bl	8011844 <USART_SetConfig>
 8011456:	4603      	mov	r3, r0
 8011458:	2b01      	cmp	r3, #1
 801145a:	d101      	bne.n	8011460 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 801145c:	2301      	movs	r3, #1
 801145e:	e01b      	b.n	8011498 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	685a      	ldr	r2, [r3, #4]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801146e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	689a      	ldr	r2, [r3, #8]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801147e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f042 0201 	orr.w	r2, r2, #1
 801148e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f000 fef7 	bl	8012284 <USART_CheckIdleState>
 8011496:	4603      	mov	r3, r0
}
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <HAL_USART_MspInit>:
  * @brief Initialize the USART MSP.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_MspInit can be implemented in the user file
   */
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b08a      	sub	sp, #40	; 0x28
 80114b8:	af02      	add	r7, sp, #8
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	603b      	str	r3, [r7, #0]
 80114c0:	4613      	mov	r3, r2
 80114c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	f040 8095 	bne.w	80115fc <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <HAL_USART_Transmit+0x2a>
 80114d8:	88fb      	ldrh	r3, [r7, #6]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d101      	bne.n	80114e2 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80114de:	2301      	movs	r3, #1
 80114e0:	e08d      	b.n	80115fe <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d101      	bne.n	80114f0 <HAL_USART_Transmit+0x3c>
 80114ec:	2302      	movs	r3, #2
 80114ee:	e086      	b.n	80115fe <HAL_USART_Transmit+0x14a>
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2201      	movs	r2, #1
 80114f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2212      	movs	r2, #18
 8011502:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011506:	f7f3 f90d 	bl	8004724 <HAL_GetTick>
 801150a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	88fa      	ldrh	r2, [r7, #6]
 8011510:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	88fa      	ldrh	r2, [r7, #6]
 8011516:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	689b      	ldr	r3, [r3, #8]
 801151c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011520:	d108      	bne.n	8011534 <HAL_USART_Transmit+0x80>
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d104      	bne.n	8011534 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 801152a:	2300      	movs	r3, #0
 801152c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	61bb      	str	r3, [r7, #24]
 8011532:	e003      	b.n	801153c <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8011538:	2300      	movs	r3, #0
 801153a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 801153c:	e02a      	b.n	8011594 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	2200      	movs	r2, #0
 8011546:	2180      	movs	r1, #128	; 0x80
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f000 f945 	bl	80117d8 <USART_WaitOnFlagUntilTimeout>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d001      	beq.n	8011558 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8011554:	2303      	movs	r3, #3
 8011556:	e052      	b.n	80115fe <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10b      	bne.n	8011576 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	461a      	mov	r2, r3
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801156c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	3302      	adds	r3, #2
 8011572:	61bb      	str	r3, [r7, #24]
 8011574:	e007      	b.n	8011586 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	781a      	ldrb	r2, [r3, #0]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	3301      	adds	r3, #1
 8011584:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801158a:	b29b      	uxth	r3, r3
 801158c:	3b01      	subs	r3, #1
 801158e:	b29a      	uxth	r2, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011598:	b29b      	uxth	r3, r3
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1cf      	bne.n	801153e <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	2200      	movs	r2, #0
 80115a6:	2140      	movs	r1, #64	; 0x40
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	f000 f915 	bl	80117d8 <USART_WaitOnFlagUntilTimeout>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 80115b4:	2303      	movs	r3, #3
 80115b6:	e022      	b.n	80115fe <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2240      	movs	r2, #64	; 0x40
 80115be:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2208      	movs	r2, #8
 80115c6:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	699a      	ldr	r2, [r3, #24]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f042 0208 	orr.w	r2, r2, #8
 80115d6:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	699a      	ldr	r2, [r3, #24]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f042 0210 	orr.w	r2, r2, #16
 80115e6:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_OK;
 80115f8:	2300      	movs	r3, #0
 80115fa:	e000      	b.n	80115fe <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80115fc:	2302      	movs	r3, #2
  }
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3720      	adds	r7, #32
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}

08011606 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8011606:	b580      	push	{r7, lr}
 8011608:	b08a      	sub	sp, #40	; 0x28
 801160a:	af02      	add	r7, sp, #8
 801160c:	60f8      	str	r0, [r7, #12]
 801160e:	60b9      	str	r1, [r7, #8]
 8011610:	603b      	str	r3, [r7, #0]
 8011612:	4613      	mov	r3, r2
 8011614:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801161c:	b2db      	uxtb	r3, r3
 801161e:	2b01      	cmp	r3, #1
 8011620:	f040 80d5 	bne.w	80117ce <HAL_USART_Receive+0x1c8>
  {
    if ((pRxData == NULL) || (Size == 0U))
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <HAL_USART_Receive+0x2a>
 801162a:	88fb      	ldrh	r3, [r7, #6]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d101      	bne.n	8011634 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8011630:	2301      	movs	r3, #1
 8011632:	e0cd      	b.n	80117d0 <HAL_USART_Receive+0x1ca>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801163a:	2b01      	cmp	r3, #1
 801163c:	d101      	bne.n	8011642 <HAL_USART_Receive+0x3c>
 801163e:	2302      	movs	r3, #2
 8011640:	e0c6      	b.n	80117d0 <HAL_USART_Receive+0x1ca>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2200      	movs	r2, #0
 801164e:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_RX;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2222      	movs	r2, #34	; 0x22
 8011654:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011658:	f7f3 f864 	bl	8004724 <HAL_GetTick>
 801165c:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	88fa      	ldrh	r2, [r7, #6]
 8011662:	869a      	strh	r2, [r3, #52]	; 0x34
    husart->RxXferCount = Size;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	88fa      	ldrh	r2, [r7, #6]
 8011668:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	689b      	ldr	r3, [r3, #8]
 801166e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011672:	d10c      	bne.n	801168e <HAL_USART_Receive+0x88>
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d104      	bne.n	8011686 <HAL_USART_Receive+0x80>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011682:	871a      	strh	r2, [r3, #56]	; 0x38
 8011684:	e027      	b.n	80116d6 <HAL_USART_Receive+0xd0>
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	22ff      	movs	r2, #255	; 0xff
 801168a:	871a      	strh	r2, [r3, #56]	; 0x38
 801168c:	e023      	b.n	80116d6 <HAL_USART_Receive+0xd0>
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d10b      	bne.n	80116ae <HAL_USART_Receive+0xa8>
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d103      	bne.n	80116a6 <HAL_USART_Receive+0xa0>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	22ff      	movs	r2, #255	; 0xff
 80116a2:	871a      	strh	r2, [r3, #56]	; 0x38
 80116a4:	e017      	b.n	80116d6 <HAL_USART_Receive+0xd0>
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	227f      	movs	r2, #127	; 0x7f
 80116aa:	871a      	strh	r2, [r3, #56]	; 0x38
 80116ac:	e013      	b.n	80116d6 <HAL_USART_Receive+0xd0>
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80116b6:	d10b      	bne.n	80116d0 <HAL_USART_Receive+0xca>
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	691b      	ldr	r3, [r3, #16]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d103      	bne.n	80116c8 <HAL_USART_Receive+0xc2>
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	227f      	movs	r2, #127	; 0x7f
 80116c4:	871a      	strh	r2, [r3, #56]	; 0x38
 80116c6:	e006      	b.n	80116d6 <HAL_USART_Receive+0xd0>
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	223f      	movs	r2, #63	; 0x3f
 80116cc:	871a      	strh	r2, [r3, #56]	; 0x38
 80116ce:	e002      	b.n	80116d6 <HAL_USART_Receive+0xd0>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2200      	movs	r2, #0
 80116d4:	871a      	strh	r2, [r3, #56]	; 0x38
    uhMask = husart->Mask;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80116da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116e4:	d108      	bne.n	80116f8 <HAL_USART_Receive+0xf2>
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	691b      	ldr	r3, [r3, #16]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d104      	bne.n	80116f8 <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 80116ee:	2300      	movs	r3, #0
 80116f0:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	61bb      	str	r3, [r7, #24]
 80116f6:	e003      	b.n	8011700 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 80116fc:	2300      	movs	r3, #0
 80116fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8011700:	e045      	b.n	801178e <HAL_USART_Receive+0x188>
    {
      if (husart->SlaveMode == USART_SLAVEMODE_DISABLE)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011706:	2b00      	cmp	r3, #0
 8011708:	d110      	bne.n	801172c <HAL_USART_Receive+0x126>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2200      	movs	r2, #0
 8011712:	2180      	movs	r1, #128	; 0x80
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 f85f 	bl	80117d8 <USART_WaitOnFlagUntilTimeout>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d001      	beq.n	8011724 <HAL_USART_Receive+0x11e>
        {
          return HAL_TIMEOUT;
 8011720:	2303      	movs	r3, #3
 8011722:	e055      	b.n	80117d0 <HAL_USART_Receive+0x1ca>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	22ff      	movs	r2, #255	; 0xff
 801172a:	629a      	str	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2200      	movs	r2, #0
 8011734:	2120      	movs	r1, #32
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f000 f84e 	bl	80117d8 <USART_WaitOnFlagUntilTimeout>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <HAL_USART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 8011742:	2303      	movs	r3, #3
 8011744:	e044      	b.n	80117d0 <HAL_USART_Receive+0x1ca>
      }

      if (prxdata8bits == NULL)
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10c      	bne.n	8011766 <HAL_USART_Receive+0x160>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011752:	b29a      	uxth	r2, r3
 8011754:	8a7b      	ldrh	r3, [r7, #18]
 8011756:	4013      	ands	r3, r2
 8011758:	b29a      	uxth	r2, r3
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	3302      	adds	r3, #2
 8011762:	61bb      	str	r3, [r7, #24]
 8011764:	e00c      	b.n	8011780 <HAL_USART_Receive+0x17a>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801176c:	b2da      	uxtb	r2, r3
 801176e:	8a7b      	ldrh	r3, [r7, #18]
 8011770:	b2db      	uxtb	r3, r3
 8011772:	4013      	ands	r3, r2
 8011774:	b2da      	uxtb	r2, r3
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	3301      	adds	r3, #1
 801177e:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011784:	b29b      	uxth	r3, r3
 8011786:	3b01      	subs	r3, #1
 8011788:	b29a      	uxth	r2, r3
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	86da      	strh	r2, [r3, #54]	; 0x36
    while (husart->RxXferCount > 0U)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011792:	b29b      	uxth	r3, r3
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1b4      	bne.n	8011702 <HAL_USART_Receive+0xfc>

    }

    /* Clear SPI slave underrun flag and discard transmit data */
    if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801179c:	2b01      	cmp	r3, #1
 801179e:	d10c      	bne.n	80117ba <HAL_USART_Receive+0x1b4>
    {
      __HAL_USART_CLEAR_UDRFLAG(husart);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80117a8:	621a      	str	r2, [r3, #32]
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	699a      	ldr	r2, [r3, #24]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f042 0210 	orr.w	r2, r2, #16
 80117b8:	619a      	str	r2, [r3, #24]
    }

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2201      	movs	r2, #1
 80117be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2200      	movs	r2, #0
 80117c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	e000      	b.n	80117d0 <HAL_USART_Receive+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 80117ce:	2302      	movs	r3, #2
  }
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3720      	adds	r7, #32
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	603b      	str	r3, [r7, #0]
 80117e4:	4613      	mov	r3, r2
 80117e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80117e8:	e018      	b.n	801181c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f0:	d014      	beq.n	801181c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117f2:	f7f2 ff97 	bl	8004724 <HAL_GetTick>
 80117f6:	4602      	mov	r2, r0
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d302      	bcc.n	8011808 <USART_WaitOnFlagUntilTimeout+0x30>
 8011802:	69bb      	ldr	r3, [r7, #24]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d109      	bne.n	801181c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2201      	movs	r2, #1
 801180c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2200      	movs	r2, #0
 8011814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8011818:	2303      	movs	r3, #3
 801181a:	e00f      	b.n	801183c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	69da      	ldr	r2, [r3, #28]
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	4013      	ands	r3, r2
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	429a      	cmp	r2, r3
 801182a:	bf0c      	ite	eq
 801182c:	2301      	moveq	r3, #1
 801182e:	2300      	movne	r3, #0
 8011830:	b2db      	uxtb	r3, r3
 8011832:	461a      	mov	r2, r3
 8011834:	79fb      	ldrb	r3, [r7, #7]
 8011836:	429a      	cmp	r2, r3
 8011838:	d0d7      	beq.n	80117ea <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801183a:	2300      	movs	r3, #0
}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b08e      	sub	sp, #56	; 0x38
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 801184c:	2300      	movs	r3, #0
 801184e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8011852:	2300      	movs	r3, #0
 8011854:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	689a      	ldr	r2, [r3, #8]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	691b      	ldr	r3, [r3, #16]
 801185e:	431a      	orrs	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	695b      	ldr	r3, [r3, #20]
 8011864:	4313      	orrs	r3, r2
 8011866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	4bc9      	ldr	r3, [pc, #804]	; (8011b98 <USART_SetConfig+0x354>)
 8011874:	4013      	ands	r3, r2
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	6812      	ldr	r2, [r2, #0]
 801187a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801187c:	430b      	orrs	r3, r1
 801187e:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8011880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011884:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a1b      	ldr	r3, [r3, #32]
 801188a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801188c:	4313      	orrs	r3, r2
 801188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	699a      	ldr	r2, [r3, #24]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	4313      	orrs	r3, r2
 801189a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801189c:	4313      	orrs	r3, r2
 801189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118a6:	4313      	orrs	r3, r2
 80118a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	685a      	ldr	r2, [r3, #4]
 80118b0:	4bba      	ldr	r3, [pc, #744]	; (8011b9c <USART_SetConfig+0x358>)
 80118b2:	4013      	ands	r3, r2
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	6812      	ldr	r2, [r2, #0]
 80118b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118ba:	430b      	orrs	r3, r1
 80118bc:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c4:	f023 010f 	bic.w	r1, r3, #15
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	430a      	orrs	r2, r1
 80118d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4ab1      	ldr	r2, [pc, #708]	; (8011ba0 <USART_SetConfig+0x35c>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d176      	bne.n	80119cc <USART_SetConfig+0x188>
 80118de:	4bb1      	ldr	r3, [pc, #708]	; (8011ba4 <USART_SetConfig+0x360>)
 80118e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80118e6:	2b28      	cmp	r3, #40	; 0x28
 80118e8:	d86c      	bhi.n	80119c4 <USART_SetConfig+0x180>
 80118ea:	a201      	add	r2, pc, #4	; (adr r2, 80118f0 <USART_SetConfig+0xac>)
 80118ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f0:	08011995 	.word	0x08011995
 80118f4:	080119c5 	.word	0x080119c5
 80118f8:	080119c5 	.word	0x080119c5
 80118fc:	080119c5 	.word	0x080119c5
 8011900:	080119c5 	.word	0x080119c5
 8011904:	080119c5 	.word	0x080119c5
 8011908:	080119c5 	.word	0x080119c5
 801190c:	080119c5 	.word	0x080119c5
 8011910:	0801199d 	.word	0x0801199d
 8011914:	080119c5 	.word	0x080119c5
 8011918:	080119c5 	.word	0x080119c5
 801191c:	080119c5 	.word	0x080119c5
 8011920:	080119c5 	.word	0x080119c5
 8011924:	080119c5 	.word	0x080119c5
 8011928:	080119c5 	.word	0x080119c5
 801192c:	080119c5 	.word	0x080119c5
 8011930:	080119a5 	.word	0x080119a5
 8011934:	080119c5 	.word	0x080119c5
 8011938:	080119c5 	.word	0x080119c5
 801193c:	080119c5 	.word	0x080119c5
 8011940:	080119c5 	.word	0x080119c5
 8011944:	080119c5 	.word	0x080119c5
 8011948:	080119c5 	.word	0x080119c5
 801194c:	080119c5 	.word	0x080119c5
 8011950:	080119ad 	.word	0x080119ad
 8011954:	080119c5 	.word	0x080119c5
 8011958:	080119c5 	.word	0x080119c5
 801195c:	080119c5 	.word	0x080119c5
 8011960:	080119c5 	.word	0x080119c5
 8011964:	080119c5 	.word	0x080119c5
 8011968:	080119c5 	.word	0x080119c5
 801196c:	080119c5 	.word	0x080119c5
 8011970:	080119b5 	.word	0x080119b5
 8011974:	080119c5 	.word	0x080119c5
 8011978:	080119c5 	.word	0x080119c5
 801197c:	080119c5 	.word	0x080119c5
 8011980:	080119c5 	.word	0x080119c5
 8011984:	080119c5 	.word	0x080119c5
 8011988:	080119c5 	.word	0x080119c5
 801198c:	080119c5 	.word	0x080119c5
 8011990:	080119bd 	.word	0x080119bd
 8011994:	2301      	movs	r3, #1
 8011996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801199a:	e112      	b.n	8011bc2 <USART_SetConfig+0x37e>
 801199c:	2302      	movs	r3, #2
 801199e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119a2:	e10e      	b.n	8011bc2 <USART_SetConfig+0x37e>
 80119a4:	2304      	movs	r3, #4
 80119a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119aa:	e10a      	b.n	8011bc2 <USART_SetConfig+0x37e>
 80119ac:	2308      	movs	r3, #8
 80119ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119b2:	e106      	b.n	8011bc2 <USART_SetConfig+0x37e>
 80119b4:	2310      	movs	r3, #16
 80119b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119ba:	e102      	b.n	8011bc2 <USART_SetConfig+0x37e>
 80119bc:	2320      	movs	r3, #32
 80119be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119c2:	e0fe      	b.n	8011bc2 <USART_SetConfig+0x37e>
 80119c4:	2340      	movs	r3, #64	; 0x40
 80119c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119ca:	e0fa      	b.n	8011bc2 <USART_SetConfig+0x37e>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a75      	ldr	r2, [pc, #468]	; (8011ba8 <USART_SetConfig+0x364>)
 80119d2:	4293      	cmp	r3, r2
 80119d4:	d130      	bne.n	8011a38 <USART_SetConfig+0x1f4>
 80119d6:	4b73      	ldr	r3, [pc, #460]	; (8011ba4 <USART_SetConfig+0x360>)
 80119d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119da:	f003 0307 	and.w	r3, r3, #7
 80119de:	2b05      	cmp	r3, #5
 80119e0:	d826      	bhi.n	8011a30 <USART_SetConfig+0x1ec>
 80119e2:	a201      	add	r2, pc, #4	; (adr r2, 80119e8 <USART_SetConfig+0x1a4>)
 80119e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e8:	08011a01 	.word	0x08011a01
 80119ec:	08011a09 	.word	0x08011a09
 80119f0:	08011a11 	.word	0x08011a11
 80119f4:	08011a19 	.word	0x08011a19
 80119f8:	08011a21 	.word	0x08011a21
 80119fc:	08011a29 	.word	0x08011a29
 8011a00:	2300      	movs	r3, #0
 8011a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a06:	e0dc      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a08:	2302      	movs	r3, #2
 8011a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a0e:	e0d8      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a10:	2304      	movs	r3, #4
 8011a12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a16:	e0d4      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a18:	2308      	movs	r3, #8
 8011a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a1e:	e0d0      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a20:	2310      	movs	r3, #16
 8011a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a26:	e0cc      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a28:	2320      	movs	r3, #32
 8011a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a2e:	e0c8      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a30:	2340      	movs	r3, #64	; 0x40
 8011a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a36:	e0c4      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a5b      	ldr	r2, [pc, #364]	; (8011bac <USART_SetConfig+0x368>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d130      	bne.n	8011aa4 <USART_SetConfig+0x260>
 8011a42:	4b58      	ldr	r3, [pc, #352]	; (8011ba4 <USART_SetConfig+0x360>)
 8011a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a46:	f003 0307 	and.w	r3, r3, #7
 8011a4a:	2b05      	cmp	r3, #5
 8011a4c:	d826      	bhi.n	8011a9c <USART_SetConfig+0x258>
 8011a4e:	a201      	add	r2, pc, #4	; (adr r2, 8011a54 <USART_SetConfig+0x210>)
 8011a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a54:	08011a6d 	.word	0x08011a6d
 8011a58:	08011a75 	.word	0x08011a75
 8011a5c:	08011a7d 	.word	0x08011a7d
 8011a60:	08011a85 	.word	0x08011a85
 8011a64:	08011a8d 	.word	0x08011a8d
 8011a68:	08011a95 	.word	0x08011a95
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a72:	e0a6      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a74:	2302      	movs	r3, #2
 8011a76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a7a:	e0a2      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a7c:	2304      	movs	r3, #4
 8011a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a82:	e09e      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a84:	2308      	movs	r3, #8
 8011a86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a8a:	e09a      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a8c:	2310      	movs	r3, #16
 8011a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a92:	e096      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a94:	2320      	movs	r3, #32
 8011a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a9a:	e092      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011a9c:	2340      	movs	r3, #64	; 0x40
 8011a9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011aa2:	e08e      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4a41      	ldr	r2, [pc, #260]	; (8011bb0 <USART_SetConfig+0x36c>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	f040 8086 	bne.w	8011bbc <USART_SetConfig+0x378>
 8011ab0:	4b3c      	ldr	r3, [pc, #240]	; (8011ba4 <USART_SetConfig+0x360>)
 8011ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011ab8:	2b28      	cmp	r3, #40	; 0x28
 8011aba:	d87b      	bhi.n	8011bb4 <USART_SetConfig+0x370>
 8011abc:	a201      	add	r2, pc, #4	; (adr r2, 8011ac4 <USART_SetConfig+0x280>)
 8011abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac2:	bf00      	nop
 8011ac4:	08011b69 	.word	0x08011b69
 8011ac8:	08011bb5 	.word	0x08011bb5
 8011acc:	08011bb5 	.word	0x08011bb5
 8011ad0:	08011bb5 	.word	0x08011bb5
 8011ad4:	08011bb5 	.word	0x08011bb5
 8011ad8:	08011bb5 	.word	0x08011bb5
 8011adc:	08011bb5 	.word	0x08011bb5
 8011ae0:	08011bb5 	.word	0x08011bb5
 8011ae4:	08011b71 	.word	0x08011b71
 8011ae8:	08011bb5 	.word	0x08011bb5
 8011aec:	08011bb5 	.word	0x08011bb5
 8011af0:	08011bb5 	.word	0x08011bb5
 8011af4:	08011bb5 	.word	0x08011bb5
 8011af8:	08011bb5 	.word	0x08011bb5
 8011afc:	08011bb5 	.word	0x08011bb5
 8011b00:	08011bb5 	.word	0x08011bb5
 8011b04:	08011b79 	.word	0x08011b79
 8011b08:	08011bb5 	.word	0x08011bb5
 8011b0c:	08011bb5 	.word	0x08011bb5
 8011b10:	08011bb5 	.word	0x08011bb5
 8011b14:	08011bb5 	.word	0x08011bb5
 8011b18:	08011bb5 	.word	0x08011bb5
 8011b1c:	08011bb5 	.word	0x08011bb5
 8011b20:	08011bb5 	.word	0x08011bb5
 8011b24:	08011b81 	.word	0x08011b81
 8011b28:	08011bb5 	.word	0x08011bb5
 8011b2c:	08011bb5 	.word	0x08011bb5
 8011b30:	08011bb5 	.word	0x08011bb5
 8011b34:	08011bb5 	.word	0x08011bb5
 8011b38:	08011bb5 	.word	0x08011bb5
 8011b3c:	08011bb5 	.word	0x08011bb5
 8011b40:	08011bb5 	.word	0x08011bb5
 8011b44:	08011b89 	.word	0x08011b89
 8011b48:	08011bb5 	.word	0x08011bb5
 8011b4c:	08011bb5 	.word	0x08011bb5
 8011b50:	08011bb5 	.word	0x08011bb5
 8011b54:	08011bb5 	.word	0x08011bb5
 8011b58:	08011bb5 	.word	0x08011bb5
 8011b5c:	08011bb5 	.word	0x08011bb5
 8011b60:	08011bb5 	.word	0x08011bb5
 8011b64:	08011b91 	.word	0x08011b91
 8011b68:	2301      	movs	r3, #1
 8011b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b6e:	e028      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011b70:	2302      	movs	r3, #2
 8011b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b76:	e024      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011b78:	2304      	movs	r3, #4
 8011b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b7e:	e020      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011b80:	2308      	movs	r3, #8
 8011b82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b86:	e01c      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011b88:	2310      	movs	r3, #16
 8011b8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b8e:	e018      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011b90:	2320      	movs	r3, #32
 8011b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b96:	e014      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011b98:	cfff69f3 	.word	0xcfff69f3
 8011b9c:	ffffc0f6 	.word	0xffffc0f6
 8011ba0:	40011000 	.word	0x40011000
 8011ba4:	58024400 	.word	0x58024400
 8011ba8:	40004400 	.word	0x40004400
 8011bac:	40004800 	.word	0x40004800
 8011bb0:	40011400 	.word	0x40011400
 8011bb4:	2340      	movs	r3, #64	; 0x40
 8011bb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bba:	e002      	b.n	8011bc2 <USART_SetConfig+0x37e>
 8011bbc:	2340      	movs	r3, #64	; 0x40
 8011bbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 8011bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bc6:	2b20      	cmp	r3, #32
 8011bc8:	f200 8329 	bhi.w	801221e <USART_SetConfig+0x9da>
 8011bcc:	a201      	add	r2, pc, #4	; (adr r2, 8011bd4 <USART_SetConfig+0x390>)
 8011bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd2:	bf00      	nop
 8011bd4:	08011c59 	.word	0x08011c59
 8011bd8:	08011d0f 	.word	0x08011d0f
 8011bdc:	08011dc5 	.word	0x08011dc5
 8011be0:	0801221f 	.word	0x0801221f
 8011be4:	08011e7f 	.word	0x08011e7f
 8011be8:	0801221f 	.word	0x0801221f
 8011bec:	0801221f 	.word	0x0801221f
 8011bf0:	0801221f 	.word	0x0801221f
 8011bf4:	08011f39 	.word	0x08011f39
 8011bf8:	0801221f 	.word	0x0801221f
 8011bfc:	0801221f 	.word	0x0801221f
 8011c00:	0801221f 	.word	0x0801221f
 8011c04:	0801221f 	.word	0x0801221f
 8011c08:	0801221f 	.word	0x0801221f
 8011c0c:	0801221f 	.word	0x0801221f
 8011c10:	0801221f 	.word	0x0801221f
 8011c14:	080120b1 	.word	0x080120b1
 8011c18:	0801221f 	.word	0x0801221f
 8011c1c:	0801221f 	.word	0x0801221f
 8011c20:	0801221f 	.word	0x0801221f
 8011c24:	0801221f 	.word	0x0801221f
 8011c28:	0801221f 	.word	0x0801221f
 8011c2c:	0801221f 	.word	0x0801221f
 8011c30:	0801221f 	.word	0x0801221f
 8011c34:	0801221f 	.word	0x0801221f
 8011c38:	0801221f 	.word	0x0801221f
 8011c3c:	0801221f 	.word	0x0801221f
 8011c40:	0801221f 	.word	0x0801221f
 8011c44:	0801221f 	.word	0x0801221f
 8011c48:	0801221f 	.word	0x0801221f
 8011c4c:	0801221f 	.word	0x0801221f
 8011c50:	0801221f 	.word	0x0801221f
 8011c54:	0801216d 	.word	0x0801216d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8011c58:	f7f9 fe88 	bl	800b96c <HAL_RCC_GetPCLK1Freq>
 8011c5c:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d044      	beq.n	8011cf0 <USART_SetConfig+0x4ac>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d03e      	beq.n	8011cec <USART_SetConfig+0x4a8>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	d038      	beq.n	8011ce8 <USART_SetConfig+0x4a4>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7a:	2b03      	cmp	r3, #3
 8011c7c:	d032      	beq.n	8011ce4 <USART_SetConfig+0x4a0>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c82:	2b04      	cmp	r3, #4
 8011c84:	d02c      	beq.n	8011ce0 <USART_SetConfig+0x49c>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c8a:	2b05      	cmp	r3, #5
 8011c8c:	d026      	beq.n	8011cdc <USART_SetConfig+0x498>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c92:	2b06      	cmp	r3, #6
 8011c94:	d020      	beq.n	8011cd8 <USART_SetConfig+0x494>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9a:	2b07      	cmp	r3, #7
 8011c9c:	d01a      	beq.n	8011cd4 <USART_SetConfig+0x490>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca2:	2b08      	cmp	r3, #8
 8011ca4:	d014      	beq.n	8011cd0 <USART_SetConfig+0x48c>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011caa:	2b09      	cmp	r3, #9
 8011cac:	d00e      	beq.n	8011ccc <USART_SetConfig+0x488>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb2:	2b0a      	cmp	r3, #10
 8011cb4:	d008      	beq.n	8011cc8 <USART_SetConfig+0x484>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cba:	2b0b      	cmp	r3, #11
 8011cbc:	d102      	bne.n	8011cc4 <USART_SetConfig+0x480>
 8011cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cc2:	e016      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e014      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cc8:	2380      	movs	r3, #128	; 0x80
 8011cca:	e012      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011ccc:	2340      	movs	r3, #64	; 0x40
 8011cce:	e010      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cd0:	2320      	movs	r3, #32
 8011cd2:	e00e      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cd4:	2310      	movs	r3, #16
 8011cd6:	e00c      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cd8:	230c      	movs	r3, #12
 8011cda:	e00a      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cdc:	230a      	movs	r3, #10
 8011cde:	e008      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011ce0:	2308      	movs	r3, #8
 8011ce2:	e006      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011ce4:	2306      	movs	r3, #6
 8011ce6:	e004      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011ce8:	2304      	movs	r3, #4
 8011cea:	e002      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cec:	2302      	movs	r3, #2
 8011cee:	e000      	b.n	8011cf2 <USART_SetConfig+0x4ae>
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cf8:	005a      	lsls	r2, r3, #1
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	085b      	lsrs	r3, r3, #1
 8011d00:	441a      	add	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8011d0c:	e28b      	b.n	8012226 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8011d0e:	f7f9 fe43 	bl	800b998 <HAL_RCC_GetPCLK2Freq>
 8011d12:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d044      	beq.n	8011da6 <USART_SetConfig+0x562>
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d03e      	beq.n	8011da2 <USART_SetConfig+0x55e>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d28:	2b02      	cmp	r3, #2
 8011d2a:	d038      	beq.n	8011d9e <USART_SetConfig+0x55a>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d30:	2b03      	cmp	r3, #3
 8011d32:	d032      	beq.n	8011d9a <USART_SetConfig+0x556>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d38:	2b04      	cmp	r3, #4
 8011d3a:	d02c      	beq.n	8011d96 <USART_SetConfig+0x552>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d40:	2b05      	cmp	r3, #5
 8011d42:	d026      	beq.n	8011d92 <USART_SetConfig+0x54e>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d48:	2b06      	cmp	r3, #6
 8011d4a:	d020      	beq.n	8011d8e <USART_SetConfig+0x54a>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d50:	2b07      	cmp	r3, #7
 8011d52:	d01a      	beq.n	8011d8a <USART_SetConfig+0x546>
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d58:	2b08      	cmp	r3, #8
 8011d5a:	d014      	beq.n	8011d86 <USART_SetConfig+0x542>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d60:	2b09      	cmp	r3, #9
 8011d62:	d00e      	beq.n	8011d82 <USART_SetConfig+0x53e>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d68:	2b0a      	cmp	r3, #10
 8011d6a:	d008      	beq.n	8011d7e <USART_SetConfig+0x53a>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d70:	2b0b      	cmp	r3, #11
 8011d72:	d102      	bne.n	8011d7a <USART_SetConfig+0x536>
 8011d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d78:	e016      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e014      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d7e:	2380      	movs	r3, #128	; 0x80
 8011d80:	e012      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d82:	2340      	movs	r3, #64	; 0x40
 8011d84:	e010      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d86:	2320      	movs	r3, #32
 8011d88:	e00e      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d8a:	2310      	movs	r3, #16
 8011d8c:	e00c      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d8e:	230c      	movs	r3, #12
 8011d90:	e00a      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d92:	230a      	movs	r3, #10
 8011d94:	e008      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d96:	2308      	movs	r3, #8
 8011d98:	e006      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d9a:	2306      	movs	r3, #6
 8011d9c:	e004      	b.n	8011da8 <USART_SetConfig+0x564>
 8011d9e:	2304      	movs	r3, #4
 8011da0:	e002      	b.n	8011da8 <USART_SetConfig+0x564>
 8011da2:	2302      	movs	r3, #2
 8011da4:	e000      	b.n	8011da8 <USART_SetConfig+0x564>
 8011da6:	2301      	movs	r3, #1
 8011da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dae:	005a      	lsls	r2, r3, #1
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	085b      	lsrs	r3, r3, #1
 8011db6:	441a      	add	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8011dc2:	e230      	b.n	8012226 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011dc4:	f107 0318 	add.w	r3, r7, #24
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fb fa6b 	bl	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8011dce:	69fa      	ldr	r2, [r7, #28]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d044      	beq.n	8011e62 <USART_SetConfig+0x61e>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d03e      	beq.n	8011e5e <USART_SetConfig+0x61a>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	d038      	beq.n	8011e5a <USART_SetConfig+0x616>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dec:	2b03      	cmp	r3, #3
 8011dee:	d032      	beq.n	8011e56 <USART_SetConfig+0x612>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df4:	2b04      	cmp	r3, #4
 8011df6:	d02c      	beq.n	8011e52 <USART_SetConfig+0x60e>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dfc:	2b05      	cmp	r3, #5
 8011dfe:	d026      	beq.n	8011e4e <USART_SetConfig+0x60a>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e04:	2b06      	cmp	r3, #6
 8011e06:	d020      	beq.n	8011e4a <USART_SetConfig+0x606>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e0c:	2b07      	cmp	r3, #7
 8011e0e:	d01a      	beq.n	8011e46 <USART_SetConfig+0x602>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e14:	2b08      	cmp	r3, #8
 8011e16:	d014      	beq.n	8011e42 <USART_SetConfig+0x5fe>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1c:	2b09      	cmp	r3, #9
 8011e1e:	d00e      	beq.n	8011e3e <USART_SetConfig+0x5fa>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e24:	2b0a      	cmp	r3, #10
 8011e26:	d008      	beq.n	8011e3a <USART_SetConfig+0x5f6>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e2c:	2b0b      	cmp	r3, #11
 8011e2e:	d102      	bne.n	8011e36 <USART_SetConfig+0x5f2>
 8011e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e34:	e016      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e36:	2301      	movs	r3, #1
 8011e38:	e014      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e3a:	2380      	movs	r3, #128	; 0x80
 8011e3c:	e012      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e3e:	2340      	movs	r3, #64	; 0x40
 8011e40:	e010      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e42:	2320      	movs	r3, #32
 8011e44:	e00e      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e46:	2310      	movs	r3, #16
 8011e48:	e00c      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e4a:	230c      	movs	r3, #12
 8011e4c:	e00a      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e4e:	230a      	movs	r3, #10
 8011e50:	e008      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e52:	2308      	movs	r3, #8
 8011e54:	e006      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e56:	2306      	movs	r3, #6
 8011e58:	e004      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e5a:	2304      	movs	r3, #4
 8011e5c:	e002      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e5e:	2302      	movs	r3, #2
 8011e60:	e000      	b.n	8011e64 <USART_SetConfig+0x620>
 8011e62:	2301      	movs	r3, #1
 8011e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e68:	005a      	lsls	r2, r3, #1
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	085b      	lsrs	r3, r3, #1
 8011e70:	441a      	add	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e7a:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8011e7c:	e1d3      	b.n	8012226 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e7e:	f107 030c 	add.w	r3, r7, #12
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fb fb62 	bl	800d54c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d044      	beq.n	8011f1c <USART_SetConfig+0x6d8>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d03e      	beq.n	8011f18 <USART_SetConfig+0x6d4>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e9e:	2b02      	cmp	r3, #2
 8011ea0:	d038      	beq.n	8011f14 <USART_SetConfig+0x6d0>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d032      	beq.n	8011f10 <USART_SetConfig+0x6cc>
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eae:	2b04      	cmp	r3, #4
 8011eb0:	d02c      	beq.n	8011f0c <USART_SetConfig+0x6c8>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb6:	2b05      	cmp	r3, #5
 8011eb8:	d026      	beq.n	8011f08 <USART_SetConfig+0x6c4>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ebe:	2b06      	cmp	r3, #6
 8011ec0:	d020      	beq.n	8011f04 <USART_SetConfig+0x6c0>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec6:	2b07      	cmp	r3, #7
 8011ec8:	d01a      	beq.n	8011f00 <USART_SetConfig+0x6bc>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ece:	2b08      	cmp	r3, #8
 8011ed0:	d014      	beq.n	8011efc <USART_SetConfig+0x6b8>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed6:	2b09      	cmp	r3, #9
 8011ed8:	d00e      	beq.n	8011ef8 <USART_SetConfig+0x6b4>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ede:	2b0a      	cmp	r3, #10
 8011ee0:	d008      	beq.n	8011ef4 <USART_SetConfig+0x6b0>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ee6:	2b0b      	cmp	r3, #11
 8011ee8:	d102      	bne.n	8011ef0 <USART_SetConfig+0x6ac>
 8011eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011eee:	e016      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e014      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011ef4:	2380      	movs	r3, #128	; 0x80
 8011ef6:	e012      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011ef8:	2340      	movs	r3, #64	; 0x40
 8011efa:	e010      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011efc:	2320      	movs	r3, #32
 8011efe:	e00e      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f00:	2310      	movs	r3, #16
 8011f02:	e00c      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f04:	230c      	movs	r3, #12
 8011f06:	e00a      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f08:	230a      	movs	r3, #10
 8011f0a:	e008      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f0c:	2308      	movs	r3, #8
 8011f0e:	e006      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f10:	2306      	movs	r3, #6
 8011f12:	e004      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f14:	2304      	movs	r3, #4
 8011f16:	e002      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f18:	2302      	movs	r3, #2
 8011f1a:	e000      	b.n	8011f1e <USART_SetConfig+0x6da>
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f22:	005a      	lsls	r2, r3, #1
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	085b      	lsrs	r3, r3, #1
 8011f2a:	441a      	add	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f34:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8011f36:	e176      	b.n	8012226 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f38:	4b89      	ldr	r3, [pc, #548]	; (8012160 <USART_SetConfig+0x91c>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f003 0320 	and.w	r3, r3, #32
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d05d      	beq.n	8012000 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8011f44:	4b86      	ldr	r3, [pc, #536]	; (8012160 <USART_SetConfig+0x91c>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	08db      	lsrs	r3, r3, #3
 8011f4a:	f003 0303 	and.w	r3, r3, #3
 8011f4e:	4a85      	ldr	r2, [pc, #532]	; (8012164 <USART_SetConfig+0x920>)
 8011f50:	40da      	lsrs	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d044      	beq.n	8011fe4 <USART_SetConfig+0x7a0>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f5e:	2b01      	cmp	r3, #1
 8011f60:	d03e      	beq.n	8011fe0 <USART_SetConfig+0x79c>
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d038      	beq.n	8011fdc <USART_SetConfig+0x798>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	d032      	beq.n	8011fd8 <USART_SetConfig+0x794>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f76:	2b04      	cmp	r3, #4
 8011f78:	d02c      	beq.n	8011fd4 <USART_SetConfig+0x790>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7e:	2b05      	cmp	r3, #5
 8011f80:	d026      	beq.n	8011fd0 <USART_SetConfig+0x78c>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f86:	2b06      	cmp	r3, #6
 8011f88:	d020      	beq.n	8011fcc <USART_SetConfig+0x788>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8e:	2b07      	cmp	r3, #7
 8011f90:	d01a      	beq.n	8011fc8 <USART_SetConfig+0x784>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f96:	2b08      	cmp	r3, #8
 8011f98:	d014      	beq.n	8011fc4 <USART_SetConfig+0x780>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9e:	2b09      	cmp	r3, #9
 8011fa0:	d00e      	beq.n	8011fc0 <USART_SetConfig+0x77c>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fa6:	2b0a      	cmp	r3, #10
 8011fa8:	d008      	beq.n	8011fbc <USART_SetConfig+0x778>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fae:	2b0b      	cmp	r3, #11
 8011fb0:	d102      	bne.n	8011fb8 <USART_SetConfig+0x774>
 8011fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fb6:	e016      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e014      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fbc:	2380      	movs	r3, #128	; 0x80
 8011fbe:	e012      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fc0:	2340      	movs	r3, #64	; 0x40
 8011fc2:	e010      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fc4:	2320      	movs	r3, #32
 8011fc6:	e00e      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fc8:	2310      	movs	r3, #16
 8011fca:	e00c      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fcc:	230c      	movs	r3, #12
 8011fce:	e00a      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fd0:	230a      	movs	r3, #10
 8011fd2:	e008      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fd4:	2308      	movs	r3, #8
 8011fd6:	e006      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fd8:	2306      	movs	r3, #6
 8011fda:	e004      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fdc:	2304      	movs	r3, #4
 8011fde:	e002      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	e000      	b.n	8011fe6 <USART_SetConfig+0x7a2>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fea:	005a      	lsls	r2, r3, #1
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	085b      	lsrs	r3, r3, #1
 8011ff2:	441a      	add	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ffc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8011ffe:	e112      	b.n	8012226 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012004:	2b00      	cmp	r3, #0
 8012006:	d044      	beq.n	8012092 <USART_SetConfig+0x84e>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200c:	2b01      	cmp	r3, #1
 801200e:	d03e      	beq.n	801208e <USART_SetConfig+0x84a>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012014:	2b02      	cmp	r3, #2
 8012016:	d038      	beq.n	801208a <USART_SetConfig+0x846>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801201c:	2b03      	cmp	r3, #3
 801201e:	d032      	beq.n	8012086 <USART_SetConfig+0x842>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012024:	2b04      	cmp	r3, #4
 8012026:	d02c      	beq.n	8012082 <USART_SetConfig+0x83e>
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801202c:	2b05      	cmp	r3, #5
 801202e:	d026      	beq.n	801207e <USART_SetConfig+0x83a>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012034:	2b06      	cmp	r3, #6
 8012036:	d020      	beq.n	801207a <USART_SetConfig+0x836>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203c:	2b07      	cmp	r3, #7
 801203e:	d01a      	beq.n	8012076 <USART_SetConfig+0x832>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012044:	2b08      	cmp	r3, #8
 8012046:	d014      	beq.n	8012072 <USART_SetConfig+0x82e>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801204c:	2b09      	cmp	r3, #9
 801204e:	d00e      	beq.n	801206e <USART_SetConfig+0x82a>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012054:	2b0a      	cmp	r3, #10
 8012056:	d008      	beq.n	801206a <USART_SetConfig+0x826>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801205c:	2b0b      	cmp	r3, #11
 801205e:	d102      	bne.n	8012066 <USART_SetConfig+0x822>
 8012060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012064:	e016      	b.n	8012094 <USART_SetConfig+0x850>
 8012066:	2301      	movs	r3, #1
 8012068:	e014      	b.n	8012094 <USART_SetConfig+0x850>
 801206a:	2380      	movs	r3, #128	; 0x80
 801206c:	e012      	b.n	8012094 <USART_SetConfig+0x850>
 801206e:	2340      	movs	r3, #64	; 0x40
 8012070:	e010      	b.n	8012094 <USART_SetConfig+0x850>
 8012072:	2320      	movs	r3, #32
 8012074:	e00e      	b.n	8012094 <USART_SetConfig+0x850>
 8012076:	2310      	movs	r3, #16
 8012078:	e00c      	b.n	8012094 <USART_SetConfig+0x850>
 801207a:	230c      	movs	r3, #12
 801207c:	e00a      	b.n	8012094 <USART_SetConfig+0x850>
 801207e:	230a      	movs	r3, #10
 8012080:	e008      	b.n	8012094 <USART_SetConfig+0x850>
 8012082:	2308      	movs	r3, #8
 8012084:	e006      	b.n	8012094 <USART_SetConfig+0x850>
 8012086:	2306      	movs	r3, #6
 8012088:	e004      	b.n	8012094 <USART_SetConfig+0x850>
 801208a:	2304      	movs	r3, #4
 801208c:	e002      	b.n	8012094 <USART_SetConfig+0x850>
 801208e:	2302      	movs	r3, #2
 8012090:	e000      	b.n	8012094 <USART_SetConfig+0x850>
 8012092:	2301      	movs	r3, #1
 8012094:	4a33      	ldr	r2, [pc, #204]	; (8012164 <USART_SetConfig+0x920>)
 8012096:	fbb2 f3f3 	udiv	r3, r2, r3
 801209a:	005a      	lsls	r2, r3, #1
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	085b      	lsrs	r3, r3, #1
 80120a2:	441a      	add	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80120ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80120ae:	e0ba      	b.n	8012226 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d044      	beq.n	8012142 <USART_SetConfig+0x8fe>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d03e      	beq.n	801213e <USART_SetConfig+0x8fa>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c4:	2b02      	cmp	r3, #2
 80120c6:	d038      	beq.n	801213a <USART_SetConfig+0x8f6>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120cc:	2b03      	cmp	r3, #3
 80120ce:	d032      	beq.n	8012136 <USART_SetConfig+0x8f2>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d4:	2b04      	cmp	r3, #4
 80120d6:	d02c      	beq.n	8012132 <USART_SetConfig+0x8ee>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120dc:	2b05      	cmp	r3, #5
 80120de:	d026      	beq.n	801212e <USART_SetConfig+0x8ea>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e4:	2b06      	cmp	r3, #6
 80120e6:	d020      	beq.n	801212a <USART_SetConfig+0x8e6>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ec:	2b07      	cmp	r3, #7
 80120ee:	d01a      	beq.n	8012126 <USART_SetConfig+0x8e2>
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f4:	2b08      	cmp	r3, #8
 80120f6:	d014      	beq.n	8012122 <USART_SetConfig+0x8de>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fc:	2b09      	cmp	r3, #9
 80120fe:	d00e      	beq.n	801211e <USART_SetConfig+0x8da>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	2b0a      	cmp	r3, #10
 8012106:	d008      	beq.n	801211a <USART_SetConfig+0x8d6>
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210c:	2b0b      	cmp	r3, #11
 801210e:	d102      	bne.n	8012116 <USART_SetConfig+0x8d2>
 8012110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012114:	e016      	b.n	8012144 <USART_SetConfig+0x900>
 8012116:	2301      	movs	r3, #1
 8012118:	e014      	b.n	8012144 <USART_SetConfig+0x900>
 801211a:	2380      	movs	r3, #128	; 0x80
 801211c:	e012      	b.n	8012144 <USART_SetConfig+0x900>
 801211e:	2340      	movs	r3, #64	; 0x40
 8012120:	e010      	b.n	8012144 <USART_SetConfig+0x900>
 8012122:	2320      	movs	r3, #32
 8012124:	e00e      	b.n	8012144 <USART_SetConfig+0x900>
 8012126:	2310      	movs	r3, #16
 8012128:	e00c      	b.n	8012144 <USART_SetConfig+0x900>
 801212a:	230c      	movs	r3, #12
 801212c:	e00a      	b.n	8012144 <USART_SetConfig+0x900>
 801212e:	230a      	movs	r3, #10
 8012130:	e008      	b.n	8012144 <USART_SetConfig+0x900>
 8012132:	2308      	movs	r3, #8
 8012134:	e006      	b.n	8012144 <USART_SetConfig+0x900>
 8012136:	2306      	movs	r3, #6
 8012138:	e004      	b.n	8012144 <USART_SetConfig+0x900>
 801213a:	2304      	movs	r3, #4
 801213c:	e002      	b.n	8012144 <USART_SetConfig+0x900>
 801213e:	2302      	movs	r3, #2
 8012140:	e000      	b.n	8012144 <USART_SetConfig+0x900>
 8012142:	2301      	movs	r3, #1
 8012144:	4a08      	ldr	r2, [pc, #32]	; (8012168 <USART_SetConfig+0x924>)
 8012146:	fbb2 f3f3 	udiv	r3, r2, r3
 801214a:	005a      	lsls	r2, r3, #1
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	085b      	lsrs	r3, r3, #1
 8012152:	441a      	add	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	fbb2 f3f3 	udiv	r3, r2, r3
 801215c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 801215e:	e062      	b.n	8012226 <USART_SetConfig+0x9e2>
 8012160:	58024400 	.word	0x58024400
 8012164:	03d09000 	.word	0x03d09000
 8012168:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012170:	2b00      	cmp	r3, #0
 8012172:	d044      	beq.n	80121fe <USART_SetConfig+0x9ba>
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012178:	2b01      	cmp	r3, #1
 801217a:	d03e      	beq.n	80121fa <USART_SetConfig+0x9b6>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012180:	2b02      	cmp	r3, #2
 8012182:	d038      	beq.n	80121f6 <USART_SetConfig+0x9b2>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012188:	2b03      	cmp	r3, #3
 801218a:	d032      	beq.n	80121f2 <USART_SetConfig+0x9ae>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012190:	2b04      	cmp	r3, #4
 8012192:	d02c      	beq.n	80121ee <USART_SetConfig+0x9aa>
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012198:	2b05      	cmp	r3, #5
 801219a:	d026      	beq.n	80121ea <USART_SetConfig+0x9a6>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a0:	2b06      	cmp	r3, #6
 80121a2:	d020      	beq.n	80121e6 <USART_SetConfig+0x9a2>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a8:	2b07      	cmp	r3, #7
 80121aa:	d01a      	beq.n	80121e2 <USART_SetConfig+0x99e>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b0:	2b08      	cmp	r3, #8
 80121b2:	d014      	beq.n	80121de <USART_SetConfig+0x99a>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	2b09      	cmp	r3, #9
 80121ba:	d00e      	beq.n	80121da <USART_SetConfig+0x996>
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c0:	2b0a      	cmp	r3, #10
 80121c2:	d008      	beq.n	80121d6 <USART_SetConfig+0x992>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	2b0b      	cmp	r3, #11
 80121ca:	d102      	bne.n	80121d2 <USART_SetConfig+0x98e>
 80121cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121d0:	e016      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e014      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121d6:	2380      	movs	r3, #128	; 0x80
 80121d8:	e012      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121da:	2340      	movs	r3, #64	; 0x40
 80121dc:	e010      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121de:	2320      	movs	r3, #32
 80121e0:	e00e      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121e2:	2310      	movs	r3, #16
 80121e4:	e00c      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121e6:	230c      	movs	r3, #12
 80121e8:	e00a      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121ea:	230a      	movs	r3, #10
 80121ec:	e008      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121ee:	2308      	movs	r3, #8
 80121f0:	e006      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121f2:	2306      	movs	r3, #6
 80121f4:	e004      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121f6:	2304      	movs	r3, #4
 80121f8:	e002      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121fa:	2302      	movs	r3, #2
 80121fc:	e000      	b.n	8012200 <USART_SetConfig+0x9bc>
 80121fe:	2301      	movs	r3, #1
 8012200:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012204:	fbb2 f3f3 	udiv	r3, r2, r3
 8012208:	005a      	lsls	r2, r3, #1
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	085b      	lsrs	r3, r3, #1
 8012210:	441a      	add	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	fbb2 f3f3 	udiv	r3, r2, r3
 801221a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 801221c:	e003      	b.n	8012226 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 8012224:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8012226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012228:	2b0f      	cmp	r3, #15
 801222a:	d916      	bls.n	801225a <USART_SetConfig+0xa16>
 801222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012232:	d212      	bcs.n	801225a <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012236:	b29b      	uxth	r3, r3
 8012238:	f023 030f 	bic.w	r3, r3, #15
 801223c:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012240:	085b      	lsrs	r3, r3, #1
 8012242:	b29b      	uxth	r3, r3
 8012244:	f003 0307 	and.w	r3, r3, #7
 8012248:	b29a      	uxth	r2, r3
 801224a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801224c:	4313      	orrs	r3, r2
 801224e:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012256:	60da      	str	r2, [r3, #12]
 8012258:	e002      	b.n	8012260 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 801225a:	2301      	movs	r3, #1
 801225c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2201      	movs	r2, #1
 8012264:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2201      	movs	r2, #1
 801226a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8012278:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 801227c:	4618      	mov	r0, r3
 801227e:	3738      	adds	r7, #56	; 0x38
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}

08012284 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b086      	sub	sp, #24
 8012288:	af02      	add	r7, sp, #8
 801228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2200      	movs	r2, #0
 8012290:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012292:	f7f2 fa47 	bl	8004724 <HAL_GetTick>
 8012296:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f003 0308 	and.w	r3, r3, #8
 80122a2:	2b08      	cmp	r3, #8
 80122a4:	d10e      	bne.n	80122c4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80122a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2200      	movs	r2, #0
 80122b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7ff fa8f 	bl	80117d8 <USART_WaitOnFlagUntilTimeout>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80122c0:	2303      	movs	r3, #3
 80122c2:	e01e      	b.n	8012302 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f003 0304 	and.w	r3, r3, #4
 80122ce:	2b04      	cmp	r3, #4
 80122d0:	d10e      	bne.n	80122f0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80122d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2200      	movs	r2, #0
 80122dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff fa79 	bl	80117d8 <USART_WaitOnFlagUntilTimeout>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d001      	beq.n	80122f0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80122ec:	2303      	movs	r3, #3
 80122ee:	e008      	b.n	8012302 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2201      	movs	r2, #1
 80122f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2200      	movs	r2, #0
 80122fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012300:	2300      	movs	r3, #0
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 801230a:	b480      	push	{r7}
 801230c:	b085      	sub	sp, #20
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012318:	2b01      	cmp	r3, #1
 801231a:	d101      	bne.n	8012320 <HAL_USARTEx_DisableFifoMode+0x16>
 801231c:	2302      	movs	r3, #2
 801231e:	e027      	b.n	8012370 <HAL_USARTEx_DisableFifoMode+0x66>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2201      	movs	r2, #1
 8012324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2202      	movs	r2, #2
 801232c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f022 0201 	bic.w	r2, r2, #1
 8012346:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801234e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2201      	movs	r2, #1
 8012362:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2200      	movs	r2, #0
 801236a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801236e:	2300      	movs	r3, #0
}
 8012370:	4618      	mov	r0, r3
 8012372:	3714      	adds	r7, #20
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801238c:	2b01      	cmp	r3, #1
 801238e:	d101      	bne.n	8012394 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8012390:	2302      	movs	r3, #2
 8012392:	e02d      	b.n	80123f0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2201      	movs	r2, #1
 8012398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2202      	movs	r2, #2
 80123a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f022 0201 	bic.w	r2, r2, #1
 80123ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	430a      	orrs	r2, r1
 80123ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 f84f 	bl	8012474 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	68fa      	ldr	r2, [r7, #12]
 80123dc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2201      	movs	r2, #1
 80123e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2200      	movs	r2, #0
 80123ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80123ee:	2300      	movs	r3, #0
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012408:	2b01      	cmp	r3, #1
 801240a:	d101      	bne.n	8012410 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 801240c:	2302      	movs	r3, #2
 801240e:	e02d      	b.n	801246c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2201      	movs	r2, #1
 8012414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2202      	movs	r2, #2
 801241c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f022 0201 	bic.w	r2, r2, #1
 8012436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	683a      	ldr	r2, [r7, #0]
 8012448:	430a      	orrs	r2, r1
 801244a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f000 f811 	bl	8012474 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	68fa      	ldr	r2, [r7, #12]
 8012458:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2201      	movs	r2, #1
 801245e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801246a:	2300      	movs	r3, #0
}
 801246c:	4618      	mov	r0, r3
 801246e:	3710      	adds	r7, #16
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8012474:	b480      	push	{r7}
 8012476:	b089      	sub	sp, #36	; 0x24
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801247c:	4a2b      	ldr	r2, [pc, #172]	; (801252c <USARTEx_SetNbDataToProcess+0xb8>)
 801247e:	f107 0314 	add.w	r3, r7, #20
 8012482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012486:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801248a:	4a29      	ldr	r2, [pc, #164]	; (8012530 <USARTEx_SetNbDataToProcess+0xbc>)
 801248c:	f107 030c 	add.w	r3, r7, #12
 8012490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012494:	e883 0003 	stmia.w	r3, {r0, r1}

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <USARTEx_SetNbDataToProcess+0x3a>
  {
    husart->NbTxDataToProcess = 1U;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2201      	movs	r2, #1
 80124a4:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2201      	movs	r2, #1
 80124aa:	875a      	strh	r2, [r3, #58]	; 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80124ac:	e037      	b.n	801251e <USARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80124ae:	2308      	movs	r3, #8
 80124b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80124b2:	2308      	movs	r3, #8
 80124b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	0e5b      	lsrs	r3, r3, #25
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	f003 0307 	and.w	r3, r3, #7
 80124c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	0f5b      	lsrs	r3, r3, #29
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	f003 0307 	and.w	r3, r3, #7
 80124d4:	773b      	strb	r3, [r7, #28]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80124d6:	7fbb      	ldrb	r3, [r7, #30]
 80124d8:	7f3a      	ldrb	r2, [r7, #28]
 80124da:	3220      	adds	r2, #32
 80124dc:	443a      	add	r2, r7
 80124de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80124e2:	fb02 f303 	mul.w	r3, r2, r3
 80124e6:	7f3a      	ldrb	r2, [r7, #28]
 80124e8:	3220      	adds	r2, #32
 80124ea:	443a      	add	r2, r7
 80124ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80124f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80124fa:	7ffb      	ldrb	r3, [r7, #31]
 80124fc:	7f7a      	ldrb	r2, [r7, #29]
 80124fe:	3220      	adds	r2, #32
 8012500:	443a      	add	r2, r7
 8012502:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8012506:	fb02 f303 	mul.w	r3, r2, r3
 801250a:	7f7a      	ldrb	r2, [r7, #29]
 801250c:	3220      	adds	r2, #32
 801250e:	443a      	add	r2, r7
 8012510:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8012514:	fb93 f3f2 	sdiv	r3, r3, r2
 8012518:	b29a      	uxth	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 801251e:	bf00      	nop
 8012520:	3724      	adds	r7, #36	; 0x24
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	0801dd80 	.word	0x0801dd80
 8012530:	0801dd88 	.word	0x0801dd88

08012534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012534:	b084      	sub	sp, #16
 8012536:	b580      	push	{r7, lr}
 8012538:	b084      	sub	sp, #16
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	f107 001c 	add.w	r0, r7, #28
 8012542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012548:	2b01      	cmp	r3, #1
 801254a:	d120      	bne.n	801258e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	68da      	ldr	r2, [r3, #12]
 801255c:	4b2a      	ldr	r3, [pc, #168]	; (8012608 <USB_CoreInit+0xd4>)
 801255e:	4013      	ands	r3, r2
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	68db      	ldr	r3, [r3, #12]
 8012568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012572:	2b01      	cmp	r3, #1
 8012574:	d105      	bne.n	8012582 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 faa8 	bl	8012ad8 <USB_CoreReset>
 8012588:	4603      	mov	r3, r0
 801258a:	73fb      	strb	r3, [r7, #15]
 801258c:	e01a      	b.n	80125c4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fa9c 	bl	8012ad8 <USB_CoreReset>
 80125a0:	4603      	mov	r3, r0
 80125a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80125a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	639a      	str	r2, [r3, #56]	; 0x38
 80125b6:	e005      	b.n	80125c4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80125c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d116      	bne.n	80125f8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125ce:	b29a      	uxth	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80125d8:	4b0c      	ldr	r3, [pc, #48]	; (801260c <USB_CoreInit+0xd8>)
 80125da:	4313      	orrs	r3, r2
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	689b      	ldr	r3, [r3, #8]
 80125e4:	f043 0206 	orr.w	r2, r3, #6
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	689b      	ldr	r3, [r3, #8]
 80125f0:	f043 0220 	orr.w	r2, r3, #32
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80125f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3710      	adds	r7, #16
 80125fe:	46bd      	mov	sp, r7
 8012600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012604:	b004      	add	sp, #16
 8012606:	4770      	bx	lr
 8012608:	ffbdffbf 	.word	0xffbdffbf
 801260c:	03ee0000 	.word	0x03ee0000

08012610 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	689b      	ldr	r3, [r3, #8]
 801261c:	f023 0201 	bic.w	r2, r3, #1
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	370c      	adds	r7, #12
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr

08012632 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b084      	sub	sp, #16
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	460b      	mov	r3, r1
 801263c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801263e:	2300      	movs	r3, #0
 8012640:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	68db      	ldr	r3, [r3, #12]
 8012646:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801264e:	78fb      	ldrb	r3, [r7, #3]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d115      	bne.n	8012680 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012660:	2001      	movs	r0, #1
 8012662:	f7f2 f86b 	bl	800473c <HAL_Delay>
      ms++;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	3301      	adds	r3, #1
 801266a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 fa25 	bl	8012abc <USB_GetMode>
 8012672:	4603      	mov	r3, r0
 8012674:	2b01      	cmp	r3, #1
 8012676:	d01e      	beq.n	80126b6 <USB_SetCurrentMode+0x84>
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	2b31      	cmp	r3, #49	; 0x31
 801267c:	d9f0      	bls.n	8012660 <USB_SetCurrentMode+0x2e>
 801267e:	e01a      	b.n	80126b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d115      	bne.n	80126b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012692:	2001      	movs	r0, #1
 8012694:	f7f2 f852 	bl	800473c <HAL_Delay>
      ms++;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	3301      	adds	r3, #1
 801269c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 fa0c 	bl	8012abc <USB_GetMode>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d005      	beq.n	80126b6 <USB_SetCurrentMode+0x84>
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2b31      	cmp	r3, #49	; 0x31
 80126ae:	d9f0      	bls.n	8012692 <USB_SetCurrentMode+0x60>
 80126b0:	e001      	b.n	80126b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80126b2:	2301      	movs	r3, #1
 80126b4:	e005      	b.n	80126c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b32      	cmp	r3, #50	; 0x32
 80126ba:	d101      	bne.n	80126c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80126bc:	2301      	movs	r3, #1
 80126be:	e000      	b.n	80126c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80126c0:	2300      	movs	r3, #0
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
	...

080126cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80126cc:	b084      	sub	sp, #16
 80126ce:	b580      	push	{r7, lr}
 80126d0:	b086      	sub	sp, #24
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80126da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80126e6:	2300      	movs	r3, #0
 80126e8:	613b      	str	r3, [r7, #16]
 80126ea:	e009      	b.n	8012700 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	3340      	adds	r3, #64	; 0x40
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	4413      	add	r3, r2
 80126f6:	2200      	movs	r2, #0
 80126f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	3301      	adds	r3, #1
 80126fe:	613b      	str	r3, [r7, #16]
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	2b0e      	cmp	r3, #14
 8012704:	d9f2      	bls.n	80126ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012708:	2b00      	cmp	r3, #0
 801270a:	d11c      	bne.n	8012746 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801271a:	f043 0302 	orr.w	r3, r3, #2
 801271e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012724:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	601a      	str	r2, [r3, #0]
 8012744:	e005      	b.n	8012752 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801274a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012758:	461a      	mov	r2, r3
 801275a:	2300      	movs	r3, #0
 801275c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012764:	4619      	mov	r1, r3
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801276c:	461a      	mov	r2, r3
 801276e:	680b      	ldr	r3, [r1, #0]
 8012770:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012774:	2b01      	cmp	r3, #1
 8012776:	d10c      	bne.n	8012792 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	2b00      	cmp	r3, #0
 801277c:	d104      	bne.n	8012788 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801277e:	2100      	movs	r1, #0
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f961 	bl	8012a48 <USB_SetDevSpeed>
 8012786:	e008      	b.n	801279a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012788:	2101      	movs	r1, #1
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f000 f95c 	bl	8012a48 <USB_SetDevSpeed>
 8012790:	e003      	b.n	801279a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012792:	2103      	movs	r1, #3
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 f957 	bl	8012a48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801279a:	2110      	movs	r1, #16
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f000 f8f3 	bl	8012988 <USB_FlushTxFifo>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d001      	beq.n	80127ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80127a8:	2301      	movs	r3, #1
 80127aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f000 f91d 	bl	80129ec <USB_FlushRxFifo>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d001      	beq.n	80127bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80127b8:	2301      	movs	r3, #1
 80127ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127c2:	461a      	mov	r2, r3
 80127c4:	2300      	movs	r3, #0
 80127c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127ce:	461a      	mov	r2, r3
 80127d0:	2300      	movs	r3, #0
 80127d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127da:	461a      	mov	r2, r3
 80127dc:	2300      	movs	r3, #0
 80127de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127e0:	2300      	movs	r3, #0
 80127e2:	613b      	str	r3, [r7, #16]
 80127e4:	e043      	b.n	801286e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	015a      	lsls	r2, r3, #5
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	4413      	add	r3, r2
 80127ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127fc:	d118      	bne.n	8012830 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10a      	bne.n	801281a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	015a      	lsls	r2, r3, #5
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	4413      	add	r3, r2
 801280c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012810:	461a      	mov	r2, r3
 8012812:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012816:	6013      	str	r3, [r2, #0]
 8012818:	e013      	b.n	8012842 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	015a      	lsls	r2, r3, #5
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	4413      	add	r3, r2
 8012822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012826:	461a      	mov	r2, r3
 8012828:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801282c:	6013      	str	r3, [r2, #0]
 801282e:	e008      	b.n	8012842 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	015a      	lsls	r2, r3, #5
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	4413      	add	r3, r2
 8012838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801283c:	461a      	mov	r2, r3
 801283e:	2300      	movs	r3, #0
 8012840:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	015a      	lsls	r2, r3, #5
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	4413      	add	r3, r2
 801284a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801284e:	461a      	mov	r2, r3
 8012850:	2300      	movs	r3, #0
 8012852:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	015a      	lsls	r2, r3, #5
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	4413      	add	r3, r2
 801285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012860:	461a      	mov	r2, r3
 8012862:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012866:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	3301      	adds	r3, #1
 801286c:	613b      	str	r3, [r7, #16]
 801286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012870:	693a      	ldr	r2, [r7, #16]
 8012872:	429a      	cmp	r2, r3
 8012874:	d3b7      	bcc.n	80127e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012876:	2300      	movs	r3, #0
 8012878:	613b      	str	r3, [r7, #16]
 801287a:	e043      	b.n	8012904 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	015a      	lsls	r2, r3, #5
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	4413      	add	r3, r2
 8012884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801288e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012892:	d118      	bne.n	80128c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d10a      	bne.n	80128b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	015a      	lsls	r2, r3, #5
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	4413      	add	r3, r2
 80128a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128a6:	461a      	mov	r2, r3
 80128a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80128ac:	6013      	str	r3, [r2, #0]
 80128ae:	e013      	b.n	80128d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	015a      	lsls	r2, r3, #5
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	4413      	add	r3, r2
 80128b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128bc:	461a      	mov	r2, r3
 80128be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80128c2:	6013      	str	r3, [r2, #0]
 80128c4:	e008      	b.n	80128d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	015a      	lsls	r2, r3, #5
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	4413      	add	r3, r2
 80128ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128d2:	461a      	mov	r2, r3
 80128d4:	2300      	movs	r3, #0
 80128d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	015a      	lsls	r2, r3, #5
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	4413      	add	r3, r2
 80128e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128e4:	461a      	mov	r2, r3
 80128e6:	2300      	movs	r3, #0
 80128e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	015a      	lsls	r2, r3, #5
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	4413      	add	r3, r2
 80128f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128f6:	461a      	mov	r2, r3
 80128f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80128fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	3301      	adds	r3, #1
 8012902:	613b      	str	r3, [r7, #16]
 8012904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012906:	693a      	ldr	r2, [r7, #16]
 8012908:	429a      	cmp	r2, r3
 801290a:	d3b7      	bcc.n	801287c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801291a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801291e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801292c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012930:	2b00      	cmp	r3, #0
 8012932:	d105      	bne.n	8012940 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	f043 0210 	orr.w	r2, r3, #16
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	699a      	ldr	r2, [r3, #24]
 8012944:	4b0e      	ldr	r3, [pc, #56]	; (8012980 <USB_DevInit+0x2b4>)
 8012946:	4313      	orrs	r3, r2
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801294e:	2b00      	cmp	r3, #0
 8012950:	d005      	beq.n	801295e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	699b      	ldr	r3, [r3, #24]
 8012956:	f043 0208 	orr.w	r2, r3, #8
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801295e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012960:	2b01      	cmp	r3, #1
 8012962:	d105      	bne.n	8012970 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	699a      	ldr	r2, [r3, #24]
 8012968:	4b06      	ldr	r3, [pc, #24]	; (8012984 <USB_DevInit+0x2b8>)
 801296a:	4313      	orrs	r3, r2
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012970:	7dfb      	ldrb	r3, [r7, #23]
}
 8012972:	4618      	mov	r0, r3
 8012974:	3718      	adds	r7, #24
 8012976:	46bd      	mov	sp, r7
 8012978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801297c:	b004      	add	sp, #16
 801297e:	4770      	bx	lr
 8012980:	803c3800 	.word	0x803c3800
 8012984:	40000004 	.word	0x40000004

08012988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012988:	b480      	push	{r7}
 801298a:	b085      	sub	sp, #20
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012992:	2300      	movs	r3, #0
 8012994:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	3301      	adds	r3, #1
 801299a:	60fb      	str	r3, [r7, #12]
 801299c:	4a12      	ldr	r2, [pc, #72]	; (80129e8 <USB_FlushTxFifo+0x60>)
 801299e:	4293      	cmp	r3, r2
 80129a0:	d901      	bls.n	80129a6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80129a2:	2303      	movs	r3, #3
 80129a4:	e01a      	b.n	80129dc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	691b      	ldr	r3, [r3, #16]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	daf3      	bge.n	8012996 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80129ae:	2300      	movs	r3, #0
 80129b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	019b      	lsls	r3, r3, #6
 80129b6:	f043 0220 	orr.w	r2, r3, #32
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	3301      	adds	r3, #1
 80129c2:	60fb      	str	r3, [r7, #12]
 80129c4:	4a08      	ldr	r2, [pc, #32]	; (80129e8 <USB_FlushTxFifo+0x60>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d901      	bls.n	80129ce <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80129ca:	2303      	movs	r3, #3
 80129cc:	e006      	b.n	80129dc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	f003 0320 	and.w	r3, r3, #32
 80129d6:	2b20      	cmp	r3, #32
 80129d8:	d0f1      	beq.n	80129be <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80129da:	2300      	movs	r3, #0
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr
 80129e8:	00030d40 	.word	0x00030d40

080129ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b085      	sub	sp, #20
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80129f4:	2300      	movs	r3, #0
 80129f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	3301      	adds	r3, #1
 80129fc:	60fb      	str	r3, [r7, #12]
 80129fe:	4a11      	ldr	r2, [pc, #68]	; (8012a44 <USB_FlushRxFifo+0x58>)
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d901      	bls.n	8012a08 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8012a04:	2303      	movs	r3, #3
 8012a06:	e017      	b.n	8012a38 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	691b      	ldr	r3, [r3, #16]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	daf3      	bge.n	80129f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012a10:	2300      	movs	r3, #0
 8012a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2210      	movs	r2, #16
 8012a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	60fb      	str	r3, [r7, #12]
 8012a20:	4a08      	ldr	r2, [pc, #32]	; (8012a44 <USB_FlushRxFifo+0x58>)
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d901      	bls.n	8012a2a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8012a26:	2303      	movs	r3, #3
 8012a28:	e006      	b.n	8012a38 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	691b      	ldr	r3, [r3, #16]
 8012a2e:	f003 0310 	and.w	r3, r3, #16
 8012a32:	2b10      	cmp	r3, #16
 8012a34:	d0f1      	beq.n	8012a1a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3714      	adds	r7, #20
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	00030d40 	.word	0x00030d40

08012a48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	460b      	mov	r3, r1
 8012a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a5e:	681a      	ldr	r2, [r3, #0]
 8012a60:	78fb      	ldrb	r3, [r7, #3]
 8012a62:	68f9      	ldr	r1, [r7, #12]
 8012a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3714      	adds	r7, #20
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr

08012a7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012a7a:	b480      	push	{r7}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012a94:	f023 0303 	bic.w	r3, r3, #3
 8012a98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012aa8:	f043 0302 	orr.w	r3, r3, #2
 8012aac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3714      	adds	r7, #20
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr

08012abc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	695b      	ldr	r3, [r3, #20]
 8012ac8:	f003 0301 	and.w	r3, r3, #1
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	60fb      	str	r3, [r7, #12]
 8012aea:	4a13      	ldr	r2, [pc, #76]	; (8012b38 <USB_CoreReset+0x60>)
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d901      	bls.n	8012af4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8012af0:	2303      	movs	r3, #3
 8012af2:	e01a      	b.n	8012b2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	691b      	ldr	r3, [r3, #16]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	daf3      	bge.n	8012ae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012afc:	2300      	movs	r3, #0
 8012afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	f043 0201 	orr.w	r2, r3, #1
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	60fb      	str	r3, [r7, #12]
 8012b12:	4a09      	ldr	r2, [pc, #36]	; (8012b38 <USB_CoreReset+0x60>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d901      	bls.n	8012b1c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	e006      	b.n	8012b2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	f003 0301 	and.w	r3, r3, #1
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d0f1      	beq.n	8012b0c <USB_CoreReset+0x34>

  return HAL_OK;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3714      	adds	r7, #20
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop
 8012b38:	00030d40 	.word	0x00030d40

08012b3c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8012b44:	4b22      	ldr	r3, [pc, #136]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	4798      	blx	r3
   WIZCHIP.CS._select();
 8012b4a:	4b21      	ldr	r3, [pc, #132]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b4c:	691b      	ldr	r3, [r3, #16]
 8012b4e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8012b50:	4b1f      	ldr	r3, [pc, #124]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b52:	6a1b      	ldr	r3, [r3, #32]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d003      	beq.n	8012b60 <WIZCHIP_READ+0x24>
 8012b58:	4b1d      	ldr	r3, [pc, #116]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d114      	bne.n	8012b8a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8012b60:	4b1b      	ldr	r3, [pc, #108]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b62:	69db      	ldr	r3, [r3, #28]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	0c12      	lsrs	r2, r2, #16
 8012b68:	b2d2      	uxtb	r2, r2
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8012b6e:	4b18      	ldr	r3, [pc, #96]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b70:	69db      	ldr	r3, [r3, #28]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	0a12      	lsrs	r2, r2, #8
 8012b76:	b2d2      	uxtb	r2, r2
 8012b78:	4610      	mov	r0, r2
 8012b7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8012b7c:	4b14      	ldr	r3, [pc, #80]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	b2d2      	uxtb	r2, r2
 8012b84:	4610      	mov	r0, r2
 8012b86:	4798      	blx	r3
 8012b88:	e011      	b.n	8012bae <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	0c1b      	lsrs	r3, r3, #16
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	0a1b      	lsrs	r3, r3, #8
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8012ba0:	4b0b      	ldr	r3, [pc, #44]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba4:	f107 020c 	add.w	r2, r7, #12
 8012ba8:	2103      	movs	r1, #3
 8012baa:	4610      	mov	r0, r2
 8012bac:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8012bae:	4b08      	ldr	r3, [pc, #32]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	4798      	blx	r3
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8012bb8:	4b05      	ldr	r3, [pc, #20]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012bba:	695b      	ldr	r3, [r3, #20]
 8012bbc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8012bbe:	4b04      	ldr	r3, [pc, #16]	; (8012bd0 <WIZCHIP_READ+0x94>)
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	4798      	blx	r3
   return ret;
 8012bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	24000054 	.word	0x24000054

08012bd4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	460b      	mov	r3, r1
 8012bde:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8012be0:	4b22      	ldr	r3, [pc, #136]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012be2:	689b      	ldr	r3, [r3, #8]
 8012be4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8012be6:	4b21      	ldr	r3, [pc, #132]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f043 0304 	orr.w	r3, r3, #4
 8012bf2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8012bf4:	4b1d      	ldr	r3, [pc, #116]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d119      	bne.n	8012c30 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8012bfc:	4b1b      	ldr	r3, [pc, #108]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012bfe:	69db      	ldr	r3, [r3, #28]
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	0c12      	lsrs	r2, r2, #16
 8012c04:	b2d2      	uxtb	r2, r2
 8012c06:	4610      	mov	r0, r2
 8012c08:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8012c0a:	4b18      	ldr	r3, [pc, #96]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012c0c:	69db      	ldr	r3, [r3, #28]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	0a12      	lsrs	r2, r2, #8
 8012c12:	b2d2      	uxtb	r2, r2
 8012c14:	4610      	mov	r0, r2
 8012c16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8012c18:	4b14      	ldr	r3, [pc, #80]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012c1a:	69db      	ldr	r3, [r3, #28]
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	b2d2      	uxtb	r2, r2
 8012c20:	4610      	mov	r0, r2
 8012c22:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8012c24:	4b11      	ldr	r3, [pc, #68]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012c26:	69db      	ldr	r3, [r3, #28]
 8012c28:	78fa      	ldrb	r2, [r7, #3]
 8012c2a:	4610      	mov	r0, r2
 8012c2c:	4798      	blx	r3
 8012c2e:	e013      	b.n	8012c58 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	0c1b      	lsrs	r3, r3, #16
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	0a1b      	lsrs	r3, r3, #8
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	b2db      	uxtb	r3, r3
 8012c44:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8012c46:	78fb      	ldrb	r3, [r7, #3]
 8012c48:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8012c4a:	4b08      	ldr	r3, [pc, #32]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4e:	f107 020c 	add.w	r2, r7, #12
 8012c52:	2104      	movs	r1, #4
 8012c54:	4610      	mov	r0, r2
 8012c56:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8012c58:	4b04      	ldr	r3, [pc, #16]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012c5a:	695b      	ldr	r3, [r3, #20]
 8012c5c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8012c5e:	4b03      	ldr	r3, [pc, #12]	; (8012c6c <WIZCHIP_WRITE+0x98>)
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	4798      	blx	r3
}
 8012c64:	bf00      	nop
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	24000054 	.word	0x24000054

08012c70 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8012c70:	b590      	push	{r4, r7, lr}
 8012c72:	b087      	sub	sp, #28
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8012c7e:	4b2c      	ldr	r3, [pc, #176]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012c80:	689b      	ldr	r3, [r3, #8]
 8012c82:	4798      	blx	r3
   WIZCHIP.CS._select();
 8012c84:	4b2a      	ldr	r3, [pc, #168]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012c86:	691b      	ldr	r3, [r3, #16]
 8012c88:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8012c8a:	4b29      	ldr	r3, [pc, #164]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012c8c:	6a1b      	ldr	r3, [r3, #32]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <WIZCHIP_READ_BUF+0x2a>
 8012c92:	4b27      	ldr	r3, [pc, #156]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d125      	bne.n	8012ce6 <WIZCHIP_READ_BUF+0x76>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8012c9a:	4b25      	ldr	r3, [pc, #148]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012c9c:	69db      	ldr	r3, [r3, #28]
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	0c12      	lsrs	r2, r2, #16
 8012ca2:	b2d2      	uxtb	r2, r2
 8012ca4:	4610      	mov	r0, r2
 8012ca6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8012ca8:	4b21      	ldr	r3, [pc, #132]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012caa:	69db      	ldr	r3, [r3, #28]
 8012cac:	68fa      	ldr	r2, [r7, #12]
 8012cae:	0a12      	lsrs	r2, r2, #8
 8012cb0:	b2d2      	uxtb	r2, r2
 8012cb2:	4610      	mov	r0, r2
 8012cb4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8012cb6:	4b1e      	ldr	r3, [pc, #120]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012cb8:	69db      	ldr	r3, [r3, #28]
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	b2d2      	uxtb	r2, r2
 8012cbe:	4610      	mov	r0, r2
 8012cc0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	82fb      	strh	r3, [r7, #22]
 8012cc6:	8afa      	ldrh	r2, [r7, #22]
 8012cc8:	88fb      	ldrh	r3, [r7, #6]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d224      	bcs.n	8012d18 <WIZCHIP_READ_BUF+0xa8>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8012cce:	4b18      	ldr	r3, [pc, #96]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	8afa      	ldrh	r2, [r7, #22]
 8012cd4:	68b9      	ldr	r1, [r7, #8]
 8012cd6:	188c      	adds	r4, r1, r2
 8012cd8:	4798      	blx	r3
 8012cda:	4603      	mov	r3, r0
 8012cdc:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8012cde:	8afb      	ldrh	r3, [r7, #22]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	82fb      	strh	r3, [r7, #22]
 8012ce4:	e7ef      	b.n	8012cc6 <WIZCHIP_READ_BUF+0x56>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	0c1b      	lsrs	r3, r3, #16
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	0a1b      	lsrs	r3, r3, #8
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8012cfc:	4b0c      	ldr	r3, [pc, #48]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d00:	f107 0210 	add.w	r2, r7, #16
 8012d04:	2103      	movs	r1, #3
 8012d06:	4610      	mov	r0, r2
 8012d08:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8012d0a:	4b09      	ldr	r3, [pc, #36]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012d0c:	6a1b      	ldr	r3, [r3, #32]
 8012d0e:	88fa      	ldrh	r2, [r7, #6]
 8012d10:	4611      	mov	r1, r2
 8012d12:	68b8      	ldr	r0, [r7, #8]
 8012d14:	4798      	blx	r3
 8012d16:	e000      	b.n	8012d1a <WIZCHIP_READ_BUF+0xaa>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8012d18:	bf00      	nop
   }

   WIZCHIP.CS._deselect();
 8012d1a:	4b05      	ldr	r3, [pc, #20]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012d1c:	695b      	ldr	r3, [r3, #20]
 8012d1e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8012d20:	4b03      	ldr	r3, [pc, #12]	; (8012d30 <WIZCHIP_READ_BUF+0xc0>)
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	4798      	blx	r3
}
 8012d26:	bf00      	nop
 8012d28:	371c      	adds	r7, #28
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd90      	pop	{r4, r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	24000054 	.word	0x24000054

08012d34 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b086      	sub	sp, #24
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8012d42:	4b2b      	ldr	r3, [pc, #172]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	4798      	blx	r3
   WIZCHIP.CS._select();
 8012d48:	4b29      	ldr	r3, [pc, #164]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d4a:	691b      	ldr	r3, [r3, #16]
 8012d4c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	f043 0304 	orr.w	r3, r3, #4
 8012d54:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8012d56:	4b26      	ldr	r3, [pc, #152]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d125      	bne.n	8012daa <WIZCHIP_WRITE_BUF+0x76>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8012d5e:	4b24      	ldr	r3, [pc, #144]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d60:	69db      	ldr	r3, [r3, #28]
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	0c12      	lsrs	r2, r2, #16
 8012d66:	b2d2      	uxtb	r2, r2
 8012d68:	4610      	mov	r0, r2
 8012d6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8012d6c:	4b20      	ldr	r3, [pc, #128]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d6e:	69db      	ldr	r3, [r3, #28]
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	0a12      	lsrs	r2, r2, #8
 8012d74:	b2d2      	uxtb	r2, r2
 8012d76:	4610      	mov	r0, r2
 8012d78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8012d7a:	4b1d      	ldr	r3, [pc, #116]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d7c:	69db      	ldr	r3, [r3, #28]
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	b2d2      	uxtb	r2, r2
 8012d82:	4610      	mov	r0, r2
 8012d84:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8012d86:	2300      	movs	r3, #0
 8012d88:	82fb      	strh	r3, [r7, #22]
 8012d8a:	8afa      	ldrh	r2, [r7, #22]
 8012d8c:	88fb      	ldrh	r3, [r7, #6]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d223      	bcs.n	8012dda <WIZCHIP_WRITE_BUF+0xa6>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8012d92:	4b17      	ldr	r3, [pc, #92]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012d94:	69db      	ldr	r3, [r3, #28]
 8012d96:	8afa      	ldrh	r2, [r7, #22]
 8012d98:	68b9      	ldr	r1, [r7, #8]
 8012d9a:	440a      	add	r2, r1
 8012d9c:	7812      	ldrb	r2, [r2, #0]
 8012d9e:	4610      	mov	r0, r2
 8012da0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8012da2:	8afb      	ldrh	r3, [r7, #22]
 8012da4:	3301      	adds	r3, #1
 8012da6:	82fb      	strh	r3, [r7, #22]
 8012da8:	e7ef      	b.n	8012d8a <WIZCHIP_WRITE_BUF+0x56>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	0c1b      	lsrs	r3, r3, #16
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	0a1b      	lsrs	r3, r3, #8
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8012dc0:	4b0b      	ldr	r3, [pc, #44]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc4:	f107 0210 	add.w	r2, r7, #16
 8012dc8:	2103      	movs	r1, #3
 8012dca:	4610      	mov	r0, r2
 8012dcc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8012dce:	4b08      	ldr	r3, [pc, #32]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd2:	88fa      	ldrh	r2, [r7, #6]
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	68b8      	ldr	r0, [r7, #8]
 8012dd8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8012dda:	4b05      	ldr	r3, [pc, #20]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012ddc:	695b      	ldr	r3, [r3, #20]
 8012dde:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8012de0:	4b03      	ldr	r3, [pc, #12]	; (8012df0 <WIZCHIP_WRITE_BUF+0xbc>)
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	4798      	blx	r3
}
 8012de6:	bf00      	nop
 8012de8:	3718      	adds	r7, #24
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	24000054 	.word	0x24000054

08012df4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8012df4:	b590      	push	{r4, r7, lr}
 8012df6:	b085      	sub	sp, #20
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	81fb      	strh	r3, [r7, #14]
 8012e02:	2300      	movs	r3, #0
 8012e04:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8012e06:	79fb      	ldrb	r3, [r7, #7]
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	00db      	lsls	r3, r3, #3
 8012e0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fe92 	bl	8012b3c <WIZCHIP_READ>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8012e1c:	89bb      	ldrh	r3, [r7, #12]
 8012e1e:	021b      	lsls	r3, r3, #8
 8012e20:	b29c      	uxth	r4, r3
 8012e22:	79fb      	ldrb	r3, [r7, #7]
 8012e24:	009b      	lsls	r3, r3, #2
 8012e26:	3301      	adds	r3, #1
 8012e28:	00db      	lsls	r3, r3, #3
 8012e2a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff fe84 	bl	8012b3c <WIZCHIP_READ>
 8012e34:	4603      	mov	r3, r0
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	4423      	add	r3, r4
 8012e3a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8012e3c:	89bb      	ldrh	r3, [r7, #12]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d01a      	beq.n	8012e78 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8012e42:	79fb      	ldrb	r3, [r7, #7]
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	3301      	adds	r3, #1
 8012e48:	00db      	lsls	r3, r3, #3
 8012e4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7ff fe74 	bl	8012b3c <WIZCHIP_READ>
 8012e54:	4603      	mov	r3, r0
 8012e56:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8012e58:	89fb      	ldrh	r3, [r7, #14]
 8012e5a:	021b      	lsls	r3, r3, #8
 8012e5c:	b29c      	uxth	r4, r3
 8012e5e:	79fb      	ldrb	r3, [r7, #7]
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	3301      	adds	r3, #1
 8012e64:	00db      	lsls	r3, r3, #3
 8012e66:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7ff fe66 	bl	8012b3c <WIZCHIP_READ>
 8012e70:	4603      	mov	r3, r0
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	4423      	add	r3, r4
 8012e76:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8012e78:	89fa      	ldrh	r2, [r7, #14]
 8012e7a:	89bb      	ldrh	r3, [r7, #12]
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d000      	beq.n	8012e82 <getSn_TX_FSR+0x8e>
   do
 8012e80:	e7c1      	b.n	8012e06 <getSn_TX_FSR+0x12>
   return val;
 8012e82:	89fb      	ldrh	r3, [r7, #14]
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3714      	adds	r7, #20
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd90      	pop	{r4, r7, pc}

08012e8c <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8012e8c:	b590      	push	{r4, r7, lr}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	4603      	mov	r3, r0
 8012e94:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8012e96:	2300      	movs	r3, #0
 8012e98:	81fb      	strh	r3, [r7, #14]
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8012e9e:	79fb      	ldrb	r3, [r7, #7]
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	00db      	lsls	r3, r3, #3
 8012ea6:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff fe46 	bl	8012b3c <WIZCHIP_READ>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8012eb4:	89bb      	ldrh	r3, [r7, #12]
 8012eb6:	021b      	lsls	r3, r3, #8
 8012eb8:	b29c      	uxth	r4, r3
 8012eba:	79fb      	ldrb	r3, [r7, #7]
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	00db      	lsls	r3, r3, #3
 8012ec2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7ff fe38 	bl	8012b3c <WIZCHIP_READ>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	4423      	add	r3, r4
 8012ed2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8012ed4:	89bb      	ldrh	r3, [r7, #12]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d01a      	beq.n	8012f10 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8012eda:	79fb      	ldrb	r3, [r7, #7]
 8012edc:	009b      	lsls	r3, r3, #2
 8012ede:	3301      	adds	r3, #1
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7ff fe28 	bl	8012b3c <WIZCHIP_READ>
 8012eec:	4603      	mov	r3, r0
 8012eee:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8012ef0:	89fb      	ldrh	r3, [r7, #14]
 8012ef2:	021b      	lsls	r3, r3, #8
 8012ef4:	b29c      	uxth	r4, r3
 8012ef6:	79fb      	ldrb	r3, [r7, #7]
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	3301      	adds	r3, #1
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ff fe1a 	bl	8012b3c <WIZCHIP_READ>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	4423      	add	r3, r4
 8012f0e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8012f10:	89fa      	ldrh	r2, [r7, #14]
 8012f12:	89bb      	ldrh	r3, [r7, #12]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d000      	beq.n	8012f1a <getSn_RX_RSR+0x8e>
   do
 8012f18:	e7c1      	b.n	8012e9e <getSn_RX_RSR+0x12>
   return val;
 8012f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3714      	adds	r7, #20
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd90      	pop	{r4, r7, pc}

08012f24 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8012f24:	b590      	push	{r4, r7, lr}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	6039      	str	r1, [r7, #0]
 8012f2e:	71fb      	strb	r3, [r7, #7]
 8012f30:	4613      	mov	r3, r2
 8012f32:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8012f3c:	88bb      	ldrh	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d048      	beq.n	8012fd4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8012f42:	79fb      	ldrb	r3, [r7, #7]
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	3301      	adds	r3, #1
 8012f48:	00db      	lsls	r3, r3, #3
 8012f4a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7ff fdf4 	bl	8012b3c <WIZCHIP_READ>
 8012f54:	4603      	mov	r3, r0
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	021b      	lsls	r3, r3, #8
 8012f5a:	b29c      	uxth	r4, r3
 8012f5c:	79fb      	ldrb	r3, [r7, #7]
 8012f5e:	009b      	lsls	r3, r3, #2
 8012f60:	3301      	adds	r3, #1
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7ff fde7 	bl	8012b3c <WIZCHIP_READ>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	4423      	add	r3, r4
 8012f74:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8012f76:	89fb      	ldrh	r3, [r7, #14]
 8012f78:	021b      	lsls	r3, r3, #8
 8012f7a:	79fa      	ldrb	r2, [r7, #7]
 8012f7c:	0092      	lsls	r2, r2, #2
 8012f7e:	3202      	adds	r2, #2
 8012f80:	00d2      	lsls	r2, r2, #3
 8012f82:	4413      	add	r3, r2
 8012f84:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8012f86:	88bb      	ldrh	r3, [r7, #4]
 8012f88:	461a      	mov	r2, r3
 8012f8a:	6839      	ldr	r1, [r7, #0]
 8012f8c:	68b8      	ldr	r0, [r7, #8]
 8012f8e:	f7ff fed1 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8012f92:	89fa      	ldrh	r2, [r7, #14]
 8012f94:	88bb      	ldrh	r3, [r7, #4]
 8012f96:	4413      	add	r3, r2
 8012f98:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8012f9a:	79fb      	ldrb	r3, [r7, #7]
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	00db      	lsls	r3, r3, #3
 8012fa2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	89fb      	ldrh	r3, [r7, #14]
 8012faa:	0a1b      	lsrs	r3, r3, #8
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	4610      	mov	r0, r2
 8012fb4:	f7ff fe0e 	bl	8012bd4 <WIZCHIP_WRITE>
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	89fb      	ldrh	r3, [r7, #14]
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	4619      	mov	r1, r3
 8012fcc:	4610      	mov	r0, r2
 8012fce:	f7ff fe01 	bl	8012bd4 <WIZCHIP_WRITE>
 8012fd2:	e000      	b.n	8012fd6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8012fd4:	bf00      	nop
}
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd90      	pop	{r4, r7, pc}

08012fdc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8012fdc:	b590      	push	{r4, r7, lr}
 8012fde:	b085      	sub	sp, #20
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	6039      	str	r1, [r7, #0]
 8012fe6:	71fb      	strb	r3, [r7, #7]
 8012fe8:	4613      	mov	r3, r2
 8012fea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8012fec:	2300      	movs	r3, #0
 8012fee:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8012ff4:	88bb      	ldrh	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d048      	beq.n	801308c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8012ffa:	79fb      	ldrb	r3, [r7, #7]
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	3301      	adds	r3, #1
 8013000:	00db      	lsls	r3, r3, #3
 8013002:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8013006:	4618      	mov	r0, r3
 8013008:	f7ff fd98 	bl	8012b3c <WIZCHIP_READ>
 801300c:	4603      	mov	r3, r0
 801300e:	b29b      	uxth	r3, r3
 8013010:	021b      	lsls	r3, r3, #8
 8013012:	b29c      	uxth	r4, r3
 8013014:	79fb      	ldrb	r3, [r7, #7]
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	3301      	adds	r3, #1
 801301a:	00db      	lsls	r3, r3, #3
 801301c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff fd8b 	bl	8012b3c <WIZCHIP_READ>
 8013026:	4603      	mov	r3, r0
 8013028:	b29b      	uxth	r3, r3
 801302a:	4423      	add	r3, r4
 801302c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 801302e:	89fb      	ldrh	r3, [r7, #14]
 8013030:	021b      	lsls	r3, r3, #8
 8013032:	79fa      	ldrb	r2, [r7, #7]
 8013034:	0092      	lsls	r2, r2, #2
 8013036:	3203      	adds	r2, #3
 8013038:	00d2      	lsls	r2, r2, #3
 801303a:	4413      	add	r3, r2
 801303c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 801303e:	88bb      	ldrh	r3, [r7, #4]
 8013040:	461a      	mov	r2, r3
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	68b8      	ldr	r0, [r7, #8]
 8013046:	f7ff fe13 	bl	8012c70 <WIZCHIP_READ_BUF>
   ptr += len;
 801304a:	89fa      	ldrh	r2, [r7, #14]
 801304c:	88bb      	ldrh	r3, [r7, #4]
 801304e:	4413      	add	r3, r2
 8013050:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8013052:	79fb      	ldrb	r3, [r7, #7]
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	3301      	adds	r3, #1
 8013058:	00db      	lsls	r3, r3, #3
 801305a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801305e:	461a      	mov	r2, r3
 8013060:	89fb      	ldrh	r3, [r7, #14]
 8013062:	0a1b      	lsrs	r3, r3, #8
 8013064:	b29b      	uxth	r3, r3
 8013066:	b2db      	uxtb	r3, r3
 8013068:	4619      	mov	r1, r3
 801306a:	4610      	mov	r0, r2
 801306c:	f7ff fdb2 	bl	8012bd4 <WIZCHIP_WRITE>
 8013070:	79fb      	ldrb	r3, [r7, #7]
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	3301      	adds	r3, #1
 8013076:	00db      	lsls	r3, r3, #3
 8013078:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801307c:	461a      	mov	r2, r3
 801307e:	89fb      	ldrh	r3, [r7, #14]
 8013080:	b2db      	uxtb	r3, r3
 8013082:	4619      	mov	r1, r3
 8013084:	4610      	mov	r0, r2
 8013086:	f7ff fda5 	bl	8012bd4 <WIZCHIP_WRITE>
 801308a:	e000      	b.n	801308e <wiz_recv_data+0xb2>
   if(len == 0) return;
 801308c:	bf00      	nop
}
 801308e:	3714      	adds	r7, #20
 8013090:	46bd      	mov	sp, r7
 8013092:	bd90      	pop	{r4, r7, pc}

08013094 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8013094:	b590      	push	{r4, r7, lr}
 8013096:	b085      	sub	sp, #20
 8013098:	af00      	add	r7, sp, #0
 801309a:	4603      	mov	r3, r0
 801309c:	460a      	mov	r2, r1
 801309e:	71fb      	strb	r3, [r7, #7]
 80130a0:	4613      	mov	r3, r2
 80130a2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80130a8:	79fb      	ldrb	r3, [r7, #7]
 80130aa:	009b      	lsls	r3, r3, #2
 80130ac:	3301      	adds	r3, #1
 80130ae:	00db      	lsls	r3, r3, #3
 80130b0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ff fd41 	bl	8012b3c <WIZCHIP_READ>
 80130ba:	4603      	mov	r3, r0
 80130bc:	b29b      	uxth	r3, r3
 80130be:	021b      	lsls	r3, r3, #8
 80130c0:	b29c      	uxth	r4, r3
 80130c2:	79fb      	ldrb	r3, [r7, #7]
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	3301      	adds	r3, #1
 80130c8:	00db      	lsls	r3, r3, #3
 80130ca:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7ff fd34 	bl	8012b3c <WIZCHIP_READ>
 80130d4:	4603      	mov	r3, r0
 80130d6:	b29b      	uxth	r3, r3
 80130d8:	4423      	add	r3, r4
 80130da:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80130dc:	89fa      	ldrh	r2, [r7, #14]
 80130de:	88bb      	ldrh	r3, [r7, #4]
 80130e0:	4413      	add	r3, r2
 80130e2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80130e4:	79fb      	ldrb	r3, [r7, #7]
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	3301      	adds	r3, #1
 80130ea:	00db      	lsls	r3, r3, #3
 80130ec:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80130f0:	461a      	mov	r2, r3
 80130f2:	89fb      	ldrh	r3, [r7, #14]
 80130f4:	0a1b      	lsrs	r3, r3, #8
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	4619      	mov	r1, r3
 80130fc:	4610      	mov	r0, r2
 80130fe:	f7ff fd69 	bl	8012bd4 <WIZCHIP_WRITE>
 8013102:	79fb      	ldrb	r3, [r7, #7]
 8013104:	009b      	lsls	r3, r3, #2
 8013106:	3301      	adds	r3, #1
 8013108:	00db      	lsls	r3, r3, #3
 801310a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801310e:	461a      	mov	r2, r3
 8013110:	89fb      	ldrh	r3, [r7, #14]
 8013112:	b2db      	uxtb	r3, r3
 8013114:	4619      	mov	r1, r3
 8013116:	4610      	mov	r0, r2
 8013118:	f7ff fd5c 	bl	8012bd4 <WIZCHIP_WRITE>
}
 801311c:	bf00      	nop
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	bd90      	pop	{r4, r7, pc}

08013124 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8013124:	b590      	push	{r4, r7, lr}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	4604      	mov	r4, r0
 801312c:	4608      	mov	r0, r1
 801312e:	4611      	mov	r1, r2
 8013130:	461a      	mov	r2, r3
 8013132:	4623      	mov	r3, r4
 8013134:	71fb      	strb	r3, [r7, #7]
 8013136:	4603      	mov	r3, r0
 8013138:	71bb      	strb	r3, [r7, #6]
 801313a:	460b      	mov	r3, r1
 801313c:	80bb      	strh	r3, [r7, #4]
 801313e:	4613      	mov	r3, r2
 8013140:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8013142:	79fb      	ldrb	r3, [r7, #7]
 8013144:	2b08      	cmp	r3, #8
 8013146:	d902      	bls.n	801314e <socket+0x2a>
 8013148:	f04f 33ff 	mov.w	r3, #4294967295
 801314c:	e0f2      	b.n	8013334 <socket+0x210>
	switch(protocol)
 801314e:	79bb      	ldrb	r3, [r7, #6]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d005      	beq.n	8013160 <socket+0x3c>
 8013154:	2b00      	cmp	r3, #0
 8013156:	dd11      	ble.n	801317c <socket+0x58>
 8013158:	3b02      	subs	r3, #2
 801315a:	2b02      	cmp	r3, #2
 801315c:	d80e      	bhi.n	801317c <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 801315e:	e010      	b.n	8013182 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8013160:	f107 030c 	add.w	r3, r7, #12
 8013164:	2204      	movs	r2, #4
 8013166:	4619      	mov	r1, r3
 8013168:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801316c:	f7ff fd80 	bl	8012c70 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d105      	bne.n	8013182 <socket+0x5e>
 8013176:	f06f 0302 	mvn.w	r3, #2
 801317a:	e0db      	b.n	8013334 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 801317c:	f06f 0304 	mvn.w	r3, #4
 8013180:	e0d8      	b.n	8013334 <socket+0x210>
         break;
 8013182:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8013184:	78fb      	ldrb	r3, [r7, #3]
 8013186:	f003 0304 	and.w	r3, r3, #4
 801318a:	2b00      	cmp	r3, #0
 801318c:	d002      	beq.n	8013194 <socket+0x70>
 801318e:	f06f 0305 	mvn.w	r3, #5
 8013192:	e0cf      	b.n	8013334 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8013194:	78fb      	ldrb	r3, [r7, #3]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d025      	beq.n	80131e6 <socket+0xc2>
	{
   	switch(protocol)
 801319a:	79bb      	ldrb	r3, [r7, #6]
 801319c:	2b01      	cmp	r3, #1
 801319e:	d002      	beq.n	80131a6 <socket+0x82>
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	d008      	beq.n	80131b6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80131a4:	e024      	b.n	80131f0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80131a6:	78fb      	ldrb	r3, [r7, #3]
 80131a8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d11c      	bne.n	80131ea <socket+0xc6>
 80131b0:	f06f 0305 	mvn.w	r3, #5
 80131b4:	e0be      	b.n	8013334 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80131b6:	78fb      	ldrb	r3, [r7, #3]
 80131b8:	f003 0320 	and.w	r3, r3, #32
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d006      	beq.n	80131ce <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80131c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	db02      	blt.n	80131ce <socket+0xaa>
 80131c8:	f06f 0305 	mvn.w	r3, #5
 80131cc:	e0b2      	b.n	8013334 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80131ce:	78fb      	ldrb	r3, [r7, #3]
 80131d0:	f003 0310 	and.w	r3, r3, #16
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00a      	beq.n	80131ee <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80131d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	db06      	blt.n	80131ee <socket+0xca>
 80131e0:	f06f 0305 	mvn.w	r3, #5
 80131e4:	e0a6      	b.n	8013334 <socket+0x210>
   	}
   }
 80131e6:	bf00      	nop
 80131e8:	e002      	b.n	80131f0 <socket+0xcc>
   	      break;
 80131ea:	bf00      	nop
 80131ec:	e000      	b.n	80131f0 <socket+0xcc>
   	      break;
 80131ee:	bf00      	nop
	close(sn);
 80131f0:	79fb      	ldrb	r3, [r7, #7]
 80131f2:	4618      	mov	r0, r3
 80131f4:	f000 f8ac 	bl	8013350 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80131f8:	79fb      	ldrb	r3, [r7, #7]
 80131fa:	009b      	lsls	r3, r3, #2
 80131fc:	3301      	adds	r3, #1
 80131fe:	00db      	lsls	r3, r3, #3
 8013200:	4618      	mov	r0, r3
 8013202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013206:	f023 030f 	bic.w	r3, r3, #15
 801320a:	b25a      	sxtb	r2, r3
 801320c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013210:	4313      	orrs	r3, r2
 8013212:	b25b      	sxtb	r3, r3
 8013214:	b2db      	uxtb	r3, r3
 8013216:	4619      	mov	r1, r3
 8013218:	f7ff fcdc 	bl	8012bd4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 801321c:	88bb      	ldrh	r3, [r7, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d110      	bne.n	8013244 <socket+0x120>
	{
	   port = sock_any_port++;
 8013222:	4b46      	ldr	r3, [pc, #280]	; (801333c <socket+0x218>)
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	1c5a      	adds	r2, r3, #1
 8013228:	b291      	uxth	r1, r2
 801322a:	4a44      	ldr	r2, [pc, #272]	; (801333c <socket+0x218>)
 801322c:	8011      	strh	r1, [r2, #0]
 801322e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8013230:	4b42      	ldr	r3, [pc, #264]	; (801333c <socket+0x218>)
 8013232:	881b      	ldrh	r3, [r3, #0]
 8013234:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8013238:	4293      	cmp	r3, r2
 801323a:	d103      	bne.n	8013244 <socket+0x120>
 801323c:	4b3f      	ldr	r3, [pc, #252]	; (801333c <socket+0x218>)
 801323e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013242:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8013244:	79fb      	ldrb	r3, [r7, #7]
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	3301      	adds	r3, #1
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013250:	461a      	mov	r2, r3
 8013252:	88bb      	ldrh	r3, [r7, #4]
 8013254:	0a1b      	lsrs	r3, r3, #8
 8013256:	b29b      	uxth	r3, r3
 8013258:	b2db      	uxtb	r3, r3
 801325a:	4619      	mov	r1, r3
 801325c:	4610      	mov	r0, r2
 801325e:	f7ff fcb9 	bl	8012bd4 <WIZCHIP_WRITE>
 8013262:	79fb      	ldrb	r3, [r7, #7]
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	3301      	adds	r3, #1
 8013268:	00db      	lsls	r3, r3, #3
 801326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801326e:	461a      	mov	r2, r3
 8013270:	88bb      	ldrh	r3, [r7, #4]
 8013272:	b2db      	uxtb	r3, r3
 8013274:	4619      	mov	r1, r3
 8013276:	4610      	mov	r0, r2
 8013278:	f7ff fcac 	bl	8012bd4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801327c:	79fb      	ldrb	r3, [r7, #7]
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	3301      	adds	r3, #1
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013288:	2101      	movs	r1, #1
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fca2 	bl	8012bd4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8013290:	bf00      	nop
 8013292:	79fb      	ldrb	r3, [r7, #7]
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	3301      	adds	r3, #1
 8013298:	00db      	lsls	r3, r3, #3
 801329a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801329e:	4618      	mov	r0, r3
 80132a0:	f7ff fc4c 	bl	8012b3c <WIZCHIP_READ>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1f3      	bne.n	8013292 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80132aa:	79fb      	ldrb	r3, [r7, #7]
 80132ac:	2201      	movs	r2, #1
 80132ae:	fa02 f303 	lsl.w	r3, r2, r3
 80132b2:	b21b      	sxth	r3, r3
 80132b4:	43db      	mvns	r3, r3
 80132b6:	b21a      	sxth	r2, r3
 80132b8:	4b21      	ldr	r3, [pc, #132]	; (8013340 <socket+0x21c>)
 80132ba:	881b      	ldrh	r3, [r3, #0]
 80132bc:	b21b      	sxth	r3, r3
 80132be:	4013      	ands	r3, r2
 80132c0:	b21b      	sxth	r3, r3
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	4b1e      	ldr	r3, [pc, #120]	; (8013340 <socket+0x21c>)
 80132c6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80132c8:	78fb      	ldrb	r3, [r7, #3]
 80132ca:	f003 0201 	and.w	r2, r3, #1
 80132ce:	79fb      	ldrb	r3, [r7, #7]
 80132d0:	fa02 f303 	lsl.w	r3, r2, r3
 80132d4:	b21a      	sxth	r2, r3
 80132d6:	4b1a      	ldr	r3, [pc, #104]	; (8013340 <socket+0x21c>)
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	b21b      	sxth	r3, r3
 80132dc:	4313      	orrs	r3, r2
 80132de:	b21b      	sxth	r3, r3
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	4b17      	ldr	r3, [pc, #92]	; (8013340 <socket+0x21c>)
 80132e4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80132e6:	79fb      	ldrb	r3, [r7, #7]
 80132e8:	2201      	movs	r2, #1
 80132ea:	fa02 f303 	lsl.w	r3, r2, r3
 80132ee:	b21b      	sxth	r3, r3
 80132f0:	43db      	mvns	r3, r3
 80132f2:	b21a      	sxth	r2, r3
 80132f4:	4b13      	ldr	r3, [pc, #76]	; (8013344 <socket+0x220>)
 80132f6:	881b      	ldrh	r3, [r3, #0]
 80132f8:	b21b      	sxth	r3, r3
 80132fa:	4013      	ands	r3, r2
 80132fc:	b21b      	sxth	r3, r3
 80132fe:	b29a      	uxth	r2, r3
 8013300:	4b10      	ldr	r3, [pc, #64]	; (8013344 <socket+0x220>)
 8013302:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8013304:	79fb      	ldrb	r3, [r7, #7]
 8013306:	4a10      	ldr	r2, [pc, #64]	; (8013348 <socket+0x224>)
 8013308:	2100      	movs	r1, #0
 801330a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 801330e:	79fb      	ldrb	r3, [r7, #7]
 8013310:	4a0e      	ldr	r2, [pc, #56]	; (801334c <socket+0x228>)
 8013312:	2100      	movs	r1, #0
 8013314:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8013316:	bf00      	nop
 8013318:	79fb      	ldrb	r3, [r7, #7]
 801331a:	009b      	lsls	r3, r3, #2
 801331c:	3301      	adds	r3, #1
 801331e:	00db      	lsls	r3, r3, #3
 8013320:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013324:	4618      	mov	r0, r3
 8013326:	f7ff fc09 	bl	8012b3c <WIZCHIP_READ>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	d0f3      	beq.n	8013318 <socket+0x1f4>
   return (int8_t)sn;
 8013330:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8013334:	4618      	mov	r0, r3
 8013336:	3714      	adds	r7, #20
 8013338:	46bd      	mov	sp, r7
 801333a:	bd90      	pop	{r4, r7, pc}
 801333c:	24000050 	.word	0x24000050
 8013340:	24001498 	.word	0x24001498
 8013344:	2400149a 	.word	0x2400149a
 8013348:	2400149c 	.word	0x2400149c
 801334c:	240014ac 	.word	0x240014ac

08013350 <close>:

int8_t close(uint8_t sn)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	4603      	mov	r3, r0
 8013358:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 801335a:	79fb      	ldrb	r3, [r7, #7]
 801335c:	2b08      	cmp	r3, #8
 801335e:	d902      	bls.n	8013366 <close+0x16>
 8013360:	f04f 33ff 	mov.w	r3, #4294967295
 8013364:	e055      	b.n	8013412 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8013366:	79fb      	ldrb	r3, [r7, #7]
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	3301      	adds	r3, #1
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013372:	2110      	movs	r1, #16
 8013374:	4618      	mov	r0, r3
 8013376:	f7ff fc2d 	bl	8012bd4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801337a:	bf00      	nop
 801337c:	79fb      	ldrb	r3, [r7, #7]
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	3301      	adds	r3, #1
 8013382:	00db      	lsls	r3, r3, #3
 8013384:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013388:	4618      	mov	r0, r3
 801338a:	f7ff fbd7 	bl	8012b3c <WIZCHIP_READ>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d1f3      	bne.n	801337c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8013394:	79fb      	ldrb	r3, [r7, #7]
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	3301      	adds	r3, #1
 801339a:	00db      	lsls	r3, r3, #3
 801339c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80133a0:	211f      	movs	r1, #31
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7ff fc16 	bl	8012bd4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80133a8:	79fb      	ldrb	r3, [r7, #7]
 80133aa:	2201      	movs	r2, #1
 80133ac:	fa02 f303 	lsl.w	r3, r2, r3
 80133b0:	b21b      	sxth	r3, r3
 80133b2:	43db      	mvns	r3, r3
 80133b4:	b21a      	sxth	r2, r3
 80133b6:	4b19      	ldr	r3, [pc, #100]	; (801341c <close+0xcc>)
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	b21b      	sxth	r3, r3
 80133bc:	4013      	ands	r3, r2
 80133be:	b21b      	sxth	r3, r3
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	4b16      	ldr	r3, [pc, #88]	; (801341c <close+0xcc>)
 80133c4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80133c6:	79fb      	ldrb	r3, [r7, #7]
 80133c8:	2201      	movs	r2, #1
 80133ca:	fa02 f303 	lsl.w	r3, r2, r3
 80133ce:	b21b      	sxth	r3, r3
 80133d0:	43db      	mvns	r3, r3
 80133d2:	b21a      	sxth	r2, r3
 80133d4:	4b12      	ldr	r3, [pc, #72]	; (8013420 <close+0xd0>)
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	b21b      	sxth	r3, r3
 80133da:	4013      	ands	r3, r2
 80133dc:	b21b      	sxth	r3, r3
 80133de:	b29a      	uxth	r2, r3
 80133e0:	4b0f      	ldr	r3, [pc, #60]	; (8013420 <close+0xd0>)
 80133e2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80133e4:	79fb      	ldrb	r3, [r7, #7]
 80133e6:	4a0f      	ldr	r2, [pc, #60]	; (8013424 <close+0xd4>)
 80133e8:	2100      	movs	r1, #0
 80133ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80133ee:	79fb      	ldrb	r3, [r7, #7]
 80133f0:	4a0d      	ldr	r2, [pc, #52]	; (8013428 <close+0xd8>)
 80133f2:	2100      	movs	r1, #0
 80133f4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80133f6:	bf00      	nop
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	3301      	adds	r3, #1
 80133fe:	00db      	lsls	r3, r3, #3
 8013400:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff fb99 	bl	8012b3c <WIZCHIP_READ>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d1f3      	bne.n	80133f8 <close+0xa8>
	return SOCK_OK;
 8013410:	2301      	movs	r3, #1
}
 8013412:	4618      	mov	r0, r3
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	24001498 	.word	0x24001498
 8013420:	2400149a 	.word	0x2400149a
 8013424:	2400149c 	.word	0x2400149c
 8013428:	240014ac 	.word	0x240014ac

0801342c <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af00      	add	r7, sp, #0
 8013432:	60b9      	str	r1, [r7, #8]
 8013434:	607b      	str	r3, [r7, #4]
 8013436:	4603      	mov	r3, r0
 8013438:	73fb      	strb	r3, [r7, #15]
 801343a:	4613      	mov	r3, r2
 801343c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 801343e:	2300      	movs	r3, #0
 8013440:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8013442:	2300      	movs	r3, #0
 8013444:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8013446:	7bfb      	ldrb	r3, [r7, #15]
 8013448:	2b08      	cmp	r3, #8
 801344a:	d902      	bls.n	8013452 <sendto+0x26>
 801344c:	f04f 33ff 	mov.w	r3, #4294967295
 8013450:	e11b      	b.n	801368a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8013452:	7bfb      	ldrb	r3, [r7, #15]
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	3301      	adds	r3, #1
 8013458:	00db      	lsls	r3, r3, #3
 801345a:	4618      	mov	r0, r3
 801345c:	f7ff fb6e 	bl	8012b3c <WIZCHIP_READ>
 8013460:	4603      	mov	r3, r0
 8013462:	f003 030f 	and.w	r3, r3, #15
 8013466:	3b02      	subs	r3, #2
 8013468:	2b02      	cmp	r3, #2
 801346a:	d902      	bls.n	8013472 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 801346c:	f06f 0304 	mvn.w	r3, #4
 8013470:	e10b      	b.n	801368a <sendto+0x25e>
         break;
 8013472:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8013474:	89bb      	ldrh	r3, [r7, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d102      	bne.n	8013480 <sendto+0x54>
 801347a:	f06f 030d 	mvn.w	r3, #13
 801347e:	e104      	b.n	801368a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	021b      	lsls	r3, r3, #8
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	3201      	adds	r2, #1
 801348e:	7812      	ldrb	r2, [r2, #0]
 8013490:	4413      	add	r3, r2
 8013492:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	021b      	lsls	r3, r3, #8
 8013498:	687a      	ldr	r2, [r7, #4]
 801349a:	3202      	adds	r2, #2
 801349c:	7812      	ldrb	r2, [r2, #0]
 801349e:	4413      	add	r3, r2
 80134a0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	021b      	lsls	r3, r3, #8
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	3203      	adds	r2, #3
 80134aa:	7812      	ldrb	r2, [r2, #0]
 80134ac:	4413      	add	r3, r2
 80134ae:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10e      	bne.n	80134d4 <sendto+0xa8>
 80134b6:	7bfb      	ldrb	r3, [r7, #15]
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	3301      	adds	r3, #1
 80134bc:	00db      	lsls	r3, r3, #3
 80134be:	4618      	mov	r0, r3
 80134c0:	f7ff fb3c 	bl	8012b3c <WIZCHIP_READ>
 80134c4:	4603      	mov	r3, r0
 80134c6:	f003 0304 	and.w	r3, r3, #4
 80134ca:	2b04      	cmp	r3, #4
 80134cc:	d002      	beq.n	80134d4 <sendto+0xa8>
 80134ce:	f06f 030b 	mvn.w	r3, #11
 80134d2:	e0da      	b.n	801368a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80134d4:	8c3b      	ldrh	r3, [r7, #32]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10e      	bne.n	80134f8 <sendto+0xcc>
 80134da:	7bfb      	ldrb	r3, [r7, #15]
 80134dc:	009b      	lsls	r3, r3, #2
 80134de:	3301      	adds	r3, #1
 80134e0:	00db      	lsls	r3, r3, #3
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7ff fb2a 	bl	8012b3c <WIZCHIP_READ>
 80134e8:	4603      	mov	r3, r0
 80134ea:	f003 0304 	and.w	r3, r3, #4
 80134ee:	2b04      	cmp	r3, #4
 80134f0:	d002      	beq.n	80134f8 <sendto+0xcc>
 80134f2:	f06f 030a 	mvn.w	r3, #10
 80134f6:	e0c8      	b.n	801368a <sendto+0x25e>
   tmp = getSn_SR(sn);
 80134f8:	7bfb      	ldrb	r3, [r7, #15]
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	3301      	adds	r3, #1
 80134fe:	00db      	lsls	r3, r3, #3
 8013500:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013504:	4618      	mov	r0, r3
 8013506:	f7ff fb19 	bl	8012b3c <WIZCHIP_READ>
 801350a:	4603      	mov	r3, r0
 801350c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 801350e:	7dfb      	ldrb	r3, [r7, #23]
 8013510:	2b42      	cmp	r3, #66	; 0x42
 8013512:	d008      	beq.n	8013526 <sendto+0xfa>
 8013514:	7dfb      	ldrb	r3, [r7, #23]
 8013516:	2b22      	cmp	r3, #34	; 0x22
 8013518:	d005      	beq.n	8013526 <sendto+0xfa>
 801351a:	7dfb      	ldrb	r3, [r7, #23]
 801351c:	2b32      	cmp	r3, #50	; 0x32
 801351e:	d002      	beq.n	8013526 <sendto+0xfa>
 8013520:	f06f 0306 	mvn.w	r3, #6
 8013524:	e0b1      	b.n	801368a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8013526:	7bfb      	ldrb	r3, [r7, #15]
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	3301      	adds	r3, #1
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8013532:	2204      	movs	r2, #4
 8013534:	6879      	ldr	r1, [r7, #4]
 8013536:	4618      	mov	r0, r3
 8013538:	f7ff fbfc 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 801353c:	7bfb      	ldrb	r3, [r7, #15]
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	3301      	adds	r3, #1
 8013542:	00db      	lsls	r3, r3, #3
 8013544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013548:	461a      	mov	r2, r3
 801354a:	8c3b      	ldrh	r3, [r7, #32]
 801354c:	0a1b      	lsrs	r3, r3, #8
 801354e:	b29b      	uxth	r3, r3
 8013550:	b2db      	uxtb	r3, r3
 8013552:	4619      	mov	r1, r3
 8013554:	4610      	mov	r0, r2
 8013556:	f7ff fb3d 	bl	8012bd4 <WIZCHIP_WRITE>
 801355a:	7bfb      	ldrb	r3, [r7, #15]
 801355c:	009b      	lsls	r3, r3, #2
 801355e:	3301      	adds	r3, #1
 8013560:	00db      	lsls	r3, r3, #3
 8013562:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8013566:	461a      	mov	r2, r3
 8013568:	8c3b      	ldrh	r3, [r7, #32]
 801356a:	b2db      	uxtb	r3, r3
 801356c:	4619      	mov	r1, r3
 801356e:	4610      	mov	r0, r2
 8013570:	f7ff fb30 	bl	8012bd4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8013574:	7bfb      	ldrb	r3, [r7, #15]
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	3301      	adds	r3, #1
 801357a:	00db      	lsls	r3, r3, #3
 801357c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8013580:	4618      	mov	r0, r3
 8013582:	f7ff fadb 	bl	8012b3c <WIZCHIP_READ>
 8013586:	4603      	mov	r3, r0
 8013588:	b29b      	uxth	r3, r3
 801358a:	029b      	lsls	r3, r3, #10
 801358c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801358e:	89ba      	ldrh	r2, [r7, #12]
 8013590:	8abb      	ldrh	r3, [r7, #20]
 8013592:	429a      	cmp	r2, r3
 8013594:	d901      	bls.n	801359a <sendto+0x16e>
 8013596:	8abb      	ldrh	r3, [r7, #20]
 8013598:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801359a:	7bfb      	ldrb	r3, [r7, #15]
 801359c:	4618      	mov	r0, r3
 801359e:	f7ff fc29 	bl	8012df4 <getSn_TX_FSR>
 80135a2:	4603      	mov	r3, r0
 80135a4:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80135a6:	7bfb      	ldrb	r3, [r7, #15]
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	3301      	adds	r3, #1
 80135ac:	00db      	lsls	r3, r3, #3
 80135ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff fac2 	bl	8012b3c <WIZCHIP_READ>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d102      	bne.n	80135c4 <sendto+0x198>
 80135be:	f06f 0303 	mvn.w	r3, #3
 80135c2:	e062      	b.n	801368a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80135c4:	4b33      	ldr	r3, [pc, #204]	; (8013694 <sendto+0x268>)
 80135c6:	881b      	ldrh	r3, [r3, #0]
 80135c8:	461a      	mov	r2, r3
 80135ca:	7bfb      	ldrb	r3, [r7, #15]
 80135cc:	fa42 f303 	asr.w	r3, r2, r3
 80135d0:	f003 0301 	and.w	r3, r3, #1
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d005      	beq.n	80135e4 <sendto+0x1b8>
 80135d8:	89ba      	ldrh	r2, [r7, #12]
 80135da:	8abb      	ldrh	r3, [r7, #20]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d901      	bls.n	80135e4 <sendto+0x1b8>
 80135e0:	2300      	movs	r3, #0
 80135e2:	e052      	b.n	801368a <sendto+0x25e>
      if(len <= freesize) break;
 80135e4:	89ba      	ldrh	r2, [r7, #12]
 80135e6:	8abb      	ldrh	r3, [r7, #20]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d900      	bls.n	80135ee <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80135ec:	e7d5      	b.n	801359a <sendto+0x16e>
      if(len <= freesize) break;
 80135ee:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80135f0:	89ba      	ldrh	r2, [r7, #12]
 80135f2:	7bfb      	ldrb	r3, [r7, #15]
 80135f4:	68b9      	ldr	r1, [r7, #8]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff fc94 	bl	8012f24 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80135fc:	7bfb      	ldrb	r3, [r7, #15]
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	3301      	adds	r3, #1
 8013602:	00db      	lsls	r3, r3, #3
 8013604:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013608:	2120      	movs	r1, #32
 801360a:	4618      	mov	r0, r3
 801360c:	f7ff fae2 	bl	8012bd4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8013610:	bf00      	nop
 8013612:	7bfb      	ldrb	r3, [r7, #15]
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	3301      	adds	r3, #1
 8013618:	00db      	lsls	r3, r3, #3
 801361a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801361e:	4618      	mov	r0, r3
 8013620:	f7ff fa8c 	bl	8012b3c <WIZCHIP_READ>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d1f3      	bne.n	8013612 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 801362a:	7bfb      	ldrb	r3, [r7, #15]
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	3301      	adds	r3, #1
 8013630:	00db      	lsls	r3, r3, #3
 8013632:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013636:	4618      	mov	r0, r3
 8013638:	f7ff fa80 	bl	8012b3c <WIZCHIP_READ>
 801363c:	4603      	mov	r3, r0
 801363e:	f003 031f 	and.w	r3, r3, #31
 8013642:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8013644:	7dfb      	ldrb	r3, [r7, #23]
 8013646:	f003 0310 	and.w	r3, r3, #16
 801364a:	2b00      	cmp	r3, #0
 801364c:	d00c      	beq.n	8013668 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801364e:	7bfb      	ldrb	r3, [r7, #15]
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	3301      	adds	r3, #1
 8013654:	00db      	lsls	r3, r3, #3
 8013656:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801365a:	2110      	movs	r1, #16
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff fab9 	bl	8012bd4 <WIZCHIP_WRITE>
         break;
 8013662:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8013664:	89bb      	ldrh	r3, [r7, #12]
 8013666:	e010      	b.n	801368a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8013668:	7dfb      	ldrb	r3, [r7, #23]
 801366a:	f003 0308 	and.w	r3, r3, #8
 801366e:	2b00      	cmp	r3, #0
 8013670:	d0db      	beq.n	801362a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8013672:	7bfb      	ldrb	r3, [r7, #15]
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	3301      	adds	r3, #1
 8013678:	00db      	lsls	r3, r3, #3
 801367a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801367e:	2108      	movs	r1, #8
 8013680:	4618      	mov	r0, r3
 8013682:	f7ff faa7 	bl	8012bd4 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8013686:	f06f 030c 	mvn.w	r3, #12
}
 801368a:	4618      	mov	r0, r3
 801368c:	3718      	adds	r7, #24
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	24001498 	.word	0x24001498

08013698 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b088      	sub	sp, #32
 801369c:	af00      	add	r7, sp, #0
 801369e:	60b9      	str	r1, [r7, #8]
 80136a0:	607b      	str	r3, [r7, #4]
 80136a2:	4603      	mov	r3, r0
 80136a4:	73fb      	strb	r3, [r7, #15]
 80136a6:	4613      	mov	r3, r2
 80136a8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80136aa:	2300      	movs	r3, #0
 80136ac:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
 80136b0:	2b08      	cmp	r3, #8
 80136b2:	d902      	bls.n	80136ba <recvfrom+0x22>
 80136b4:	f04f 33ff 	mov.w	r3, #4294967295
 80136b8:	e1d4      	b.n	8013a64 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80136ba:	7bfb      	ldrb	r3, [r7, #15]
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	3301      	adds	r3, #1
 80136c0:	00db      	lsls	r3, r3, #3
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7ff fa3a 	bl	8012b3c <WIZCHIP_READ>
 80136c8:	4603      	mov	r3, r0
 80136ca:	777b      	strb	r3, [r7, #29]
 80136cc:	7f7b      	ldrb	r3, [r7, #29]
 80136ce:	f003 030f 	and.w	r3, r3, #15
 80136d2:	3b02      	subs	r3, #2
 80136d4:	2b02      	cmp	r3, #2
 80136d6:	d902      	bls.n	80136de <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80136d8:	f06f 0304 	mvn.w	r3, #4
 80136dc:	e1c2      	b.n	8013a64 <recvfrom+0x3cc>
         break;
 80136de:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80136e0:	89bb      	ldrh	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d102      	bne.n	80136ec <recvfrom+0x54>
 80136e6:	f06f 030d 	mvn.w	r3, #13
 80136ea:	e1bb      	b.n	8013a64 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80136ec:	7bfb      	ldrb	r3, [r7, #15]
 80136ee:	4a88      	ldr	r2, [pc, #544]	; (8013910 <recvfrom+0x278>)
 80136f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d128      	bne.n	801374a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7ff fbc6 	bl	8012e8c <getSn_RX_RSR>
 8013700:	4603      	mov	r3, r0
 8013702:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8013704:	7bfb      	ldrb	r3, [r7, #15]
 8013706:	009b      	lsls	r3, r3, #2
 8013708:	3301      	adds	r3, #1
 801370a:	00db      	lsls	r3, r3, #3
 801370c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013710:	4618      	mov	r0, r3
 8013712:	f7ff fa13 	bl	8012b3c <WIZCHIP_READ>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d102      	bne.n	8013722 <recvfrom+0x8a>
 801371c:	f06f 0303 	mvn.w	r3, #3
 8013720:	e1a0      	b.n	8013a64 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8013722:	4b7c      	ldr	r3, [pc, #496]	; (8013914 <recvfrom+0x27c>)
 8013724:	881b      	ldrh	r3, [r3, #0]
 8013726:	461a      	mov	r2, r3
 8013728:	7bfb      	ldrb	r3, [r7, #15]
 801372a:	fa42 f303 	asr.w	r3, r2, r3
 801372e:	f003 0301 	and.w	r3, r3, #1
 8013732:	2b00      	cmp	r3, #0
 8013734:	d004      	beq.n	8013740 <recvfrom+0xa8>
 8013736:	8bfb      	ldrh	r3, [r7, #30]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d101      	bne.n	8013740 <recvfrom+0xa8>
 801373c:	2300      	movs	r3, #0
 801373e:	e191      	b.n	8013a64 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8013740:	8bfb      	ldrh	r3, [r7, #30]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d100      	bne.n	8013748 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8013746:	e7d7      	b.n	80136f8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8013748:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 801374a:	7f7b      	ldrb	r3, [r7, #29]
 801374c:	f003 0307 	and.w	r3, r3, #7
 8013750:	2b04      	cmp	r3, #4
 8013752:	d079      	beq.n	8013848 <recvfrom+0x1b0>
 8013754:	2b04      	cmp	r3, #4
 8013756:	f300 8142 	bgt.w	80139de <recvfrom+0x346>
 801375a:	2b02      	cmp	r3, #2
 801375c:	d003      	beq.n	8013766 <recvfrom+0xce>
 801375e:	2b03      	cmp	r3, #3
 8013760:	f000 80dc 	beq.w	801391c <recvfrom+0x284>
 8013764:	e13b      	b.n	80139de <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8013766:	7bfb      	ldrb	r3, [r7, #15]
 8013768:	4a69      	ldr	r2, [pc, #420]	; (8013910 <recvfrom+0x278>)
 801376a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d152      	bne.n	8013818 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8013772:	f107 0114 	add.w	r1, r7, #20
 8013776:	7bfb      	ldrb	r3, [r7, #15]
 8013778:	2208      	movs	r2, #8
 801377a:	4618      	mov	r0, r3
 801377c:	f7ff fc2e 	bl	8012fdc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8013780:	7bfb      	ldrb	r3, [r7, #15]
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	3301      	adds	r3, #1
 8013786:	00db      	lsls	r3, r3, #3
 8013788:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801378c:	2140      	movs	r1, #64	; 0x40
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff fa20 	bl	8012bd4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8013794:	bf00      	nop
 8013796:	7bfb      	ldrb	r3, [r7, #15]
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	3301      	adds	r3, #1
 801379c:	00db      	lsls	r3, r3, #3
 801379e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7ff f9ca 	bl	8012b3c <WIZCHIP_READ>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d1f3      	bne.n	8013796 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80137ae:	7d3a      	ldrb	r2, [r7, #20]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	3301      	adds	r3, #1
 80137b8:	7d7a      	ldrb	r2, [r7, #21]
 80137ba:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	3302      	adds	r3, #2
 80137c0:	7dba      	ldrb	r2, [r7, #22]
 80137c2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	3303      	adds	r3, #3
 80137c8:	7dfa      	ldrb	r2, [r7, #23]
 80137ca:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80137cc:	7e3b      	ldrb	r3, [r7, #24]
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80137d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d6:	881b      	ldrh	r3, [r3, #0]
 80137d8:	021b      	lsls	r3, r3, #8
 80137da:	b29a      	uxth	r2, r3
 80137dc:	7e7b      	ldrb	r3, [r7, #25]
 80137de:	b29b      	uxth	r3, r3
 80137e0:	4413      	add	r3, r2
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80137e8:	7eba      	ldrb	r2, [r7, #26]
 80137ea:	7bfb      	ldrb	r3, [r7, #15]
 80137ec:	b291      	uxth	r1, r2
 80137ee:	4a48      	ldr	r2, [pc, #288]	; (8013910 <recvfrom+0x278>)
 80137f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80137f4:	7bfb      	ldrb	r3, [r7, #15]
 80137f6:	4a46      	ldr	r2, [pc, #280]	; (8013910 <recvfrom+0x278>)
 80137f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137fc:	021b      	lsls	r3, r3, #8
 80137fe:	b299      	uxth	r1, r3
 8013800:	7efb      	ldrb	r3, [r7, #27]
 8013802:	b29a      	uxth	r2, r3
 8013804:	7bfb      	ldrb	r3, [r7, #15]
 8013806:	440a      	add	r2, r1
 8013808:	b291      	uxth	r1, r2
 801380a:	4a41      	ldr	r2, [pc, #260]	; (8013910 <recvfrom+0x278>)
 801380c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8013810:	7bfb      	ldrb	r3, [r7, #15]
 8013812:	4a41      	ldr	r2, [pc, #260]	; (8013918 <recvfrom+0x280>)
 8013814:	2180      	movs	r1, #128	; 0x80
 8013816:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8013818:	7bfb      	ldrb	r3, [r7, #15]
 801381a:	4a3d      	ldr	r2, [pc, #244]	; (8013910 <recvfrom+0x278>)
 801381c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013820:	89ba      	ldrh	r2, [r7, #12]
 8013822:	429a      	cmp	r2, r3
 8013824:	d202      	bcs.n	801382c <recvfrom+0x194>
 8013826:	89bb      	ldrh	r3, [r7, #12]
 8013828:	83fb      	strh	r3, [r7, #30]
 801382a:	e004      	b.n	8013836 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 801382c:	7bfb      	ldrb	r3, [r7, #15]
 801382e:	4a38      	ldr	r2, [pc, #224]	; (8013910 <recvfrom+0x278>)
 8013830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013834:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8013836:	8bfb      	ldrh	r3, [r7, #30]
 8013838:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 801383a:	8bfa      	ldrh	r2, [r7, #30]
 801383c:	7bfb      	ldrb	r3, [r7, #15]
 801383e:	68b9      	ldr	r1, [r7, #8]
 8013840:	4618      	mov	r0, r3
 8013842:	f7ff fbcb 	bl	8012fdc <wiz_recv_data>
			break;
 8013846:	e0d6      	b.n	80139f6 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8013848:	7bfb      	ldrb	r3, [r7, #15]
 801384a:	4a31      	ldr	r2, [pc, #196]	; (8013910 <recvfrom+0x278>)
 801384c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d146      	bne.n	80138e2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8013854:	f107 0114 	add.w	r1, r7, #20
 8013858:	7bfb      	ldrb	r3, [r7, #15]
 801385a:	2202      	movs	r2, #2
 801385c:	4618      	mov	r0, r3
 801385e:	f7ff fbbd 	bl	8012fdc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8013862:	7bfb      	ldrb	r3, [r7, #15]
 8013864:	009b      	lsls	r3, r3, #2
 8013866:	3301      	adds	r3, #1
 8013868:	00db      	lsls	r3, r3, #3
 801386a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801386e:	2140      	movs	r1, #64	; 0x40
 8013870:	4618      	mov	r0, r3
 8013872:	f7ff f9af 	bl	8012bd4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8013876:	bf00      	nop
 8013878:	7bfb      	ldrb	r3, [r7, #15]
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	3301      	adds	r3, #1
 801387e:	00db      	lsls	r3, r3, #3
 8013880:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013884:	4618      	mov	r0, r3
 8013886:	f7ff f959 	bl	8012b3c <WIZCHIP_READ>
 801388a:	4603      	mov	r3, r0
 801388c:	2b00      	cmp	r3, #0
 801388e:	d1f3      	bne.n	8013878 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8013890:	7d3a      	ldrb	r2, [r7, #20]
 8013892:	7bfb      	ldrb	r3, [r7, #15]
 8013894:	b291      	uxth	r1, r2
 8013896:	4a1e      	ldr	r2, [pc, #120]	; (8013910 <recvfrom+0x278>)
 8013898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 801389c:	7bfb      	ldrb	r3, [r7, #15]
 801389e:	4a1c      	ldr	r2, [pc, #112]	; (8013910 <recvfrom+0x278>)
 80138a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138a4:	021b      	lsls	r3, r3, #8
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	7d7b      	ldrb	r3, [r7, #21]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4413      	add	r3, r2
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	7bfb      	ldrb	r3, [r7, #15]
 80138b2:	3a02      	subs	r2, #2
 80138b4:	b291      	uxth	r1, r2
 80138b6:	4a16      	ldr	r2, [pc, #88]	; (8013910 <recvfrom+0x278>)
 80138b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
 80138be:	4a14      	ldr	r2, [pc, #80]	; (8013910 <recvfrom+0x278>)
 80138c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138c4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d906      	bls.n	80138da <recvfrom+0x242>
   			{
   			   close(sn);
 80138cc:	7bfb      	ldrb	r3, [r7, #15]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7ff fd3e 	bl	8013350 <close>
   			   return SOCKFATAL_PACKLEN;
 80138d4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80138d8:	e0c4      	b.n	8013a64 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80138da:	7bfb      	ldrb	r3, [r7, #15]
 80138dc:	4a0e      	ldr	r2, [pc, #56]	; (8013918 <recvfrom+0x280>)
 80138de:	2180      	movs	r1, #128	; 0x80
 80138e0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80138e2:	7bfb      	ldrb	r3, [r7, #15]
 80138e4:	4a0a      	ldr	r2, [pc, #40]	; (8013910 <recvfrom+0x278>)
 80138e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138ea:	89ba      	ldrh	r2, [r7, #12]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d202      	bcs.n	80138f6 <recvfrom+0x25e>
 80138f0:	89bb      	ldrh	r3, [r7, #12]
 80138f2:	83fb      	strh	r3, [r7, #30]
 80138f4:	e004      	b.n	8013900 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80138f6:	7bfb      	ldrb	r3, [r7, #15]
 80138f8:	4a05      	ldr	r2, [pc, #20]	; (8013910 <recvfrom+0x278>)
 80138fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138fe:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8013900:	8bfa      	ldrh	r2, [r7, #30]
 8013902:	7bfb      	ldrb	r3, [r7, #15]
 8013904:	68b9      	ldr	r1, [r7, #8]
 8013906:	4618      	mov	r0, r3
 8013908:	f7ff fb68 	bl	8012fdc <wiz_recv_data>
		   break;
 801390c:	e073      	b.n	80139f6 <recvfrom+0x35e>
 801390e:	bf00      	nop
 8013910:	2400149c 	.word	0x2400149c
 8013914:	24001498 	.word	0x24001498
 8013918:	240014ac 	.word	0x240014ac
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 801391c:	7bfb      	ldrb	r3, [r7, #15]
 801391e:	4a53      	ldr	r2, [pc, #332]	; (8013a6c <recvfrom+0x3d4>)
 8013920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d144      	bne.n	80139b2 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8013928:	f107 0114 	add.w	r1, r7, #20
 801392c:	7bfb      	ldrb	r3, [r7, #15]
 801392e:	2206      	movs	r2, #6
 8013930:	4618      	mov	r0, r3
 8013932:	f7ff fb53 	bl	8012fdc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8013936:	7bfb      	ldrb	r3, [r7, #15]
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	3301      	adds	r3, #1
 801393c:	00db      	lsls	r3, r3, #3
 801393e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013942:	2140      	movs	r1, #64	; 0x40
 8013944:	4618      	mov	r0, r3
 8013946:	f7ff f945 	bl	8012bd4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801394a:	bf00      	nop
 801394c:	7bfb      	ldrb	r3, [r7, #15]
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	3301      	adds	r3, #1
 8013952:	00db      	lsls	r3, r3, #3
 8013954:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013958:	4618      	mov	r0, r3
 801395a:	f7ff f8ef 	bl	8012b3c <WIZCHIP_READ>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1f3      	bne.n	801394c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8013964:	7d3a      	ldrb	r2, [r7, #20]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	3301      	adds	r3, #1
 801396e:	7d7a      	ldrb	r2, [r7, #21]
 8013970:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	3302      	adds	r3, #2
 8013976:	7dba      	ldrb	r2, [r7, #22]
 8013978:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	3303      	adds	r3, #3
 801397e:	7dfa      	ldrb	r2, [r7, #23]
 8013980:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8013982:	7e3a      	ldrb	r2, [r7, #24]
 8013984:	7bfb      	ldrb	r3, [r7, #15]
 8013986:	b291      	uxth	r1, r2
 8013988:	4a38      	ldr	r2, [pc, #224]	; (8013a6c <recvfrom+0x3d4>)
 801398a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801398e:	7bfb      	ldrb	r3, [r7, #15]
 8013990:	4a36      	ldr	r2, [pc, #216]	; (8013a6c <recvfrom+0x3d4>)
 8013992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013996:	021b      	lsls	r3, r3, #8
 8013998:	b299      	uxth	r1, r3
 801399a:	7e7b      	ldrb	r3, [r7, #25]
 801399c:	b29a      	uxth	r2, r3
 801399e:	7bfb      	ldrb	r3, [r7, #15]
 80139a0:	440a      	add	r2, r1
 80139a2:	b291      	uxth	r1, r2
 80139a4:	4a31      	ldr	r2, [pc, #196]	; (8013a6c <recvfrom+0x3d4>)
 80139a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80139aa:	7bfb      	ldrb	r3, [r7, #15]
 80139ac:	4a30      	ldr	r2, [pc, #192]	; (8013a70 <recvfrom+0x3d8>)
 80139ae:	2180      	movs	r1, #128	; 0x80
 80139b0:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80139b2:	7bfb      	ldrb	r3, [r7, #15]
 80139b4:	4a2d      	ldr	r2, [pc, #180]	; (8013a6c <recvfrom+0x3d4>)
 80139b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139ba:	89ba      	ldrh	r2, [r7, #12]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d202      	bcs.n	80139c6 <recvfrom+0x32e>
 80139c0:	89bb      	ldrh	r3, [r7, #12]
 80139c2:	83fb      	strh	r3, [r7, #30]
 80139c4:	e004      	b.n	80139d0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80139c6:	7bfb      	ldrb	r3, [r7, #15]
 80139c8:	4a28      	ldr	r2, [pc, #160]	; (8013a6c <recvfrom+0x3d4>)
 80139ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139ce:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80139d0:	8bfa      	ldrh	r2, [r7, #30]
 80139d2:	7bfb      	ldrb	r3, [r7, #15]
 80139d4:	68b9      	ldr	r1, [r7, #8]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7ff fb00 	bl	8012fdc <wiz_recv_data>
			break;
 80139dc:	e00b      	b.n	80139f6 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80139de:	8bfa      	ldrh	r2, [r7, #30]
 80139e0:	7bfb      	ldrb	r3, [r7, #15]
 80139e2:	4611      	mov	r1, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff fb55 	bl	8013094 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80139ea:	7bfb      	ldrb	r3, [r7, #15]
 80139ec:	491f      	ldr	r1, [pc, #124]	; (8013a6c <recvfrom+0x3d4>)
 80139ee:	8bfa      	ldrh	r2, [r7, #30]
 80139f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80139f4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80139f6:	7bfb      	ldrb	r3, [r7, #15]
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	3301      	adds	r3, #1
 80139fc:	00db      	lsls	r3, r3, #3
 80139fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013a02:	2140      	movs	r1, #64	; 0x40
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7ff f8e5 	bl	8012bd4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8013a0a:	bf00      	nop
 8013a0c:	7bfb      	ldrb	r3, [r7, #15]
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	3301      	adds	r3, #1
 8013a12:	00db      	lsls	r3, r3, #3
 8013a14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7ff f88f 	bl	8012b3c <WIZCHIP_READ>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d1f3      	bne.n	8013a0c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8013a24:	7bfb      	ldrb	r3, [r7, #15]
 8013a26:	4a11      	ldr	r2, [pc, #68]	; (8013a6c <recvfrom+0x3d4>)
 8013a28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8013a2c:	7bfb      	ldrb	r3, [r7, #15]
 8013a2e:	8bfa      	ldrh	r2, [r7, #30]
 8013a30:	1a8a      	subs	r2, r1, r2
 8013a32:	b291      	uxth	r1, r2
 8013a34:	4a0d      	ldr	r2, [pc, #52]	; (8013a6c <recvfrom+0x3d4>)
 8013a36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
 8013a3c:	4a0b      	ldr	r2, [pc, #44]	; (8013a6c <recvfrom+0x3d4>)
 8013a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d009      	beq.n	8013a5a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8013a46:	7bfb      	ldrb	r3, [r7, #15]
 8013a48:	4a09      	ldr	r2, [pc, #36]	; (8013a70 <recvfrom+0x3d8>)
 8013a4a:	5cd2      	ldrb	r2, [r2, r3]
 8013a4c:	7bfb      	ldrb	r3, [r7, #15]
 8013a4e:	f042 0201 	orr.w	r2, r2, #1
 8013a52:	b2d1      	uxtb	r1, r2
 8013a54:	4a06      	ldr	r2, [pc, #24]	; (8013a70 <recvfrom+0x3d8>)
 8013a56:	54d1      	strb	r1, [r2, r3]
 8013a58:	e003      	b.n	8013a62 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8013a5a:	7bfb      	ldrb	r3, [r7, #15]
 8013a5c:	4a04      	ldr	r2, [pc, #16]	; (8013a70 <recvfrom+0x3d8>)
 8013a5e:	2100      	movs	r1, #0
 8013a60:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8013a62:	8bfb      	ldrh	r3, [r7, #30]
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3720      	adds	r7, #32
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	2400149c 	.word	0x2400149c
 8013a70:	240014ac 	.word	0x240014ac

08013a74 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8013a74:	b480      	push	{r7}
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	bf00      	nop
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8013a82:	b480      	push	{r7}
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	bf00      	nop
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8013a90:	b480      	push	{r7}
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	bf00      	nop
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8013a9e:	b480      	push	{r7}
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	bf00      	nop
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr

08013aac <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8013aac:	b480      	push	{r7}
 8013aae:	b083      	sub	sp, #12
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	4618      	mov	r0, r3
 8013abc:	370c      	adds	r7, #12
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr

08013ac6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8013ac6:	b480      	push	{r7}
 8013ac8:	b083      	sub	sp, #12
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
 8013ace:	460b      	mov	r3, r1
 8013ad0:	70fb      	strb	r3, [r7, #3]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	78fa      	ldrb	r2, [r7, #3]
 8013ad6:	701a      	strb	r2, [r3, #0]
 8013ad8:	bf00      	nop
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8013ae4:	b480      	push	{r7}
 8013ae6:	af00      	add	r7, sp, #0
 8013ae8:	2300      	movs	r3, #0
 8013aea:	4618      	mov	r0, r3
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	4603      	mov	r3, r0
 8013afc:	71fb      	strb	r3, [r7, #7]
 8013afe:	bf00      	nop
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8013b0a:	b480      	push	{r7}
 8013b0c:	b083      	sub	sp, #12
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	460b      	mov	r3, r1
 8013b14:	807b      	strh	r3, [r7, #2]
 8013b16:	bf00      	nop
 8013b18:	370c      	adds	r7, #12
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr

08013b22 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8013b22:	b480      	push	{r7}
 8013b24:	b083      	sub	sp, #12
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	807b      	strh	r3, [r7, #2]
 8013b2e:	bf00      	nop
 8013b30:	370c      	adds	r7, #12
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr
	...

08013b3c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <reg_wizchip_cs_cbfunc+0x16>
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d106      	bne.n	8013b60 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8013b52:	4b0a      	ldr	r3, [pc, #40]	; (8013b7c <reg_wizchip_cs_cbfunc+0x40>)
 8013b54:	4a0a      	ldr	r2, [pc, #40]	; (8013b80 <reg_wizchip_cs_cbfunc+0x44>)
 8013b56:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8013b58:	4b08      	ldr	r3, [pc, #32]	; (8013b7c <reg_wizchip_cs_cbfunc+0x40>)
 8013b5a:	4a0a      	ldr	r2, [pc, #40]	; (8013b84 <reg_wizchip_cs_cbfunc+0x48>)
 8013b5c:	615a      	str	r2, [r3, #20]
 8013b5e:	e006      	b.n	8013b6e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8013b60:	4a06      	ldr	r2, [pc, #24]	; (8013b7c <reg_wizchip_cs_cbfunc+0x40>)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8013b66:	4a05      	ldr	r2, [pc, #20]	; (8013b7c <reg_wizchip_cs_cbfunc+0x40>)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	6153      	str	r3, [r2, #20]
   }
}
 8013b6c:	bf00      	nop
 8013b6e:	bf00      	nop
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr
 8013b7a:	bf00      	nop
 8013b7c:	24000054 	.word	0x24000054
 8013b80:	08013a91 	.word	0x08013a91
 8013b84:	08013a9f 	.word	0x08013a9f

08013b88 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8013b92:	bf00      	nop
 8013b94:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <reg_wizchip_spi_cbfunc+0x4c>)
 8013b96:	881b      	ldrh	r3, [r3, #0]
 8013b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d0f9      	beq.n	8013b94 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d002      	beq.n	8013bac <reg_wizchip_spi_cbfunc+0x24>
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d106      	bne.n	8013bba <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8013bac:	4b09      	ldr	r3, [pc, #36]	; (8013bd4 <reg_wizchip_spi_cbfunc+0x4c>)
 8013bae:	4a0a      	ldr	r2, [pc, #40]	; (8013bd8 <reg_wizchip_spi_cbfunc+0x50>)
 8013bb0:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8013bb2:	4b08      	ldr	r3, [pc, #32]	; (8013bd4 <reg_wizchip_spi_cbfunc+0x4c>)
 8013bb4:	4a09      	ldr	r2, [pc, #36]	; (8013bdc <reg_wizchip_spi_cbfunc+0x54>)
 8013bb6:	61da      	str	r2, [r3, #28]
 8013bb8:	e006      	b.n	8013bc8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8013bba:	4a06      	ldr	r2, [pc, #24]	; (8013bd4 <reg_wizchip_spi_cbfunc+0x4c>)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8013bc0:	4a04      	ldr	r2, [pc, #16]	; (8013bd4 <reg_wizchip_spi_cbfunc+0x4c>)
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	61d3      	str	r3, [r2, #28]
   }
}
 8013bc6:	bf00      	nop
 8013bc8:	bf00      	nop
 8013bca:	370c      	adds	r7, #12
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	24000054 	.word	0x24000054
 8013bd8:	08013ae5 	.word	0x08013ae5
 8013bdc:	08013af5 	.word	0x08013af5

08013be0 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8013be0:	b480      	push	{r7}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8013bea:	bf00      	nop
 8013bec:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8013bee:	881b      	ldrh	r3, [r3, #0]
 8013bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d0f9      	beq.n	8013bec <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d002      	beq.n	8013c04 <reg_wizchip_spiburst_cbfunc+0x24>
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d106      	bne.n	8013c12 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8013c04:	4b09      	ldr	r3, [pc, #36]	; (8013c2c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8013c06:	4a0a      	ldr	r2, [pc, #40]	; (8013c30 <reg_wizchip_spiburst_cbfunc+0x50>)
 8013c08:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8013c0a:	4b08      	ldr	r3, [pc, #32]	; (8013c2c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8013c0c:	4a09      	ldr	r2, [pc, #36]	; (8013c34 <reg_wizchip_spiburst_cbfunc+0x54>)
 8013c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8013c10:	e006      	b.n	8013c20 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8013c12:	4a06      	ldr	r2, [pc, #24]	; (8013c2c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8013c18:	4a04      	ldr	r2, [pc, #16]	; (8013c2c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8013c1e:	bf00      	nop
 8013c20:	bf00      	nop
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr
 8013c2c:	24000054 	.word	0x24000054
 8013c30:	08013b0b 	.word	0x08013b0b
 8013c34:	08013b23 	.word	0x08013b23

08013c38 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b086      	sub	sp, #24
 8013c3c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8013c3e:	1d3b      	adds	r3, r7, #4
 8013c40:	2206      	movs	r2, #6
 8013c42:	4619      	mov	r1, r3
 8013c44:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8013c48:	f7ff f812 	bl	8012c70 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8013c4c:	f107 0314 	add.w	r3, r7, #20
 8013c50:	2204      	movs	r2, #4
 8013c52:	4619      	mov	r1, r3
 8013c54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013c58:	f7ff f80a 	bl	8012c70 <WIZCHIP_READ_BUF>
 8013c5c:	f107 0310 	add.w	r3, r7, #16
 8013c60:	2204      	movs	r2, #4
 8013c62:	4619      	mov	r1, r3
 8013c64:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8013c68:	f7ff f802 	bl	8012c70 <WIZCHIP_READ_BUF>
 8013c6c:	f107 030c 	add.w	r3, r7, #12
 8013c70:	2204      	movs	r2, #4
 8013c72:	4619      	mov	r1, r3
 8013c74:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8013c78:	f7fe fffa 	bl	8012c70 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8013c7c:	2180      	movs	r1, #128	; 0x80
 8013c7e:	2000      	movs	r0, #0
 8013c80:	f7fe ffa8 	bl	8012bd4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8013c84:	2000      	movs	r0, #0
 8013c86:	f7fe ff59 	bl	8012b3c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8013c8a:	1d3b      	adds	r3, r7, #4
 8013c8c:	2206      	movs	r2, #6
 8013c8e:	4619      	mov	r1, r3
 8013c90:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8013c94:	f7ff f84e 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8013c98:	f107 0314 	add.w	r3, r7, #20
 8013c9c:	2204      	movs	r2, #4
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013ca4:	f7ff f846 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8013ca8:	f107 0310 	add.w	r3, r7, #16
 8013cac:	2204      	movs	r2, #4
 8013cae:	4619      	mov	r1, r3
 8013cb0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8013cb4:	f7ff f83e 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8013cb8:	f107 030c 	add.w	r3, r7, #12
 8013cbc:	2204      	movs	r2, #4
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8013cc4:	f7ff f836 	bl	8012d34 <WIZCHIP_WRITE_BUF>
}
 8013cc8:	bf00      	nop
 8013cca:	3718      	adds	r7, #24
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8013cde:	f7ff ffab 	bl	8013c38 <wizchip_sw_reset>
   if(txsize)
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d03b      	beq.n	8013d60 <wizchip_init+0x90>
   {
      tmp = 0;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013cec:	2300      	movs	r3, #0
 8013cee:	73fb      	strb	r3, [r7, #15]
 8013cf0:	e015      	b.n	8013d1e <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8013cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cf6:	687a      	ldr	r2, [r7, #4]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	781a      	ldrb	r2, [r3, #0]
 8013cfc:	7bbb      	ldrb	r3, [r7, #14]
 8013cfe:	4413      	add	r3, r2
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8013d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d08:	2b10      	cmp	r3, #16
 8013d0a:	dd02      	ble.n	8013d12 <wizchip_init+0x42>
 8013d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d10:	e066      	b.n	8013de0 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	3301      	adds	r3, #1
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	73fb      	strb	r3, [r7, #15]
 8013d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d22:	2b07      	cmp	r3, #7
 8013d24:	dde5      	ble.n	8013cf2 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013d26:	2300      	movs	r3, #0
 8013d28:	73fb      	strb	r3, [r7, #15]
 8013d2a:	e015      	b.n	8013d58 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8013d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	3301      	adds	r3, #1
 8013d34:	00db      	lsls	r3, r3, #3
 8013d36:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	4413      	add	r3, r2
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	4619      	mov	r1, r3
 8013d48:	f7fe ff44 	bl	8012bd4 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	3301      	adds	r3, #1
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	73fb      	strb	r3, [r7, #15]
 8013d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d5c:	2b07      	cmp	r3, #7
 8013d5e:	dde5      	ble.n	8013d2c <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d03b      	beq.n	8013dde <wizchip_init+0x10e>
   {
      tmp = 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	73fb      	strb	r3, [r7, #15]
 8013d6e:	e015      	b.n	8013d9c <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8013d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d74:	683a      	ldr	r2, [r7, #0]
 8013d76:	4413      	add	r3, r2
 8013d78:	781a      	ldrb	r2, [r3, #0]
 8013d7a:	7bbb      	ldrb	r3, [r7, #14]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8013d82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d86:	2b10      	cmp	r3, #16
 8013d88:	dd02      	ble.n	8013d90 <wizchip_init+0xc0>
 8013d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d8e:	e027      	b.n	8013de0 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	3301      	adds	r3, #1
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	73fb      	strb	r3, [r7, #15]
 8013d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013da0:	2b07      	cmp	r3, #7
 8013da2:	dde5      	ble.n	8013d70 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013da4:	2300      	movs	r3, #0
 8013da6:	73fb      	strb	r3, [r7, #15]
 8013da8:	e015      	b.n	8013dd6 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8013daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dae:	009b      	lsls	r3, r3, #2
 8013db0:	3301      	adds	r3, #1
 8013db2:	00db      	lsls	r3, r3, #3
 8013db4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8013db8:	4618      	mov	r0, r3
 8013dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dbe:	683a      	ldr	r2, [r7, #0]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	f7fe ff05 	bl	8012bd4 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	b2db      	uxtb	r3, r3
 8013dd4:	73fb      	strb	r3, [r7, #15]
 8013dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dda:	2b07      	cmp	r3, #7
 8013ddc:	dde5      	ble.n	8013daa <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8013dde:	2300      	movs	r3, #0
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3710      	adds	r7, #16
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2206      	movs	r2, #6
 8013df4:	4619      	mov	r1, r3
 8013df6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8013dfa:	f7fe ff9b 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	330e      	adds	r3, #14
 8013e02:	2204      	movs	r2, #4
 8013e04:	4619      	mov	r1, r3
 8013e06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013e0a:	f7fe ff93 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	330a      	adds	r3, #10
 8013e12:	2204      	movs	r2, #4
 8013e14:	4619      	mov	r1, r3
 8013e16:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8013e1a:	f7fe ff8b 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	3306      	adds	r3, #6
 8013e22:	2204      	movs	r2, #4
 8013e24:	4619      	mov	r1, r3
 8013e26:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8013e2a:	f7fe ff83 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	7c9a      	ldrb	r2, [r3, #18]
 8013e32:	4b0b      	ldr	r3, [pc, #44]	; (8013e60 <wizchip_setnetinfo+0x78>)
 8013e34:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	7cda      	ldrb	r2, [r3, #19]
 8013e3a:	4b09      	ldr	r3, [pc, #36]	; (8013e60 <wizchip_setnetinfo+0x78>)
 8013e3c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	7d1a      	ldrb	r2, [r3, #20]
 8013e42:	4b07      	ldr	r3, [pc, #28]	; (8013e60 <wizchip_setnetinfo+0x78>)
 8013e44:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	7d5a      	ldrb	r2, [r3, #21]
 8013e4a:	4b05      	ldr	r3, [pc, #20]	; (8013e60 <wizchip_setnetinfo+0x78>)
 8013e4c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	7d9a      	ldrb	r2, [r3, #22]
 8013e52:	4b04      	ldr	r3, [pc, #16]	; (8013e64 <wizchip_setnetinfo+0x7c>)
 8013e54:	701a      	strb	r2, [r3, #0]
}
 8013e56:	bf00      	nop
 8013e58:	3708      	adds	r7, #8
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	240014b4 	.word	0x240014b4
 8013e64:	240014b8 	.word	0x240014b8

08013e68 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2206      	movs	r2, #6
 8013e74:	4619      	mov	r1, r3
 8013e76:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8013e7a:	f7fe fef9 	bl	8012c70 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	330e      	adds	r3, #14
 8013e82:	2204      	movs	r2, #4
 8013e84:	4619      	mov	r1, r3
 8013e86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013e8a:	f7fe fef1 	bl	8012c70 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	330a      	adds	r3, #10
 8013e92:	2204      	movs	r2, #4
 8013e94:	4619      	mov	r1, r3
 8013e96:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8013e9a:	f7fe fee9 	bl	8012c70 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	3306      	adds	r3, #6
 8013ea2:	2204      	movs	r2, #4
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8013eaa:	f7fe fee1 	bl	8012c70 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8013eae:	4b0c      	ldr	r3, [pc, #48]	; (8013ee0 <wizchip_getnetinfo+0x78>)
 8013eb0:	781a      	ldrb	r2, [r3, #0]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8013eb6:	4b0a      	ldr	r3, [pc, #40]	; (8013ee0 <wizchip_getnetinfo+0x78>)
 8013eb8:	785a      	ldrb	r2, [r3, #1]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8013ebe:	4b08      	ldr	r3, [pc, #32]	; (8013ee0 <wizchip_getnetinfo+0x78>)
 8013ec0:	789a      	ldrb	r2, [r3, #2]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8013ec6:	4b06      	ldr	r3, [pc, #24]	; (8013ee0 <wizchip_getnetinfo+0x78>)
 8013ec8:	78da      	ldrb	r2, [r3, #3]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8013ece:	4b05      	ldr	r3, [pc, #20]	; (8013ee4 <wizchip_getnetinfo+0x7c>)
 8013ed0:	781a      	ldrb	r2, [r3, #0]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	759a      	strb	r2, [r3, #22]
}
 8013ed6:	bf00      	nop
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	240014b4 	.word	0x240014b4
 8013ee4:	240014b8 	.word	0x240014b8

08013ee8 <EthInit>:

volatile bool ip_assigned = false;

SPI_HandleTypeDef hspi_eth;

void EthInit(SPI_HandleTypeDef *hspi) {
 8013ee8:	b5b0      	push	{r4, r5, r7, lr}
 8013eea:	b090      	sub	sp, #64	; 0x40
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
	hspi_eth = *hspi;
 8013ef0:	4a21      	ldr	r2, [pc, #132]	; (8013f78 <EthInit+0x90>)
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	2388      	movs	r3, #136	; 0x88
 8013efa:	461a      	mov	r2, r3
 8013efc:	f007 fa96 	bl	801b42c <memcpy>

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8013f00:	491e      	ldr	r1, [pc, #120]	; (8013f7c <EthInit+0x94>)
 8013f02:	481f      	ldr	r0, [pc, #124]	; (8013f80 <EthInit+0x98>)
 8013f04:	f7ff fe1a 	bl	8013b3c <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8013f08:	491e      	ldr	r1, [pc, #120]	; (8013f84 <EthInit+0x9c>)
 8013f0a:	481f      	ldr	r0, [pc, #124]	; (8013f88 <EthInit+0xa0>)
 8013f0c:	f7ff fe3c 	bl	8013b88 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8013f10:	491e      	ldr	r1, [pc, #120]	; (8013f8c <EthInit+0xa4>)
 8013f12:	481f      	ldr	r0, [pc, #124]	; (8013f90 <EthInit+0xa8>)
 8013f14:	f7ff fe64 	bl	8013be0 <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8013f18:	4a1e      	ldr	r2, [pc, #120]	; (8013f94 <EthInit+0xac>)
 8013f1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f22:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8013f26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013f2e:	4611      	mov	r1, r2
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff fecd 	bl	8013cd0 <wizchip_init>

    wiz_NetInfo net_info = {
 8013f36:	4b18      	ldr	r3, [pc, #96]	; (8013f98 <EthInit+0xb0>)
 8013f38:	f107 0420 	add.w	r4, r7, #32
 8013f3c:	461d      	mov	r5, r3
 8013f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013f46:	6020      	str	r0, [r4, #0]
 8013f48:	3404      	adds	r4, #4
 8013f4a:	8021      	strh	r1, [r4, #0]
 8013f4c:	3402      	adds	r4, #2
 8013f4e:	0c0b      	lsrs	r3, r1, #16
 8013f50:	7023      	strb	r3, [r4, #0]
		.sn = { 255, 255, 255, 0 },
		.dns = { 0, 0, 0, 0 },
		.dhcp = NETINFO_STATIC,
    };

    reg_dhcp_cbfunc(
 8013f52:	4a12      	ldr	r2, [pc, #72]	; (8013f9c <EthInit+0xb4>)
 8013f54:	4912      	ldr	r1, [pc, #72]	; (8013fa0 <EthInit+0xb8>)
 8013f56:	4812      	ldr	r0, [pc, #72]	; (8013fa0 <EthInit+0xb8>)
 8013f58:	f000 f8e8 	bl	801412c <reg_dhcp_cbfunc>
        Callback_IPAssigned,
        Callback_IPAssigned,
        Callback_IPConflict
    );

    wizchip_setnetinfo(&net_info);
 8013f5c:	f107 0320 	add.w	r3, r7, #32
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7ff ff41 	bl	8013de8 <wizchip_setnetinfo>

    wiz_NetInfo net_info_res;
    wizchip_getnetinfo(&net_info_res);
 8013f66:	f107 0308 	add.w	r3, r7, #8
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7ff ff7c 	bl	8013e68 <wizchip_getnetinfo>
}
 8013f70:	bf00      	nop
 8013f72:	3740      	adds	r7, #64	; 0x40
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bdb0      	pop	{r4, r5, r7, pc}
 8013f78:	240018c0 	.word	0x240018c0
 8013f7c:	08013fbd 	.word	0x08013fbd
 8013f80:	08013fa5 	.word	0x08013fa5
 8013f84:	08014037 	.word	0x08014037
 8013f88:	0801401d 	.word	0x0801401d
 8013f8c:	08013ff9 	.word	0x08013ff9
 8013f90:	08013fd5 	.word	0x08013fd5
 8013f94:	0801dd90 	.word	0x0801dd90
 8013f98:	0801dd98 	.word	0x0801dd98
 8013f9c:	0801406d 	.word	0x0801406d
 8013fa0:	08014055 	.word	0x08014055

08013fa4 <W5500_Select>:

void loop() {
    HAL_Delay(1000);
}

void W5500_Select(void) {
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ETH_NSS_GPIO_Port, ETH_NSS_Pin, GPIO_PIN_RESET);
 8013fa8:	2200      	movs	r2, #0
 8013faa:	2110      	movs	r1, #16
 8013fac:	4802      	ldr	r0, [pc, #8]	; (8013fb8 <W5500_Select+0x14>)
 8013fae:	f7f4 fcbd 	bl	800892c <HAL_GPIO_WritePin>
}
 8013fb2:	bf00      	nop
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	58021000 	.word	0x58021000

08013fbc <W5500_Unselect>:

void W5500_Unselect(void) {
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ETH_NSS_GPIO_Port, ETH_NSS_Pin, GPIO_PIN_SET);
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	2110      	movs	r1, #16
 8013fc4:	4802      	ldr	r0, [pc, #8]	; (8013fd0 <W5500_Unselect+0x14>)
 8013fc6:	f7f4 fcb1 	bl	800892c <HAL_GPIO_WritePin>
}
 8013fca:	bf00      	nop
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	58021000 	.word	0x58021000

08013fd4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b082      	sub	sp, #8
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	460b      	mov	r3, r1
 8013fde:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi_eth, buff, len, 10);
 8013fe0:	887a      	ldrh	r2, [r7, #2]
 8013fe2:	230a      	movs	r3, #10
 8013fe4:	6879      	ldr	r1, [r7, #4]
 8013fe6:	4803      	ldr	r0, [pc, #12]	; (8013ff4 <W5500_ReadBuff+0x20>)
 8013fe8:	f7fa f9b2 	bl	800e350 <HAL_SPI_Receive>
}
 8013fec:	bf00      	nop
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	240018c0 	.word	0x240018c0

08013ff8 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	460b      	mov	r3, r1
 8014002:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi_eth, buff, len, 10);
 8014004:	887a      	ldrh	r2, [r7, #2]
 8014006:	230a      	movs	r3, #10
 8014008:	6879      	ldr	r1, [r7, #4]
 801400a:	4803      	ldr	r0, [pc, #12]	; (8014018 <W5500_WriteBuff+0x20>)
 801400c:	f7f9 ffae 	bl	800df6c <HAL_SPI_Transmit>
}
 8014010:	bf00      	nop
 8014012:	3708      	adds	r7, #8
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}
 8014018:	240018c0 	.word	0x240018c0

0801401c <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8014022:	1dfb      	adds	r3, r7, #7
 8014024:	2101      	movs	r1, #1
 8014026:	4618      	mov	r0, r3
 8014028:	f7ff ffd4 	bl	8013fd4 <W5500_ReadBuff>
    return byte;
 801402c:	79fb      	ldrb	r3, [r7, #7]
}
 801402e:	4618      	mov	r0, r3
 8014030:	3708      	adds	r7, #8
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8014036:	b580      	push	{r7, lr}
 8014038:	b082      	sub	sp, #8
 801403a:	af00      	add	r7, sp, #0
 801403c:	4603      	mov	r3, r0
 801403e:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8014040:	1dfb      	adds	r3, r7, #7
 8014042:	2101      	movs	r1, #1
 8014044:	4618      	mov	r0, r3
 8014046:	f7ff ffd7 	bl	8013ff8 <W5500_WriteBuff>
}
 801404a:	bf00      	nop
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
	...

08014054 <Callback_IPAssigned>:

void Callback_IPAssigned(void) {
 8014054:	b480      	push	{r7}
 8014056:	af00      	add	r7, sp, #0
    ip_assigned = true;
 8014058:	4b03      	ldr	r3, [pc, #12]	; (8014068 <Callback_IPAssigned+0x14>)
 801405a:	2201      	movs	r2, #1
 801405c:	701a      	strb	r2, [r3, #0]
}
 801405e:	bf00      	nop
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr
 8014068:	240018bc 	.word	0x240018bc

0801406c <Callback_IPConflict>:

void Callback_IPConflict(void) {
 801406c:	b480      	push	{r7}
 801406e:	af00      	add	r7, sp, #0
}
 8014070:	bf00      	nop
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr
	...

0801407c <loop_udps>:

void loop_tcps(uint16_t port){
	loopback_tcps(TCP_SOCKET, buffer, port);
}

void loop_udps(uint16_t port){
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	4603      	mov	r3, r0
 8014084:	80fb      	strh	r3, [r7, #6]
	loopback_udps(UDP_SOCKET, buffer, port);
 8014086:	88fb      	ldrh	r3, [r7, #6]
 8014088:	461a      	mov	r2, r3
 801408a:	4904      	ldr	r1, [pc, #16]	; (801409c <loop_udps+0x20>)
 801408c:	2001      	movs	r0, #1
 801408e:	f001 ff91 	bl	8015fb4 <loopback_udps>
}
 8014092:	bf00      	nop
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	240014bc 	.word	0x240014bc

080140a0 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80140a4:	2204      	movs	r2, #4
 80140a6:	4909      	ldr	r1, [pc, #36]	; (80140cc <default_ip_assign+0x2c>)
 80140a8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80140ac:	f7fe fe42 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80140b0:	2204      	movs	r2, #4
 80140b2:	4907      	ldr	r1, [pc, #28]	; (80140d0 <default_ip_assign+0x30>)
 80140b4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80140b8:	f7fe fe3c 	bl	8012d34 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80140bc:	2204      	movs	r2, #4
 80140be:	4905      	ldr	r1, [pc, #20]	; (80140d4 <default_ip_assign+0x34>)
 80140c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80140c4:	f7fe fe36 	bl	8012d34 <WIZCHIP_WRITE_BUF>
}
 80140c8:	bf00      	nop
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	24001948 	.word	0x24001948
 80140d0:	24001950 	.word	0x24001950
 80140d4:	2400194c 	.word	0x2400194c

080140d8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80140dc:	2180      	movs	r1, #128	; 0x80
 80140de:	2000      	movs	r0, #0
 80140e0:	f7fe fd78 	bl	8012bd4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80140e4:	2000      	movs	r0, #0
 80140e6:	f7fe fd29 	bl	8012b3c <WIZCHIP_READ>
   default_ip_assign();
 80140ea:	f7ff ffd9 	bl	80140a0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80140ee:	2206      	movs	r2, #6
 80140f0:	4903      	ldr	r1, [pc, #12]	; (8014100 <default_ip_update+0x28>)
 80140f2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80140f6:	f7fe fe1d 	bl	8012d34 <WIZCHIP_WRITE_BUF>
}
 80140fa:	bf00      	nop
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	24001954 	.word	0x24001954

08014104 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8014108:	2180      	movs	r1, #128	; 0x80
 801410a:	2000      	movs	r0, #0
 801410c:	f7fe fd62 	bl	8012bd4 <WIZCHIP_WRITE>
	getMR(); // for delay
 8014110:	2000      	movs	r0, #0
 8014112:	f7fe fd13 	bl	8012b3c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8014116:	2206      	movs	r2, #6
 8014118:	4903      	ldr	r1, [pc, #12]	; (8014128 <default_ip_conflict+0x24>)
 801411a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801411e:	f7fe fe09 	bl	8012d34 <WIZCHIP_WRITE_BUF>
}
 8014122:	bf00      	nop
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	24001954 	.word	0x24001954

0801412c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801412c:	b480      	push	{r7}
 801412e:	b085      	sub	sp, #20
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8014138:	4b10      	ldr	r3, [pc, #64]	; (801417c <reg_dhcp_cbfunc+0x50>)
 801413a:	4a11      	ldr	r2, [pc, #68]	; (8014180 <reg_dhcp_cbfunc+0x54>)
 801413c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801413e:	4b11      	ldr	r3, [pc, #68]	; (8014184 <reg_dhcp_cbfunc+0x58>)
 8014140:	4a11      	ldr	r2, [pc, #68]	; (8014188 <reg_dhcp_cbfunc+0x5c>)
 8014142:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8014144:	4b11      	ldr	r3, [pc, #68]	; (801418c <reg_dhcp_cbfunc+0x60>)
 8014146:	4a12      	ldr	r2, [pc, #72]	; (8014190 <reg_dhcp_cbfunc+0x64>)
 8014148:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d002      	beq.n	8014156 <reg_dhcp_cbfunc+0x2a>
 8014150:	4a0a      	ldr	r2, [pc, #40]	; (801417c <reg_dhcp_cbfunc+0x50>)
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d002      	beq.n	8014162 <reg_dhcp_cbfunc+0x36>
 801415c:	4a09      	ldr	r2, [pc, #36]	; (8014184 <reg_dhcp_cbfunc+0x58>)
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d002      	beq.n	801416e <reg_dhcp_cbfunc+0x42>
 8014168:	4a08      	ldr	r2, [pc, #32]	; (801418c <reg_dhcp_cbfunc+0x60>)
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6013      	str	r3, [r2, #0]
}
 801416e:	bf00      	nop
 8014170:	3714      	adds	r7, #20
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr
 801417a:	bf00      	nop
 801417c:	2400007c 	.word	0x2400007c
 8014180:	080140a1 	.word	0x080140a1
 8014184:	24000080 	.word	0x24000080
 8014188:	080140d9 	.word	0x080140d9
 801418c:	24000084 	.word	0x24000084
 8014190:	08014105 	.word	0x08014105

08014194 <__NVIC_SystemReset>:
{
 8014194:	b480      	push	{r7}
 8014196:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014198:	f3bf 8f4f 	dsb	sy
}
 801419c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801419e:	4b06      	ldr	r3, [pc, #24]	; (80141b8 <__NVIC_SystemReset+0x24>)
 80141a0:	68db      	ldr	r3, [r3, #12]
 80141a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80141a6:	4904      	ldr	r1, [pc, #16]	; (80141b8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80141a8:	4b04      	ldr	r3, [pc, #16]	; (80141bc <__NVIC_SystemReset+0x28>)
 80141aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80141ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80141ae:	f3bf 8f4f 	dsb	sy
}
 80141b2:	bf00      	nop
    __NOP();
 80141b4:	bf00      	nop
 80141b6:	e7fd      	b.n	80141b4 <__NVIC_SystemReset+0x20>
 80141b8:	e000ed00 	.word	0xe000ed00
 80141bc:	05fa0004 	.word	0x05fa0004

080141c0 <resetStructs>:
		QUAD_ENCODER,       	ENCODER_AVAIL,
		BINARY_INPUT,			BINARY_IN_AVAIL,
		LCD_DISPLAY,     		LCD_AVAIL
};

void resetStructs(){
 80141c0:	b580      	push	{r7, lr}
 80141c2:	af00      	add	r7, sp, #0
	vPortFree(_PWMBank);
 80141c4:	4b05      	ldr	r3, [pc, #20]	; (80141dc <resetStructs+0x1c>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f006 fa79 	bl	801a6c0 <vPortFree>
	vPortFree(_GPIOBank);
 80141ce:	4b04      	ldr	r3, [pc, #16]	; (80141e0 <resetStructs+0x20>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f006 fa74 	bl	801a6c0 <vPortFree>
}
 80141d8:	bf00      	nop
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	24000f60 	.word	0x24000f60
 80141e0:	24000f5c 	.word	0x24000f5c

080141e4 <initStructs>:

void initStructs(){
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b090      	sub	sp, #64	; 0x40
 80141e8:	af00      	add	r7, sp, #0
	PWMBank *PWMBank_ptr = (PWMBank *)pvPortMalloc(sizeof(PWMBank));
 80141ea:	2018      	movs	r0, #24
 80141ec:	f006 f99c 	bl	801a528 <pvPortMalloc>
 80141f0:	63f8      	str	r0, [r7, #60]	; 0x3c
	PWMBank PWMBank;
 80141f2:	f107 0320 	add.w	r3, r7, #32
 80141f6:	4618      	mov	r0, r3
 80141f8:	f002 fa6c 	bl	80166d4 <_ZN7PWMBankC1Ev>
	memcpy(PWMBank_ptr, &PWMBank, sizeof(PWMBank));
 80141fc:	f107 0320 	add.w	r3, r7, #32
 8014200:	2218      	movs	r2, #24
 8014202:	4619      	mov	r1, r3
 8014204:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014206:	f007 f911 	bl	801b42c <memcpy>

	_PWMBank = PWMBank_ptr;
 801420a:	4a1a      	ldr	r2, [pc, #104]	; (8014274 <initStructs+0x90>)
 801420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801420e:	6013      	str	r3, [r2, #0]
	_PWMBank->addDriver(0x80, &hi2c1);
 8014210:	4b18      	ldr	r3, [pc, #96]	; (8014274 <initStructs+0x90>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a18      	ldr	r2, [pc, #96]	; (8014278 <initStructs+0x94>)
 8014216:	2180      	movs	r1, #128	; 0x80
 8014218:	4618      	mov	r0, r3
 801421a:	f002 facd 	bl	80167b8 <_ZN7PWMBank9addDriverEhP19__I2C_HandleTypeDef>
	_PWMBank->addDriver(0x82, &hi2c1);
 801421e:	4b15      	ldr	r3, [pc, #84]	; (8014274 <initStructs+0x90>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	4a15      	ldr	r2, [pc, #84]	; (8014278 <initStructs+0x94>)
 8014224:	2182      	movs	r1, #130	; 0x82
 8014226:	4618      	mov	r0, r3
 8014228:	f002 fac6 	bl	80167b8 <_ZN7PWMBank9addDriverEhP19__I2C_HandleTypeDef>

	GPIOBank *GPIOBank_ptr = (GPIOBank *)pvPortMalloc(sizeof(GPIOBank));
 801422c:	2020      	movs	r0, #32
 801422e:	f006 f97b 	bl	801a528 <pvPortMalloc>
 8014232:	63b8      	str	r0, [r7, #56]	; 0x38
	GPIOBank GPIOBank(0);
 8014234:	463b      	mov	r3, r7
 8014236:	2100      	movs	r1, #0
 8014238:	4618      	mov	r0, r3
 801423a:	f001 ff55 	bl	80160e8 <_ZN8GPIOBankC1Eh>
	memcpy(GPIOBank_ptr, &GPIOBank, sizeof(GPIOBank));
 801423e:	463b      	mov	r3, r7
 8014240:	2220      	movs	r2, #32
 8014242:	4619      	mov	r1, r3
 8014244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014246:	f007 f8f1 	bl	801b42c <memcpy>

	_GPIOBank = GPIOBank_ptr;
 801424a:	4a0c      	ldr	r2, [pc, #48]	; (801427c <initStructs+0x98>)
 801424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424e:	6013      	str	r3, [r2, #0]
	_GPIOBank->addDriver(0x42, &hi2c2);
 8014250:	4b0a      	ldr	r3, [pc, #40]	; (801427c <initStructs+0x98>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	4a0a      	ldr	r2, [pc, #40]	; (8014280 <initStructs+0x9c>)
 8014256:	2142      	movs	r1, #66	; 0x42
 8014258:	4618      	mov	r0, r3
 801425a:	f001 ff5c 	bl	8016116 <_ZN8GPIOBank9addDriverEhP19__I2C_HandleTypeDef>
	_GPIOBank->addDriver(0x40, &hi2c2);
 801425e:	4b07      	ldr	r3, [pc, #28]	; (801427c <initStructs+0x98>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4a07      	ldr	r2, [pc, #28]	; (8014280 <initStructs+0x9c>)
 8014264:	2140      	movs	r1, #64	; 0x40
 8014266:	4618      	mov	r0, r3
 8014268:	f001 ff55 	bl	8016116 <_ZN8GPIOBank9addDriverEhP19__I2C_HandleTypeDef>
}
 801426c:	bf00      	nop
 801426e:	3740      	adds	r7, #64	; 0x40
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	24000f60 	.word	0x24000f60
 8014278:	240004a0 	.word	0x240004a0
 801427c:	24000f5c 	.word	0x24000f5c
 8014280:	240004ec 	.word	0x240004ec

08014284 <getResponse>:

uint8_t getResponse(uint8_t *buf, uint8_t len){
 8014284:	b590      	push	{r4, r7, lr}
 8014286:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801428a:	af04      	add	r7, sp, #16
 801428c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014290:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014294:	6018      	str	r0, [r3, #0]
 8014296:	460a      	mov	r2, r1
 8014298:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801429c:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80142a0:	701a      	strb	r2, [r3, #0]
	uint8_t opcode = getOpCode(buf);
 80142a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80142a6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80142aa:	6818      	ldr	r0, [r3, #0]
 80142ac:	f001 fc80 	bl	8015bb0 <getOpCode>
 80142b0:	4603      	mov	r3, r0
 80142b2:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b

	switch(opcode){
 80142b6:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 80142ba:	2b0a      	cmp	r3, #10
 80142bc:	dc1e      	bgt.n	80142fc <getResponse+0x78>
 80142be:	2b00      	cmp	r3, #0
 80142c0:	f341 8458 	ble.w	8015b74 <getResponse+0x18f0>
 80142c4:	3b01      	subs	r3, #1
 80142c6:	2b09      	cmp	r3, #9
 80142c8:	f201 8454 	bhi.w	8015b74 <getResponse+0x18f0>
 80142cc:	a201      	add	r2, pc, #4	; (adr r2, 80142d4 <getResponse+0x50>)
 80142ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d2:	bf00      	nop
 80142d4:	08014307 	.word	0x08014307
 80142d8:	08015b8d 	.word	0x08015b8d
 80142dc:	08015b8d 	.word	0x08015b8d
 80142e0:	0801434b 	.word	0x0801434b
 80142e4:	0801443b 	.word	0x0801443b
 80142e8:	08014451 	.word	0x08014451
 80142ec:	08014467 	.word	0x08014467
 80142f0:	080153dd 	.word	0x080153dd
 80142f4:	08015b75 	.word	0x08015b75
 80142f8:	08015b59 	.word	0x08015b59
 80142fc:	2bfe      	cmp	r3, #254	; 0xfe
 80142fe:	f001 8437 	beq.w	8015b70 <getResponse+0x18ec>
 8014302:	f001 bc37 	b.w	8015b74 <getResponse+0x18f0>
	case XAVIER_SYN:
	{
		// BIG RESET HOURS
		resetStructs();
 8014306:	f7ff ff5b 	bl	80141c0 <resetStructs>
		initStructs();
 801430a:	f7ff ff6b 	bl	80141e4 <initStructs>

		currState = STATE_XAVIER_MODULES;
 801430e:	4bd1      	ldr	r3, [pc, #836]	; (8014654 <getResponse+0x3d0>)
 8014310:	2201      	movs	r2, #1
 8014312:	701a      	strb	r2, [r3, #0]
		return buildACK(buf[XAVIER_SYN_SEQ], buf[XAVIER_SYN_SEQ] + 1, buf);
 8014314:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014318:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	3302      	adds	r3, #2
 8014320:	7818      	ldrb	r0, [r3, #0]
 8014322:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014326:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	3302      	adds	r3, #2
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	3301      	adds	r3, #1
 8014332:	b2d9      	uxtb	r1, r3
 8014334:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014338:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	f001 fc43 	bl	8015bc8 <buildACK>
 8014342:	4603      	mov	r3, r0
 8014344:	461c      	mov	r4, r3
 8014346:	f001 bc23 	b.w	8015b90 <getResponse+0x190c>
	case XAVIER_ACK:
		break;
	case XAVIER_NACK:
		break;
	case XAVIER_FIN:
		if(currState == STATE_XAVIER_MODULES){
 801434a:	4bc2      	ldr	r3, [pc, #776]	; (8014654 <getResponse+0x3d0>)
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d166      	bne.n	8014420 <getResponse+0x19c>
			// init all PIDs
			for(int i = 0; i < 255; i++){
 8014352:	2300      	movs	r3, #0
 8014354:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8014358:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801435c:	2bfe      	cmp	r3, #254	; 0xfe
 801435e:	dc37      	bgt.n	80143d0 <getResponse+0x14c>
				if(Packages[i] != 0){
 8014360:	4abd      	ldr	r2, [pc, #756]	; (8014658 <getResponse+0x3d4>)
 8014362:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8014366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d02a      	beq.n	80143c4 <getResponse+0x140>
					// Sensor and actuator, needs PID
					if(Packages[i]->getSensor() != 0 && Packages[i]->getActuator() != 0 && Packages[i]->needsPID){
 801436e:	4aba      	ldr	r2, [pc, #744]	; (8014658 <getResponse+0x3d4>)
 8014370:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8014374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014378:	4618      	mov	r0, r3
 801437a:	f006 fd0e 	bl	801ad9a <_ZN7Package9getSensorEv>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d014      	beq.n	80143ae <getResponse+0x12a>
 8014384:	4ab4      	ldr	r2, [pc, #720]	; (8014658 <getResponse+0x3d4>)
 8014386:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801438e:	4618      	mov	r0, r3
 8014390:	f006 fd0f 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8014394:	4603      	mov	r3, r0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d009      	beq.n	80143ae <getResponse+0x12a>
 801439a:	4aaf      	ldr	r2, [pc, #700]	; (8014658 <getResponse+0x3d4>)
 801439c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80143a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d001      	beq.n	80143ae <getResponse+0x12a>
 80143aa:	2301      	movs	r3, #1
 80143ac:	e000      	b.n	80143b0 <getResponse+0x12c>
 80143ae:	2300      	movs	r3, #0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d007      	beq.n	80143c4 <getResponse+0x140>
						Packages[i]->initPID();
 80143b4:	4aa8      	ldr	r2, [pc, #672]	; (8014658 <getResponse+0x3d4>)
 80143b6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80143ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143be:	4618      	mov	r0, r3
 80143c0:	f006 fb9c 	bl	801aafc <_ZN7Package7initPIDEv>
			for(int i = 0; i < 255; i++){
 80143c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80143c8:	3301      	adds	r3, #1
 80143ca:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80143ce:	e7c3      	b.n	8014358 <getResponse+0xd4>
					}
				}
			}

			if(lcd1 != 0 && lcd2 != 0){
 80143d0:	4ba2      	ldr	r3, [pc, #648]	; (801465c <getResponse+0x3d8>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d008      	beq.n	80143ea <getResponse+0x166>
 80143d8:	4ba1      	ldr	r3, [pc, #644]	; (8014660 <getResponse+0x3dc>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d004      	beq.n	80143ea <getResponse+0x166>
				osThreadResume(lcdDisplaysTaskHandle);
 80143e0:	4ba0      	ldr	r3, [pc, #640]	; (8014664 <getResponse+0x3e0>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	4618      	mov	r0, r3
 80143e6:	f002 fe58 	bl	801709a <osThreadResume>
			}
			osThreadResume(motorOutputTaskHandle);
 80143ea:	4b9f      	ldr	r3, [pc, #636]	; (8014668 <getResponse+0x3e4>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f002 fe53 	bl	801709a <osThreadResume>

			currState = STATE_XAVIER_COMMAND;
 80143f4:	4b97      	ldr	r3, [pc, #604]	; (8014654 <getResponse+0x3d0>)
 80143f6:	2203      	movs	r2, #3
 80143f8:	701a      	strb	r2, [r3, #0]
			return buildACK(buf[XAVIER_SYN_SEQ], 0, buf);
 80143fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80143fe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	3302      	adds	r3, #2
 8014406:	7818      	ldrb	r0, [r3, #0]
 8014408:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801440c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	2100      	movs	r1, #0
 8014414:	f001 fbd8 	bl	8015bc8 <buildACK>
 8014418:	4603      	mov	r3, r0
 801441a:	461c      	mov	r4, r3
 801441c:	f001 bbb8 	b.w	8015b90 <getResponse+0x190c>
		}else{
			return buildError(0, INVALID_ORDER, buf);
 8014420:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014424:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	2107      	movs	r1, #7
 801442c:	2000      	movs	r0, #0
 801442e:	f001 fc0c 	bl	8015c4a <buildError>
 8014432:	4603      	mov	r3, r0
 8014434:	461c      	mov	r4, r3
 8014436:	f001 bbab 	b.w	8015b90 <getResponse+0x190c>
		}
		break;
	case XAVIER_INFO:
		return buildInfo(buf);
 801443a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801443e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014442:	6818      	ldr	r0, [r3, #0]
 8014444:	f001 fc94 	bl	8015d70 <buildInfo>
 8014448:	4603      	mov	r3, r0
 801444a:	461c      	mov	r4, r3
 801444c:	f001 bba0 	b.w	8015b90 <getResponse+0x190c>
		break;
	case XAVIER_AVAIL:
		return buildAVAIL(buf);
 8014450:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014454:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014458:	6818      	ldr	r0, [r3, #0]
 801445a:	f001 fc6f 	bl	8015d3c <buildAVAIL>
 801445e:	4603      	mov	r3, r0
 8014460:	461c      	mov	r4, r3
 8014462:	f001 bb95 	b.w	8015b90 <getResponse+0x190c>
		break;
	case XAVIER_MODCONF:
	{
		struct MODULECONFIG_t moduleCommand;
		parseMODCONF(buf, len, &moduleCommand);
 8014466:	f107 0208 	add.w	r2, r7, #8
 801446a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801446e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8014472:	7819      	ldrb	r1, [r3, #0]
 8014474:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014478:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801447c:	6818      	ldr	r0, [r3, #0]
 801447e:	f001 fc91 	bl	8015da4 <parseMODCONF>

		// If it does not exist, create it
		if(Packages[moduleCommand.nucleoPackage] == 0){
 8014482:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014486:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801448a:	791b      	ldrb	r3, [r3, #4]
 801448c:	461a      	mov	r2, r3
 801448e:	4b72      	ldr	r3, [pc, #456]	; (8014658 <getResponse+0x3d4>)
 8014490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d122      	bne.n	80144de <getResponse+0x25a>
			Package *package_ptr = (Package *)pvPortMalloc(sizeof(Package));
 8014498:	2038      	movs	r0, #56	; 0x38
 801449a:	f006 f845 	bl	801a528 <pvPortMalloc>
 801449e:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
			Package package(moduleCommand.nucleoPackage);
 80144a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80144a6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80144aa:	791a      	ldrb	r2, [r3, #4]
 80144ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80144b0:	4611      	mov	r1, r2
 80144b2:	4618      	mov	r0, r3
 80144b4:	f006 fa3e 	bl	801a934 <_ZN7PackageC1Eh>

			memcpy(package_ptr, &package, sizeof(Package));
 80144b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80144bc:	2238      	movs	r2, #56	; 0x38
 80144be:	4619      	mov	r1, r3
 80144c0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80144c4:	f006 ffb2 	bl	801b42c <memcpy>

			Packages[moduleCommand.nucleoPackage] = package_ptr;
 80144c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80144cc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80144d0:	791b      	ldrb	r3, [r3, #4]
 80144d2:	4619      	mov	r1, r3
 80144d4:	4a60      	ldr	r2, [pc, #384]	; (8014658 <getResponse+0x3d4>)
 80144d6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80144da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}

		// Init module based on command
		switch(moduleCommand.modType){
 80144de:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80144e2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	3b01      	subs	r3, #1
 80144ea:	2b0d      	cmp	r3, #13
 80144ec:	f200 8751 	bhi.w	8015392 <getResponse+0x110e>
 80144f0:	a201      	add	r2, pc, #4	; (adr r2, 80144f8 <getResponse+0x274>)
 80144f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144f6:	bf00      	nop
 80144f8:	08014531 	.word	0x08014531
 80144fc:	08014675 	.word	0x08014675
 8014500:	080147b9 	.word	0x080147b9
 8014504:	0801494d 	.word	0x0801494d
 8014508:	08014aef 	.word	0x08014aef
 801450c:	08014b09 	.word	0x08014b09
 8014510:	08014c11 	.word	0x08014c11
 8014514:	08014c2b 	.word	0x08014c2b
 8014518:	08014c45 	.word	0x08014c45
 801451c:	08014e35 	.word	0x08014e35
 8014520:	08014e4f 	.word	0x08014e4f
 8014524:	080151b3 	.word	0x080151b3
 8014528:	08015297 	.word	0x08015297
 801452c:	08014ff7 	.word	0x08014ff7
		case BRUSHED_DC:
		{
			if(Packages[moduleCommand.nucleoPackage]->getActuator() != 0){
 8014530:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014534:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014538:	791b      	ldrb	r3, [r3, #4]
 801453a:	461a      	mov	r2, r3
 801453c:	4b46      	ldr	r3, [pc, #280]	; (8014658 <getResponse+0x3d4>)
 801453e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014542:	4618      	mov	r0, r3
 8014544:	f006 fc35 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8014548:	4603      	mov	r3, r0
 801454a:	2b00      	cmp	r3, #0
 801454c:	bf14      	ite	ne
 801454e:	2301      	movne	r3, #1
 8014550:	2300      	moveq	r3, #0
 8014552:	b2db      	uxtb	r3, r3
 8014554:	2b00      	cmp	r3, #0
 8014556:	d00c      	beq.n	8014572 <getResponse+0x2ee>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 8014558:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801455c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	2103      	movs	r1, #3
 8014564:	2000      	movs	r0, #0
 8014566:	f001 fb70 	bl	8015c4a <buildError>
 801456a:	4603      	mov	r3, r0
 801456c:	461c      	mov	r4, r3
 801456e:	f001 bb0f 	b.w	8015b90 <getResponse+0x190c>
			}

			BrushedDCMotor *mtr_ptr = (BrushedDCMotor *)pvPortMalloc(sizeof(BrushedDCMotor));
 8014572:	2018      	movs	r0, #24
 8014574:	f005 ffd8 	bl	801a528 <pvPortMalloc>
 8014578:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
			BrushedDCMotor mtr(_PWMBank, _GPIOBank, moduleCommand.nucleoAddress);
 801457c:	4b3b      	ldr	r3, [pc, #236]	; (801466c <getResponse+0x3e8>)
 801457e:	6819      	ldr	r1, [r3, #0]
 8014580:	4b3b      	ldr	r3, [pc, #236]	; (8014670 <getResponse+0x3ec>)
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014588:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801458c:	885b      	ldrh	r3, [r3, #2]
 801458e:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 8014592:	f7ec f8a5 	bl	80006e0 <_ZN14BrushedDCMotorC1EP7PWMBankP8GPIOBankt>
			memcpy(mtr_ptr, &mtr, sizeof(BrushedDCMotor));
 8014596:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801459a:	2218      	movs	r2, #24
 801459c:	4619      	mov	r1, r3
 801459e:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80145a2:	f006 ff43 	bl	801b42c <memcpy>

			uint16_t motorNum = moduleCommand.param[0];
 80145a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80145aa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80145ae:	795b      	ldrb	r3, [r3, #5]
 80145b0:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2

			uint8_t layout[4];
			getMotorLayout(motorNum, layout);
 80145b4:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80145be:	4611      	mov	r1, r2
 80145c0:	4618      	mov	r0, r3
 80145c2:	f001 fc53 	bl	8015e6c <getMotorLayout>
			int retVal = mtr_ptr->begin(layout[0], layout[1], layout[2], layout[3]);
 80145c6:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 80145ca:	b299      	uxth	r1, r3
 80145cc:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 80145d6:	b298      	uxth	r0, r3
 80145d8:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80145dc:	b29b      	uxth	r3, r3
 80145de:	9300      	str	r3, [sp, #0]
 80145e0:	4603      	mov	r3, r0
 80145e2:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80145e6:	f7ec f899 	bl	800071c <_ZN14BrushedDCMotor5beginEtttt>
 80145ea:	4603      	mov	r3, r0
 80145ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

			if(retVal == -1){
 80145f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80145f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f8:	d110      	bne.n	801461c <getResponse+0x398>
				vPortFree(mtr_ptr);
 80145fa:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80145fe:	f006 f85f 	bl	801a6c0 <vPortFree>
				return buildError(0, INVALID_ORDER, buf);
 8014602:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014606:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	2107      	movs	r1, #7
 801460e:	2000      	movs	r0, #0
 8014610:	f001 fb1b 	bl	8015c4a <buildError>
 8014614:	4603      	mov	r3, r0
 8014616:	461c      	mov	r4, r3
 8014618:	f001 baba 	b.w	8015b90 <getResponse+0x190c>
			}

			Packages[moduleCommand.nucleoPackage]->addActuator(mtr_ptr);
 801461c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014620:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014624:	791b      	ldrb	r3, [r3, #4]
 8014626:	461a      	mov	r2, r3
 8014628:	4b0b      	ldr	r3, [pc, #44]	; (8014658 <getResponse+0x3d4>)
 801462a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801462e:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8014632:	4618      	mov	r0, r3
 8014634:	f006 fba3 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>

			return buildModAck(&moduleCommand, buf);
 8014638:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801463c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014640:	f107 0208 	add.w	r2, r7, #8
 8014644:	6819      	ldr	r1, [r3, #0]
 8014646:	4610      	mov	r0, r2
 8014648:	f001 fad8 	bl	8015bfc <buildModAck>
 801464c:	4603      	mov	r3, r0
 801464e:	461c      	mov	r4, r3
 8014650:	f001 ba9e 	b.w	8015b90 <getResponse+0x190c>
 8014654:	2400195a 	.word	0x2400195a
 8014658:	24000f64 	.word	0x24000f64
 801465c:	24000f54 	.word	0x24000f54
 8014660:	24000f58 	.word	0x24000f58
 8014664:	24000f3c 	.word	0x24000f3c
 8014668:	24000f40 	.word	0x24000f40
 801466c:	24000f60 	.word	0x24000f60
 8014670:	24000f5c 	.word	0x24000f5c

			break;
		}
		case PWM_SERVO:
		{
			if(Packages[moduleCommand.nucleoPackage]->getActuator() != 0){
 8014674:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014678:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801467c:	791b      	ldrb	r3, [r3, #4]
 801467e:	461a      	mov	r2, r3
 8014680:	4bc3      	ldr	r3, [pc, #780]	; (8014990 <getResponse+0x70c>)
 8014682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014686:	4618      	mov	r0, r3
 8014688:	f006 fb93 	bl	801adb2 <_ZN7Package11getActuatorEv>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	bf14      	ite	ne
 8014692:	2301      	movne	r3, #1
 8014694:	2300      	moveq	r3, #0
 8014696:	b2db      	uxtb	r3, r3
 8014698:	2b00      	cmp	r3, #0
 801469a:	d00c      	beq.n	80146b6 <getResponse+0x432>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 801469c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80146a0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	2103      	movs	r1, #3
 80146a8:	2000      	movs	r0, #0
 80146aa:	f001 face 	bl	8015c4a <buildError>
 80146ae:	4603      	mov	r3, r0
 80146b0:	461c      	mov	r4, r3
 80146b2:	f001 ba6d 	b.w	8015b90 <getResponse+0x190c>
			}

			uint8_t pwmPin = moduleCommand.param[0] + 16;
 80146b6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80146ba:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80146be:	795b      	ldrb	r3, [r3, #5]
 80146c0:	3310      	adds	r3, #16
 80146c2:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
			uint32_t maxRot = (moduleCommand.param[1] << 24) | (moduleCommand.param[2] << 16) | (moduleCommand.param[3] << 8) | (moduleCommand.param[4]);
 80146c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80146ca:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80146ce:	799b      	ldrb	r3, [r3, #6]
 80146d0:	061a      	lsls	r2, r3, #24
 80146d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80146d6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80146da:	79db      	ldrb	r3, [r3, #7]
 80146dc:	041b      	lsls	r3, r3, #16
 80146de:	431a      	orrs	r2, r3
 80146e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80146e4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80146e8:	7a1b      	ldrb	r3, [r3, #8]
 80146ea:	021b      	lsls	r3, r3, #8
 80146ec:	4313      	orrs	r3, r2
 80146ee:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80146f2:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80146f6:	7a52      	ldrb	r2, [r2, #9]
 80146f8:	4313      	orrs	r3, r2
 80146fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80146fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c

			float fmaxRot;
			memcpy(&fmaxRot, &maxRot, sizeof(uint32_t));
 8014702:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

			PWMServo *servo_ptr = (PWMServo *)pvPortMalloc(sizeof(PWMServo));
 8014706:	2014      	movs	r0, #20
 8014708:	f005 ff0e 	bl	801a528 <pvPortMalloc>
 801470c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
			PWMServo servo(_PWMBank, fmaxRot, moduleCommand.nucleoAddress);
 8014710:	4ba0      	ldr	r3, [pc, #640]	; (8014994 <getResponse+0x710>)
 8014712:	6819      	ldr	r1, [r3, #0]
 8014714:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8014718:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801471c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014720:	885a      	ldrh	r2, [r3, #2]
 8014722:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014726:	eeb0 0a67 	vmov.f32	s0, s15
 801472a:	4618      	mov	r0, r3
 801472c:	f7ec fca6 	bl	800107c <_ZN8PWMServoC1EP7PWMBankft>

			memcpy(servo_ptr, &servo, sizeof(PWMServo));
 8014730:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014734:	2214      	movs	r2, #20
 8014736:	4619      	mov	r1, r3
 8014738:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801473c:	f006 fe76 	bl	801b42c <memcpy>
			int retVal = servo_ptr->begin(pwmPin);
 8014740:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8014744:	b29b      	uxth	r3, r3
 8014746:	4619      	mov	r1, r3
 8014748:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801474c:	f7ec fcb6 	bl	80010bc <_ZN8PWMServo5beginEt>
 8014750:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8

			if(retVal == -1){
 8014754:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801475c:	d110      	bne.n	8014780 <getResponse+0x4fc>
				vPortFree(servo_ptr);
 801475e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8014762:	f005 ffad 	bl	801a6c0 <vPortFree>
				return buildError(0, INVALID_ORDER, buf);
 8014766:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801476a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801476e:	681a      	ldr	r2, [r3, #0]
 8014770:	2107      	movs	r1, #7
 8014772:	2000      	movs	r0, #0
 8014774:	f001 fa69 	bl	8015c4a <buildError>
 8014778:	4603      	mov	r3, r0
 801477a:	461c      	mov	r4, r3
 801477c:	f001 ba08 	b.w	8015b90 <getResponse+0x190c>
			}

			Packages[moduleCommand.nucleoPackage]->addActuator(servo_ptr);
 8014780:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014784:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014788:	791b      	ldrb	r3, [r3, #4]
 801478a:	461a      	mov	r2, r3
 801478c:	4b80      	ldr	r3, [pc, #512]	; (8014990 <getResponse+0x70c>)
 801478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014792:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8014796:	4618      	mov	r0, r3
 8014798:	f006 faf1 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>

			return buildModAck(&moduleCommand, buf);
 801479c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80147a0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80147a4:	f107 0208 	add.w	r2, r7, #8
 80147a8:	6819      	ldr	r1, [r3, #0]
 80147aa:	4610      	mov	r0, r2
 80147ac:	f001 fa26 	bl	8015bfc <buildModAck>
 80147b0:	4603      	mov	r3, r0
 80147b2:	461c      	mov	r4, r3
 80147b4:	f001 b9ec 	b.w	8015b90 <getResponse+0x190c>

			break;
		}
		case XYZ_SMART_SERVO:
		{
			if(Packages[moduleCommand.nucleoPackage]->getActuator() != 0){
 80147b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80147bc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80147c0:	791b      	ldrb	r3, [r3, #4]
 80147c2:	461a      	mov	r2, r3
 80147c4:	4b72      	ldr	r3, [pc, #456]	; (8014990 <getResponse+0x70c>)
 80147c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ca:	4618      	mov	r0, r3
 80147cc:	f006 faf1 	bl	801adb2 <_ZN7Package11getActuatorEv>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	bf14      	ite	ne
 80147d6:	2301      	movne	r3, #1
 80147d8:	2300      	moveq	r3, #0
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d00c      	beq.n	80147fa <getResponse+0x576>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 80147e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80147e4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80147e8:	681a      	ldr	r2, [r3, #0]
 80147ea:	2103      	movs	r1, #3
 80147ec:	2000      	movs	r0, #0
 80147ee:	f001 fa2c 	bl	8015c4a <buildError>
 80147f2:	4603      	mov	r3, r0
 80147f4:	461c      	mov	r4, r3
 80147f6:	f001 b9cb 	b.w	8015b90 <getResponse+0x190c>
			}

			// Need to create a new XYZ Smart Servo Object
			if(Packages[moduleCommand.nucleoPackage]->getSensor() == 0){
 80147fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80147fe:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014802:	791b      	ldrb	r3, [r3, #4]
 8014804:	461a      	mov	r2, r3
 8014806:	4b62      	ldr	r3, [pc, #392]	; (8014990 <getResponse+0x70c>)
 8014808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801480c:	4618      	mov	r0, r3
 801480e:	f006 fac4 	bl	801ad9a <_ZN7Package9getSensorEv>
 8014812:	4603      	mov	r3, r0
 8014814:	2b00      	cmp	r3, #0
 8014816:	bf0c      	ite	eq
 8014818:	2301      	moveq	r3, #1
 801481a:	2300      	movne	r3, #0
 801481c:	b2db      	uxtb	r3, r3
 801481e:	2b00      	cmp	r3, #0
 8014820:	d064      	beq.n	80148ec <getResponse+0x668>
				uint8_t uartAddress = moduleCommand.param[0];
 8014822:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014826:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801482a:	795b      	ldrb	r3, [r3, #5]
 801482c:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb

				XYZrobotServo *servo_ptr = (XYZrobotServo *)pvPortMalloc(sizeof(XYZrobotServo));
 8014830:	2050      	movs	r0, #80	; 0x50
 8014832:	f005 fe79 	bl	801a528 <pvPortMalloc>
 8014836:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				XYZrobotServo servo(&huart4, uartAddress, moduleCommand.nucleoAddress);
 801483a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801483e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014842:	885b      	ldrh	r3, [r3, #2]
 8014844:	f897 21cb 	ldrb.w	r2, [r7, #459]	; 0x1cb
 8014848:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801484c:	4952      	ldr	r1, [pc, #328]	; (8014998 <getResponse+0x714>)
 801484e:	f7ec fcd3 	bl	80011f8 <_ZN13XYZrobotServoC1EP20__UART_HandleTypeDefht>

				memcpy(servo_ptr, &servo, sizeof(XYZrobotServo));
 8014852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014856:	2250      	movs	r2, #80	; 0x50
 8014858:	4619      	mov	r1, r3
 801485a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 801485e:	f006 fde5 	bl	801b42c <memcpy>

				uint8_t id = servo_ptr->readIdEeprom();
 8014862:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8014866:	f7ec fd0b 	bl	8001280 <_ZN13XYZrobotServo12readIdEepromEv>
 801486a:	4603      	mov	r3, r0
 801486c:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
				if(id != uartAddress){
 8014870:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8014874:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8014878:	429a      	cmp	r2, r3
 801487a:	d010      	beq.n	801489e <getResponse+0x61a>
					vPortFree(servo_ptr);
 801487c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8014880:	f005 ff1e 	bl	801a6c0 <vPortFree>
					return buildError(0, FAULTY_DEVICE, buf);
 8014884:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014888:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801488c:	681a      	ldr	r2, [r3, #0]
 801488e:	2109      	movs	r1, #9
 8014890:	2000      	movs	r0, #0
 8014892:	f001 f9da 	bl	8015c4a <buildError>
 8014896:	4603      	mov	r3, r0
 8014898:	461c      	mov	r4, r3
 801489a:	f001 b979 	b.w	8015b90 <getResponse+0x190c>
				}

				Packages[moduleCommand.nucleoPackage]->addActuator(servo_ptr);
 801489e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80148a2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80148a6:	791b      	ldrb	r3, [r3, #4]
 80148a8:	461a      	mov	r2, r3
 80148aa:	4b39      	ldr	r3, [pc, #228]	; (8014990 <getResponse+0x70c>)
 80148ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80148b4:	4618      	mov	r0, r3
 80148b6:	f006 fa62 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>
				Packages[moduleCommand.nucleoPackage]->needsPID = false;
 80148ba:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80148be:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80148c2:	791b      	ldrb	r3, [r3, #4]
 80148c4:	461a      	mov	r2, r3
 80148c6:	4b32      	ldr	r3, [pc, #200]	; (8014990 <getResponse+0x70c>)
 80148c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148cc:	2200      	movs	r2, #0
 80148ce:	701a      	strb	r2, [r3, #0]

				return buildModAck(&moduleCommand, buf);
 80148d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80148d4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80148d8:	f107 0208 	add.w	r2, r7, #8
 80148dc:	6819      	ldr	r1, [r3, #0]
 80148de:	4610      	mov	r0, r2
 80148e0:	f001 f98c 	bl	8015bfc <buildModAck>
 80148e4:	4603      	mov	r3, r0
 80148e6:	461c      	mov	r4, r3
 80148e8:	f001 b952 	b.w	8015b90 <getResponse+0x190c>
			// Else one already exists so get its reference and set it as the actuator
			}else{
				XYZrobotServo *servo_ptr = (XYZrobotServo *)Packages[moduleCommand.nucleoPackage]->getSensor();
 80148ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80148f0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80148f4:	791b      	ldrb	r3, [r3, #4]
 80148f6:	461a      	mov	r2, r3
 80148f8:	4b25      	ldr	r3, [pc, #148]	; (8014990 <getResponse+0x70c>)
 80148fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148fe:	4618      	mov	r0, r3
 8014900:	f006 fa4b 	bl	801ad9a <_ZN7Package9getSensorEv>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d001      	beq.n	801490e <getResponse+0x68a>
 801490a:	3b08      	subs	r3, #8
 801490c:	e000      	b.n	8014910 <getResponse+0x68c>
 801490e:	2300      	movs	r3, #0
 8014910:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				Packages[moduleCommand.nucleoPackage]->addActuator(servo_ptr);
 8014914:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014918:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801491c:	791b      	ldrb	r3, [r3, #4]
 801491e:	461a      	mov	r2, r3
 8014920:	4b1b      	ldr	r3, [pc, #108]	; (8014990 <getResponse+0x70c>)
 8014922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014926:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 801492a:	4618      	mov	r0, r3
 801492c:	f006 fa27 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>

				return buildModAck(&moduleCommand, buf);
 8014930:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014934:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014938:	f107 0208 	add.w	r2, r7, #8
 801493c:	6819      	ldr	r1, [r3, #0]
 801493e:	4610      	mov	r0, r2
 8014940:	f001 f95c 	bl	8015bfc <buildModAck>
 8014944:	4603      	mov	r3, r0
 8014946:	461c      	mov	r4, r3
 8014948:	f001 b922 	b.w	8015b90 <getResponse+0x190c>

			break;
		}
		case DYNAMIXEL_SERVO:
				{
					if(Packages[moduleCommand.nucleoPackage]->getActuator() != 0){
 801494c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014950:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014954:	791b      	ldrb	r3, [r3, #4]
 8014956:	461a      	mov	r2, r3
 8014958:	4b0d      	ldr	r3, [pc, #52]	; (8014990 <getResponse+0x70c>)
 801495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801495e:	4618      	mov	r0, r3
 8014960:	f006 fa27 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8014964:	4603      	mov	r3, r0
 8014966:	2b00      	cmp	r3, #0
 8014968:	bf14      	ite	ne
 801496a:	2301      	movne	r3, #1
 801496c:	2300      	moveq	r3, #0
 801496e:	b2db      	uxtb	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	d013      	beq.n	801499c <getResponse+0x718>
						return buildError(0, UNKNOWN_ADDRESS, buf);
 8014974:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014978:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	2103      	movs	r1, #3
 8014980:	2000      	movs	r0, #0
 8014982:	f001 f962 	bl	8015c4a <buildError>
 8014986:	4603      	mov	r3, r0
 8014988:	461c      	mov	r4, r3
 801498a:	f001 b901 	b.w	8015b90 <getResponse+0x190c>
 801498e:	bf00      	nop
 8014990:	24000f64 	.word	0x24000f64
 8014994:	24000f60 	.word	0x24000f60
 8014998:	240009b0 	.word	0x240009b0
					}

					// Need to create a new Dynamixel Servo Object
					if(Packages[moduleCommand.nucleoPackage]->getSensor() == 0){
 801499c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80149a0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80149a4:	791b      	ldrb	r3, [r3, #4]
 80149a6:	461a      	mov	r2, r3
 80149a8:	4bd6      	ldr	r3, [pc, #856]	; (8014d04 <getResponse+0xa80>)
 80149aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f006 f9f3 	bl	801ad9a <_ZN7Package9getSensorEv>
 80149b4:	4603      	mov	r3, r0
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	bf0c      	ite	eq
 80149ba:	2301      	moveq	r3, #1
 80149bc:	2300      	movne	r3, #0
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d064      	beq.n	8014a8e <getResponse+0x80a>
						uint8_t usartAddress = moduleCommand.param[0];
 80149c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80149c8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80149cc:	795b      	ldrb	r3, [r3, #5]
 80149ce:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db

						DynamixelrobotServo *servo_ptr = (DynamixelrobotServo *)pvPortMalloc(sizeof(DynamixelrobotServo));
 80149d2:	2050      	movs	r0, #80	; 0x50
 80149d4:	f005 fda8 	bl	801a528 <pvPortMalloc>
 80149d8:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
						DynamixelrobotServo servo(&husart2, usartAddress, moduleCommand.nucleoAddress);
 80149dc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80149e0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80149e4:	885b      	ldrh	r3, [r3, #2]
 80149e6:	f897 21db 	ldrb.w	r2, [r7, #475]	; 0x1db
 80149ea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80149ee:	49c6      	ldr	r1, [pc, #792]	; (8014d08 <getResponse+0xa84>)
 80149f0:	f7ec f84e 	bl	8000a90 <_ZN19DynamixelrobotServoC1EP21__USART_HandleTypeDefht>

						memcpy(servo_ptr, &servo, sizeof(DynamixelrobotServo));
 80149f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80149f8:	2250      	movs	r2, #80	; 0x50
 80149fa:	4619      	mov	r1, r3
 80149fc:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8014a00:	f006 fd14 	bl	801b42c <memcpy>

						uint8_t id = servo_ptr->readIdEeprom();
 8014a04:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8014a08:	f7ec f886 	bl	8000b18 <_ZN19DynamixelrobotServo12readIdEepromEv>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
						if(id != usartAddress){
 8014a12:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 8014a16:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d010      	beq.n	8014a40 <getResponse+0x7bc>
							vPortFree(servo_ptr);
 8014a1e:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8014a22:	f005 fe4d 	bl	801a6c0 <vPortFree>
							return buildError(0, FAULTY_DEVICE, buf);
 8014a26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014a2a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	2109      	movs	r1, #9
 8014a32:	2000      	movs	r0, #0
 8014a34:	f001 f909 	bl	8015c4a <buildError>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	461c      	mov	r4, r3
 8014a3c:	f001 b8a8 	b.w	8015b90 <getResponse+0x190c>
						}

						Packages[moduleCommand.nucleoPackage]->addActuator(servo_ptr);
 8014a40:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014a44:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014a48:	791b      	ldrb	r3, [r3, #4]
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	4bad      	ldr	r3, [pc, #692]	; (8014d04 <getResponse+0xa80>)
 8014a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a52:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8014a56:	4618      	mov	r0, r3
 8014a58:	f006 f991 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>
						Packages[moduleCommand.nucleoPackage]->needsPID = false;
 8014a5c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014a60:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014a64:	791b      	ldrb	r3, [r3, #4]
 8014a66:	461a      	mov	r2, r3
 8014a68:	4ba6      	ldr	r3, [pc, #664]	; (8014d04 <getResponse+0xa80>)
 8014a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	701a      	strb	r2, [r3, #0]

						return buildModAck(&moduleCommand, buf);
 8014a72:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014a76:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014a7a:	f107 0208 	add.w	r2, r7, #8
 8014a7e:	6819      	ldr	r1, [r3, #0]
 8014a80:	4610      	mov	r0, r2
 8014a82:	f001 f8bb 	bl	8015bfc <buildModAck>
 8014a86:	4603      	mov	r3, r0
 8014a88:	461c      	mov	r4, r3
 8014a8a:	f001 b881 	b.w	8015b90 <getResponse+0x190c>
					// Else one already exists so get its reference and set it as the actuator
					}else{
						DynamixelrobotServo *servo_ptr = (DynamixelrobotServo *)Packages[moduleCommand.nucleoPackage]->getSensor();
 8014a8e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014a92:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014a96:	791b      	ldrb	r3, [r3, #4]
 8014a98:	461a      	mov	r2, r3
 8014a9a:	4b9a      	ldr	r3, [pc, #616]	; (8014d04 <getResponse+0xa80>)
 8014a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f006 f97a 	bl	801ad9a <_ZN7Package9getSensorEv>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d001      	beq.n	8014ab0 <getResponse+0x82c>
 8014aac:	3b08      	subs	r3, #8
 8014aae:	e000      	b.n	8014ab2 <getResponse+0x82e>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
						Packages[moduleCommand.nucleoPackage]->addActuator(servo_ptr);
 8014ab6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014aba:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014abe:	791b      	ldrb	r3, [r3, #4]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	4b90      	ldr	r3, [pc, #576]	; (8014d04 <getResponse+0xa80>)
 8014ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac8:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8014acc:	4618      	mov	r0, r3
 8014ace:	f006 f956 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>

						return buildModAck(&moduleCommand, buf);
 8014ad2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014ad6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014ada:	f107 0208 	add.w	r2, r7, #8
 8014ade:	6819      	ldr	r1, [r3, #0]
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	f001 f88b 	bl	8015bfc <buildModAck>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	461c      	mov	r4, r3
 8014aea:	f001 b851 	b.w	8015b90 <getResponse+0x190c>

					break;
				}
		case STEPPER_MOTOR:
		{
			return buildError(0, NOT_IMPLEMENTED, buf);
 8014aee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014af2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	2108      	movs	r1, #8
 8014afa:	2000      	movs	r0, #0
 8014afc:	f001 f8a5 	bl	8015c4a <buildError>
 8014b00:	4603      	mov	r3, r0
 8014b02:	461c      	mov	r4, r3
 8014b04:	f001 b844 	b.w	8015b90 <getResponse+0x190c>
		}
		case BRUSHLESS_MOTOR:
		{
			if(Packages[moduleCommand.nucleoPackage]->getActuator() != 0){
 8014b08:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014b0c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014b10:	791b      	ldrb	r3, [r3, #4]
 8014b12:	461a      	mov	r2, r3
 8014b14:	4b7b      	ldr	r3, [pc, #492]	; (8014d04 <getResponse+0xa80>)
 8014b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f006 f949 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	bf14      	ite	ne
 8014b26:	2301      	movne	r3, #1
 8014b28:	2300      	moveq	r3, #0
 8014b2a:	b2db      	uxtb	r3, r3
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d00c      	beq.n	8014b4a <getResponse+0x8c6>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 8014b30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014b34:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	2103      	movs	r1, #3
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	f001 f884 	bl	8015c4a <buildError>
 8014b42:	4603      	mov	r3, r0
 8014b44:	461c      	mov	r4, r3
 8014b46:	f001 b823 	b.w	8015b90 <getResponse+0x190c>
			}

			uint8_t pwmPin = moduleCommand.param[0] + 16;
 8014b4a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014b4e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014b52:	795b      	ldrb	r3, [r3, #5]
 8014b54:	3310      	adds	r3, #16
 8014b56:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb

			BrushlessMotor *motor_ptr = (BrushlessMotor *)pvPortMalloc(sizeof(BrushlessMotor));
 8014b5a:	2010      	movs	r0, #16
 8014b5c:	f005 fce4 	bl	801a528 <pvPortMalloc>
 8014b60:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
			BrushlessMotor motor(_PWMBank, moduleCommand.nucleoAddress);
 8014b64:	4b69      	ldr	r3, [pc, #420]	; (8014d0c <getResponse+0xa88>)
 8014b66:	6819      	ldr	r1, [r3, #0]
 8014b68:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014b6c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014b70:	885a      	ldrh	r2, [r3, #2]
 8014b72:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7eb fe9a 	bl	80008b0 <_ZN14BrushlessMotorC1EP7PWMBankt>

			memcpy(motor_ptr, &motor, sizeof(BrushlessMotor));
 8014b7c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014b80:	2210      	movs	r2, #16
 8014b82:	4619      	mov	r1, r3
 8014b84:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8014b88:	f006 fc50 	bl	801b42c <memcpy>
			int retVal = motor_ptr->begin(pwmPin);
 8014b8c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	4619      	mov	r1, r3
 8014b94:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8014b98:	f7eb fec4 	bl	8000924 <_ZN14BrushlessMotor5beginEt>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

			if(retVal == -1){
 8014ba2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014baa:	d10f      	bne.n	8014bcc <getResponse+0x948>
				vPortFree(motor_ptr);
 8014bac:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8014bb0:	f005 fd86 	bl	801a6c0 <vPortFree>
				return buildError(0, INVALID_ORDER, buf);
 8014bb4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014bb8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014bbc:	681a      	ldr	r2, [r3, #0]
 8014bbe:	2107      	movs	r1, #7
 8014bc0:	2000      	movs	r0, #0
 8014bc2:	f001 f842 	bl	8015c4a <buildError>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	461c      	mov	r4, r3
 8014bca:	e01a      	b.n	8014c02 <getResponse+0x97e>
			}

			Packages[moduleCommand.nucleoPackage]->addActuator(motor_ptr);
 8014bcc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014bd0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014bd4:	791b      	ldrb	r3, [r3, #4]
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	4b4a      	ldr	r3, [pc, #296]	; (8014d04 <getResponse+0xa80>)
 8014bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bde:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8014be2:	4618      	mov	r0, r3
 8014be4:	f006 f8cb 	bl	801ad7e <_ZN7Package11addActuatorEP8Actuator>

			return buildModAck(&moduleCommand, buf);
 8014be8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014bec:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014bf0:	f107 0208 	add.w	r2, r7, #8
 8014bf4:	6819      	ldr	r1, [r3, #0]
 8014bf6:	4610      	mov	r0, r2
 8014bf8:	f001 f800 	bl	8015bfc <buildModAck>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	461c      	mov	r4, r3
 8014c00:	bf00      	nop
			BrushlessMotor motor(_PWMBank, moduleCommand.nucleoAddress);
 8014c02:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7eb fe6c 	bl	80008e4 <_ZN14BrushlessMotorD1Ev>
 8014c0c:	f000 bfc0 	b.w	8015b90 <getResponse+0x190c>

			break;
		}
		case BINARY_OUTPUT:
		{
			return buildError(0, NOT_IMPLEMENTED, buf);
 8014c10:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014c14:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	2108      	movs	r1, #8
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	f001 f814 	bl	8015c4a <buildError>
 8014c22:	4603      	mov	r3, r0
 8014c24:	461c      	mov	r4, r3
 8014c26:	f000 bfb3 	b.w	8015b90 <getResponse+0x190c>
		}
		case POTENTIOMETER:
		{
			return buildError(0, NOT_IMPLEMENTED, buf);
 8014c2a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014c2e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014c32:	681a      	ldr	r2, [r3, #0]
 8014c34:	2108      	movs	r1, #8
 8014c36:	2000      	movs	r0, #0
 8014c38:	f001 f807 	bl	8015c4a <buildError>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	461c      	mov	r4, r3
 8014c40:	f000 bfa6 	b.w	8015b90 <getResponse+0x190c>
		}
		case QUAD_ENCODER:
		{
			if(Packages[moduleCommand.nucleoPackage]->getSensor() != 0){
 8014c44:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014c48:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014c4c:	791b      	ldrb	r3, [r3, #4]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	4b2c      	ldr	r3, [pc, #176]	; (8014d04 <getResponse+0xa80>)
 8014c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f006 f89f 	bl	801ad9a <_ZN7Package9getSensorEv>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	bf14      	ite	ne
 8014c62:	2301      	movne	r3, #1
 8014c64:	2300      	moveq	r3, #0
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d00c      	beq.n	8014c86 <getResponse+0xa02>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 8014c6c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014c70:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014c74:	681a      	ldr	r2, [r3, #0]
 8014c76:	2103      	movs	r1, #3
 8014c78:	2000      	movs	r0, #0
 8014c7a:	f000 ffe6 	bl	8015c4a <buildError>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	461c      	mov	r4, r3
 8014c82:	f000 bf85 	b.w	8015b90 <getResponse+0x190c>
			}

			uint8_t encoderPort = moduleCommand.param[0];
 8014c86:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014c8a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014c8e:	795b      	ldrb	r3, [r3, #5]
 8014c90:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
			uint16_t ticksPerRev = moduleCommand.param[1] << 8 | moduleCommand.param[2];
 8014c94:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014c98:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014c9c:	799b      	ldrb	r3, [r3, #6]
 8014c9e:	021b      	lsls	r3, r3, #8
 8014ca0:	b21a      	sxth	r2, r3
 8014ca2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014ca6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014caa:	79db      	ldrb	r3, [r3, #7]
 8014cac:	b21b      	sxth	r3, r3
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	b21b      	sxth	r3, r3
 8014cb2:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0

			Encoder *encoder_ptr = (Encoder *)pvPortMalloc(sizeof(Encoder));
 8014cb6:	2014      	movs	r0, #20
 8014cb8:	f005 fc36 	bl	801a528 <pvPortMalloc>
 8014cbc:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
			if(encoderPort == 0){
 8014cc0:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d125      	bne.n	8014d14 <getResponse+0xa90>
				Encoder enc(&hlptim2, 0, ticksPerRev, moduleCommand.nucleoAddress);
 8014cc8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014ccc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014cd0:	885b      	ldrh	r3, [r3, #2]
 8014cd2:	f8b7 21f0 	ldrh.w	r2, [r7, #496]	; 0x1f0
 8014cd6:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8014cda:	9300      	str	r3, [sp, #0]
 8014cdc:	4613      	mov	r3, r2
 8014cde:	2200      	movs	r2, #0
 8014ce0:	490b      	ldr	r1, [pc, #44]	; (8014d10 <getResponse+0xa8c>)
 8014ce2:	f006 fa99 	bl	801b218 <_ZN7EncoderC1EP19LPTIM_HandleTypeDefP17TIM_HandleTypeDeftt>
				memcpy(encoder_ptr, &enc, sizeof(Encoder));
 8014ce6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8014cea:	2214      	movs	r2, #20
 8014cec:	4619      	mov	r1, r3
 8014cee:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8014cf2:	f006 fb9b 	bl	801b42c <memcpy>
				Encoder enc(&hlptim2, 0, ticksPerRev, moduleCommand.nucleoAddress);
 8014cf6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f006 faac 	bl	801b258 <_ZN7EncoderD1Ev>
 8014d00:	e078      	b.n	8014df4 <getResponse+0xb70>
 8014d02:	bf00      	nop
 8014d04:	24000f64 	.word	0x24000f64
 8014d08:	24000ad0 	.word	0x24000ad0
 8014d0c:	24000f60 	.word	0x24000f60
 8014d10:	24000584 	.word	0x24000584
			}else if(encoderPort == 1){
 8014d14:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 8014d18:	2b01      	cmp	r3, #1
 8014d1a:	d11c      	bne.n	8014d56 <getResponse+0xad2>
				Encoder enc(0, &htim2, ticksPerRev, moduleCommand.nucleoAddress);
 8014d1c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014d20:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014d24:	885b      	ldrh	r3, [r3, #2]
 8014d26:	f8b7 21f0 	ldrh.w	r2, [r7, #496]	; 0x1f0
 8014d2a:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	4613      	mov	r3, r2
 8014d32:	4ac1      	ldr	r2, [pc, #772]	; (8015038 <getResponse+0xdb4>)
 8014d34:	2100      	movs	r1, #0
 8014d36:	f006 fa6f 	bl	801b218 <_ZN7EncoderC1EP19LPTIM_HandleTypeDefP17TIM_HandleTypeDeftt>
				memcpy(encoder_ptr, &enc, sizeof(Encoder));
 8014d3a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8014d3e:	2214      	movs	r2, #20
 8014d40:	4619      	mov	r1, r3
 8014d42:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8014d46:	f006 fb71 	bl	801b42c <memcpy>
				Encoder enc(0, &htim2, ticksPerRev, moduleCommand.nucleoAddress);
 8014d4a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f006 fa82 	bl	801b258 <_ZN7EncoderD1Ev>
 8014d54:	e04e      	b.n	8014df4 <getResponse+0xb70>
			}else if(encoderPort == 2){
 8014d56:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 8014d5a:	2b02      	cmp	r3, #2
 8014d5c:	d11c      	bne.n	8014d98 <getResponse+0xb14>
				Encoder enc(0, &htim3, ticksPerRev, moduleCommand.nucleoAddress);
 8014d5e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014d62:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014d66:	885b      	ldrh	r3, [r3, #2]
 8014d68:	f8b7 21f0 	ldrh.w	r2, [r7, #496]	; 0x1f0
 8014d6c:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	4613      	mov	r3, r2
 8014d74:	4ab1      	ldr	r2, [pc, #708]	; (801503c <getResponse+0xdb8>)
 8014d76:	2100      	movs	r1, #0
 8014d78:	f006 fa4e 	bl	801b218 <_ZN7EncoderC1EP19LPTIM_HandleTypeDefP17TIM_HandleTypeDeftt>
				memcpy(encoder_ptr, &enc, sizeof(Encoder));
 8014d7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8014d80:	2214      	movs	r2, #20
 8014d82:	4619      	mov	r1, r3
 8014d84:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8014d88:	f006 fb50 	bl	801b42c <memcpy>
				Encoder enc(0, &htim3, ticksPerRev, moduleCommand.nucleoAddress);
 8014d8c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8014d90:	4618      	mov	r0, r3
 8014d92:	f006 fa61 	bl	801b258 <_ZN7EncoderD1Ev>
 8014d96:	e02d      	b.n	8014df4 <getResponse+0xb70>
			}else if(encoderPort == 3){
 8014d98:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 8014d9c:	2b03      	cmp	r3, #3
 8014d9e:	d11c      	bne.n	8014dda <getResponse+0xb56>
				Encoder enc(0, &htim4, ticksPerRev, moduleCommand.nucleoAddress);
 8014da0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014da4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014da8:	885b      	ldrh	r3, [r3, #2]
 8014daa:	f8b7 21f0 	ldrh.w	r2, [r7, #496]	; 0x1f0
 8014dae:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	4613      	mov	r3, r2
 8014db6:	4aa2      	ldr	r2, [pc, #648]	; (8015040 <getResponse+0xdbc>)
 8014db8:	2100      	movs	r1, #0
 8014dba:	f006 fa2d 	bl	801b218 <_ZN7EncoderC1EP19LPTIM_HandleTypeDefP17TIM_HandleTypeDeftt>
				memcpy(encoder_ptr, &enc, sizeof(Encoder));
 8014dbe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8014dc2:	2214      	movs	r2, #20
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8014dca:	f006 fb2f 	bl	801b42c <memcpy>
				Encoder enc(0, &htim4, ticksPerRev, moduleCommand.nucleoAddress);
 8014dce:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f006 fa40 	bl	801b258 <_ZN7EncoderD1Ev>
 8014dd8:	e00c      	b.n	8014df4 <getResponse+0xb70>
			}else{
				return buildError(0, PARAMS_OUT_OF_RANGE, buf);
 8014dda:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014dde:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014de2:	681a      	ldr	r2, [r3, #0]
 8014de4:	2106      	movs	r1, #6
 8014de6:	2000      	movs	r0, #0
 8014de8:	f000 ff2f 	bl	8015c4a <buildError>
 8014dec:	4603      	mov	r3, r0
 8014dee:	461c      	mov	r4, r3
 8014df0:	f000 bece 	b.w	8015b90 <getResponse+0x190c>
			}

			encoder_ptr->initEncoder();
 8014df4:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8014df8:	f006 fa3e 	bl	801b278 <_ZN7Encoder11initEncoderEv>

			Packages[moduleCommand.nucleoPackage]->addSensor(encoder_ptr);
 8014dfc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014e00:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014e04:	791b      	ldrb	r3, [r3, #4]
 8014e06:	461a      	mov	r2, r3
 8014e08:	4b8e      	ldr	r3, [pc, #568]	; (8015044 <getResponse+0xdc0>)
 8014e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e0e:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8014e12:	4618      	mov	r0, r3
 8014e14:	f005 ffa5 	bl	801ad62 <_ZN7Package9addSensorEP6Sensor>

			return buildModAck(&moduleCommand, buf);
 8014e18:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014e1c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014e20:	f107 0208 	add.w	r2, r7, #8
 8014e24:	6819      	ldr	r1, [r3, #0]
 8014e26:	4610      	mov	r0, r2
 8014e28:	f000 fee8 	bl	8015bfc <buildModAck>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	461c      	mov	r4, r3
 8014e30:	f000 beae 	b.w	8015b90 <getResponse+0x190c>

			break;
		}
		case BINARY_INPUT:
		{
			return buildError(0, NOT_IMPLEMENTED, buf);
 8014e34:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014e38:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014e3c:	681a      	ldr	r2, [r3, #0]
 8014e3e:	2108      	movs	r1, #8
 8014e40:	2000      	movs	r0, #0
 8014e42:	f000 ff02 	bl	8015c4a <buildError>
 8014e46:	4603      	mov	r3, r0
 8014e48:	461c      	mov	r4, r3
 8014e4a:	f000 bea1 	b.w	8015b90 <getResponse+0x190c>
		}
		case XYZ_SMART_SENSOR:
		{
			if(Packages[moduleCommand.nucleoPackage]->getSensor() != 0){
 8014e4e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014e52:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014e56:	791b      	ldrb	r3, [r3, #4]
 8014e58:	461a      	mov	r2, r3
 8014e5a:	4b7a      	ldr	r3, [pc, #488]	; (8015044 <getResponse+0xdc0>)
 8014e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e60:	4618      	mov	r0, r3
 8014e62:	f005 ff9a 	bl	801ad9a <_ZN7Package9getSensorEv>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	bf14      	ite	ne
 8014e6c:	2301      	movne	r3, #1
 8014e6e:	2300      	moveq	r3, #0
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d00c      	beq.n	8014e90 <getResponse+0xc0c>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 8014e76:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014e7a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	2103      	movs	r1, #3
 8014e82:	2000      	movs	r0, #0
 8014e84:	f000 fee1 	bl	8015c4a <buildError>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	461c      	mov	r4, r3
 8014e8c:	f000 be80 	b.w	8015b90 <getResponse+0x190c>
			}

			// Need to create a new XYZ Smart Servo Object
			if(Packages[moduleCommand.nucleoPackage]->getActuator() == 0){
 8014e90:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014e94:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014e98:	791b      	ldrb	r3, [r3, #4]
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	4b69      	ldr	r3, [pc, #420]	; (8015044 <getResponse+0xdc0>)
 8014e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f005 ff85 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	bf0c      	ite	eq
 8014eae:	2301      	moveq	r3, #1
 8014eb0:	2300      	movne	r3, #0
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d06c      	beq.n	8014f92 <getResponse+0xd0e>
				uint8_t uartAddress = moduleCommand.param[0];
 8014eb8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014ebc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014ec0:	795b      	ldrb	r3, [r3, #5]
 8014ec2:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb

				XYZrobotServo *servo_ptr = (XYZrobotServo *)pvPortMalloc(sizeof(XYZrobotServo));
 8014ec6:	2050      	movs	r0, #80	; 0x50
 8014ec8:	f005 fb2e 	bl	801a528 <pvPortMalloc>
 8014ecc:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
				XYZrobotServo servo(&huart4, uartAddress, moduleCommand.nucleoAddress);
 8014ed0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014ed4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014ed8:	885b      	ldrh	r3, [r3, #2]
 8014eda:	f897 21fb 	ldrb.w	r2, [r7, #507]	; 0x1fb
 8014ede:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014ee2:	4959      	ldr	r1, [pc, #356]	; (8015048 <getResponse+0xdc4>)
 8014ee4:	f7ec f988 	bl	80011f8 <_ZN13XYZrobotServoC1EP20__UART_HandleTypeDefht>

				memcpy(servo_ptr, &servo, sizeof(XYZrobotServo));
 8014ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014eec:	2250      	movs	r2, #80	; 0x50
 8014eee:	4619      	mov	r1, r3
 8014ef0:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8014ef4:	f006 fa9a 	bl	801b42c <memcpy>

				// Verify Servo is responding
				uint8_t id = servo_ptr->readIdEeprom();
 8014ef8:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8014efc:	f7ec f9c0 	bl	8001280 <_ZN13XYZrobotServo12readIdEepromEv>
 8014f00:	4603      	mov	r3, r0
 8014f02:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
				if(id != uartAddress){
 8014f06:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8014f0a:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d010      	beq.n	8014f34 <getResponse+0xcb0>
					vPortFree(servo_ptr);
 8014f12:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8014f16:	f005 fbd3 	bl	801a6c0 <vPortFree>
					return buildError(0, FAULTY_DEVICE, buf);
 8014f1a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014f1e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014f22:	681a      	ldr	r2, [r3, #0]
 8014f24:	2109      	movs	r1, #9
 8014f26:	2000      	movs	r0, #0
 8014f28:	f000 fe8f 	bl	8015c4a <buildError>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	461c      	mov	r4, r3
 8014f30:	f000 be2e 	b.w	8015b90 <getResponse+0x190c>
				}

				Packages[moduleCommand.nucleoPackage]->addSensor(servo_ptr);
 8014f34:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014f38:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014f3c:	791b      	ldrb	r3, [r3, #4]
 8014f3e:	461a      	mov	r2, r3
 8014f40:	4b40      	ldr	r3, [pc, #256]	; (8015044 <getResponse+0xdc0>)
 8014f42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014f46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d003      	beq.n	8014f56 <getResponse+0xcd2>
 8014f4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014f52:	3308      	adds	r3, #8
 8014f54:	e000      	b.n	8014f58 <getResponse+0xcd4>
 8014f56:	2300      	movs	r3, #0
 8014f58:	4619      	mov	r1, r3
 8014f5a:	4610      	mov	r0, r2
 8014f5c:	f005 ff01 	bl	801ad62 <_ZN7Package9addSensorEP6Sensor>
				Packages[moduleCommand.nucleoPackage]->needsPID = false;
 8014f60:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014f64:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014f68:	791b      	ldrb	r3, [r3, #4]
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	4b35      	ldr	r3, [pc, #212]	; (8015044 <getResponse+0xdc0>)
 8014f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f72:	2200      	movs	r2, #0
 8014f74:	701a      	strb	r2, [r3, #0]

				return buildModAck(&moduleCommand, buf);
 8014f76:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014f7a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014f7e:	f107 0208 	add.w	r2, r7, #8
 8014f82:	6819      	ldr	r1, [r3, #0]
 8014f84:	4610      	mov	r0, r2
 8014f86:	f000 fe39 	bl	8015bfc <buildModAck>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	461c      	mov	r4, r3
 8014f8e:	f000 bdff 	b.w	8015b90 <getResponse+0x190c>
			// Else one already exists so get its reference and set it as the actuator
			}else{
				XYZrobotServo *servo_ptr = (XYZrobotServo *)Packages[moduleCommand.nucleoPackage]->getActuator();
 8014f92:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014f96:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014f9a:	791b      	ldrb	r3, [r3, #4]
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	4b29      	ldr	r3, [pc, #164]	; (8015044 <getResponse+0xdc0>)
 8014fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f005 ff04 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8014faa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
				Packages[moduleCommand.nucleoPackage]->addSensor(servo_ptr);
 8014fae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014fb2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014fb6:	791b      	ldrb	r3, [r3, #4]
 8014fb8:	461a      	mov	r2, r3
 8014fba:	4b22      	ldr	r3, [pc, #136]	; (8015044 <getResponse+0xdc0>)
 8014fbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014fc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d003      	beq.n	8014fd0 <getResponse+0xd4c>
 8014fc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014fcc:	3308      	adds	r3, #8
 8014fce:	e000      	b.n	8014fd2 <getResponse+0xd4e>
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	f005 fec4 	bl	801ad62 <_ZN7Package9addSensorEP6Sensor>

				return buildModAck(&moduleCommand, buf);
 8014fda:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014fde:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014fe2:	f107 0208 	add.w	r2, r7, #8
 8014fe6:	6819      	ldr	r1, [r3, #0]
 8014fe8:	4610      	mov	r0, r2
 8014fea:	f000 fe07 	bl	8015bfc <buildModAck>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	461c      	mov	r4, r3
 8014ff2:	f000 bdcd 	b.w	8015b90 <getResponse+0x190c>

			break;
		}
		case DYNAMIXEL_SENSOR:
		{
			if(Packages[moduleCommand.nucleoPackage]->getSensor() != 0){
 8014ff6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8014ffa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014ffe:	791b      	ldrb	r3, [r3, #4]
 8015000:	461a      	mov	r2, r3
 8015002:	4b10      	ldr	r3, [pc, #64]	; (8015044 <getResponse+0xdc0>)
 8015004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015008:	4618      	mov	r0, r3
 801500a:	f005 fec6 	bl	801ad9a <_ZN7Package9getSensorEv>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	bf14      	ite	ne
 8015014:	2301      	movne	r3, #1
 8015016:	2300      	moveq	r3, #0
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b00      	cmp	r3, #0
 801501c:	d016      	beq.n	801504c <getResponse+0xdc8>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 801501e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015022:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	2103      	movs	r1, #3
 801502a:	2000      	movs	r0, #0
 801502c:	f000 fe0d 	bl	8015c4a <buildError>
 8015030:	4603      	mov	r3, r0
 8015032:	461c      	mov	r4, r3
 8015034:	f000 bdac 	b.w	8015b90 <getResponse+0x190c>
 8015038:	240008cc 	.word	0x240008cc
 801503c:	24000918 	.word	0x24000918
 8015040:	24000964 	.word	0x24000964
 8015044:	24000f64 	.word	0x24000f64
 8015048:	240009b0 	.word	0x240009b0
			}

			// Need to create a new Dynamixel Servo Object
			if(Packages[moduleCommand.nucleoPackage]->getActuator() == 0){
 801504c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015050:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015054:	791b      	ldrb	r3, [r3, #4]
 8015056:	461a      	mov	r2, r3
 8015058:	4bd4      	ldr	r3, [pc, #848]	; (80153ac <getResponse+0x1128>)
 801505a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801505e:	4618      	mov	r0, r3
 8015060:	f005 fea7 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	bf0c      	ite	eq
 801506a:	2301      	moveq	r3, #1
 801506c:	2300      	movne	r3, #0
 801506e:	b2db      	uxtb	r3, r3
 8015070:	2b00      	cmp	r3, #0
 8015072:	d06c      	beq.n	801514e <getResponse+0xeca>
				uint8_t usartAddress = moduleCommand.param[0];
 8015074:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015078:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801507c:	795b      	ldrb	r3, [r3, #5]
 801507e:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b

				DynamixelrobotServo *servo_ptr = (DynamixelrobotServo *)pvPortMalloc(sizeof(DynamixelrobotServo));
 8015082:	2050      	movs	r0, #80	; 0x50
 8015084:	f005 fa50 	bl	801a528 <pvPortMalloc>
 8015088:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
				DynamixelrobotServo servo(&husart2, usartAddress, moduleCommand.nucleoAddress);
 801508c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015090:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015094:	885b      	ldrh	r3, [r3, #2]
 8015096:	f897 221b 	ldrb.w	r2, [r7, #539]	; 0x21b
 801509a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801509e:	49c4      	ldr	r1, [pc, #784]	; (80153b0 <getResponse+0x112c>)
 80150a0:	f7eb fcf6 	bl	8000a90 <_ZN19DynamixelrobotServoC1EP21__USART_HandleTypeDefht>

				memcpy(servo_ptr, &servo, sizeof(DynamixelrobotServo));
 80150a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80150a8:	2250      	movs	r2, #80	; 0x50
 80150aa:	4619      	mov	r1, r3
 80150ac:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80150b0:	f006 f9bc 	bl	801b42c <memcpy>

				// Verify Servo is responding
				uint8_t id = servo_ptr->readIdEeprom();
 80150b4:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80150b8:	f7eb fd2e 	bl	8000b18 <_ZN19DynamixelrobotServo12readIdEepromEv>
 80150bc:	4603      	mov	r3, r0
 80150be:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
				if(id != usartAddress){
 80150c2:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80150c6:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d010      	beq.n	80150f0 <getResponse+0xe6c>
					vPortFree(servo_ptr);
 80150ce:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80150d2:	f005 faf5 	bl	801a6c0 <vPortFree>
					return buildError(0, FAULTY_DEVICE, buf);
 80150d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80150da:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	2109      	movs	r1, #9
 80150e2:	2000      	movs	r0, #0
 80150e4:	f000 fdb1 	bl	8015c4a <buildError>
 80150e8:	4603      	mov	r3, r0
 80150ea:	461c      	mov	r4, r3
 80150ec:	f000 bd50 	b.w	8015b90 <getResponse+0x190c>
				}

				Packages[moduleCommand.nucleoPackage]->addSensor(servo_ptr);
 80150f0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80150f4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80150f8:	791b      	ldrb	r3, [r3, #4]
 80150fa:	461a      	mov	r2, r3
 80150fc:	4bab      	ldr	r3, [pc, #684]	; (80153ac <getResponse+0x1128>)
 80150fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015102:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8015106:	2b00      	cmp	r3, #0
 8015108:	d003      	beq.n	8015112 <getResponse+0xe8e>
 801510a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801510e:	3308      	adds	r3, #8
 8015110:	e000      	b.n	8015114 <getResponse+0xe90>
 8015112:	2300      	movs	r3, #0
 8015114:	4619      	mov	r1, r3
 8015116:	4610      	mov	r0, r2
 8015118:	f005 fe23 	bl	801ad62 <_ZN7Package9addSensorEP6Sensor>
				Packages[moduleCommand.nucleoPackage]->needsPID = false;
 801511c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015120:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015124:	791b      	ldrb	r3, [r3, #4]
 8015126:	461a      	mov	r2, r3
 8015128:	4ba0      	ldr	r3, [pc, #640]	; (80153ac <getResponse+0x1128>)
 801512a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801512e:	2200      	movs	r2, #0
 8015130:	701a      	strb	r2, [r3, #0]

				return buildModAck(&moduleCommand, buf);
 8015132:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015136:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801513a:	f107 0208 	add.w	r2, r7, #8
 801513e:	6819      	ldr	r1, [r3, #0]
 8015140:	4610      	mov	r0, r2
 8015142:	f000 fd5b 	bl	8015bfc <buildModAck>
 8015146:	4603      	mov	r3, r0
 8015148:	461c      	mov	r4, r3
 801514a:	f000 bd21 	b.w	8015b90 <getResponse+0x190c>
			// Else one already exists so get its reference and set it as the actuator
			}else{
				DynamixelrobotServo *servo_ptr = (DynamixelrobotServo *)Packages[moduleCommand.nucleoPackage]->getActuator();
 801514e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015152:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015156:	791b      	ldrb	r3, [r3, #4]
 8015158:	461a      	mov	r2, r3
 801515a:	4b94      	ldr	r3, [pc, #592]	; (80153ac <getResponse+0x1128>)
 801515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015160:	4618      	mov	r0, r3
 8015162:	f005 fe26 	bl	801adb2 <_ZN7Package11getActuatorEv>
 8015166:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
				Packages[moduleCommand.nucleoPackage]->addSensor(servo_ptr);
 801516a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801516e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015172:	791b      	ldrb	r3, [r3, #4]
 8015174:	461a      	mov	r2, r3
 8015176:	4b8d      	ldr	r3, [pc, #564]	; (80153ac <getResponse+0x1128>)
 8015178:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801517c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8015180:	2b00      	cmp	r3, #0
 8015182:	d003      	beq.n	801518c <getResponse+0xf08>
 8015184:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8015188:	3308      	adds	r3, #8
 801518a:	e000      	b.n	801518e <getResponse+0xf0a>
 801518c:	2300      	movs	r3, #0
 801518e:	4619      	mov	r1, r3
 8015190:	4610      	mov	r0, r2
 8015192:	f005 fde6 	bl	801ad62 <_ZN7Package9addSensorEP6Sensor>

				return buildModAck(&moduleCommand, buf);
 8015196:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801519a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801519e:	f107 0208 	add.w	r2, r7, #8
 80151a2:	6819      	ldr	r1, [r3, #0]
 80151a4:	4610      	mov	r0, r2
 80151a6:	f000 fd29 	bl	8015bfc <buildModAck>
 80151aa:	4603      	mov	r3, r0
 80151ac:	461c      	mov	r4, r3
 80151ae:	f000 bcef 	b.w	8015b90 <getResponse+0x190c>

			break;
		}
		case SPI_ENCODER:
		{
			if(Packages[moduleCommand.nucleoPackage]->getSensor() != 0){
 80151b2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80151b6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80151ba:	791b      	ldrb	r3, [r3, #4]
 80151bc:	461a      	mov	r2, r3
 80151be:	4b7b      	ldr	r3, [pc, #492]	; (80153ac <getResponse+0x1128>)
 80151c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151c4:	4618      	mov	r0, r3
 80151c6:	f005 fde8 	bl	801ad9a <_ZN7Package9getSensorEv>
 80151ca:	4603      	mov	r3, r0
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	bf14      	ite	ne
 80151d0:	2301      	movne	r3, #1
 80151d2:	2300      	moveq	r3, #0
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00c      	beq.n	80151f4 <getResponse+0xf70>
				return buildError(0, UNKNOWN_ADDRESS, buf);
 80151da:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80151de:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	2103      	movs	r1, #3
 80151e6:	2000      	movs	r0, #0
 80151e8:	f000 fd2f 	bl	8015c4a <buildError>
 80151ec:	4603      	mov	r3, r0
 80151ee:	461c      	mov	r4, r3
 80151f0:	f000 bcce 	b.w	8015b90 <getResponse+0x190c>
			}

			uint8_t sizeOFDaisy = moduleCommand.param[0];
 80151f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80151f8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80151fc:	795b      	ldrb	r3, [r3, #5]
 80151fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
			uint8_t numInDaisy = moduleCommand.param[1];
 8015202:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015206:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801520a:	799b      	ldrb	r3, [r3, #6]
 801520c:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206

			AS5048A *sensor_ptr = (AS5048A *)pvPortMalloc(sizeof(AS5048A));
 8015210:	2010      	movs	r0, #16
 8015212:	f005 f989 	bl	801a528 <pvPortMalloc>
 8015216:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
			AS5048A sensor(moduleCommand.nucleoAddress, &hspi5, sizeOFDaisy, numInDaisy);
 801521a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801521e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015222:	8859      	ldrh	r1, [r3, #2]
 8015224:	f897 2207 	ldrb.w	r2, [r7, #519]	; 0x207
 8015228:	f507 7082 	add.w	r0, r7, #260	; 0x104
 801522c:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 8015230:	9300      	str	r3, [sp, #0]
 8015232:	4613      	mov	r3, r2
 8015234:	4a5f      	ldr	r2, [pc, #380]	; (80153b4 <getResponse+0x1130>)
 8015236:	f005 fddf 	bl	801adf8 <_ZN7AS5048AC1EtP19__SPI_HandleTypeDefhh>

			memcpy(sensor_ptr, &sensor, sizeof(AS5048A));
 801523a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801523e:	2210      	movs	r2, #16
 8015240:	4619      	mov	r1, r3
 8015242:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8015246:	f006 f8f1 	bl	801b42c <memcpy>

			sensor_ptr->swReset();
 801524a:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 801524e:	f005 fe53 	bl	801aef8 <_ZN7AS5048A7swResetEv>

			Packages[moduleCommand.nucleoPackage]->addSensor(sensor_ptr);
 8015252:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015256:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801525a:	791b      	ldrb	r3, [r3, #4]
 801525c:	461a      	mov	r2, r3
 801525e:	4b53      	ldr	r3, [pc, #332]	; (80153ac <getResponse+0x1128>)
 8015260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015264:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8015268:	4618      	mov	r0, r3
 801526a:	f005 fd7a 	bl	801ad62 <_ZN7Package9addSensorEP6Sensor>

			return buildModAck(&moduleCommand, buf);
 801526e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015272:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015276:	f107 0208 	add.w	r2, r7, #8
 801527a:	6819      	ldr	r1, [r3, #0]
 801527c:	4610      	mov	r0, r2
 801527e:	f000 fcbd 	bl	8015bfc <buildModAck>
 8015282:	4603      	mov	r3, r0
 8015284:	461c      	mov	r4, r3
 8015286:	bf00      	nop
			AS5048A sensor(moduleCommand.nucleoAddress, &hspi5, sizeOFDaisy, numInDaisy);
 8015288:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801528c:	4618      	mov	r0, r3
 801528e:	f005 fdd9 	bl	801ae44 <_ZN7AS5048AD1Ev>
 8015292:	f000 bc7d 	b.w	8015b90 <getResponse+0x190c>
			break;
		}

		case LCD_DISPLAY:
		{
			lcd1_screen_buffer = (uint16_t *)pvPortMalloc(57600 * sizeof(uint16_t));
 8015296:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 801529a:	f005 f945 	bl	801a528 <pvPortMalloc>
 801529e:	4603      	mov	r3, r0
 80152a0:	4a45      	ldr	r2, [pc, #276]	; (80153b8 <getResponse+0x1134>)
 80152a2:	6013      	str	r3, [r2, #0]

			ST7789 *lcd1_ptr = (ST7789 *)pvPortMalloc(sizeof(ST7789));
 80152a4:	2018      	movs	r0, #24
 80152a6:	f005 f93f 	bl	801a528 <pvPortMalloc>
 80152aa:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			ST7789 lcd1_obj(lcd1_screen_buffer, 57600, &hspi1, LCD1_DCX_GPIO_Port, LCD1_DCX_Pin, LCD1_RSVD_Pin);
 80152ae:	4b42      	ldr	r3, [pc, #264]	; (80153b8 <getResponse+0x1134>)
 80152b0:	6819      	ldr	r1, [r3, #0]
 80152b2:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80152b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152ba:	9302      	str	r3, [sp, #8]
 80152bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80152c0:	9301      	str	r3, [sp, #4]
 80152c2:	4b3e      	ldr	r3, [pc, #248]	; (80153bc <getResponse+0x1138>)
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	4b3e      	ldr	r3, [pc, #248]	; (80153c0 <getResponse+0x113c>)
 80152c8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80152cc:	f001 fbe0 	bl	8016a90 <_ZN6ST7789C1EPttP19__SPI_HandleTypeDefP12GPIO_TypeDeftt>
			memcpy(lcd1_ptr, &lcd1_obj, sizeof(ST7789));
 80152d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80152d4:	2218      	movs	r2, #24
 80152d6:	4619      	mov	r1, r3
 80152d8:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80152dc:	f006 f8a6 	bl	801b42c <memcpy>
			lcd1 = lcd1_ptr;
 80152e0:	4a38      	ldr	r2, [pc, #224]	; (80153c4 <getResponse+0x1140>)
 80152e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80152e6:	6013      	str	r3, [r2, #0]
			lcd1->displayInit(generic_st7789, moduleCommand.nucleoAddress);
 80152e8:	4b36      	ldr	r3, [pc, #216]	; (80153c4 <getResponse+0x1140>)
 80152ea:	6818      	ldr	r0, [r3, #0]
 80152ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80152f0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80152f4:	885b      	ldrh	r3, [r3, #2]
 80152f6:	461a      	mov	r2, r3
 80152f8:	4933      	ldr	r1, [pc, #204]	; (80153c8 <getResponse+0x1144>)
 80152fa:	f001 fc8b 	bl	8016c14 <_ZN6ST778911displayInitEPht>

			lcd2_screen_buffer = (uint16_t *)pvPortMalloc(57600 * sizeof(uint16_t));
 80152fe:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8015302:	f005 f911 	bl	801a528 <pvPortMalloc>
 8015306:	4603      	mov	r3, r0
 8015308:	4a30      	ldr	r2, [pc, #192]	; (80153cc <getResponse+0x1148>)
 801530a:	6013      	str	r3, [r2, #0]

			ST7789 *lcd2_ptr = (ST7789 *)pvPortMalloc(sizeof(ST7789));
 801530c:	2018      	movs	r0, #24
 801530e:	f005 f90b 	bl	801a528 <pvPortMalloc>
 8015312:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			ST7789 lcd2_obj(lcd2_screen_buffer, 57600, &hspi3, LCD2_DCX_GPIO_Port, LCD2_DCX_Pin, LCD2_RSVD_Pin);
 8015316:	4b2d      	ldr	r3, [pc, #180]	; (80153cc <getResponse+0x1148>)
 8015318:	6819      	ldr	r1, [r3, #0]
 801531a:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 801531e:	2308      	movs	r3, #8
 8015320:	9302      	str	r3, [sp, #8]
 8015322:	2304      	movs	r3, #4
 8015324:	9301      	str	r3, [sp, #4]
 8015326:	4b2a      	ldr	r3, [pc, #168]	; (80153d0 <getResponse+0x114c>)
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	4b2a      	ldr	r3, [pc, #168]	; (80153d4 <getResponse+0x1150>)
 801532c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8015330:	f001 fbae 	bl	8016a90 <_ZN6ST7789C1EPttP19__SPI_HandleTypeDefP12GPIO_TypeDeftt>
			memcpy(lcd2_ptr, &lcd2_obj, sizeof(ST7789));
 8015334:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015338:	2218      	movs	r2, #24
 801533a:	4619      	mov	r1, r3
 801533c:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8015340:	f006 f874 	bl	801b42c <memcpy>
			lcd2 = lcd2_ptr;
 8015344:	4a24      	ldr	r2, [pc, #144]	; (80153d8 <getResponse+0x1154>)
 8015346:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801534a:	6013      	str	r3, [r2, #0]
			lcd2->displayInit(generic_st7789, moduleCommand.nucleoAddress);
 801534c:	4b22      	ldr	r3, [pc, #136]	; (80153d8 <getResponse+0x1154>)
 801534e:	6818      	ldr	r0, [r3, #0]
 8015350:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015354:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015358:	885b      	ldrh	r3, [r3, #2]
 801535a:	461a      	mov	r2, r3
 801535c:	491a      	ldr	r1, [pc, #104]	; (80153c8 <getResponse+0x1144>)
 801535e:	f001 fc59 	bl	8016c14 <_ZN6ST778911displayInitEPht>

			return buildModAck(&moduleCommand, buf);
 8015362:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015366:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801536a:	f107 0208 	add.w	r2, r7, #8
 801536e:	6819      	ldr	r1, [r3, #0]
 8015370:	4610      	mov	r0, r2
 8015372:	f000 fc43 	bl	8015bfc <buildModAck>
 8015376:	4603      	mov	r3, r0
 8015378:	461c      	mov	r4, r3
 801537a:	bf00      	nop
			ST7789 lcd2_obj(lcd2_screen_buffer, 57600, &hspi3, LCD2_DCX_GPIO_Port, LCD2_DCX_Pin, LCD2_RSVD_Pin);
 801537c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015380:	4618      	mov	r0, r3
 8015382:	f001 fbab 	bl	8016adc <_ZN6ST7789D1Ev>
			ST7789 lcd1_obj(lcd1_screen_buffer, 57600, &hspi1, LCD1_DCX_GPIO_Port, LCD1_DCX_Pin, LCD1_RSVD_Pin);
 8015386:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801538a:	4618      	mov	r0, r3
 801538c:	f001 fba6 	bl	8016adc <_ZN6ST7789D1Ev>
 8015390:	e3fe      	b.n	8015b90 <getResponse+0x190c>

			break;
		}
		default:
			return buildError(0, UNKNOWN_MODULE, buf);
 8015392:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015396:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801539a:	681a      	ldr	r2, [r3, #0]
 801539c:	2102      	movs	r1, #2
 801539e:	2000      	movs	r0, #0
 80153a0:	f000 fc53 	bl	8015c4a <buildError>
 80153a4:	4603      	mov	r3, r0
 80153a6:	461c      	mov	r4, r3
 80153a8:	e3f2      	b.n	8015b90 <getResponse+0x190c>
 80153aa:	bf00      	nop
 80153ac:	24000f64 	.word	0x24000f64
 80153b0:	24000ad0 	.word	0x24000ad0
 80153b4:	24000754 	.word	0x24000754
 80153b8:	24001360 	.word	0x24001360
 80153bc:	58020800 	.word	0x58020800
 80153c0:	240005bc 	.word	0x240005bc
 80153c4:	24000f54 	.word	0x24000f54
 80153c8:	24000000 	.word	0x24000000
 80153cc:	24001364 	.word	0x24001364
 80153d0:	58021800 	.word	0x58021800
 80153d4:	24000644 	.word	0x24000644
 80153d8:	24000f58 	.word	0x24000f58
		}
		break;
	}
	case XAVIER_COMMAND:
	{
		if(currState == STATE_XAVIER_COMMAND){
 80153dc:	4bca      	ldr	r3, [pc, #808]	; (8015708 <getResponse+0x1484>)
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	2b03      	cmp	r3, #3
 80153e2:	f040 83ad 	bne.w	8015b40 <getResponse+0x18bc>
			struct MODULECOMMAND_t *comm_ptr = (struct MODULECOMMAND_t *)pvPortMalloc(sizeof(struct MODULECOMMAND_t));
 80153e6:	2028      	movs	r0, #40	; 0x28
 80153e8:	f005 f89e 	bl	801a528 <pvPortMalloc>
 80153ec:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
			parseCOMMAND(buf, len, comm_ptr);
 80153f0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80153f4:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80153f8:	7819      	ldrb	r1, [r3, #0]
 80153fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80153fe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015402:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8015406:	6818      	ldr	r0, [r3, #0]
 8015408:	f000 fcf7 	bl	8015dfa <parseCOMMAND>

			if(Packages[comm_ptr->packageNum] == 0){
 801540c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015410:	789b      	ldrb	r3, [r3, #2]
 8015412:	461a      	mov	r2, r3
 8015414:	4bbd      	ldr	r3, [pc, #756]	; (801570c <getResponse+0x1488>)
 8015416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d10c      	bne.n	8015438 <getResponse+0x11b4>
				return buildError(comm_ptr, UNKNOWN_PACKAGE, buf);
 801541e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015422:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015426:	681a      	ldr	r2, [r3, #0]
 8015428:	2104      	movs	r1, #4
 801542a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 801542e:	f000 fc0c 	bl	8015c4a <buildError>
 8015432:	4603      	mov	r3, r0
 8015434:	461c      	mov	r4, r3
 8015436:	e3ab      	b.n	8015b90 <getResponse+0x190c>
			}

			switch(comm_ptr->command){
 8015438:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801543c:	889b      	ldrh	r3, [r3, #4]
 801543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015442:	f000 835d 	beq.w	8015b00 <getResponse+0x187c>
 8015446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801544a:	f300 836c 	bgt.w	8015b26 <getResponse+0x18a2>
 801544e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015452:	f000 830f 	beq.w	8015a74 <getResponse+0x17f0>
 8015456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801545a:	f300 8364 	bgt.w	8015b26 <getResponse+0x18a2>
 801545e:	2b10      	cmp	r3, #16
 8015460:	dc28      	bgt.n	80154b4 <getResponse+0x1230>
 8015462:	2b02      	cmp	r3, #2
 8015464:	f2c0 835f 	blt.w	8015b26 <getResponse+0x18a2>
 8015468:	3b02      	subs	r3, #2
 801546a:	2b0e      	cmp	r3, #14
 801546c:	f200 835b 	bhi.w	8015b26 <getResponse+0x18a2>
 8015470:	a201      	add	r2, pc, #4	; (adr r2, 8015478 <getResponse+0x11f4>)
 8015472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015476:	bf00      	nop
 8015478:	080154bf 	.word	0x080154bf
 801547c:	08015631 	.word	0x08015631
 8015480:	08015b27 	.word	0x08015b27
 8015484:	08015685 	.word	0x08015685
 8015488:	08015711 	.word	0x08015711
 801548c:	08015795 	.word	0x08015795
 8015490:	08015819 	.word	0x08015819
 8015494:	0801589d 	.word	0x0801589d
 8015498:	08015921 	.word	0x08015921
 801549c:	08015b27 	.word	0x08015b27
 80154a0:	08015b27 	.word	0x08015b27
 80154a4:	08015b27 	.word	0x08015b27
 80154a8:	08015b27 	.word	0x08015b27
 80154ac:	08015b27 	.word	0x08015b27
 80154b0:	080159a5 	.word	0x080159a5
 80154b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154b8:	f000 82ce 	beq.w	8015a58 <getResponse+0x17d4>
 80154bc:	e333      	b.n	8015b26 <getResponse+0x18a2>
			case XAVIER_SETPOINT:
			{
				if(comm_ptr->paramLen >= 4){
 80154be:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80154c2:	799b      	ldrb	r3, [r3, #6]
 80154c4:	2b03      	cmp	r3, #3
 80154c6:	d933      	bls.n	8015530 <getResponse+0x12ac>
					uint32_t newPos = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 80154c8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80154cc:	79db      	ldrb	r3, [r3, #7]
 80154ce:	061a      	lsls	r2, r3, #24
 80154d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80154d4:	7a1b      	ldrb	r3, [r3, #8]
 80154d6:	041b      	lsls	r3, r3, #16
 80154d8:	431a      	orrs	r2, r3
 80154da:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80154de:	7a5b      	ldrb	r3, [r3, #9]
 80154e0:	021b      	lsls	r3, r3, #8
 80154e2:	4313      	orrs	r3, r2
 80154e4:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80154e8:	7a92      	ldrb	r2, [r2, #10]
 80154ea:	4313      	orrs	r3, r2
 80154ec:	461a      	mov	r2, r3
 80154ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80154f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80154f6:	601a      	str	r2, [r3, #0]
 80154f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80154fc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8015500:	681a      	ldr	r2, [r3, #0]
					float fnewPos;
					memcpy(&fnewPos, &newPos, sizeof(uint32_t));
 8015502:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015506:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801550a:	601a      	str	r2, [r3, #0]
					Packages[comm_ptr->packageNum]->newPosSetpoint(fnewPos);
 801550c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015510:	789b      	ldrb	r3, [r3, #2]
 8015512:	461a      	mov	r2, r3
 8015514:	4b7d      	ldr	r3, [pc, #500]	; (801570c <getResponse+0x1488>)
 8015516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801551a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801551e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8015522:	edd3 7a00 	vldr	s15, [r3]
 8015526:	eeb0 0a67 	vmov.f32	s0, s15
 801552a:	4610      	mov	r0, r2
 801552c:	f005 fb4b 	bl	801abc6 <_ZN7Package14newPosSetpointEf>
				}

				if(comm_ptr->paramLen >= 8){
 8015530:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015534:	799b      	ldrb	r3, [r3, #6]
 8015536:	2b07      	cmp	r3, #7
 8015538:	d933      	bls.n	80155a2 <getResponse+0x131e>
					uint32_t newVel = (comm_ptr->params[4] << 24) | (comm_ptr->params[5] << 16) | (comm_ptr->params[6] << 8) | (comm_ptr->params[7]);
 801553a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801553e:	7adb      	ldrb	r3, [r3, #11]
 8015540:	061a      	lsls	r2, r3, #24
 8015542:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015546:	7b1b      	ldrb	r3, [r3, #12]
 8015548:	041b      	lsls	r3, r3, #16
 801554a:	431a      	orrs	r2, r3
 801554c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015550:	7b5b      	ldrb	r3, [r3, #13]
 8015552:	021b      	lsls	r3, r3, #8
 8015554:	4313      	orrs	r3, r2
 8015556:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801555a:	7b92      	ldrb	r2, [r2, #14]
 801555c:	4313      	orrs	r3, r2
 801555e:	461a      	mov	r2, r3
 8015560:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015564:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801556e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8015572:	681a      	ldr	r2, [r3, #0]
					float fnewVel;
					memcpy(&fnewVel, &newVel, sizeof(uint32_t));
 8015574:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015578:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801557c:	601a      	str	r2, [r3, #0]
					Packages[comm_ptr->packageNum]->newVelSetpoint(fnewVel);
 801557e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015582:	789b      	ldrb	r3, [r3, #2]
 8015584:	461a      	mov	r2, r3
 8015586:	4b61      	ldr	r3, [pc, #388]	; (801570c <getResponse+0x1488>)
 8015588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801558c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015590:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8015594:	edd3 7a00 	vldr	s15, [r3]
 8015598:	eeb0 0a67 	vmov.f32	s0, s15
 801559c:	4610      	mov	r0, r2
 801559e:	f005 fb3a 	bl	801ac16 <_ZN7Package14newVelSetpointEf>
				}

				if(comm_ptr->paramLen >= 12){
 80155a2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80155a6:	799b      	ldrb	r3, [r3, #6]
 80155a8:	2b0b      	cmp	r3, #11
 80155aa:	d933      	bls.n	8015614 <getResponse+0x1390>
					uint32_t newAcc = (comm_ptr->params[8] << 24) | (comm_ptr->params[9] << 16) | (comm_ptr->params[10] << 8) | (comm_ptr->params[11]);
 80155ac:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80155b0:	7bdb      	ldrb	r3, [r3, #15]
 80155b2:	061a      	lsls	r2, r3, #24
 80155b4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80155b8:	7c1b      	ldrb	r3, [r3, #16]
 80155ba:	041b      	lsls	r3, r3, #16
 80155bc:	431a      	orrs	r2, r3
 80155be:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80155c2:	7c5b      	ldrb	r3, [r3, #17]
 80155c4:	021b      	lsls	r3, r3, #8
 80155c6:	4313      	orrs	r3, r2
 80155c8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80155cc:	7c92      	ldrb	r2, [r2, #18]
 80155ce:	4313      	orrs	r3, r2
 80155d0:	461a      	mov	r2, r3
 80155d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80155d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80155da:	601a      	str	r2, [r3, #0]
 80155dc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80155e0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80155e4:	681a      	ldr	r2, [r3, #0]
					float fnewAcc;
					memcpy(&fnewAcc, &newAcc, sizeof(uint32_t));
 80155e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80155ea:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80155ee:	601a      	str	r2, [r3, #0]
					Packages[comm_ptr->packageNum]->newAccSetpoint(fnewAcc);
 80155f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80155f4:	789b      	ldrb	r3, [r3, #2]
 80155f6:	461a      	mov	r2, r3
 80155f8:	4b44      	ldr	r3, [pc, #272]	; (801570c <getResponse+0x1488>)
 80155fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80155fe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015602:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015606:	edd3 7a00 	vldr	s15, [r3]
 801560a:	eeb0 0a67 	vmov.f32	s0, s15
 801560e:	4610      	mov	r0, r2
 8015610:	f005 fb2c 	bl	801ac6c <_ZN7Package14newAccSetpointEf>
				}

				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015614:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015618:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2200      	movs	r2, #0
 8015620:	2100      	movs	r1, #0
 8015622:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015626:	f000 fb4b 	bl	8015cc0 <buildCommandResponse>
 801562a:	4603      	mov	r3, r0
 801562c:	461c      	mov	r4, r3
 801562e:	e2af      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_REBOOT:
			{
				if(comm_ptr->params[0] == 0){
 8015630:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015634:	79db      	ldrb	r3, [r3, #7]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d10b      	bne.n	8015652 <getResponse+0x13ce>
					Packages[comm_ptr->packageNum]->torque(false);
 801563a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801563e:	789b      	ldrb	r3, [r3, #2]
 8015640:	461a      	mov	r2, r3
 8015642:	4b32      	ldr	r3, [pc, #200]	; (801570c <getResponse+0x1488>)
 8015644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015648:	2100      	movs	r1, #0
 801564a:	4618      	mov	r0, r3
 801564c:	f005 fa3e 	bl	801aacc <_ZN7Package6torqueEb>
 8015650:	e00a      	b.n	8015668 <getResponse+0x13e4>
				}else{
					Packages[comm_ptr->packageNum]->torque(true);
 8015652:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015656:	789b      	ldrb	r3, [r3, #2]
 8015658:	461a      	mov	r2, r3
 801565a:	4b2c      	ldr	r3, [pc, #176]	; (801570c <getResponse+0x1488>)
 801565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015660:	2101      	movs	r1, #1
 8015662:	4618      	mov	r0, r3
 8015664:	f005 fa32 	bl	801aacc <_ZN7Package6torqueEb>
				}
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015668:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801566c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	2200      	movs	r2, #0
 8015674:	2100      	movs	r1, #0
 8015676:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 801567a:	f000 fb21 	bl	8015cc0 <buildCommandResponse>
 801567e:	4603      	mov	r3, r0
 8015680:	461c      	mov	r4, r3
 8015682:	e285      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_PACKAGE_P:
			{
				uint32_t newP = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 8015684:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015688:	79db      	ldrb	r3, [r3, #7]
 801568a:	061a      	lsls	r2, r3, #24
 801568c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015690:	7a1b      	ldrb	r3, [r3, #8]
 8015692:	041b      	lsls	r3, r3, #16
 8015694:	431a      	orrs	r2, r3
 8015696:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801569a:	7a5b      	ldrb	r3, [r3, #9]
 801569c:	021b      	lsls	r3, r3, #8
 801569e:	4313      	orrs	r3, r2
 80156a0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80156a4:	7a92      	ldrb	r2, [r2, #10]
 80156a6:	4313      	orrs	r3, r2
 80156a8:	461a      	mov	r2, r3
 80156aa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80156ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80156b2:	601a      	str	r2, [r3, #0]
 80156b4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80156b8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80156bc:	681a      	ldr	r2, [r3, #0]
				float fnewP;
				memcpy(&fnewP, &newP, sizeof(uint32_t));
 80156be:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80156c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80156c6:	601a      	str	r2, [r3, #0]
				Packages[comm_ptr->packageNum]->setPGain(fnewP);
 80156c8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80156cc:	789b      	ldrb	r3, [r3, #2]
 80156ce:	461a      	mov	r2, r3
 80156d0:	4b0e      	ldr	r3, [pc, #56]	; (801570c <getResponse+0x1488>)
 80156d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80156d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80156da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80156de:	edd3 7a00 	vldr	s15, [r3]
 80156e2:	eeb0 0a67 	vmov.f32	s0, s15
 80156e6:	4610      	mov	r0, r2
 80156e8:	f005 facf 	bl	801ac8a <_ZN7Package8setPGainEf>
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 80156ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80156f0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	2200      	movs	r2, #0
 80156f8:	2100      	movs	r1, #0
 80156fa:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80156fe:	f000 fadf 	bl	8015cc0 <buildCommandResponse>
 8015702:	4603      	mov	r3, r0
 8015704:	461c      	mov	r4, r3
 8015706:	e243      	b.n	8015b90 <getResponse+0x190c>
 8015708:	2400195a 	.word	0x2400195a
 801570c:	24000f64 	.word	0x24000f64
				break;
			}
			case XAVIER_PACKAGE_I:
			{
				uint32_t newI = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 8015710:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015714:	79db      	ldrb	r3, [r3, #7]
 8015716:	061a      	lsls	r2, r3, #24
 8015718:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801571c:	7a1b      	ldrb	r3, [r3, #8]
 801571e:	041b      	lsls	r3, r3, #16
 8015720:	431a      	orrs	r2, r3
 8015722:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015726:	7a5b      	ldrb	r3, [r3, #9]
 8015728:	021b      	lsls	r3, r3, #8
 801572a:	4313      	orrs	r3, r2
 801572c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8015730:	7a92      	ldrb	r2, [r2, #10]
 8015732:	4313      	orrs	r3, r2
 8015734:	461a      	mov	r2, r3
 8015736:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801573a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801573e:	601a      	str	r2, [r3, #0]
 8015740:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015744:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8015748:	681a      	ldr	r2, [r3, #0]
				float fnewI;
				memcpy(&fnewI, &newI, sizeof(uint32_t));
 801574a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801574e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015752:	601a      	str	r2, [r3, #0]
				Packages[comm_ptr->packageNum]->setIGain(fnewI);
 8015754:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015758:	789b      	ldrb	r3, [r3, #2]
 801575a:	461a      	mov	r2, r3
 801575c:	4bc4      	ldr	r3, [pc, #784]	; (8015a70 <getResponse+0x17ec>)
 801575e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015762:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015766:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801576a:	edd3 7a00 	vldr	s15, [r3]
 801576e:	eeb0 0a67 	vmov.f32	s0, s15
 8015772:	4610      	mov	r0, r2
 8015774:	f005 fa9e 	bl	801acb4 <_ZN7Package8setIGainEf>
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015778:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801577c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2200      	movs	r2, #0
 8015784:	2100      	movs	r1, #0
 8015786:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 801578a:	f000 fa99 	bl	8015cc0 <buildCommandResponse>
 801578e:	4603      	mov	r3, r0
 8015790:	461c      	mov	r4, r3
 8015792:	e1fd      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_PACKAGE_D:
			{
				uint32_t newD = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 8015794:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015798:	79db      	ldrb	r3, [r3, #7]
 801579a:	061a      	lsls	r2, r3, #24
 801579c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80157a0:	7a1b      	ldrb	r3, [r3, #8]
 80157a2:	041b      	lsls	r3, r3, #16
 80157a4:	431a      	orrs	r2, r3
 80157a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80157aa:	7a5b      	ldrb	r3, [r3, #9]
 80157ac:	021b      	lsls	r3, r3, #8
 80157ae:	4313      	orrs	r3, r2
 80157b0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80157b4:	7a92      	ldrb	r2, [r2, #10]
 80157b6:	4313      	orrs	r3, r2
 80157b8:	461a      	mov	r2, r3
 80157ba:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80157be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80157c2:	601a      	str	r2, [r3, #0]
 80157c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80157c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80157cc:	681a      	ldr	r2, [r3, #0]
				float fnewD;
				memcpy(&fnewD, &newD, sizeof(uint32_t));
 80157ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80157d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80157d6:	601a      	str	r2, [r3, #0]
				Packages[comm_ptr->packageNum]->setDGain(fnewD);
 80157d8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80157dc:	789b      	ldrb	r3, [r3, #2]
 80157de:	461a      	mov	r2, r3
 80157e0:	4ba3      	ldr	r3, [pc, #652]	; (8015a70 <getResponse+0x17ec>)
 80157e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80157e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80157ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80157ee:	edd3 7a00 	vldr	s15, [r3]
 80157f2:	eeb0 0a67 	vmov.f32	s0, s15
 80157f6:	4610      	mov	r0, r2
 80157f8:	f005 fa71 	bl	801acde <_ZN7Package8setDGainEf>
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 80157fc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015800:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	2200      	movs	r2, #0
 8015808:	2100      	movs	r1, #0
 801580a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 801580e:	f000 fa57 	bl	8015cc0 <buildCommandResponse>
 8015812:	4603      	mov	r3, r0
 8015814:	461c      	mov	r4, r3
 8015816:	e1bb      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_PACKAGE_VEL:
			{
				uint32_t newVelGain = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 8015818:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801581c:	79db      	ldrb	r3, [r3, #7]
 801581e:	061a      	lsls	r2, r3, #24
 8015820:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015824:	7a1b      	ldrb	r3, [r3, #8]
 8015826:	041b      	lsls	r3, r3, #16
 8015828:	431a      	orrs	r2, r3
 801582a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801582e:	7a5b      	ldrb	r3, [r3, #9]
 8015830:	021b      	lsls	r3, r3, #8
 8015832:	4313      	orrs	r3, r2
 8015834:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8015838:	7a92      	ldrb	r2, [r2, #10]
 801583a:	4313      	orrs	r3, r2
 801583c:	461a      	mov	r2, r3
 801583e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015842:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015846:	601a      	str	r2, [r3, #0]
 8015848:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801584c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015850:	681a      	ldr	r2, [r3, #0]
				float fnewVelGain;
				memcpy(&fnewVelGain, &newVelGain, sizeof(uint32_t));
 8015852:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015856:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801585a:	601a      	str	r2, [r3, #0]
				Packages[comm_ptr->packageNum]->setVelGain(fnewVelGain);
 801585c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015860:	789b      	ldrb	r3, [r3, #2]
 8015862:	461a      	mov	r2, r3
 8015864:	4b82      	ldr	r3, [pc, #520]	; (8015a70 <getResponse+0x17ec>)
 8015866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801586a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801586e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8015872:	edd3 7a00 	vldr	s15, [r3]
 8015876:	eeb0 0a67 	vmov.f32	s0, s15
 801587a:	4610      	mov	r0, r2
 801587c:	f005 fa44 	bl	801ad08 <_ZN7Package10setVelGainEf>
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015880:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015884:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	2200      	movs	r2, #0
 801588c:	2100      	movs	r1, #0
 801588e:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015892:	f000 fa15 	bl	8015cc0 <buildCommandResponse>
 8015896:	4603      	mov	r3, r0
 8015898:	461c      	mov	r4, r3
 801589a:	e179      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_PACKAGE_ACC:
			{
				uint32_t newAccGain = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 801589c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80158a0:	79db      	ldrb	r3, [r3, #7]
 80158a2:	061a      	lsls	r2, r3, #24
 80158a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80158a8:	7a1b      	ldrb	r3, [r3, #8]
 80158aa:	041b      	lsls	r3, r3, #16
 80158ac:	431a      	orrs	r2, r3
 80158ae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80158b2:	7a5b      	ldrb	r3, [r3, #9]
 80158b4:	021b      	lsls	r3, r3, #8
 80158b6:	4313      	orrs	r3, r2
 80158b8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80158bc:	7a92      	ldrb	r2, [r2, #10]
 80158be:	4313      	orrs	r3, r2
 80158c0:	461a      	mov	r2, r3
 80158c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80158c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80158ca:	601a      	str	r2, [r3, #0]
 80158cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80158d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80158d4:	681a      	ldr	r2, [r3, #0]
				float fnewAccGain;
				memcpy(&fnewAccGain, &newAccGain, sizeof(uint32_t));
 80158d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80158da:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80158de:	601a      	str	r2, [r3, #0]
				Packages[comm_ptr->packageNum]->setAccGain(fnewAccGain);
 80158e0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80158e4:	789b      	ldrb	r3, [r3, #2]
 80158e6:	461a      	mov	r2, r3
 80158e8:	4b61      	ldr	r3, [pc, #388]	; (8015a70 <getResponse+0x17ec>)
 80158ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80158ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80158f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80158f6:	edd3 7a00 	vldr	s15, [r3]
 80158fa:	eeb0 0a67 	vmov.f32	s0, s15
 80158fe:	4610      	mov	r0, r2
 8015900:	f005 fa11 	bl	801ad26 <_ZN7Package10setAccGainEf>
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015904:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015908:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	2200      	movs	r2, #0
 8015910:	2100      	movs	r1, #0
 8015912:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015916:	f000 f9d3 	bl	8015cc0 <buildCommandResponse>
 801591a:	4603      	mov	r3, r0
 801591c:	461c      	mov	r4, r3
 801591e:	e137      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_PACKAGE_JER:
			{
				uint32_t newJerkGain = (comm_ptr->params[0] << 24) | (comm_ptr->params[1] << 16) | (comm_ptr->params[2] << 8) | (comm_ptr->params[3]);
 8015920:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015924:	79db      	ldrb	r3, [r3, #7]
 8015926:	061a      	lsls	r2, r3, #24
 8015928:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801592c:	7a1b      	ldrb	r3, [r3, #8]
 801592e:	041b      	lsls	r3, r3, #16
 8015930:	431a      	orrs	r2, r3
 8015932:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015936:	7a5b      	ldrb	r3, [r3, #9]
 8015938:	021b      	lsls	r3, r3, #8
 801593a:	4313      	orrs	r3, r2
 801593c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8015940:	7a92      	ldrb	r2, [r2, #10]
 8015942:	4313      	orrs	r3, r2
 8015944:	461a      	mov	r2, r3
 8015946:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801594a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801594e:	601a      	str	r2, [r3, #0]
 8015950:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015954:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015958:	681a      	ldr	r2, [r3, #0]
				float fnewJerkGain;
				memcpy(&fnewJerkGain, &newJerkGain, sizeof(uint32_t));
 801595a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801595e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015962:	601a      	str	r2, [r3, #0]
				Packages[comm_ptr->packageNum]->setJerkGain(fnewJerkGain);
 8015964:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015968:	789b      	ldrb	r3, [r3, #2]
 801596a:	461a      	mov	r2, r3
 801596c:	4b40      	ldr	r3, [pc, #256]	; (8015a70 <getResponse+0x17ec>)
 801596e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015972:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015976:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801597a:	edd3 7a00 	vldr	s15, [r3]
 801597e:	eeb0 0a67 	vmov.f32	s0, s15
 8015982:	4610      	mov	r0, r2
 8015984:	f005 f9de 	bl	801ad44 <_ZN7Package11setJerkGainEf>
				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015988:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801598c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	2200      	movs	r2, #0
 8015994:	2100      	movs	r1, #0
 8015996:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 801599a:	f000 f991 	bl	8015cc0 <buildCommandResponse>
 801599e:	4603      	mov	r3, r0
 80159a0:	461c      	mov	r4, r3
 80159a2:	e0f5      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_GET_SENSOR:
			{
				float sensorValue = Packages[comm_ptr->packageNum]->getSensorValue();
 80159a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80159a8:	789b      	ldrb	r3, [r3, #2]
 80159aa:	461a      	mov	r2, r3
 80159ac:	4b30      	ldr	r3, [pc, #192]	; (8015a70 <getResponse+0x17ec>)
 80159ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f005 f8d6 	bl	801ab64 <_ZN7Package14getSensorValueEv>
 80159b8:	eef0 7a40 	vmov.f32	s15, s0
 80159bc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80159c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80159c4:	edc3 7a00 	vstr	s15, [r3]
 80159c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80159cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80159d0:	681a      	ldr	r2, [r3, #0]
				uint32_t intSensorVal;

				memcpy(&intSensorVal, &sensorValue, sizeof(uint32_t));
 80159d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80159d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80159da:	601a      	str	r2, [r3, #0]
				uint8_t sensorValueArr[4];

				sensorValueArr[0] = intSensorVal >> 24;
 80159dc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80159e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	0e1b      	lsrs	r3, r3, #24
 80159e8:	b2da      	uxtb	r2, r3
 80159ea:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80159ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80159f2:	701a      	strb	r2, [r3, #0]
				sensorValueArr[1] = intSensorVal >> 16;
 80159f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80159f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	0c1b      	lsrs	r3, r3, #16
 8015a00:	b2da      	uxtb	r2, r3
 8015a02:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015a0a:	705a      	strb	r2, [r3, #1]
				sensorValueArr[2] = intSensorVal >> 8;
 8015a0c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	0a1b      	lsrs	r3, r3, #8
 8015a18:	b2da      	uxtb	r2, r3
 8015a1a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015a22:	709a      	strb	r2, [r3, #2]
				sensorValueArr[3] = intSensorVal;
 8015a24:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	b2da      	uxtb	r2, r3
 8015a30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015a38:	70da      	strb	r2, [r3, #3]

				return buildCommandResponse(comm_ptr, sensorValueArr, 4, buf);
 8015a3a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a3e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015a42:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2204      	movs	r2, #4
 8015a4a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015a4e:	f000 f937 	bl	8015cc0 <buildCommandResponse>
 8015a52:	4603      	mov	r3, r0
 8015a54:	461c      	mov	r4, r3
 8015a56:	e09b      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_NEW_BITMAP:
			{
				// LOL fuck no
				return buildError(0, NOT_IMPLEMENTED, buf);
 8015a58:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015a5c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	2108      	movs	r1, #8
 8015a64:	2000      	movs	r0, #0
 8015a66:	f000 f8f0 	bl	8015c4a <buildError>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	461c      	mov	r4, r3
 8015a6e:	e08f      	b.n	8015b90 <getResponse+0x190c>
 8015a70:	24000f64 	.word	0x24000f64
			{
				if(comm_ptr->params[0] < 0){
					comm_ptr->params[0] = 0;
				}

				if(comm_ptr->params[0] > 160){
 8015a74:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a78:	79db      	ldrb	r3, [r3, #7]
 8015a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8015a7c:	d903      	bls.n	8015a86 <getResponse+0x1802>
					comm_ptr->params[0] = 160;
 8015a7e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a82:	22a0      	movs	r2, #160	; 0xa0
 8015a84:	71da      	strb	r2, [r3, #7]

				if(comm_ptr->params[1] < 0){
					comm_ptr->params[1] = 0;
				}

				if(comm_ptr->params[1] > 160){
 8015a86:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a8a:	7a1b      	ldrb	r3, [r3, #8]
 8015a8c:	2ba0      	cmp	r3, #160	; 0xa0
 8015a8e:	d903      	bls.n	8015a98 <getResponse+0x1814>
					comm_ptr->params[1] = 160;
 8015a90:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a94:	22a0      	movs	r2, #160	; 0xa0
 8015a96:	721a      	strb	r2, [r3, #8]

				if(comm_ptr->params[2] < 0){
					comm_ptr->params[2] = 0;
				}

				if(comm_ptr->params[2] > 160){
 8015a98:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a9c:	7a5b      	ldrb	r3, [r3, #9]
 8015a9e:	2ba0      	cmp	r3, #160	; 0xa0
 8015aa0:	d903      	bls.n	8015aaa <getResponse+0x1826>
					comm_ptr->params[2] = 160;
 8015aa2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015aa6:	22a0      	movs	r2, #160	; 0xa0
 8015aa8:	725a      	strb	r2, [r3, #9]

				if(comm_ptr->params[3] < 0){
					comm_ptr->params[3] = 0;
				}

				if(comm_ptr->params[3] > 160){
 8015aaa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015aae:	7a9b      	ldrb	r3, [r3, #10]
 8015ab0:	2ba0      	cmp	r3, #160	; 0xa0
 8015ab2:	d903      	bls.n	8015abc <getResponse+0x1838>
					comm_ptr->params[3] = 160;
 8015ab4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015ab8:	22a0      	movs	r2, #160	; 0xa0
 8015aba:	729a      	strb	r2, [r3, #10]
				}

				lcd1_x_t = comm_ptr->params[0];
 8015abc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015ac0:	79da      	ldrb	r2, [r3, #7]
 8015ac2:	4b36      	ldr	r3, [pc, #216]	; (8015b9c <getResponse+0x1918>)
 8015ac4:	701a      	strb	r2, [r3, #0]
				lcd1_y_t = comm_ptr->params[1];
 8015ac6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015aca:	7a1a      	ldrb	r2, [r3, #8]
 8015acc:	4b34      	ldr	r3, [pc, #208]	; (8015ba0 <getResponse+0x191c>)
 8015ace:	701a      	strb	r2, [r3, #0]
				lcd2_x_t = comm_ptr->params[2];
 8015ad0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015ad4:	7a5a      	ldrb	r2, [r3, #9]
 8015ad6:	4b33      	ldr	r3, [pc, #204]	; (8015ba4 <getResponse+0x1920>)
 8015ad8:	701a      	strb	r2, [r3, #0]
				lcd2_y_t = comm_ptr->params[3];
 8015ada:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015ade:	7a9a      	ldrb	r2, [r3, #10]
 8015ae0:	4b31      	ldr	r3, [pc, #196]	; (8015ba8 <getResponse+0x1924>)
 8015ae2:	701a      	strb	r2, [r3, #0]

				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015ae4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015ae8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2200      	movs	r2, #0
 8015af0:	2100      	movs	r1, #0
 8015af2:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015af6:	f000 f8e3 	bl	8015cc0 <buildCommandResponse>
 8015afa:	4603      	mov	r3, r0
 8015afc:	461c      	mov	r4, r3
 8015afe:	e047      	b.n	8015b90 <getResponse+0x190c>
				break;
			}
			case XAVIER_BLINK:
				blink = comm_ptr->params[0];
 8015b00:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015b04:	79da      	ldrb	r2, [r3, #7]
 8015b06:	4b29      	ldr	r3, [pc, #164]	; (8015bac <getResponse+0x1928>)
 8015b08:	701a      	strb	r2, [r3, #0]

				return buildCommandResponse(comm_ptr, {}, 0, buf);
 8015b0a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015b0e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	2200      	movs	r2, #0
 8015b16:	2100      	movs	r1, #0
 8015b18:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015b1c:	f000 f8d0 	bl	8015cc0 <buildCommandResponse>
 8015b20:	4603      	mov	r3, r0
 8015b22:	461c      	mov	r4, r3
 8015b24:	e034      	b.n	8015b90 <getResponse+0x190c>
				break;
			default:
			{
				return buildError(comm_ptr, UNKNOWN_COMMAND, buf);
 8015b26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015b2a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015b2e:	681a      	ldr	r2, [r3, #0]
 8015b30:	2105      	movs	r1, #5
 8015b32:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8015b36:	f000 f888 	bl	8015c4a <buildError>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	461c      	mov	r4, r3
 8015b3e:	e027      	b.n	8015b90 <getResponse+0x190c>
			}
			}
		}else{
			return buildError(0, INVALID_ORDER, buf);
 8015b40:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015b44:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	2107      	movs	r1, #7
 8015b4c:	2000      	movs	r0, #0
 8015b4e:	f000 f87c 	bl	8015c4a <buildError>
 8015b52:	4603      	mov	r3, r0
 8015b54:	461c      	mov	r4, r3
 8015b56:	e01b      	b.n	8015b90 <getResponse+0x190c>
		}
	}
	case XAVIER_RESPOND:
		return buildError(0, NOT_IMPLEMENTED, buf);
 8015b58:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015b5c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015b60:	681a      	ldr	r2, [r3, #0]
 8015b62:	2108      	movs	r1, #8
 8015b64:	2000      	movs	r0, #0
 8015b66:	f000 f870 	bl	8015c4a <buildError>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	461c      	mov	r4, r3
 8015b6e:	e00f      	b.n	8015b90 <getResponse+0x190c>
		break;
	case XAVIER_RESET:
		__NVIC_SystemReset();
 8015b70:	f7fe fb10 	bl	8014194 <__NVIC_SystemReset>
		return buildError(0, NOT_IMPLEMENTED, buf);
		break;
	default:
		return buildError(0, UNKNOWN_OPCODE, buf);
 8015b74:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015b78:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	2101      	movs	r1, #1
 8015b80:	2000      	movs	r0, #0
 8015b82:	f000 f862 	bl	8015c4a <buildError>
 8015b86:	4603      	mov	r3, r0
 8015b88:	461c      	mov	r4, r3
 8015b8a:	e001      	b.n	8015b90 <getResponse+0x190c>
		break;
 8015b8c:	bf00      	nop
		break;
	}
	return 0;
 8015b8e:	2400      	movs	r4, #0
}
 8015b90:	4623      	mov	r3, r4
 8015b92:	4618      	mov	r0, r3
 8015b94:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd90      	pop	{r4, r7, pc}
 8015b9c:	24000023 	.word	0x24000023
 8015ba0:	24000024 	.word	0x24000024
 8015ba4:	24000025 	.word	0x24000025
 8015ba8:	24000026 	.word	0x24000026
 8015bac:	2400143c 	.word	0x2400143c

08015bb0 <getOpCode>:

uint8_t getOpCode(uint8_t *buf){
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
	return *buf;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	781b      	ldrb	r3, [r3, #0]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	370c      	adds	r7, #12
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <buildACK>:

uint8_t buildACK(uint8_t currSeq, uint8_t nextSeq, uint8_t *retPack){
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	4603      	mov	r3, r0
 8015bd0:	603a      	str	r2, [r7, #0]
 8015bd2:	71fb      	strb	r3, [r7, #7]
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	71bb      	strb	r3, [r7, #6]
	retPack[0] = XAVIER_ACK;
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	2202      	movs	r2, #2
 8015bdc:	701a      	strb	r2, [r3, #0]
	retPack[1] = currSeq;
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	3301      	adds	r3, #1
 8015be2:	79fa      	ldrb	r2, [r7, #7]
 8015be4:	701a      	strb	r2, [r3, #0]
	retPack[2] = nextSeq;
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	3302      	adds	r3, #2
 8015bea:	79ba      	ldrb	r2, [r7, #6]
 8015bec:	701a      	strb	r2, [r3, #0]

	return 3;
 8015bee:	2303      	movs	r3, #3
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	370c      	adds	r7, #12
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr

08015bfc <buildModAck>:

uint8_t buildModAck(struct MODULECONFIG_t *config, uint8_t retPack[]){
 8015bfc:	b480      	push	{r7}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	6039      	str	r1, [r7, #0]
	retPack[0] = XAVIER_ACK;
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	2202      	movs	r2, #2
 8015c0a:	701a      	strb	r2, [r3, #0]
	retPack[1] = config->modType;
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	3301      	adds	r3, #1
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	7812      	ldrb	r2, [r2, #0]
 8015c14:	701a      	strb	r2, [r3, #0]
	retPack[2] = config->nucleoAddress >> 8;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	885b      	ldrh	r3, [r3, #2]
 8015c1a:	0a1b      	lsrs	r3, r3, #8
 8015c1c:	b29a      	uxth	r2, r3
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	3302      	adds	r3, #2
 8015c22:	b2d2      	uxtb	r2, r2
 8015c24:	701a      	strb	r2, [r3, #0]
	retPack[3] = config->nucleoAddress;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	885a      	ldrh	r2, [r3, #2]
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	3303      	adds	r3, #3
 8015c2e:	b2d2      	uxtb	r2, r2
 8015c30:	701a      	strb	r2, [r3, #0]
	retPack[4] = config->nucleoPackage;
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	3304      	adds	r3, #4
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	7912      	ldrb	r2, [r2, #4]
 8015c3a:	701a      	strb	r2, [r3, #0]

	return 5;
 8015c3c:	2305      	movs	r3, #5
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	370c      	adds	r7, #12
 8015c42:	46bd      	mov	sp, r7
 8015c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c48:	4770      	bx	lr

08015c4a <buildError>:

uint8_t buildError(struct MODULECOMMAND_t *com, uint8_t errorCode, uint8_t retPack[]){
 8015c4a:	b480      	push	{r7}
 8015c4c:	b085      	sub	sp, #20
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	60f8      	str	r0, [r7, #12]
 8015c52:	460b      	mov	r3, r1
 8015c54:	607a      	str	r2, [r7, #4]
 8015c56:	72fb      	strb	r3, [r7, #11]
	retPack[0] = XAVIER_ERROR;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	22ff      	movs	r2, #255	; 0xff
 8015c5c:	701a      	strb	r2, [r3, #0]
	retPack[1] = errorCode;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	3301      	adds	r3, #1
 8015c62:	7afa      	ldrb	r2, [r7, #11]
 8015c64:	701a      	strb	r2, [r3, #0]

	if(com != 0){
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d022      	beq.n	8015cb2 <buildError+0x68>
		retPack[2] = com->command >> 8;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	889b      	ldrh	r3, [r3, #4]
 8015c70:	0a1b      	lsrs	r3, r3, #8
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	3302      	adds	r3, #2
 8015c78:	b2d2      	uxtb	r2, r2
 8015c7a:	701a      	strb	r2, [r3, #0]
		retPack[3] = com->command;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	889a      	ldrh	r2, [r3, #4]
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	3303      	adds	r3, #3
 8015c84:	b2d2      	uxtb	r2, r2
 8015c86:	701a      	strb	r2, [r3, #0]
		retPack[4] = com->address >> 8;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	881b      	ldrh	r3, [r3, #0]
 8015c8c:	0a1b      	lsrs	r3, r3, #8
 8015c8e:	b29a      	uxth	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	3304      	adds	r3, #4
 8015c94:	b2d2      	uxtb	r2, r2
 8015c96:	701a      	strb	r2, [r3, #0]
		retPack[5] = com->address;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	881a      	ldrh	r2, [r3, #0]
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	3305      	adds	r3, #5
 8015ca0:	b2d2      	uxtb	r2, r2
 8015ca2:	701a      	strb	r2, [r3, #0]
		retPack[6] = com->packageNum;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	3306      	adds	r3, #6
 8015ca8:	68fa      	ldr	r2, [r7, #12]
 8015caa:	7892      	ldrb	r2, [r2, #2]
 8015cac:	701a      	strb	r2, [r3, #0]

		return 7;
 8015cae:	2307      	movs	r3, #7
 8015cb0:	e000      	b.n	8015cb4 <buildError+0x6a>
	}else{
		return 2;
 8015cb2:	2302      	movs	r3, #2
	}
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3714      	adds	r7, #20
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbe:	4770      	bx	lr

08015cc0 <buildCommandResponse>:

uint8_t buildCommandResponse(struct MODULECOMMAND_t *com, uint8_t responseData[], uint8_t len, uint8_t retPack[]){
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	60f8      	str	r0, [r7, #12]
 8015cc8:	60b9      	str	r1, [r7, #8]
 8015cca:	603b      	str	r3, [r7, #0]
 8015ccc:	4613      	mov	r3, r2
 8015cce:	71fb      	strb	r3, [r7, #7]
	retPack[0] = XAVIER_RESPOND;
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	220a      	movs	r2, #10
 8015cd4:	701a      	strb	r2, [r3, #0]
	retPack[1] = com->address >> 8;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	0a1b      	lsrs	r3, r3, #8
 8015cdc:	b29a      	uxth	r2, r3
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	b2d2      	uxtb	r2, r2
 8015ce4:	701a      	strb	r2, [r3, #0]
	retPack[2] = com->address;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	881a      	ldrh	r2, [r3, #0]
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	3302      	adds	r3, #2
 8015cee:	b2d2      	uxtb	r2, r2
 8015cf0:	701a      	strb	r2, [r3, #0]
	retPack[3] = com->packageNum;
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	3303      	adds	r3, #3
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	7892      	ldrb	r2, [r2, #2]
 8015cfa:	701a      	strb	r2, [r3, #0]
	retPack[4] = com->command >> 8;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	889b      	ldrh	r3, [r3, #4]
 8015d00:	0a1b      	lsrs	r3, r3, #8
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	3304      	adds	r3, #4
 8015d08:	b2d2      	uxtb	r2, r2
 8015d0a:	701a      	strb	r2, [r3, #0]
	retPack[5] = com->command;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	889a      	ldrh	r2, [r3, #4]
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	3305      	adds	r3, #5
 8015d14:	b2d2      	uxtb	r2, r2
 8015d16:	701a      	strb	r2, [r3, #0]
	retPack[6] = len;
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	3306      	adds	r3, #6
 8015d1c:	79fa      	ldrb	r2, [r7, #7]
 8015d1e:	701a      	strb	r2, [r3, #0]
	memcpy(&retPack[7], responseData, len);
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	3307      	adds	r3, #7
 8015d24:	79fa      	ldrb	r2, [r7, #7]
 8015d26:	68b9      	ldr	r1, [r7, #8]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f005 fb7f 	bl	801b42c <memcpy>

	return 7 + len;
 8015d2e:	79fb      	ldrb	r3, [r7, #7]
 8015d30:	3307      	adds	r3, #7
 8015d32:	b2db      	uxtb	r3, r3
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <buildAVAIL>:

uint8_t buildAVAIL(uint8_t *retPack){
 8015d3c:	b4b0      	push	{r4, r5, r7}
 8015d3e:	b083      	sub	sp, #12
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
	memcpy(retPack, modsAvail, sizeof(modsAvail));
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	4a09      	ldr	r2, [pc, #36]	; (8015d6c <buildAVAIL+0x30>)
 8015d48:	461d      	mov	r5, r3
 8015d4a:	4614      	mov	r4, r2
 8015d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d4e:	6028      	str	r0, [r5, #0]
 8015d50:	6069      	str	r1, [r5, #4]
 8015d52:	60aa      	str	r2, [r5, #8]
 8015d54:	60eb      	str	r3, [r5, #12]
 8015d56:	6820      	ldr	r0, [r4, #0]
 8015d58:	6128      	str	r0, [r5, #16]
 8015d5a:	88a3      	ldrh	r3, [r4, #4]
 8015d5c:	82ab      	strh	r3, [r5, #20]
	return sizeof(modsAvail);
 8015d5e:	2316      	movs	r3, #22
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	370c      	adds	r7, #12
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bcb0      	pop	{r4, r5, r7}
 8015d68:	4770      	bx	lr
 8015d6a:	bf00      	nop
 8015d6c:	24000088 	.word	0x24000088

08015d70 <buildInfo>:

uint8_t buildInfo(uint8_t *retPack){
 8015d70:	b490      	push	{r4, r7}
 8015d72:	b086      	sub	sp, #24
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
	char info[12] = {'N', 'U', 'C', 'L', 'E', 'O', '_', 'H', '7', ' ', 'V', '0'};
 8015d78:	4a09      	ldr	r2, [pc, #36]	; (8015da0 <buildInfo+0x30>)
 8015d7a:	f107 030c 	add.w	r3, r7, #12
 8015d7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(retPack, info, 12);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	461c      	mov	r4, r3
 8015d88:	f107 030c 	add.w	r3, r7, #12
 8015d8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d8e:	6020      	str	r0, [r4, #0]
 8015d90:	6061      	str	r1, [r4, #4]
 8015d92:	60a2      	str	r2, [r4, #8]
	return 12;
 8015d94:	230c      	movs	r3, #12
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3718      	adds	r7, #24
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bc90      	pop	{r4, r7}
 8015d9e:	4770      	bx	lr
 8015da0:	0801ddb0 	.word	0x0801ddb0

08015da4 <parseMODCONF>:

uint8_t* parseFIN(uint8_t *buf, uint8_t len){
	return 0;
}

void parseMODCONF(uint8_t *buf, uint8_t len, struct MODULECONFIG_t *mod){
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b084      	sub	sp, #16
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	460b      	mov	r3, r1
 8015dae:	607a      	str	r2, [r7, #4]
 8015db0:	72fb      	strb	r3, [r7, #11]
	mod->modType = buf[1];
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	785a      	ldrb	r2, [r3, #1]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	701a      	strb	r2, [r3, #0]
	mod->nucleoAddress = (buf[2] << 8) | buf[3];
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	3302      	adds	r3, #2
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	021b      	lsls	r3, r3, #8
 8015dc2:	b21a      	sxth	r2, r3
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	3303      	adds	r3, #3
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	b21b      	sxth	r3, r3
 8015dcc:	4313      	orrs	r3, r2
 8015dce:	b21b      	sxth	r3, r3
 8015dd0:	b29a      	uxth	r2, r3
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	805a      	strh	r2, [r3, #2]
	mod->nucleoPackage = buf[4];
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	791a      	ldrb	r2, [r3, #4]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	711a      	strb	r2, [r3, #4]
	memcpy(mod->param, &buf[6], buf[5]);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	1d58      	adds	r0, r3, #5
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	1d99      	adds	r1, r3, #6
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	3305      	adds	r3, #5
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	461a      	mov	r2, r3
 8015dee:	f005 fb1d 	bl	801b42c <memcpy>
}
 8015df2:	bf00      	nop
 8015df4:	3710      	adds	r7, #16
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}

08015dfa <parseCOMMAND>:

void parseCOMMAND(uint8_t *buf, uint8_t len, struct MODULECOMMAND_t *com){
 8015dfa:	b580      	push	{r7, lr}
 8015dfc:	b084      	sub	sp, #16
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	60f8      	str	r0, [r7, #12]
 8015e02:	460b      	mov	r3, r1
 8015e04:	607a      	str	r2, [r7, #4]
 8015e06:	72fb      	strb	r3, [r7, #11]
	com->address = (buf[1] << 8) | buf[2];
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	021b      	lsls	r3, r3, #8
 8015e10:	b21a      	sxth	r2, r3
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	3302      	adds	r3, #2
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	b21b      	sxth	r3, r3
 8015e1a:	4313      	orrs	r3, r2
 8015e1c:	b21b      	sxth	r3, r3
 8015e1e:	b29a      	uxth	r2, r3
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	801a      	strh	r2, [r3, #0]
	com->packageNum = buf[3];
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	78da      	ldrb	r2, [r3, #3]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	709a      	strb	r2, [r3, #2]
	com->command = (buf[4] << 8) | buf[5];
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	3304      	adds	r3, #4
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	021b      	lsls	r3, r3, #8
 8015e34:	b21a      	sxth	r2, r3
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	3305      	adds	r3, #5
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	b21b      	sxth	r3, r3
 8015e3e:	4313      	orrs	r3, r2
 8015e40:	b21b      	sxth	r3, r3
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	809a      	strh	r2, [r3, #4]
	com->paramLen = buf[6];
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	799a      	ldrb	r2, [r3, #6]
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	719a      	strb	r2, [r3, #6]
	memcpy(com->params, &buf[7], com->paramLen);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	1dd8      	adds	r0, r3, #7
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	1dd9      	adds	r1, r3, #7
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	799b      	ldrb	r3, [r3, #6]
 8015e5c:	461a      	mov	r2, r3
 8015e5e:	f005 fae5 	bl	801b42c <memcpy>
}
 8015e62:	bf00      	nop
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
	...

08015e6c <getMotorLayout>:
	}

	return 0;
}

void getMotorLayout(uint8_t motorNum, uint8_t layout[]){
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	4603      	mov	r3, r0
 8015e74:	6039      	str	r1, [r7, #0]
 8015e76:	71fb      	strb	r3, [r7, #7]
	switch(motorNum){
 8015e78:	79fb      	ldrb	r3, [r7, #7]
 8015e7a:	2b07      	cmp	r3, #7
 8015e7c:	f200 8094 	bhi.w	8015fa8 <getMotorLayout+0x13c>
 8015e80:	a201      	add	r2, pc, #4	; (adr r2, 8015e88 <getMotorLayout+0x1c>)
 8015e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e86:	bf00      	nop
 8015e88:	08015ea9 	.word	0x08015ea9
 8015e8c:	08015ec9 	.word	0x08015ec9
 8015e90:	08015ee9 	.word	0x08015ee9
 8015e94:	08015f09 	.word	0x08015f09
 8015e98:	08015f29 	.word	0x08015f29
 8015e9c:	08015f49 	.word	0x08015f49
 8015ea0:	08015f69 	.word	0x08015f69
 8015ea4:	08015f89 	.word	0x08015f89
	case 0:
		layout[0] = 8;
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	2208      	movs	r2, #8
 8015eac:	701a      	strb	r2, [r3, #0]
		layout[1] = 2;
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	2202      	movs	r2, #2
 8015eb4:	701a      	strb	r2, [r3, #0]
		layout[2] = 1;
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	3302      	adds	r3, #2
 8015eba:	2201      	movs	r2, #1
 8015ebc:	701a      	strb	r2, [r3, #0]
		layout[3] = 0;
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	3303      	adds	r3, #3
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	701a      	strb	r2, [r3, #0]
		break;
 8015ec6:	e06f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 1:
		layout[0] = 10;
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	220a      	movs	r2, #10
 8015ecc:	701a      	strb	r2, [r3, #0]
		layout[1] = 5;
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	2205      	movs	r2, #5
 8015ed4:	701a      	strb	r2, [r3, #0]
		layout[2] = 4;
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	3302      	adds	r3, #2
 8015eda:	2204      	movs	r2, #4
 8015edc:	701a      	strb	r2, [r3, #0]
		layout[3] = 3;
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	3303      	adds	r3, #3
 8015ee2:	2203      	movs	r2, #3
 8015ee4:	701a      	strb	r2, [r3, #0]
		break;
 8015ee6:	e05f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 2:
		layout[0] = 12;
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	220c      	movs	r2, #12
 8015eec:	701a      	strb	r2, [r3, #0]
		layout[1] = 10;
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	220a      	movs	r2, #10
 8015ef4:	701a      	strb	r2, [r3, #0]
		layout[2] = 7;
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	3302      	adds	r3, #2
 8015efa:	2207      	movs	r2, #7
 8015efc:	701a      	strb	r2, [r3, #0]
		layout[3] = 6;
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	3303      	adds	r3, #3
 8015f02:	2206      	movs	r2, #6
 8015f04:	701a      	strb	r2, [r3, #0]
		break;
 8015f06:	e04f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 3:
		layout[0] = 14;
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	220e      	movs	r2, #14
 8015f0c:	701a      	strb	r2, [r3, #0]
		layout[1] = 13;
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	3301      	adds	r3, #1
 8015f12:	220d      	movs	r2, #13
 8015f14:	701a      	strb	r2, [r3, #0]
		layout[2] = 12;
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	3302      	adds	r3, #2
 8015f1a:	220c      	movs	r2, #12
 8015f1c:	701a      	strb	r2, [r3, #0]
		layout[3] = 11;
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	3303      	adds	r3, #3
 8015f22:	220b      	movs	r2, #11
 8015f24:	701a      	strb	r2, [r3, #0]
		break;
 8015f26:	e03f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 4:
		layout[0] = 9;
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	2209      	movs	r2, #9
 8015f2c:	701a      	strb	r2, [r3, #0]
		layout[1] = 0;
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	3301      	adds	r3, #1
 8015f32:	2200      	movs	r2, #0
 8015f34:	701a      	strb	r2, [r3, #0]
		layout[2] = 1;
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	3302      	adds	r3, #2
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	701a      	strb	r2, [r3, #0]
		layout[3] = 2;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	3303      	adds	r3, #3
 8015f42:	2202      	movs	r2, #2
 8015f44:	701a      	strb	r2, [r3, #0]
		break;
 8015f46:	e02f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 5:
		layout[0] = 11;
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	220b      	movs	r2, #11
 8015f4c:	701a      	strb	r2, [r3, #0]
		layout[1] = 3;
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	3301      	adds	r3, #1
 8015f52:	2203      	movs	r2, #3
 8015f54:	701a      	strb	r2, [r3, #0]
		layout[2] = 4;
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	3302      	adds	r3, #2
 8015f5a:	2204      	movs	r2, #4
 8015f5c:	701a      	strb	r2, [r3, #0]
		layout[3] = 5;
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	3303      	adds	r3, #3
 8015f62:	2205      	movs	r2, #5
 8015f64:	701a      	strb	r2, [r3, #0]
		break;
 8015f66:	e01f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 6:
		layout[0] = 13;
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	220d      	movs	r2, #13
 8015f6c:	701a      	strb	r2, [r3, #0]
		layout[1] = 6;
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	3301      	adds	r3, #1
 8015f72:	2206      	movs	r2, #6
 8015f74:	701a      	strb	r2, [r3, #0]
		layout[2] = 7;
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	3302      	adds	r3, #2
 8015f7a:	2207      	movs	r2, #7
 8015f7c:	701a      	strb	r2, [r3, #0]
		layout[3] = 10;
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	3303      	adds	r3, #3
 8015f82:	220a      	movs	r2, #10
 8015f84:	701a      	strb	r2, [r3, #0]
		break;
 8015f86:	e00f      	b.n	8015fa8 <getMotorLayout+0x13c>
	case 7:
		layout[0] = 15;
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	220f      	movs	r2, #15
 8015f8c:	701a      	strb	r2, [r3, #0]
		layout[1] = 11;
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	3301      	adds	r3, #1
 8015f92:	220b      	movs	r2, #11
 8015f94:	701a      	strb	r2, [r3, #0]
		layout[2] = 12;
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	3302      	adds	r3, #2
 8015f9a:	220c      	movs	r2, #12
 8015f9c:	701a      	strb	r2, [r3, #0]
		layout[3] = 13;
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	3303      	adds	r3, #3
 8015fa2:	220d      	movs	r2, #13
 8015fa4:	701a      	strb	r2, [r3, #0]
		break;
 8015fa6:	bf00      	nop
	}
}
 8015fa8:	bf00      	nop
 8015faa:	370c      	adds	r7, #12
 8015fac:	46bd      	mov	sp, r7
 8015fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb2:	4770      	bx	lr

08015fb4 <loopback_udps>:
   }
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t *buf, uint16_t port) {
 8015fb4:	b590      	push	{r4, r7, lr}
 8015fb6:	b08b      	sub	sp, #44	; 0x2c
 8015fb8:	af02      	add	r7, sp, #8
 8015fba:	4603      	mov	r3, r0
 8015fbc:	6039      	str	r1, [r7, #0]
 8015fbe:	71fb      	strb	r3, [r7, #7]
 8015fc0:	4613      	mov	r3, r2
 8015fc2:	80bb      	strh	r3, [r7, #4]
	int32_t ret;
	uint16_t size, sentsize;
	uint8_t destip[4];
	uint16_t destport;

	switch (getSn_SR(sn)) {
 8015fc4:	79fb      	ldrb	r3, [r7, #7]
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	3301      	adds	r3, #1
 8015fca:	00db      	lsls	r3, r3, #3
 8015fcc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7fc fdb3 	bl	8012b3c <WIZCHIP_READ>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d06d      	beq.n	80160b8 <loopback_udps+0x104>
 8015fdc:	2b22      	cmp	r3, #34	; 0x22
 8015fde:	d179      	bne.n	80160d4 <loopback_udps+0x120>
	case SOCK_UDP:
		//gets the buffer size, max packet size is defined as 1024 bytes
		if ((size = getSn_RX_RSR(sn)) > 0) {
 8015fe0:	79fb      	ldrb	r3, [r7, #7]
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7fc ff52 	bl	8012e8c <getSn_RX_RSR>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	83fb      	strh	r3, [r7, #30]
 8015fec:	8bfb      	ldrh	r3, [r7, #30]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d072      	beq.n	80160d8 <loopback_udps+0x124>
			if (size > DATA_BUF_SIZE){
 8015ff2:	8bfb      	ldrh	r3, [r7, #30]
 8015ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015ff8:	d91b      	bls.n	8016032 <loopback_udps+0x7e>
				//clear the buffer and ignore
				ret = recvfrom(sn, buf, DATA_BUF_SIZE, destip, (uint16_t*) &destport);
 8015ffa:	f107 0210 	add.w	r2, r7, #16
 8015ffe:	79f8      	ldrb	r0, [r7, #7]
 8016000:	f107 030e 	add.w	r3, r7, #14
 8016004:	9300      	str	r3, [sp, #0]
 8016006:	4613      	mov	r3, r2
 8016008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801600c:	6839      	ldr	r1, [r7, #0]
 801600e:	f7fd fb43 	bl	8013698 <recvfrom>
 8016012:	61b8      	str	r0, [r7, #24]
				ret = recvfrom(sn, buf, DATA_BUF_SIZE, destip, (uint16_t*) &destport);
 8016014:	f107 0210 	add.w	r2, r7, #16
 8016018:	79f8      	ldrb	r0, [r7, #7]
 801601a:	f107 030e 	add.w	r3, r7, #14
 801601e:	9300      	str	r3, [sp, #0]
 8016020:	4613      	mov	r3, r2
 8016022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016026:	6839      	ldr	r1, [r7, #0]
 8016028:	f7fd fb36 	bl	8013698 <recvfrom>
 801602c:	61b8      	str	r0, [r7, #24]
				size = 0;
 801602e:	2300      	movs	r3, #0
 8016030:	83fb      	strh	r3, [r7, #30]
			}

			ret = recvfrom(sn, buf, size, destip, (uint16_t*) &destport);
 8016032:	f107 0110 	add.w	r1, r7, #16
 8016036:	8bfa      	ldrh	r2, [r7, #30]
 8016038:	79f8      	ldrb	r0, [r7, #7]
 801603a:	f107 030e 	add.w	r3, r7, #14
 801603e:	9300      	str	r3, [sp, #0]
 8016040:	460b      	mov	r3, r1
 8016042:	6839      	ldr	r1, [r7, #0]
 8016044:	f7fd fb28 	bl	8013698 <recvfrom>
 8016048:	61b8      	str	r0, [r7, #24]

			if (ret <= 0)
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	2b00      	cmp	r3, #0
 801604e:	dc01      	bgt.n	8016054 <loopback_udps+0xa0>
				return ret; // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8016050:	69bb      	ldr	r3, [r7, #24]
 8016052:	e045      	b.n	80160e0 <loopback_udps+0x12c>

			size = (uint16_t) ret;
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	83fb      	strh	r3, [r7, #30]
			sentsize = 0;
 8016058:	2300      	movs	r3, #0
 801605a:	83bb      	strh	r3, [r7, #28]

			uint8_t buffLen = getResponse(buf, size);
 801605c:	8bfb      	ldrh	r3, [r7, #30]
 801605e:	b2db      	uxtb	r3, r3
 8016060:	4619      	mov	r1, r3
 8016062:	6838      	ldr	r0, [r7, #0]
 8016064:	f7fe f90e 	bl	8014284 <getResponse>
 8016068:	4603      	mov	r3, r0
 801606a:	75fb      	strb	r3, [r7, #23]

			while (buffLen != sentsize) {
 801606c:	e01e      	b.n	80160ac <loopback_udps+0xf8>
				ret = sendto(sn, buf + sentsize, buffLen - sentsize, destip, destport);
 801606e:	8bbb      	ldrh	r3, [r7, #28]
 8016070:	683a      	ldr	r2, [r7, #0]
 8016072:	18d1      	adds	r1, r2, r3
 8016074:	7dfb      	ldrb	r3, [r7, #23]
 8016076:	b29a      	uxth	r2, r3
 8016078:	8bbb      	ldrh	r3, [r7, #28]
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	b29a      	uxth	r2, r3
 801607e:	89fb      	ldrh	r3, [r7, #14]
 8016080:	f107 0410 	add.w	r4, r7, #16
 8016084:	79f8      	ldrb	r0, [r7, #7]
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	4623      	mov	r3, r4
 801608a:	f7fd f9cf 	bl	801342c <sendto>
 801608e:	61b8      	str	r0, [r7, #24]
				if (ret < 0) {
 8016090:	69bb      	ldr	r3, [r7, #24]
 8016092:	2b00      	cmp	r3, #0
 8016094:	da05      	bge.n	80160a2 <loopback_udps+0xee>
					close(sn);
 8016096:	79fb      	ldrb	r3, [r7, #7]
 8016098:	4618      	mov	r0, r3
 801609a:	f7fd f959 	bl	8013350 <close>
					return ret;
 801609e:	69bb      	ldr	r3, [r7, #24]
 80160a0:	e01e      	b.n	80160e0 <loopback_udps+0x12c>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	b29a      	uxth	r2, r3
 80160a6:	8bbb      	ldrh	r3, [r7, #28]
 80160a8:	4413      	add	r3, r2
 80160aa:	83bb      	strh	r3, [r7, #28]
			while (buffLen != sentsize) {
 80160ac:	7dfb      	ldrb	r3, [r7, #23]
 80160ae:	b29b      	uxth	r3, r3
 80160b0:	8bba      	ldrh	r2, [r7, #28]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d1db      	bne.n	801606e <loopback_udps+0xba>
			}
		}
		break;
 80160b6:	e00f      	b.n	80160d8 <loopback_udps+0x124>
	case SOCK_CLOSED:
		if ((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 80160b8:	88ba      	ldrh	r2, [r7, #4]
 80160ba:	79f8      	ldrb	r0, [r7, #7]
 80160bc:	2300      	movs	r3, #0
 80160be:	2102      	movs	r1, #2
 80160c0:	f7fd f830 	bl	8013124 <socket>
 80160c4:	4603      	mov	r3, r0
 80160c6:	61bb      	str	r3, [r7, #24]
 80160c8:	79fb      	ldrb	r3, [r7, #7]
 80160ca:	69ba      	ldr	r2, [r7, #24]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d005      	beq.n	80160dc <loopback_udps+0x128>
			return ret;
 80160d0:	69bb      	ldr	r3, [r7, #24]
 80160d2:	e005      	b.n	80160e0 <loopback_udps+0x12c>
		break;
	default:
		break;
 80160d4:	bf00      	nop
 80160d6:	e002      	b.n	80160de <loopback_udps+0x12a>
		break;
 80160d8:	bf00      	nop
 80160da:	e000      	b.n	80160de <loopback_udps+0x12a>
		break;
 80160dc:	bf00      	nop
	}
	return 1;
 80160de:	2301      	movs	r3, #1
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	3724      	adds	r7, #36	; 0x24
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd90      	pop	{r4, r7, pc}

080160e8 <_ZN8GPIOBankC1Eh>:

#include "GPIOBank.h"
#include "cmsis_os.h"
#include <string.h>

GPIOBank::GPIOBank(uint8_t numDr):numDrivers(numDr) {}
 80160e8:	b480      	push	{r7}
 80160ea:	b083      	sub	sp, #12
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	460b      	mov	r3, r1
 80160f2:	70fb      	strb	r3, [r7, #3]
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	78fa      	ldrb	r2, [r7, #3]
 80160f8:	741a      	strb	r2, [r3, #16]
 80160fa:	6879      	ldr	r1, [r7, #4]
 80160fc:	f04f 0200 	mov.w	r2, #0
 8016100:	f04f 0300 	mov.w	r3, #0
 8016104:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	4618      	mov	r0, r3
 801610c:	370c      	adds	r7, #12
 801610e:	46bd      	mov	sp, r7
 8016110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016114:	4770      	bx	lr

08016116 <_ZN8GPIOBank9addDriverEhP19__I2C_HandleTypeDef>:

void GPIOBank::addDriver(uint8_t addr, I2C_HandleTypeDef *i2c) {
 8016116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801611a:	b08b      	sub	sp, #44	; 0x2c
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	460b      	mov	r3, r1
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	72fb      	strb	r3, [r7, #11]
	uint64_t newMask = 0xffff;
 8016126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801612a:	f04f 0300 	mov.w	r3, #0
 801612e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	newMask = newMask << (numDrivers * 16);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	7c1b      	ldrb	r3, [r3, #16]
 8016136:	0119      	lsls	r1, r3, #4
 8016138:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801613c:	f1a1 0620 	sub.w	r6, r1, #32
 8016140:	f1c1 0020 	rsb	r0, r1, #32
 8016144:	fa03 f501 	lsl.w	r5, r3, r1
 8016148:	fa02 f606 	lsl.w	r6, r2, r6
 801614c:	4335      	orrs	r5, r6
 801614e:	fa22 f000 	lsr.w	r0, r2, r0
 8016152:	4305      	orrs	r5, r0
 8016154:	fa02 f401 	lsl.w	r4, r2, r1
 8016158:	e9c7 4508 	strd	r4, r5, [r7, #32]
	_availChannelMask |= newMask;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8016162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016166:	ea40 0802 	orr.w	r8, r0, r2
 801616a:	ea41 0903 	orr.w	r9, r1, r3
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	e9c3 8906 	strd	r8, r9, [r3, #24]

	TCA9555_GPIO_Driver *driver_ptr = (TCA9555_GPIO_Driver *)pvPortMalloc(sizeof(TCA9555_GPIO_Driver));
 8016174:	2008      	movs	r0, #8
 8016176:	f004 f9d7 	bl	801a528 <pvPortMalloc>
 801617a:	61f8      	str	r0, [r7, #28]
	TCA9555_GPIO_Driver driver(addr, i2c);
 801617c:	7af9      	ldrb	r1, [r7, #11]
 801617e:	f107 0314 	add.w	r3, r7, #20
 8016182:	687a      	ldr	r2, [r7, #4]
 8016184:	4618      	mov	r0, r3
 8016186:	f000 fba8 	bl	80168da <_ZN19TCA9555_GPIO_DriverC1EhP19__I2C_HandleTypeDef>
	memcpy(driver_ptr, &driver, sizeof(TCA9555_GPIO_Driver));
 801618a:	f107 0314 	add.w	r3, r7, #20
 801618e:	2208      	movs	r2, #8
 8016190:	4619      	mov	r1, r3
 8016192:	69f8      	ldr	r0, [r7, #28]
 8016194:	f005 f94a 	bl	801b42c <memcpy>

	driver_ptr->begin();
 8016198:	69f8      	ldr	r0, [r7, #28]
 801619a:	f000 fbb2 	bl	8016902 <_ZN19TCA9555_GPIO_Driver5beginEv>

	_GPIODrivers[numDrivers] = driver_ptr;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	7c1b      	ldrb	r3, [r3, #16]
 80161a2:	4619      	mov	r1, r3
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	69fa      	ldr	r2, [r7, #28]
 80161a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	numDrivers++;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	7c1b      	ldrb	r3, [r3, #16]
 80161b0:	3301      	adds	r3, #1
 80161b2:	b2da      	uxtb	r2, r3
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	741a      	strb	r2, [r3, #16]
}
 80161b8:	bf00      	nop
 80161ba:	372c      	adds	r7, #44	; 0x2c
 80161bc:	46bd      	mov	sp, r7
 80161be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080161c2 <_ZN8GPIOBank13getNewChannelEh>:
/*!
 * @brief Function to get pin in the GPIO Bank
 * @param preferenceChannel The channel that is asked for by the device
 * @return Channel number if success or -1 if unavailable
 */
int GPIOBank::getNewChannel(uint8_t preferenceChannel){
 80161c2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80161c6:	b085      	sub	sp, #20
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	70f9      	strb	r1, [r7, #3]
	uint64_t channelMask = 1 << preferenceChannel;
 80161ce:	78f9      	ldrb	r1, [r7, #3]
 80161d0:	2001      	movs	r0, #1
 80161d2:	fa00 f101 	lsl.w	r1, r0, r1
 80161d6:	17c8      	asrs	r0, r1, #31
 80161d8:	468a      	mov	sl, r1
 80161da:	4683      	mov	fp, r0
 80161dc:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	if ((channelMask & _availChannelMask) >= 1) {
 80161e0:	6879      	ldr	r1, [r7, #4]
 80161e2:	e9d1 ab06 	ldrd	sl, fp, [r1, #24]
 80161e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80161ea:	ea0a 0400 	and.w	r4, sl, r0
 80161ee:	ea0b 0501 	and.w	r5, fp, r1
 80161f2:	ea54 0105 	orrs.w	r1, r4, r5
 80161f6:	d00f      	beq.n	8016218 <_ZN8GPIOBank13getNewChannelEh+0x56>
		_availChannelMask = _availChannelMask & ~channelMask;
 80161f8:	6879      	ldr	r1, [r7, #4]
 80161fa:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80161fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016202:	43e2      	mvns	r2, r4
 8016204:	43eb      	mvns	r3, r5
 8016206:	ea00 0802 	and.w	r8, r0, r2
 801620a:	ea01 0903 	and.w	r9, r1, r3
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	e9c3 8906 	strd	r8, r9, [r3, #24]
		return preferenceChannel;
 8016214:	78fb      	ldrb	r3, [r7, #3]
 8016216:	e001      	b.n	801621c <_ZN8GPIOBank13getNewChannelEh+0x5a>
	}

	return -1;
 8016218:	f04f 33ff 	mov.w	r3, #4294967295
}
 801621c:	4618      	mov	r0, r3
 801621e:	3714      	adds	r7, #20
 8016220:	46bd      	mov	sp, r7
 8016222:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016226:	4770      	bx	lr

08016228 <_ZN8GPIOBank7pinModeEhh>:

void GPIOBank::pinMode(uint8_t channel, uint8_t mode){
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
 8016230:	460b      	mov	r3, r1
 8016232:	70fb      	strb	r3, [r7, #3]
 8016234:	4613      	mov	r3, r2
 8016236:	70bb      	strb	r3, [r7, #2]
	// Have not added any chips yet, throw error
	if(numDrivers == 0){
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	7c1b      	ldrb	r3, [r3, #16]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d101      	bne.n	8016244 <_ZN8GPIOBank7pinModeEhh+0x1c>
		Error_Handler();
 8016240:	f7ed f87e 	bl	8003340 <Error_Handler>
	}

	// Tried to index into a chip that does not exist, throw error
	uint8_t chipIndex = channel / 16;
 8016244:	78fb      	ldrb	r3, [r7, #3]
 8016246:	091b      	lsrs	r3, r3, #4
 8016248:	73fb      	strb	r3, [r7, #15]
	uint8_t channelIndex = channel % 16;
 801624a:	78fb      	ldrb	r3, [r7, #3]
 801624c:	f003 030f 	and.w	r3, r3, #15
 8016250:	73bb      	strb	r3, [r7, #14]
	if(chipIndex > (numDrivers - 1)){
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	7c1b      	ldrb	r3, [r3, #16]
 8016256:	7bfa      	ldrb	r2, [r7, #15]
 8016258:	429a      	cmp	r2, r3
 801625a:	d301      	bcc.n	8016260 <_ZN8GPIOBank7pinModeEhh+0x38>
		Error_Handler();
 801625c:	f7ed f870 	bl	8003340 <Error_Handler>
	}

	_GPIODrivers[chipIndex]->pinMode(channelIndex, mode);
 8016260:	7bfa      	ldrb	r2, [r7, #15]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016268:	78ba      	ldrb	r2, [r7, #2]
 801626a:	7bb9      	ldrb	r1, [r7, #14]
 801626c:	4618      	mov	r0, r3
 801626e:	f000 fb60 	bl	8016932 <_ZN19TCA9555_GPIO_Driver7pinModeEhh>
}
 8016272:	bf00      	nop
 8016274:	3710      	adds	r7, #16
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}

0801627a <_ZN8GPIOBank9setOutputEht>:

void GPIOBank::setOutput(uint8_t channel, uint16_t val){
 801627a:	b580      	push	{r7, lr}
 801627c:	b084      	sub	sp, #16
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
 8016282:	460b      	mov	r3, r1
 8016284:	70fb      	strb	r3, [r7, #3]
 8016286:	4613      	mov	r3, r2
 8016288:	803b      	strh	r3, [r7, #0]
	// Have not added any chips yet, throw error
	if (numDrivers == 0) {
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	7c1b      	ldrb	r3, [r3, #16]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d101      	bne.n	8016296 <_ZN8GPIOBank9setOutputEht+0x1c>
		Error_Handler();
 8016292:	f7ed f855 	bl	8003340 <Error_Handler>
	}

	// Tried to index into a chip that does not exist, throw error
	uint8_t chipIndex = channel / 16;
 8016296:	78fb      	ldrb	r3, [r7, #3]
 8016298:	091b      	lsrs	r3, r3, #4
 801629a:	73fb      	strb	r3, [r7, #15]
	uint8_t channelIndex = channel % 16;
 801629c:	78fb      	ldrb	r3, [r7, #3]
 801629e:	f003 030f 	and.w	r3, r3, #15
 80162a2:	73bb      	strb	r3, [r7, #14]
	if (chipIndex > (numDrivers - 1)) {
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	7c1b      	ldrb	r3, [r3, #16]
 80162a8:	7bfa      	ldrb	r2, [r7, #15]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d301      	bcc.n	80162b2 <_ZN8GPIOBank9setOutputEht+0x38>
		Error_Handler();
 80162ae:	f7ed f847 	bl	8003340 <Error_Handler>
	}

	_GPIODrivers[chipIndex]->setOutputState(channelIndex, val);
 80162b2:	7bfa      	ldrb	r2, [r7, #15]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162ba:	883a      	ldrh	r2, [r7, #0]
 80162bc:	b2d2      	uxtb	r2, r2
 80162be:	7bb9      	ldrb	r1, [r7, #14]
 80162c0:	4618      	mov	r0, r3
 80162c2:	f000 fb89 	bl	80169d8 <_ZN19TCA9555_GPIO_Driver14setOutputStateEhh>
}
 80162c6:	bf00      	nop
 80162c8:	3710      	adds	r7, #16
 80162ca:	46bd      	mov	sp, r7
 80162cc:	bd80      	pop	{r7, pc}

080162ce <_ZN18PCA9685_PWM_DriverC1EhP19__I2C_HandleTypeDef>:
 * I2C interface
 *  @param  addr The 7-bit I2C address to locate this chip, default is 0x40
 *  @param  i2c  A reference to a 'HAL I2C' object that we'll use to communicate
 *  with
 */
PCA9685_PWM_Driver::PCA9685_PWM_Driver(const uint8_t addr,
 80162ce:	b480      	push	{r7}
 80162d0:	b085      	sub	sp, #20
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	60f8      	str	r0, [r7, #12]
 80162d6:	460b      	mov	r3, r1
 80162d8:	607a      	str	r2, [r7, #4]
 80162da:	72fb      	strb	r3, [r7, #11]
		I2C_HandleTypeDef *i2c) :
		_i2caddr(addr), _i2c(i2c) {
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	7afa      	ldrb	r2, [r7, #11]
 80162e0:	701a      	strb	r2, [r3, #0]
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	687a      	ldr	r2, [r7, #4]
 80162e6:	605a      	str	r2, [r3, #4]
}
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	4618      	mov	r0, r3
 80162ec:	3714      	adds	r7, #20
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr
	...

080162f8 <_ZN18PCA9685_PWM_Driver5beginEh>:
/*!
 *  @brief  Setups the I2C interface and hardware
 *  @param  prescale
 *          Sets External Clock (Optional)
 */
void PCA9685_PWM_Driver::begin(uint8_t prescale) {
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
 8016300:	460b      	mov	r3, r1
 8016302:	70fb      	strb	r3, [r7, #3]
	reset();
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f000 f81b 	bl	8016340 <_ZN18PCA9685_PWM_Driver5resetEv>
	if (prescale) {
 801630a:	78fb      	ldrb	r3, [r7, #3]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d005      	beq.n	801631c <_ZN18PCA9685_PWM_Driver5beginEh+0x24>
		setExtClk(prescale);
 8016310:	78fb      	ldrb	r3, [r7, #3]
 8016312:	4619      	mov	r1, r3
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 f823 	bl	8016360 <_ZN18PCA9685_PWM_Driver9setExtClkEh>
 801631a:	e004      	b.n	8016326 <_ZN18PCA9685_PWM_Driver5beginEh+0x2e>
	} else {
		// set a default frequency
		setPWMFreq(1000);
 801631c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8016338 <_ZN18PCA9685_PWM_Driver5beginEh+0x40>
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f000 f85d 	bl	80163e0 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf>
	}
	// set the default internal frequency
	setOscillatorFrequency(FREQUENCY_OSCILLATOR);
 8016326:	4905      	ldr	r1, [pc, #20]	; (801633c <_ZN18PCA9685_PWM_Driver5beginEh+0x44>)
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f000 f98d 	bl	8016648 <_ZN18PCA9685_PWM_Driver22setOscillatorFrequencyEm>
}
 801632e:	bf00      	nop
 8016330:	3708      	adds	r7, #8
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	447a0000 	.word	0x447a0000
 801633c:	017d7840 	.word	0x017d7840

08016340 <_ZN18PCA9685_PWM_Driver5resetEv>:

/*!
 *  @brief  Sends a reset command to the PCA9685 chip over I2C
 */
void PCA9685_PWM_Driver::reset() {
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
	write8(PCA9685_MODE1, MODE1_RESTART);
 8016348:	2280      	movs	r2, #128	; 0x80
 801634a:	2100      	movs	r1, #0
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f000 f9a5 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>
	HAL_Delay(10);
 8016352:	200a      	movs	r0, #10
 8016354:	f7ee f9f2 	bl	800473c <HAL_Delay>
}
 8016358:	bf00      	nop
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}

08016360 <_ZN18PCA9685_PWM_Driver9setExtClkEh>:
/*!
 *  @brief  Sets EXTCLK pin to use the external clock
 *  @param  prescale
 *          Configures the prescale value to be used by the external clock
 */
void PCA9685_PWM_Driver::setExtClk(uint8_t prescale) {
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	460b      	mov	r3, r1
 801636a:	70fb      	strb	r3, [r7, #3]
	uint8_t oldmode = read8(PCA9685_MODE1);
 801636c:	2100      	movs	r1, #0
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f000 f978 	bl	8016664 <_ZN18PCA9685_PWM_Driver5read8Eh>
 8016374:	4603      	mov	r3, r0
 8016376:	73fb      	strb	r3, [r7, #15]
	uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
 8016378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801637c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8016380:	b25b      	sxtb	r3, r3
 8016382:	f043 0310 	orr.w	r3, r3, #16
 8016386:	b25b      	sxtb	r3, r3
 8016388:	73bb      	strb	r3, [r7, #14]
	write8(PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
 801638a:	7bbb      	ldrb	r3, [r7, #14]
 801638c:	461a      	mov	r2, r3
 801638e:	2100      	movs	r1, #0
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f000 f983 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>

	// This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
	// use the external clock.
	write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
 8016396:	7bbb      	ldrb	r3, [r7, #14]
 8016398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801639c:	73bb      	strb	r3, [r7, #14]
 801639e:	7bbb      	ldrb	r3, [r7, #14]
 80163a0:	461a      	mov	r2, r3
 80163a2:	2100      	movs	r1, #0
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f000 f979 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>

	write8(PCA9685_PRESCALE, prescale); // set the prescaler
 80163aa:	78fb      	ldrb	r3, [r7, #3]
 80163ac:	461a      	mov	r2, r3
 80163ae:	21fe      	movs	r1, #254	; 0xfe
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f000 f973 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>

	HAL_Delay(5);
 80163b6:	2005      	movs	r0, #5
 80163b8:	f7ee f9c0 	bl	800473c <HAL_Delay>
	// clear the SLEEP bit to start
	write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);
 80163bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163c0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 80163c4:	b25b      	sxtb	r3, r3
 80163c6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80163ca:	b25b      	sxtb	r3, r3
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	461a      	mov	r2, r3
 80163d0:	2100      	movs	r1, #0
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f000 f962 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>

#ifdef ENABLE_DEBUG_OUTPUT
  Serial.print("Mode now 0x");
  Serial.println(read8(PCA9685_MODE1), HEX);
#endif
}
 80163d8:	bf00      	nop
 80163da:	3710      	adds	r7, #16
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}

080163e0 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf>:

/*!
 *  @brief  Sets the PWM frequency for the entire chip, up to ~1.6 KHz
 *  @param  freq Floating point frequency that we will attempt to match
 */
void PCA9685_PWM_Driver::setPWMFreq(float freq) {
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b086      	sub	sp, #24
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	ed87 0a02 	vstr	s0, [r7, #8]
#ifdef ENABLE_DEBUG_OUTPUT
  Serial.print("Attempting to set freq ");
  Serial.println(freq);
#endif
	// Range output modulation frequency is dependant on oscillator
	if (freq < 1)
 80163ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80163f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80163f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80163f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163fc:	d502      	bpl.n	8016404 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x24>
		freq = 1;
 80163fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016402:	60bb      	str	r3, [r7, #8]
	if (freq > 3500)
 8016404:	edd7 7a02 	vldr	s15, [r7, #8]
 8016408:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016508 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x128>
 801640c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016414:	dd01      	ble.n	801641a <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x3a>
		freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
 8016416:	4b3d      	ldr	r3, [pc, #244]	; (801650c <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x12c>)
 8016418:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	689b      	ldr	r3, [r3, #8]
 801641e:	ee07 3a90 	vmov	s15, r3
 8016422:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8016426:	edd7 7a02 	vldr	s15, [r7, #8]
 801642a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801642e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8016500 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x120>
 8016432:	ee27 6b06 	vmul.f64	d6, d7, d6
 8016436:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801643a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801643e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016442:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016446:	ee37 7b46 	vsub.f64	d7, d7, d6
 801644a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801644e:	edc7 7a05 	vstr	s15, [r7, #20]
	if (prescaleval < PCA9685_PRESCALE_MIN)
 8016452:	edd7 7a05 	vldr	s15, [r7, #20]
 8016456:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801645a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016462:	d501      	bpl.n	8016468 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x88>
		prescaleval = PCA9685_PRESCALE_MIN;
 8016464:	4b2a      	ldr	r3, [pc, #168]	; (8016510 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x130>)
 8016466:	617b      	str	r3, [r7, #20]
	if (prescaleval > PCA9685_PRESCALE_MAX)
 8016468:	edd7 7a05 	vldr	s15, [r7, #20]
 801646c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8016514 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x134>
 8016470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016478:	dd01      	ble.n	801647e <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x9e>
		prescaleval = PCA9685_PRESCALE_MAX;
 801647a:	4b27      	ldr	r3, [pc, #156]	; (8016518 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf+0x138>)
 801647c:	617b      	str	r3, [r7, #20]
	uint8_t prescale = (uint8_t) prescaleval;
 801647e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016486:	edc7 7a01 	vstr	s15, [r7, #4]
 801648a:	793b      	ldrb	r3, [r7, #4]
 801648c:	74fb      	strb	r3, [r7, #19]
#ifdef ENABLE_DEBUG_OUTPUT
  Serial.print("Final pre-scale: ");
  Serial.println(prescale);
#endif

	uint8_t oldmode = read8(PCA9685_MODE1);
 801648e:	2100      	movs	r1, #0
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	f000 f8e7 	bl	8016664 <_ZN18PCA9685_PWM_Driver5read8Eh>
 8016496:	4603      	mov	r3, r0
 8016498:	74bb      	strb	r3, [r7, #18]
	uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
 801649a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801649e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80164a2:	b25b      	sxtb	r3, r3
 80164a4:	f043 0310 	orr.w	r3, r3, #16
 80164a8:	b25b      	sxtb	r3, r3
 80164aa:	747b      	strb	r3, [r7, #17]
	write8(PCA9685_MODE1, newmode);                             // go to sleep
 80164ac:	7c7b      	ldrb	r3, [r7, #17]
 80164ae:	461a      	mov	r2, r3
 80164b0:	2100      	movs	r1, #0
 80164b2:	68f8      	ldr	r0, [r7, #12]
 80164b4:	f000 f8f2 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>
	write8(PCA9685_PRESCALE, prescale); // set the prescaler
 80164b8:	7cfb      	ldrb	r3, [r7, #19]
 80164ba:	461a      	mov	r2, r3
 80164bc:	21fe      	movs	r1, #254	; 0xfe
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	f000 f8ec 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>
	write8(PCA9685_MODE1, oldmode);
 80164c4:	7cbb      	ldrb	r3, [r7, #18]
 80164c6:	461a      	mov	r2, r3
 80164c8:	2100      	movs	r1, #0
 80164ca:	68f8      	ldr	r0, [r7, #12]
 80164cc:	f000 f8e6 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>
	HAL_Delay(5);
 80164d0:	2005      	movs	r0, #5
 80164d2:	f7ee f933 	bl	800473c <HAL_Delay>
	// This sets the MODE1 register to turn on auto increment.
	write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
 80164d6:	7cbb      	ldrb	r3, [r7, #18]
 80164d8:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	461a      	mov	r2, r3
 80164e0:	2100      	movs	r1, #0
 80164e2:	68f8      	ldr	r0, [r7, #12]
 80164e4:	f000 f8da 	bl	801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>
	oldmode = read8(PCA9685_MODE1);
 80164e8:	2100      	movs	r1, #0
 80164ea:	68f8      	ldr	r0, [r7, #12]
 80164ec:	f000 f8ba 	bl	8016664 <_ZN18PCA9685_PWM_Driver5read8Eh>
 80164f0:	4603      	mov	r3, r0
 80164f2:	74bb      	strb	r3, [r7, #18]

#ifdef ENABLE_DEBUG_OUTPUT
  Serial.print("Mode now 0x");
  Serial.println(read8(PCA9685_MODE1), HEX);
#endif
}
 80164f4:	bf00      	nop
 80164f6:	3718      	adds	r7, #24
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	f3af 8000 	nop.w
 8016500:	00000000 	.word	0x00000000
 8016504:	40b00000 	.word	0x40b00000
 8016508:	455ac000 	.word	0x455ac000
 801650c:	455ac000 	.word	0x455ac000
 8016510:	40400000 	.word	0x40400000
 8016514:	437f0000 	.word	0x437f0000
 8016518:	437f0000 	.word	0x437f0000

0801651c <_ZN18PCA9685_PWM_Driver12readPrescaleEv>:

/*!
 *  @brief  Reads set Prescale from PCA9685
 *  @return prescale value
 */
uint8_t PCA9685_PWM_Driver::readPrescale(void) {
 801651c:	b580      	push	{r7, lr}
 801651e:	b082      	sub	sp, #8
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
	return read8(PCA9685_PRESCALE);
 8016524:	21fe      	movs	r1, #254	; 0xfe
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	f000 f89c 	bl	8016664 <_ZN18PCA9685_PWM_Driver5read8Eh>
 801652c:	4603      	mov	r3, r0
}
 801652e:	4618      	mov	r0, r3
 8016530:	3708      	adds	r7, #8
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}

08016536 <_ZN18PCA9685_PWM_Driver6setPWMEhtt>:
 *  @brief  Sets the PWM output of one of the PCA9685 pins
 *  @param  num One of the PWM output pins, from 0 to 15
 *  @param  on At what point in the 4096-part cycle to turn the PWM output ON
 *  @param  off At what point in the 4096-part cycle to turn the PWM output OFF
 */
void PCA9685_PWM_Driver::setPWM(uint8_t num, uint16_t on, uint16_t off) {
 8016536:	b580      	push	{r7, lr}
 8016538:	b08a      	sub	sp, #40	; 0x28
 801653a:	af04      	add	r7, sp, #16
 801653c:	60f8      	str	r0, [r7, #12]
 801653e:	4608      	mov	r0, r1
 8016540:	4611      	mov	r1, r2
 8016542:	461a      	mov	r2, r3
 8016544:	4603      	mov	r3, r0
 8016546:	72fb      	strb	r3, [r7, #11]
 8016548:	460b      	mov	r3, r1
 801654a:	813b      	strh	r3, [r7, #8]
 801654c:	4613      	mov	r3, r2
 801654e:	80fb      	strh	r3, [r7, #6]
  Serial.print(on);
  Serial.print("->");
  Serial.println(off);
#endif
	uint8_t transData[4];
	uint8_t addr = PCA9685_LED0_ON_L + 4 * num;
 8016550:	7afb      	ldrb	r3, [r7, #11]
 8016552:	009b      	lsls	r3, r3, #2
 8016554:	b2db      	uxtb	r3, r3
 8016556:	3306      	adds	r3, #6
 8016558:	75fb      	strb	r3, [r7, #23]
	transData[0] = on;
 801655a:	893b      	ldrh	r3, [r7, #8]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	743b      	strb	r3, [r7, #16]
	transData[1] = on >> 8;
 8016560:	893b      	ldrh	r3, [r7, #8]
 8016562:	0a1b      	lsrs	r3, r3, #8
 8016564:	b29b      	uxth	r3, r3
 8016566:	b2db      	uxtb	r3, r3
 8016568:	747b      	strb	r3, [r7, #17]
	transData[2] = off;
 801656a:	88fb      	ldrh	r3, [r7, #6]
 801656c:	b2db      	uxtb	r3, r3
 801656e:	74bb      	strb	r3, [r7, #18]
	transData[3] = off >> 8;
 8016570:	88fb      	ldrh	r3, [r7, #6]
 8016572:	0a1b      	lsrs	r3, r3, #8
 8016574:	b29b      	uxth	r3, r3
 8016576:	b2db      	uxtb	r3, r3
 8016578:	74fb      	strb	r3, [r7, #19]

	HAL_I2C_Mem_Write(_i2c, _i2caddr, addr, 1, transData, 4, 10);
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	6858      	ldr	r0, [r3, #4]
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	781b      	ldrb	r3, [r3, #0]
 8016582:	b299      	uxth	r1, r3
 8016584:	7dfb      	ldrb	r3, [r7, #23]
 8016586:	b29a      	uxth	r2, r3
 8016588:	230a      	movs	r3, #10
 801658a:	9302      	str	r3, [sp, #8]
 801658c:	2304      	movs	r3, #4
 801658e:	9301      	str	r3, [sp, #4]
 8016590:	f107 0310 	add.w	r3, r7, #16
 8016594:	9300      	str	r3, [sp, #0]
 8016596:	2301      	movs	r3, #1
 8016598:	f7f3 fa22 	bl	80099e0 <HAL_I2C_Mem_Write>
}
 801659c:	bf00      	nop
 801659e:	3718      	adds	r7, #24
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	0000      	movs	r0, r0
	...

080165a8 <_ZN18PCA9685_PWM_Driver17writeMicrosecondsEht>:
 *  @brief  Sets the PWM output of one of the PCA9685 pins based on the input
 * microseconds, output is not precise
 *  @param  num One of the PWM output pins, from 0 to 15
 *  @param  Microseconds The number of Microseconds to turn the PWM output ON
 */
void PCA9685_PWM_Driver::writeMicroseconds(uint8_t num, uint16_t Microseconds) {
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b088      	sub	sp, #32
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	460b      	mov	r3, r1
 80165b2:	70fb      	strb	r3, [r7, #3]
 80165b4:	4613      	mov	r3, r2
 80165b6:	803b      	strh	r3, [r7, #0]
  Serial.print(": ");
  Serial.print(Microseconds);
  Serial.println("->");
#endif

	double pulse = Microseconds;
 80165b8:	883b      	ldrh	r3, [r7, #0]
 80165ba:	ee07 3a90 	vmov	s15, r3
 80165be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80165c2:	ed87 7b06 	vstr	d7, [r7, #24]
	double pulselength;
//	pulselength = 969400; // 1,000,000 us per second
	pulselength = 1000000;
 80165c6:	a31e      	add	r3, pc, #120	; (adr r3, 8016640 <_ZN18PCA9685_PWM_Driver17writeMicrosecondsEht+0x98>)
 80165c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Read prescale
	uint16_t prescale = PCA9685_PWM_Driver::readPrescale();
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f7ff ffa3 	bl	801651c <_ZN18PCA9685_PWM_Driver12readPrescaleEv>
 80165d6:	4603      	mov	r3, r0
 80165d8:	81fb      	strh	r3, [r7, #14]
  Serial.println(" PCA9685 chip prescale");
#endif

	// Calculate the pulse for PWM based on Equation 1 from the datasheet section
	// 7.3.5
	prescale += 1;
 80165da:	89fb      	ldrh	r3, [r7, #14]
 80165dc:	3301      	adds	r3, #1
 80165de:	81fb      	strh	r3, [r7, #14]
	pulselength *= prescale;
 80165e0:	89fb      	ldrh	r3, [r7, #14]
 80165e2:	ee07 3a90 	vmov	s15, r3
 80165e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80165ea:	ed97 6b04 	vldr	d6, [r7, #16]
 80165ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80165f2:	ed87 7b04 	vstr	d7, [r7, #16]
	pulselength /= _oscillator_freq;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	ee07 3a90 	vmov	s15, r3
 80165fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8016602:	ed97 5b04 	vldr	d5, [r7, #16]
 8016606:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801660a:	ed87 7b04 	vstr	d7, [r7, #16]
#ifdef ENABLE_DEBUG_OUTPUT
  Serial.print(pulselength);
  Serial.println(" us per bit");
#endif

	pulse /= pulselength;
 801660e:	ed97 5b06 	vldr	d5, [r7, #24]
 8016612:	ed97 6b04 	vldr	d6, [r7, #16]
 8016616:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801661a:	ed87 7b06 	vstr	d7, [r7, #24]
#ifdef ENABLE_DEBUG_OUTPUT
  Serial.print(pulse);
  Serial.println(" pulse for PWM");
#endif

	PCA9685_PWM_Driver::setPWM(num, 0, pulse);
 801661e:	ed97 7b06 	vldr	d7, [r7, #24]
 8016622:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8016626:	ee17 3a90 	vmov	r3, s15
 801662a:	b29b      	uxth	r3, r3
 801662c:	78f9      	ldrb	r1, [r7, #3]
 801662e:	2200      	movs	r2, #0
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f7ff ff80 	bl	8016536 <_ZN18PCA9685_PWM_Driver6setPWMEhtt>
}
 8016636:	bf00      	nop
 8016638:	3720      	adds	r7, #32
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	00000000 	.word	0x00000000
 8016644:	412e8480 	.word	0x412e8480

08016648 <_ZN18PCA9685_PWM_Driver22setOscillatorFrequencyEm>:
/*!
 *  @brief Setter for the internally tracked oscillator used for freq
 * calculations
 *  @param freq The frequency the PCA9685 should use for frequency calculations
 */
void PCA9685_PWM_Driver::setOscillatorFrequency(uint32_t freq) {
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
	_oscillator_freq = freq;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	683a      	ldr	r2, [r7, #0]
 8016656:	609a      	str	r2, [r3, #8]
}
 8016658:	bf00      	nop
 801665a:	370c      	adds	r7, #12
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr

08016664 <_ZN18PCA9685_PWM_Driver5read8Eh>:

/******************* Low level I2C interface */
uint8_t PCA9685_PWM_Driver::read8(uint8_t addr) {
 8016664:	b580      	push	{r7, lr}
 8016666:	b088      	sub	sp, #32
 8016668:	af04      	add	r7, sp, #16
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	460b      	mov	r3, r1
 801666e:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read(_i2c, _i2caddr, addr, 1, &data, 1, 10);
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	6858      	ldr	r0, [r3, #4]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	b299      	uxth	r1, r3
 801667a:	78fb      	ldrb	r3, [r7, #3]
 801667c:	b29a      	uxth	r2, r3
 801667e:	230a      	movs	r3, #10
 8016680:	9302      	str	r3, [sp, #8]
 8016682:	2301      	movs	r3, #1
 8016684:	9301      	str	r3, [sp, #4]
 8016686:	f107 030f 	add.w	r3, r7, #15
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	2301      	movs	r3, #1
 801668e:	f7f3 fabb 	bl	8009c08 <HAL_I2C_Mem_Read>
	return data;
 8016692:	7bfb      	ldrb	r3, [r7, #15]
}
 8016694:	4618      	mov	r0, r3
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <_ZN18PCA9685_PWM_Driver6write8Ehh>:

void PCA9685_PWM_Driver::write8(uint8_t addr, uint8_t data) {
 801669c:	b580      	push	{r7, lr}
 801669e:	b086      	sub	sp, #24
 80166a0:	af04      	add	r7, sp, #16
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	460b      	mov	r3, r1
 80166a6:	70fb      	strb	r3, [r7, #3]
 80166a8:	4613      	mov	r3, r2
 80166aa:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(_i2c, _i2caddr, addr, 1, &data, 1, 10);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	6858      	ldr	r0, [r3, #4]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	781b      	ldrb	r3, [r3, #0]
 80166b4:	b299      	uxth	r1, r3
 80166b6:	78fb      	ldrb	r3, [r7, #3]
 80166b8:	b29a      	uxth	r2, r3
 80166ba:	230a      	movs	r3, #10
 80166bc:	9302      	str	r3, [sp, #8]
 80166be:	2301      	movs	r3, #1
 80166c0:	9301      	str	r3, [sp, #4]
 80166c2:	1cbb      	adds	r3, r7, #2
 80166c4:	9300      	str	r3, [sp, #0]
 80166c6:	2301      	movs	r3, #1
 80166c8:	f7f3 f98a 	bl	80099e0 <HAL_I2C_Mem_Write>
}
 80166cc:	bf00      	nop
 80166ce:	3708      	adds	r7, #8
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}

080166d4 <_ZN7PWMBankC1Ev>:

#include "PWMBank.h"
#include "cmsis_os.h"
#include <string.h>

PWMBank::PWMBank(){}
 80166d4:	b480      	push	{r7}
 80166d6:	b083      	sub	sp, #12
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	2200      	movs	r2, #0
 80166e0:	721a      	strb	r2, [r3, #8]
 80166e2:	6879      	ldr	r1, [r7, #4]
 80166e4:	f04f 0200 	mov.w	r2, #0
 80166e8:	f04f 0300 	mov.w	r3, #0
 80166ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	4618      	mov	r0, r3
 80166f4:	370c      	adds	r7, #12
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr

080166fe <_ZN7PWMBank17writeMicrosecondsEht>:
	uint8_t channelIndex = channel % 16;

	_PWMDrivers[chipIndex]->setPWM(channelIndex, on, off);
}

void PWMBank::writeMicroseconds(uint8_t channel, uint16_t microseconds){
 80166fe:	b580      	push	{r7, lr}
 8016700:	b084      	sub	sp, #16
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
 8016706:	460b      	mov	r3, r1
 8016708:	70fb      	strb	r3, [r7, #3]
 801670a:	4613      	mov	r3, r2
 801670c:	803b      	strh	r3, [r7, #0]
	// Tried to index into a chip that does not exist, throw error
	uint8_t chipIndex = channel / 16;
 801670e:	78fb      	ldrb	r3, [r7, #3]
 8016710:	091b      	lsrs	r3, r3, #4
 8016712:	73fb      	strb	r3, [r7, #15]
	uint8_t channelIndex = channel % 16;
 8016714:	78fb      	ldrb	r3, [r7, #3]
 8016716:	f003 030f 	and.w	r3, r3, #15
 801671a:	73bb      	strb	r3, [r7, #14]

	_PWMDrivers[chipIndex]->writeMicroseconds(channelIndex, microseconds);
 801671c:	7bfa      	ldrb	r2, [r7, #15]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016724:	883a      	ldrh	r2, [r7, #0]
 8016726:	7bb9      	ldrb	r1, [r7, #14]
 8016728:	4618      	mov	r0, r3
 801672a:	f7ff ff3d 	bl	80165a8 <_ZN18PCA9685_PWM_Driver17writeMicrosecondsEht>
}
 801672e:	bf00      	nop
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
	...

08016738 <_ZN7PWMBank12setDutyCycleEhh>:

void PWMBank::setDutyCycle(uint8_t channel, uint8_t duty){
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	460b      	mov	r3, r1
 8016742:	70fb      	strb	r3, [r7, #3]
 8016744:	4613      	mov	r3, r2
 8016746:	70bb      	strb	r3, [r7, #2]
	uint8_t chipIndex = channel / 16;
 8016748:	78fb      	ldrb	r3, [r7, #3]
 801674a:	091b      	lsrs	r3, r3, #4
 801674c:	73fb      	strb	r3, [r7, #15]
	uint8_t channelIndex = channel % 16;
 801674e:	78fb      	ldrb	r3, [r7, #3]
 8016750:	f003 030f 	and.w	r3, r3, #15
 8016754:	73bb      	strb	r3, [r7, #14]

	float del = ((float)duty * 4095.0)/100.0;
 8016756:	78bb      	ldrb	r3, [r7, #2]
 8016758:	ee07 3a90 	vmov	s15, r3
 801675c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016760:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016764:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80167a8 <_ZN7PWMBank12setDutyCycleEhh+0x70>
 8016768:	ee27 6b06 	vmul.f64	d6, d7, d6
 801676c:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80167b0 <_ZN7PWMBank12setDutyCycleEhh+0x78>
 8016770:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8016774:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016778:	edc7 7a02 	vstr	s15, [r7, #8]
	_PWMDrivers[chipIndex]->setPWM(channelIndex, 0, (uint16_t)del);
 801677c:	7bfa      	ldrb	r2, [r7, #15]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016784:	edd7 7a02 	vldr	s15, [r7, #8]
 8016788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801678c:	ee17 3a90 	vmov	r3, s15
 8016790:	b29b      	uxth	r3, r3
 8016792:	7bb9      	ldrb	r1, [r7, #14]
 8016794:	2200      	movs	r2, #0
 8016796:	f7ff fece 	bl	8016536 <_ZN18PCA9685_PWM_Driver6setPWMEhtt>
}
 801679a:	bf00      	nop
 801679c:	3710      	adds	r7, #16
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	f3af 8000 	nop.w
 80167a8:	00000000 	.word	0x00000000
 80167ac:	40affe00 	.word	0x40affe00
 80167b0:	00000000 	.word	0x00000000
 80167b4:	40590000 	.word	0x40590000

080167b8 <_ZN7PWMBank9addDriverEhP19__I2C_HandleTypeDef>:
 * @brief Function to add new driver chip to the bank with a unique
 * address
 * @param addr the I2C address of the new chip
 * @param i2c the I2C handler to access the bus
 */
void PWMBank::addDriver(uint8_t addr, I2C_HandleTypeDef *i2c){
 80167b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167bc:	b08b      	sub	sp, #44	; 0x2c
 80167be:	af00      	add	r7, sp, #0
 80167c0:	60f8      	str	r0, [r7, #12]
 80167c2:	460b      	mov	r3, r1
 80167c4:	607a      	str	r2, [r7, #4]
 80167c6:	72fb      	strb	r3, [r7, #11]
	uint64_t newMask = 0xffff;
 80167c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167cc:	f04f 0300 	mov.w	r3, #0
 80167d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	newMask = newMask << (numDrivers * 16);
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	7a1b      	ldrb	r3, [r3, #8]
 80167d8:	0119      	lsls	r1, r3, #4
 80167da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80167de:	f1a1 0620 	sub.w	r6, r1, #32
 80167e2:	f1c1 0020 	rsb	r0, r1, #32
 80167e6:	fa03 f501 	lsl.w	r5, r3, r1
 80167ea:	fa02 f606 	lsl.w	r6, r2, r6
 80167ee:	4335      	orrs	r5, r6
 80167f0:	fa22 f000 	lsr.w	r0, r2, r0
 80167f4:	4305      	orrs	r5, r0
 80167f6:	fa02 f401 	lsl.w	r4, r2, r1
 80167fa:	e9c7 4508 	strd	r4, r5, [r7, #32]
	_availChannelMask |= newMask;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8016804:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016808:	ea40 0802 	orr.w	r8, r0, r2
 801680c:	ea41 0903 	orr.w	r9, r1, r3
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	e9c3 8904 	strd	r8, r9, [r3, #16]

	PCA9685_PWM_Driver *driver_ptr = (PCA9685_PWM_Driver *)pvPortMalloc(sizeof(PCA9685_PWM_Driver));
 8016816:	200c      	movs	r0, #12
 8016818:	f003 fe86 	bl	801a528 <pvPortMalloc>
 801681c:	61f8      	str	r0, [r7, #28]
	PCA9685_PWM_Driver driver(addr, i2c);
 801681e:	7af9      	ldrb	r1, [r7, #11]
 8016820:	f107 0310 	add.w	r3, r7, #16
 8016824:	687a      	ldr	r2, [r7, #4]
 8016826:	4618      	mov	r0, r3
 8016828:	f7ff fd51 	bl	80162ce <_ZN18PCA9685_PWM_DriverC1EhP19__I2C_HandleTypeDef>
	memcpy(driver_ptr, &driver, sizeof(PCA9685_PWM_Driver));
 801682c:	f107 0310 	add.w	r3, r7, #16
 8016830:	220c      	movs	r2, #12
 8016832:	4619      	mov	r1, r3
 8016834:	69f8      	ldr	r0, [r7, #28]
 8016836:	f004 fdf9 	bl	801b42c <memcpy>

	driver_ptr->begin();
 801683a:	2100      	movs	r1, #0
 801683c:	69f8      	ldr	r0, [r7, #28]
 801683e:	f7ff fd5b 	bl	80162f8 <_ZN18PCA9685_PWM_Driver5beginEh>
	driver_ptr->setPWMFreq(50);
 8016842:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8016870 <_ZN7PWMBank9addDriverEhP19__I2C_HandleTypeDef+0xb8>
 8016846:	69f8      	ldr	r0, [r7, #28]
 8016848:	f7ff fdca 	bl	80163e0 <_ZN18PCA9685_PWM_Driver10setPWMFreqEf>

	_PWMDrivers[numDrivers] = driver_ptr;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	7a1b      	ldrb	r3, [r3, #8]
 8016850:	4619      	mov	r1, r3
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	69fa      	ldr	r2, [r7, #28]
 8016856:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	numDrivers++;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	7a1b      	ldrb	r3, [r3, #8]
 801685e:	3301      	adds	r3, #1
 8016860:	b2da      	uxtb	r2, r3
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	721a      	strb	r2, [r3, #8]
}
 8016866:	bf00      	nop
 8016868:	372c      	adds	r7, #44	; 0x2c
 801686a:	46bd      	mov	sp, r7
 801686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016870:	42480000 	.word	0x42480000

08016874 <_ZN7PWMBank13getNewChannelEh>:
 * @brief get the next available channel
 * @param preferenceChannel The channel you would prefer to get for
 * hardware limitation reasons
 * @return Channel number if given, -1 if unavailable
 */
int PWMBank::getNewChannel(uint8_t preferenceChannel){
 8016874:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016878:	b085      	sub	sp, #20
 801687a:	af00      	add	r7, sp, #0
 801687c:	6078      	str	r0, [r7, #4]
 801687e:	70f9      	strb	r1, [r7, #3]
	uint64_t channelMask = 1 << preferenceChannel;
 8016880:	78f9      	ldrb	r1, [r7, #3]
 8016882:	2001      	movs	r0, #1
 8016884:	fa00 f101 	lsl.w	r1, r0, r1
 8016888:	17c8      	asrs	r0, r1, #31
 801688a:	468a      	mov	sl, r1
 801688c:	4683      	mov	fp, r0
 801688e:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	if((channelMask & _availChannelMask) >= 1){
 8016892:	6879      	ldr	r1, [r7, #4]
 8016894:	e9d1 ab04 	ldrd	sl, fp, [r1, #16]
 8016898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801689c:	ea0a 0400 	and.w	r4, sl, r0
 80168a0:	ea0b 0501 	and.w	r5, fp, r1
 80168a4:	ea54 0105 	orrs.w	r1, r4, r5
 80168a8:	d00f      	beq.n	80168ca <_ZN7PWMBank13getNewChannelEh+0x56>
		_availChannelMask = _availChannelMask & ~channelMask;
 80168aa:	6879      	ldr	r1, [r7, #4]
 80168ac:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80168b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80168b4:	43e2      	mvns	r2, r4
 80168b6:	43eb      	mvns	r3, r5
 80168b8:	ea00 0802 	and.w	r8, r0, r2
 80168bc:	ea01 0903 	and.w	r9, r1, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	e9c3 8904 	strd	r8, r9, [r3, #16]
		return preferenceChannel;
 80168c6:	78fb      	ldrb	r3, [r7, #3]
 80168c8:	e001      	b.n	80168ce <_ZN7PWMBank13getNewChannelEh+0x5a>
	}

	return -1;
 80168ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3714      	adds	r7, #20
 80168d2:	46bd      	mov	sp, r7
 80168d4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80168d8:	4770      	bx	lr

080168da <_ZN19TCA9555_GPIO_DriverC1EhP19__I2C_HandleTypeDef>:
 *  @param  addr The 7-bit I2C address to locate this chip, valid addresses are
 *  0x20 - 0x27
 *  @param  i2c  A reference to a 'HAL I2C' object that we'll use to communicate
 *  with
 */
TCA9555_GPIO_Driver::TCA9555_GPIO_Driver(const uint8_t addr,
 80168da:	b480      	push	{r7}
 80168dc:	b085      	sub	sp, #20
 80168de:	af00      	add	r7, sp, #0
 80168e0:	60f8      	str	r0, [r7, #12]
 80168e2:	460b      	mov	r3, r1
 80168e4:	607a      	str	r2, [r7, #4]
 80168e6:	72fb      	strb	r3, [r7, #11]
		I2C_HandleTypeDef *i2c):_i2caddr(addr), _i2c(i2c){}
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	7afa      	ldrb	r2, [r7, #11]
 80168ec:	701a      	strb	r2, [r3, #0]
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	687a      	ldr	r2, [r7, #4]
 80168f2:	605a      	str	r2, [r3, #4]
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	4618      	mov	r0, r3
 80168f8:	3714      	adds	r7, #20
 80168fa:	46bd      	mov	sp, r7
 80168fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016900:	4770      	bx	lr

08016902 <_ZN19TCA9555_GPIO_Driver5beginEv>:

void TCA9555_GPIO_Driver::begin(){// Determine previous state of that config registers
 8016902:	b580      	push	{r7, lr}
 8016904:	b088      	sub	sp, #32
 8016906:	af04      	add	r7, sp, #16
 8016908:	6078      	str	r0, [r7, #4]
	uint8_t oldMode;
	HAL_I2C_Mem_Read(_i2c, _i2caddr, CR_CFG0, 1, &oldMode, 1, 10);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6858      	ldr	r0, [r3, #4]
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	781b      	ldrb	r3, [r3, #0]
 8016912:	b299      	uxth	r1, r3
 8016914:	230a      	movs	r3, #10
 8016916:	9302      	str	r3, [sp, #8]
 8016918:	2301      	movs	r3, #1
 801691a:	9301      	str	r3, [sp, #4]
 801691c:	f107 030f 	add.w	r3, r7, #15
 8016920:	9300      	str	r3, [sp, #0]
 8016922:	2301      	movs	r3, #1
 8016924:	2206      	movs	r2, #6
 8016926:	f7f3 f96f 	bl	8009c08 <HAL_I2C_Mem_Read>
}
 801692a:	bf00      	nop
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}

08016932 <_ZN19TCA9555_GPIO_Driver7pinModeEhh>:
/*!
 * @brief  Sets the direction for pin specified by pinNum
 * @param  pinNum the pin number to access (0-15);
 * @param  mode OUTPUT or INPUT
 */
void TCA9555_GPIO_Driver::pinMode(uint8_t pinNum, uint8_t mode){
 8016932:	b580      	push	{r7, lr}
 8016934:	b088      	sub	sp, #32
 8016936:	af04      	add	r7, sp, #16
 8016938:	6078      	str	r0, [r7, #4]
 801693a:	460b      	mov	r3, r1
 801693c:	70fb      	strb	r3, [r7, #3]
 801693e:	4613      	mov	r3, r2
 8016940:	70bb      	strb	r3, [r7, #2]
	// Determine config register to use
	uint8_t reg;
	if(pinNum < 8)
 8016942:	78fb      	ldrb	r3, [r7, #3]
 8016944:	2b07      	cmp	r3, #7
 8016946:	d802      	bhi.n	801694e <_ZN19TCA9555_GPIO_Driver7pinModeEhh+0x1c>
		reg = CR_CFG0;
 8016948:	2306      	movs	r3, #6
 801694a:	73fb      	strb	r3, [r7, #15]
 801694c:	e004      	b.n	8016958 <_ZN19TCA9555_GPIO_Driver7pinModeEhh+0x26>
	else{
		reg = CR_CFG1;
 801694e:	2307      	movs	r3, #7
 8016950:	73fb      	strb	r3, [r7, #15]
		pinNum -= 8;
 8016952:	78fb      	ldrb	r3, [r7, #3]
 8016954:	3b08      	subs	r3, #8
 8016956:	70fb      	strb	r3, [r7, #3]
	}

	// Determine previous state of that config registers
	uint8_t oldMode;
	HAL_I2C_Mem_Read(_i2c, _i2caddr, reg, 1, &oldMode, 1, 10);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6858      	ldr	r0, [r3, #4]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	b299      	uxth	r1, r3
 8016962:	7bfb      	ldrb	r3, [r7, #15]
 8016964:	b29a      	uxth	r2, r3
 8016966:	230a      	movs	r3, #10
 8016968:	9302      	str	r3, [sp, #8]
 801696a:	2301      	movs	r3, #1
 801696c:	9301      	str	r3, [sp, #4]
 801696e:	f107 030d 	add.w	r3, r7, #13
 8016972:	9300      	str	r3, [sp, #0]
 8016974:	2301      	movs	r3, #1
 8016976:	f7f3 f947 	bl	8009c08 <HAL_I2C_Mem_Read>

	// Modify the bit to the new mode value
	uint8_t mask = 1 << pinNum;
 801697a:	78fb      	ldrb	r3, [r7, #3]
 801697c:	2201      	movs	r2, #1
 801697e:	fa02 f303 	lsl.w	r3, r2, r3
 8016982:	73bb      	strb	r3, [r7, #14]
	uint8_t newMode = (oldMode & ~mask) | ((mode << pinNum) & mask);
 8016984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016988:	43db      	mvns	r3, r3
 801698a:	b25a      	sxtb	r2, r3
 801698c:	7b7b      	ldrb	r3, [r7, #13]
 801698e:	b25b      	sxtb	r3, r3
 8016990:	4013      	ands	r3, r2
 8016992:	b25a      	sxtb	r2, r3
 8016994:	78b9      	ldrb	r1, [r7, #2]
 8016996:	78fb      	ldrb	r3, [r7, #3]
 8016998:	fa01 f303 	lsl.w	r3, r1, r3
 801699c:	b259      	sxtb	r1, r3
 801699e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169a2:	400b      	ands	r3, r1
 80169a4:	b25b      	sxtb	r3, r3
 80169a6:	4313      	orrs	r3, r2
 80169a8:	b25b      	sxtb	r3, r3
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	733b      	strb	r3, [r7, #12]

	// send config command
	HAL_I2C_Mem_Write(_i2c, _i2caddr, reg, 1, &newMode, 1, 10);
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6858      	ldr	r0, [r3, #4]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	b299      	uxth	r1, r3
 80169b8:	7bfb      	ldrb	r3, [r7, #15]
 80169ba:	b29a      	uxth	r2, r3
 80169bc:	230a      	movs	r3, #10
 80169be:	9302      	str	r3, [sp, #8]
 80169c0:	2301      	movs	r3, #1
 80169c2:	9301      	str	r3, [sp, #4]
 80169c4:	f107 030c 	add.w	r3, r7, #12
 80169c8:	9300      	str	r3, [sp, #0]
 80169ca:	2301      	movs	r3, #1
 80169cc:	f7f3 f808 	bl	80099e0 <HAL_I2C_Mem_Write>
}
 80169d0:	bf00      	nop
 80169d2:	3710      	adds	r7, #16
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <_ZN19TCA9555_GPIO_Driver14setOutputStateEhh>:
/*!
 * @brief  Sets the output state of an output enabled pin
 * @param  pinNum the pin number to set (0-15)
 * @param  value HIGH or LOW
 */
void TCA9555_GPIO_Driver::setOutputState(uint8_t pinNum, uint8_t value){
 80169d8:	b580      	push	{r7, lr}
 80169da:	b088      	sub	sp, #32
 80169dc:	af04      	add	r7, sp, #16
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	460b      	mov	r3, r1
 80169e2:	70fb      	strb	r3, [r7, #3]
 80169e4:	4613      	mov	r3, r2
 80169e6:	70bb      	strb	r3, [r7, #2]
	// Determine config register to use
	uint8_t reg;
	if (pinNum < 8)
 80169e8:	78fb      	ldrb	r3, [r7, #3]
 80169ea:	2b07      	cmp	r3, #7
 80169ec:	d802      	bhi.n	80169f4 <_ZN19TCA9555_GPIO_Driver14setOutputStateEhh+0x1c>
		reg = CR_OUT0;
 80169ee:	2302      	movs	r3, #2
 80169f0:	73fb      	strb	r3, [r7, #15]
 80169f2:	e004      	b.n	80169fe <_ZN19TCA9555_GPIO_Driver14setOutputStateEhh+0x26>
	else {
		reg = CR_OUT1;
 80169f4:	2303      	movs	r3, #3
 80169f6:	73fb      	strb	r3, [r7, #15]
		pinNum -= 8;
 80169f8:	78fb      	ldrb	r3, [r7, #3]
 80169fa:	3b08      	subs	r3, #8
 80169fc:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 0) value = 1;
 80169fe:	78bb      	ldrb	r3, [r7, #2]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d002      	beq.n	8016a0a <_ZN19TCA9555_GPIO_Driver14setOutputStateEhh+0x32>
 8016a04:	2301      	movs	r3, #1
 8016a06:	70bb      	strb	r3, [r7, #2]
 8016a08:	e001      	b.n	8016a0e <_ZN19TCA9555_GPIO_Driver14setOutputStateEhh+0x36>
	else value = 0;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	70bb      	strb	r3, [r7, #2]

	// Determine previous state of that output registers
	uint8_t oldMode;
	HAL_I2C_Mem_Read(_i2c, _i2caddr, reg, 1, &oldMode, 1, 10);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6858      	ldr	r0, [r3, #4]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	b299      	uxth	r1, r3
 8016a18:	7bfb      	ldrb	r3, [r7, #15]
 8016a1a:	b29a      	uxth	r2, r3
 8016a1c:	230a      	movs	r3, #10
 8016a1e:	9302      	str	r3, [sp, #8]
 8016a20:	2301      	movs	r3, #1
 8016a22:	9301      	str	r3, [sp, #4]
 8016a24:	f107 030d 	add.w	r3, r7, #13
 8016a28:	9300      	str	r3, [sp, #0]
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	f7f3 f8ec 	bl	8009c08 <HAL_I2C_Mem_Read>

	// Modify the bit to the new mode value
	uint8_t mask = 1 << pinNum;
 8016a30:	78fb      	ldrb	r3, [r7, #3]
 8016a32:	2201      	movs	r2, #1
 8016a34:	fa02 f303 	lsl.w	r3, r2, r3
 8016a38:	73bb      	strb	r3, [r7, #14]
	uint8_t newMode = (oldMode & ~mask) | ((value << pinNum) & mask);
 8016a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a3e:	43db      	mvns	r3, r3
 8016a40:	b25a      	sxtb	r2, r3
 8016a42:	7b7b      	ldrb	r3, [r7, #13]
 8016a44:	b25b      	sxtb	r3, r3
 8016a46:	4013      	ands	r3, r2
 8016a48:	b25a      	sxtb	r2, r3
 8016a4a:	78b9      	ldrb	r1, [r7, #2]
 8016a4c:	78fb      	ldrb	r3, [r7, #3]
 8016a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8016a52:	b259      	sxtb	r1, r3
 8016a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a58:	400b      	ands	r3, r1
 8016a5a:	b25b      	sxtb	r3, r3
 8016a5c:	4313      	orrs	r3, r2
 8016a5e:	b25b      	sxtb	r3, r3
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	733b      	strb	r3, [r7, #12]

	// send port value back
	HAL_I2C_Mem_Write(_i2c, _i2caddr, reg, 1, &newMode, 1, 10);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6858      	ldr	r0, [r3, #4]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	781b      	ldrb	r3, [r3, #0]
 8016a6c:	b299      	uxth	r1, r3
 8016a6e:	7bfb      	ldrb	r3, [r7, #15]
 8016a70:	b29a      	uxth	r2, r3
 8016a72:	230a      	movs	r3, #10
 8016a74:	9302      	str	r3, [sp, #8]
 8016a76:	2301      	movs	r3, #1
 8016a78:	9301      	str	r3, [sp, #4]
 8016a7a:	f107 030c 	add.w	r3, r7, #12
 8016a7e:	9300      	str	r3, [sp, #0]
 8016a80:	2301      	movs	r3, #1
 8016a82:	f7f2 ffad 	bl	80099e0 <HAL_I2C_Mem_Write>
}
 8016a86:	bf00      	nop
 8016a88:	3710      	adds	r7, #16
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
	...

08016a90 <_ZN6ST7789C1EPttP19__SPI_HandleTypeDefP12GPIO_TypeDeftt>:
#include "cmsis_os.h"

extern volatile bool oneTransmitting;
extern volatile bool threeTransmitting;

ST7789::ST7789(uint16_t *dispPtr, uint16_t dispSize, SPI_HandleTypeDef *hspi, GPIO_TypeDef *gpio, uint16_t DCX, uint16_t RSVD) {
 8016a90:	b480      	push	{r7}
 8016a92:	b085      	sub	sp, #20
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	603b      	str	r3, [r7, #0]
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	80fb      	strh	r3, [r7, #6]
 8016aa0:	4a0d      	ldr	r2, [pc, #52]	; (8016ad8 <_ZN6ST7789C1EPttP19__SPI_HandleTypeDefP12GPIO_TypeDeftt+0x48>)
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	601a      	str	r2, [r3, #0]
	displayMemory = dispPtr;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	68ba      	ldr	r2, [r7, #8]
 8016aaa:	605a      	str	r2, [r3, #4]
	displayMemorySize = dispSize;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	88fa      	ldrh	r2, [r7, #6]
 8016ab0:	811a      	strh	r2, [r3, #8]
	_hspi = hspi;
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	683a      	ldr	r2, [r7, #0]
 8016ab6:	60da      	str	r2, [r3, #12]
	_gpio = gpio;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	69ba      	ldr	r2, [r7, #24]
 8016abc:	611a      	str	r2, [r3, #16]
	_DCX = DCX;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	8bba      	ldrh	r2, [r7, #28]
 8016ac2:	829a      	strh	r2, [r3, #20]
	_RSVD = RSVD;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	8c3a      	ldrh	r2, [r7, #32]
 8016ac8:	82da      	strh	r2, [r3, #22]

//	_nucleoAddress = 0;
}
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	4618      	mov	r0, r3
 8016ace:	3714      	adds	r7, #20
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr
 8016ad8:	0803d378 	.word	0x0803d378

08016adc <_ZN6ST7789D1Ev>:

ST7789::~ST7789() {
 8016adc:	b480      	push	{r7}
 8016ade:	b083      	sub	sp, #12
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	4a04      	ldr	r2, [pc, #16]	; (8016af8 <_ZN6ST7789D1Ev+0x1c>)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	4618      	mov	r0, r3
 8016aee:	370c      	adds	r7, #12
 8016af0:	46bd      	mov	sp, r7
 8016af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af6:	4770      	bx	lr
 8016af8:	0803d378 	.word	0x0803d378

08016afc <_ZN6ST7789D0Ev>:
ST7789::~ST7789() {
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
}
 8016b04:	6878      	ldr	r0, [r7, #4]
 8016b06:	f7ff ffe9 	bl	8016adc <_ZN6ST7789D1Ev>
 8016b0a:	2118      	movs	r1, #24
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f004 fc33 	bl	801b378 <_ZdlPvj>
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4618      	mov	r0, r3
 8016b16:	3708      	adds	r7, #8
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <_ZN6ST778911SPI_WRITE32Em>:

uint16_t ST7789::cords_to_1d(uint16_t x, uint16_t y){
	return LCD_HEIGHT * x + y;
}

void ST7789::SPI_WRITE32(uint32_t bytes) {
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
	uint8_t byte_array[4];
	byte_array[0] = bytes >> 24;
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	0e1b      	lsrs	r3, r3, #24
 8016b2a:	b2db      	uxtb	r3, r3
 8016b2c:	733b      	strb	r3, [r7, #12]
	byte_array[1] = bytes >> 16;
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	0c1b      	lsrs	r3, r3, #16
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	737b      	strb	r3, [r7, #13]
	byte_array[2] = bytes >> 8;
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	0a1b      	lsrs	r3, r3, #8
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	73bb      	strb	r3, [r7, #14]
	byte_array[3] = bytes;
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	b2db      	uxtb	r3, r3
 8016b42:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(_hspi, byte_array, 4, 100);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	68d8      	ldr	r0, [r3, #12]
 8016b48:	f107 010c 	add.w	r1, r7, #12
 8016b4c:	2364      	movs	r3, #100	; 0x64
 8016b4e:	2204      	movs	r2, #4
 8016b50:	f7f7 fa0c 	bl	800df6c <HAL_SPI_Transmit>
}
 8016b54:	bf00      	nop
 8016b56:	3710      	adds	r7, #16
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}

08016b5c <_ZN6ST778911sendCommandEhPhh>:
}

/**
 * This is for commands with parameters
 */
void ST7789::sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes) {
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b086      	sub	sp, #24
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	607a      	str	r2, [r7, #4]
 8016b66:	461a      	mov	r2, r3
 8016b68:	460b      	mov	r3, r1
 8016b6a:	72fb      	strb	r3, [r7, #11]
 8016b6c:	4613      	mov	r3, r2
 8016b6e:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(_gpio, _DCX, GPIO_PIN_RESET); //Command mode
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	6918      	ldr	r0, [r3, #16]
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	8a9b      	ldrh	r3, [r3, #20]
 8016b78:	2200      	movs	r2, #0
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	f7f1 fed6 	bl	800892c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_hspi, &commandByte, 1, 100); // Send the command byte
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	68d8      	ldr	r0, [r3, #12]
 8016b84:	f107 010b 	add.w	r1, r7, #11
 8016b88:	2364      	movs	r3, #100	; 0x64
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	f7f7 f9ee 	bl	800df6c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_gpio, _DCX, GPIO_PIN_SET); //Command mode off
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	6918      	ldr	r0, [r3, #16]
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	8a9b      	ldrh	r3, [r3, #20]
 8016b98:	2201      	movs	r2, #1
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	f7f1 fec6 	bl	800892c <HAL_GPIO_WritePin>

	for (int i = 0; i < numDataBytes; i++) {
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	617b      	str	r3, [r7, #20]
 8016ba4:	7abb      	ldrb	r3, [r7, #10]
 8016ba6:	697a      	ldr	r2, [r7, #20]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	da0e      	bge.n	8016bca <_ZN6ST778911sendCommandEhPhh+0x6e>
		HAL_SPI_Transmit(_hspi, dataBytes, numDataBytes, 100); // Send the data bytes
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	68d8      	ldr	r0, [r3, #12]
 8016bb0:	7abb      	ldrb	r3, [r7, #10]
 8016bb2:	b29a      	uxth	r2, r3
 8016bb4:	2364      	movs	r3, #100	; 0x64
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	f7f7 f9d8 	bl	800df6c <HAL_SPI_Transmit>
		dataBytes++;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < numDataBytes; i++) {
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	3301      	adds	r3, #1
 8016bc6:	617b      	str	r3, [r7, #20]
 8016bc8:	e7ec      	b.n	8016ba4 <_ZN6ST778911sendCommandEhPhh+0x48>
	}
}
 8016bca:	bf00      	nop
 8016bcc:	3718      	adds	r7, #24
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}

08016bd2 <_ZN6ST778912writeCommandEh>:

/**
 * This is for commands without parameters
 */
void ST7789::writeCommand(uint8_t cmd) {
 8016bd2:	b580      	push	{r7, lr}
 8016bd4:	b082      	sub	sp, #8
 8016bd6:	af00      	add	r7, sp, #0
 8016bd8:	6078      	str	r0, [r7, #4]
 8016bda:	460b      	mov	r3, r1
 8016bdc:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(_gpio, _DCX, GPIO_PIN_RESET);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6918      	ldr	r0, [r3, #16]
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	8a9b      	ldrh	r3, [r3, #20]
 8016be6:	2200      	movs	r2, #0
 8016be8:	4619      	mov	r1, r3
 8016bea:	f7f1 fe9f 	bl	800892c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_hspi, &cmd, sizeof(cmd), 100);
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	68d8      	ldr	r0, [r3, #12]
 8016bf2:	1cf9      	adds	r1, r7, #3
 8016bf4:	2364      	movs	r3, #100	; 0x64
 8016bf6:	2201      	movs	r2, #1
 8016bf8:	f7f7 f9b8 	bl	800df6c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_gpio, _DCX, GPIO_PIN_SET);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6918      	ldr	r0, [r3, #16]
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	8a9b      	ldrh	r3, [r3, #20]
 8016c04:	2201      	movs	r2, #1
 8016c06:	4619      	mov	r1, r3
 8016c08:	f7f1 fe90 	bl	800892c <HAL_GPIO_WritePin>
}
 8016c0c:	bf00      	nop
 8016c0e:	3708      	adds	r7, #8
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}

08016c14 <_ZN6ST778911displayInitEPht>:

void ST7789::displayInit(uint8_t *addr, uint16_t nucleo_addr) {
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b086      	sub	sp, #24
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	60f8      	str	r0, [r7, #12]
 8016c1c:	60b9      	str	r1, [r7, #8]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	80fb      	strh	r3, [r7, #6]
//	_nucleoAddress = nucleo_addr;

	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	numCommands = *(addr++);   // Number of commands to follow
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	1c5a      	adds	r2, r3, #1
 8016c26:	60ba      	str	r2, [r7, #8]
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	75fb      	strb	r3, [r7, #23]
	while (numCommands--) {                 // For each command...
 8016c2c:	7dfb      	ldrb	r3, [r7, #23]
 8016c2e:	1e5a      	subs	r2, r3, #1
 8016c30:	75fa      	strb	r2, [r7, #23]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	bf14      	ite	ne
 8016c36:	2301      	movne	r3, #1
 8016c38:	2300      	moveq	r3, #0
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d02f      	beq.n	8016ca0 <_ZN6ST778911displayInitEPht+0x8c>
		cmd = *(addr++);         // Read command
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	1c5a      	adds	r2, r3, #1
 8016c44:	60ba      	str	r2, [r7, #8]
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	74fb      	strb	r3, [r7, #19]
		numArgs = *(addr++);    // Number of args to follow
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	1c5a      	adds	r2, r3, #1
 8016c4e:	60ba      	str	r2, [r7, #8]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	74bb      	strb	r3, [r7, #18]
		ms = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 8016c54:	7cbb      	ldrb	r3, [r7, #18]
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016c5c:	82bb      	strh	r3, [r7, #20]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 8016c5e:	7cbb      	ldrb	r3, [r7, #18]
 8016c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c64:	74bb      	strb	r3, [r7, #18]
		sendCommand(cmd, addr, numArgs);
 8016c66:	7cbb      	ldrb	r3, [r7, #18]
 8016c68:	7cf9      	ldrb	r1, [r7, #19]
 8016c6a:	68ba      	ldr	r2, [r7, #8]
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	f7ff ff75 	bl	8016b5c <_ZN6ST778911sendCommandEhPhh>
		addr += numArgs;
 8016c72:	7cbb      	ldrb	r3, [r7, #18]
 8016c74:	68ba      	ldr	r2, [r7, #8]
 8016c76:	4413      	add	r3, r2
 8016c78:	60bb      	str	r3, [r7, #8]

		if (ms) {
 8016c7a:	8abb      	ldrh	r3, [r7, #20]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d0d5      	beq.n	8016c2c <_ZN6ST778911displayInitEPht+0x18>
			ms = *(addr++); // Read post-command delay time (ms)
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	1c5a      	adds	r2, r3, #1
 8016c84:	60ba      	str	r2, [r7, #8]
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	82bb      	strh	r3, [r7, #20]
			if (ms == 255)
 8016c8a:	8abb      	ldrh	r3, [r7, #20]
 8016c8c:	2bff      	cmp	r3, #255	; 0xff
 8016c8e:	d102      	bne.n	8016c96 <_ZN6ST778911displayInitEPht+0x82>
				ms = 500;     // If 255, delay for 500 ms
 8016c90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016c94:	82bb      	strh	r3, [r7, #20]
			HAL_Delay(ms);
 8016c96:	8abb      	ldrh	r3, [r7, #20]
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7ed fd4f 	bl	800473c <HAL_Delay>
	while (numCommands--) {                 // For each command...
 8016c9e:	e7c5      	b.n	8016c2c <_ZN6ST778911displayInitEPht+0x18>
		}
	}
}
 8016ca0:	bf00      	nop
 8016ca2:	3718      	adds	r7, #24
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <_ZN6ST778913setAddrWindowEtttt>:

void ST7789::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b086      	sub	sp, #24
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	4608      	mov	r0, r1
 8016cb2:	4611      	mov	r1, r2
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	817b      	strh	r3, [r7, #10]
 8016cba:	460b      	mov	r3, r1
 8016cbc:	813b      	strh	r3, [r7, #8]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	80fb      	strh	r3, [r7, #6]
	uint32_t xa = ((uint32_t) x << 16) | (x + w - 1);
 8016cc2:	897b      	ldrh	r3, [r7, #10]
 8016cc4:	041b      	lsls	r3, r3, #16
 8016cc6:	8979      	ldrh	r1, [r7, #10]
 8016cc8:	88fa      	ldrh	r2, [r7, #6]
 8016cca:	440a      	add	r2, r1
 8016ccc:	3a01      	subs	r2, #1
 8016cce:	4313      	orrs	r3, r2
 8016cd0:	617b      	str	r3, [r7, #20]
	uint32_t ya = ((uint32_t) y << 16) | (y + h - 1);
 8016cd2:	893b      	ldrh	r3, [r7, #8]
 8016cd4:	041b      	lsls	r3, r3, #16
 8016cd6:	8939      	ldrh	r1, [r7, #8]
 8016cd8:	8c3a      	ldrh	r2, [r7, #32]
 8016cda:	440a      	add	r2, r1
 8016cdc:	3a01      	subs	r2, #1
 8016cde:	4313      	orrs	r3, r2
 8016ce0:	613b      	str	r3, [r7, #16]

	writeCommand(ST77XX_CASET); // Column addr set
 8016ce2:	212a      	movs	r1, #42	; 0x2a
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f7ff ff74 	bl	8016bd2 <_ZN6ST778912writeCommandEh>
	SPI_WRITE32(xa);
 8016cea:	6979      	ldr	r1, [r7, #20]
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	f7ff ff15 	bl	8016b1c <_ZN6ST778911SPI_WRITE32Em>

	writeCommand(ST77XX_RASET); // Row addr set
 8016cf2:	212b      	movs	r1, #43	; 0x2b
 8016cf4:	68f8      	ldr	r0, [r7, #12]
 8016cf6:	f7ff ff6c 	bl	8016bd2 <_ZN6ST778912writeCommandEh>
	SPI_WRITE32(ya);
 8016cfa:	6939      	ldr	r1, [r7, #16]
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f7ff ff0d 	bl	8016b1c <_ZN6ST778911SPI_WRITE32Em>

	writeCommand(ST77XX_RAMWR); // write to RAM
 8016d02:	212c      	movs	r1, #44	; 0x2c
 8016d04:	68f8      	ldr	r0, [r7, #12]
 8016d06:	f7ff ff64 	bl	8016bd2 <_ZN6ST778912writeCommandEh>
}
 8016d0a:	bf00      	nop
 8016d0c:	3718      	adds	r7, #24
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}
	...

08016d14 <_ZN6ST778911writeScreenEPt>:
		threeTransmitting = true;
		HAL_SPI_Transmit_DMA(_hspi, (uint8_t *) t_screen_buffer, size);
	}
}

void ST7789::writeScreen(uint16_t *t_screen_buffer) {
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b086      	sub	sp, #24
 8016d18:	af02      	add	r7, sp, #8
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
	uint16_t *first_buffer = t_screen_buffer;
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	60fb      	str	r3, [r7, #12]
	uint16_t *second_buffer = t_screen_buffer + displayMemorySize / 2;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	891b      	ldrh	r3, [r3, #8]
 8016d26:	085b      	lsrs	r3, r3, #1
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	683a      	ldr	r2, [r7, #0]
 8016d2e:	4413      	add	r3, r2
 8016d30:	60bb      	str	r3, [r7, #8]

	setAddrWindow(0, 0, 240, 240);
 8016d32:	23f0      	movs	r3, #240	; 0xf0
 8016d34:	9300      	str	r3, [sp, #0]
 8016d36:	23f0      	movs	r3, #240	; 0xf0
 8016d38:	2200      	movs	r2, #0
 8016d3a:	2100      	movs	r1, #0
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7ff ffb3 	bl	8016ca8 <_ZN6ST778913setAddrWindowEtttt>

	if(_hspi->Instance == SPI1){
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	68db      	ldr	r3, [r3, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4a28      	ldr	r2, [pc, #160]	; (8016dec <_ZN6ST778911writeScreenEPt+0xd8>)
 8016d4a:	4293      	cmp	r3, r2
 8016d4c:	d122      	bne.n	8016d94 <_ZN6ST778911writeScreenEPt+0x80>
		while(oneTransmitting){}
 8016d4e:	4b28      	ldr	r3, [pc, #160]	; (8016df0 <_ZN6ST778911writeScreenEPt+0xdc>)
 8016d50:	781b      	ldrb	r3, [r3, #0]
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d000      	beq.n	8016d5a <_ZN6ST778911writeScreenEPt+0x46>
 8016d58:	e7f9      	b.n	8016d4e <_ZN6ST778911writeScreenEPt+0x3a>
		oneTransmitting = true;
 8016d5a:	4b25      	ldr	r3, [pc, #148]	; (8016df0 <_ZN6ST778911writeScreenEPt+0xdc>)
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(_hspi, (uint8_t *) first_buffer, displayMemorySize);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	68d8      	ldr	r0, [r3, #12]
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	891b      	ldrh	r3, [r3, #8]
 8016d68:	461a      	mov	r2, r3
 8016d6a:	68f9      	ldr	r1, [r7, #12]
 8016d6c:	f7f7 ffce 	bl	800ed0c <HAL_SPI_Transmit_DMA>

		while(oneTransmitting){}
 8016d70:	4b1f      	ldr	r3, [pc, #124]	; (8016df0 <_ZN6ST778911writeScreenEPt+0xdc>)
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	b2db      	uxtb	r3, r3
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d000      	beq.n	8016d7c <_ZN6ST778911writeScreenEPt+0x68>
 8016d7a:	e7f9      	b.n	8016d70 <_ZN6ST778911writeScreenEPt+0x5c>
		oneTransmitting = true;
 8016d7c:	4b1c      	ldr	r3, [pc, #112]	; (8016df0 <_ZN6ST778911writeScreenEPt+0xdc>)
 8016d7e:	2201      	movs	r2, #1
 8016d80:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(_hspi, (uint8_t *) second_buffer, displayMemorySize);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	68d8      	ldr	r0, [r3, #12]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	891b      	ldrh	r3, [r3, #8]
 8016d8a:	461a      	mov	r2, r3
 8016d8c:	68b9      	ldr	r1, [r7, #8]
 8016d8e:	f7f7 ffbd 	bl	800ed0c <HAL_SPI_Transmit_DMA>

		while(threeTransmitting){}
		threeTransmitting = true;
		HAL_SPI_Transmit_DMA(_hspi, (uint8_t *) second_buffer, displayMemorySize);
	}
}
 8016d92:	e027      	b.n	8016de4 <_ZN6ST778911writeScreenEPt+0xd0>
	}else if(_hspi->Instance == SPI3){
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	4a16      	ldr	r2, [pc, #88]	; (8016df4 <_ZN6ST778911writeScreenEPt+0xe0>)
 8016d9c:	4293      	cmp	r3, r2
 8016d9e:	d121      	bne.n	8016de4 <_ZN6ST778911writeScreenEPt+0xd0>
		while(threeTransmitting){}
 8016da0:	4b15      	ldr	r3, [pc, #84]	; (8016df8 <_ZN6ST778911writeScreenEPt+0xe4>)
 8016da2:	781b      	ldrb	r3, [r3, #0]
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d000      	beq.n	8016dac <_ZN6ST778911writeScreenEPt+0x98>
 8016daa:	e7f9      	b.n	8016da0 <_ZN6ST778911writeScreenEPt+0x8c>
		threeTransmitting = true;
 8016dac:	4b12      	ldr	r3, [pc, #72]	; (8016df8 <_ZN6ST778911writeScreenEPt+0xe4>)
 8016dae:	2201      	movs	r2, #1
 8016db0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(_hspi, (uint8_t *) first_buffer, displayMemorySize);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	68d8      	ldr	r0, [r3, #12]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	891b      	ldrh	r3, [r3, #8]
 8016dba:	461a      	mov	r2, r3
 8016dbc:	68f9      	ldr	r1, [r7, #12]
 8016dbe:	f7f7 ffa5 	bl	800ed0c <HAL_SPI_Transmit_DMA>
		while(threeTransmitting){}
 8016dc2:	4b0d      	ldr	r3, [pc, #52]	; (8016df8 <_ZN6ST778911writeScreenEPt+0xe4>)
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	b2db      	uxtb	r3, r3
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d000      	beq.n	8016dce <_ZN6ST778911writeScreenEPt+0xba>
 8016dcc:	e7f9      	b.n	8016dc2 <_ZN6ST778911writeScreenEPt+0xae>
		threeTransmitting = true;
 8016dce:	4b0a      	ldr	r3, [pc, #40]	; (8016df8 <_ZN6ST778911writeScreenEPt+0xe4>)
 8016dd0:	2201      	movs	r2, #1
 8016dd2:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(_hspi, (uint8_t *) second_buffer, displayMemorySize);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	68d8      	ldr	r0, [r3, #12]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	891b      	ldrh	r3, [r3, #8]
 8016ddc:	461a      	mov	r2, r3
 8016dde:	68b9      	ldr	r1, [r7, #8]
 8016de0:	f7f7 ff94 	bl	800ed0c <HAL_SPI_Transmit_DMA>
}
 8016de4:	bf00      	nop
 8016de6:	3710      	adds	r7, #16
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}
 8016dec:	40013000 	.word	0x40013000
 8016df0:	2400143d 	.word	0x2400143d
 8016df4:	40003c00 	.word	0x40003c00
 8016df8:	2400143e 	.word	0x2400143e

08016dfc <ST7789_writeScreen>:

//	uint16_t ST7789_getAddr(ST7789 *obj){
//		return obj->_nucleoAddress;
//	}

	void ST7789_writeScreen(ST7789 *obj, uint16_t *t_screen_buffer){
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
 8016e04:	6039      	str	r1, [r7, #0]
		obj->writeScreen(t_screen_buffer);
 8016e06:	6839      	ldr	r1, [r7, #0]
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f7ff ff83 	bl	8016d14 <_ZN6ST778911writeScreenEPt>
	}
 8016e0e:	bf00      	nop
 8016e10:	3708      	adds	r7, #8
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}
	...

08016e18 <__NVIC_SetPriority>:
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b083      	sub	sp, #12
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	4603      	mov	r3, r0
 8016e20:	6039      	str	r1, [r7, #0]
 8016e22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	db0a      	blt.n	8016e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	b2da      	uxtb	r2, r3
 8016e30:	490c      	ldr	r1, [pc, #48]	; (8016e64 <__NVIC_SetPriority+0x4c>)
 8016e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e36:	0112      	lsls	r2, r2, #4
 8016e38:	b2d2      	uxtb	r2, r2
 8016e3a:	440b      	add	r3, r1
 8016e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016e40:	e00a      	b.n	8016e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	b2da      	uxtb	r2, r3
 8016e46:	4908      	ldr	r1, [pc, #32]	; (8016e68 <__NVIC_SetPriority+0x50>)
 8016e48:	88fb      	ldrh	r3, [r7, #6]
 8016e4a:	f003 030f 	and.w	r3, r3, #15
 8016e4e:	3b04      	subs	r3, #4
 8016e50:	0112      	lsls	r2, r2, #4
 8016e52:	b2d2      	uxtb	r2, r2
 8016e54:	440b      	add	r3, r1
 8016e56:	761a      	strb	r2, [r3, #24]
}
 8016e58:	bf00      	nop
 8016e5a:	370c      	adds	r7, #12
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e62:	4770      	bx	lr
 8016e64:	e000e100 	.word	0xe000e100
 8016e68:	e000ed00 	.word	0xe000ed00

08016e6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016e70:	4b05      	ldr	r3, [pc, #20]	; (8016e88 <SysTick_Handler+0x1c>)
 8016e72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016e74:	f002 fb20 	bl	80194b8 <xTaskGetSchedulerState>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b01      	cmp	r3, #1
 8016e7c:	d001      	beq.n	8016e82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016e7e:	f003 fac3 	bl	801a408 <xPortSysTickHandler>
  }
}
 8016e82:	bf00      	nop
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	e000e010 	.word	0xe000e010

08016e8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016e90:	2100      	movs	r1, #0
 8016e92:	f06f 0004 	mvn.w	r0, #4
 8016e96:	f7ff ffbf 	bl	8016e18 <__NVIC_SetPriority>
#endif
}
 8016e9a:	bf00      	nop
 8016e9c:	bd80      	pop	{r7, pc}
	...

08016ea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016ea0:	b480      	push	{r7}
 8016ea2:	b083      	sub	sp, #12
 8016ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ea6:	f3ef 8305 	mrs	r3, IPSR
 8016eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8016eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d003      	beq.n	8016eba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016eb2:	f06f 0305 	mvn.w	r3, #5
 8016eb6:	607b      	str	r3, [r7, #4]
 8016eb8:	e00c      	b.n	8016ed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016eba:	4b0a      	ldr	r3, [pc, #40]	; (8016ee4 <osKernelInitialize+0x44>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d105      	bne.n	8016ece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016ec2:	4b08      	ldr	r3, [pc, #32]	; (8016ee4 <osKernelInitialize+0x44>)
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016ec8:	2300      	movs	r3, #0
 8016eca:	607b      	str	r3, [r7, #4]
 8016ecc:	e002      	b.n	8016ed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016ece:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016ed4:	687b      	ldr	r3, [r7, #4]
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	370c      	adds	r7, #12
 8016eda:	46bd      	mov	sp, r7
 8016edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee0:	4770      	bx	lr
 8016ee2:	bf00      	nop
 8016ee4:	2400195c 	.word	0x2400195c

08016ee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016eee:	f3ef 8305 	mrs	r3, IPSR
 8016ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8016ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d003      	beq.n	8016f02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016efa:	f06f 0305 	mvn.w	r3, #5
 8016efe:	607b      	str	r3, [r7, #4]
 8016f00:	e010      	b.n	8016f24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016f02:	4b0b      	ldr	r3, [pc, #44]	; (8016f30 <osKernelStart+0x48>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d109      	bne.n	8016f1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016f0a:	f7ff ffbf 	bl	8016e8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016f0e:	4b08      	ldr	r3, [pc, #32]	; (8016f30 <osKernelStart+0x48>)
 8016f10:	2202      	movs	r2, #2
 8016f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016f14:	f001 fe68 	bl	8018be8 <vTaskStartScheduler>
      stat = osOK;
 8016f18:	2300      	movs	r3, #0
 8016f1a:	607b      	str	r3, [r7, #4]
 8016f1c:	e002      	b.n	8016f24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f24:	687b      	ldr	r3, [r7, #4]
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3708      	adds	r7, #8
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	2400195c 	.word	0x2400195c

08016f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b08e      	sub	sp, #56	; 0x38
 8016f38:	af04      	add	r7, sp, #16
 8016f3a:	60f8      	str	r0, [r7, #12]
 8016f3c:	60b9      	str	r1, [r7, #8]
 8016f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016f40:	2300      	movs	r3, #0
 8016f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f44:	f3ef 8305 	mrs	r3, IPSR
 8016f48:	617b      	str	r3, [r7, #20]
  return(result);
 8016f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d17e      	bne.n	801704e <osThreadNew+0x11a>
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d07b      	beq.n	801704e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016f56:	2380      	movs	r3, #128	; 0x80
 8016f58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016f5a:	2318      	movs	r3, #24
 8016f5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016f62:	f04f 33ff 	mov.w	r3, #4294967295
 8016f66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d045      	beq.n	8016ffa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d002      	beq.n	8016f7c <osThreadNew+0x48>
        name = attr->name;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	699b      	ldr	r3, [r3, #24]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d002      	beq.n	8016f8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	699b      	ldr	r3, [r3, #24]
 8016f88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d008      	beq.n	8016fa2 <osThreadNew+0x6e>
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	2b38      	cmp	r3, #56	; 0x38
 8016f94:	d805      	bhi.n	8016fa2 <osThreadNew+0x6e>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	f003 0301 	and.w	r3, r3, #1
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d001      	beq.n	8016fa6 <osThreadNew+0x72>
        return (NULL);
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	e054      	b.n	8017050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	695b      	ldr	r3, [r3, #20]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d003      	beq.n	8016fb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	695b      	ldr	r3, [r3, #20]
 8016fb2:	089b      	lsrs	r3, r3, #2
 8016fb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	689b      	ldr	r3, [r3, #8]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d00e      	beq.n	8016fdc <osThreadNew+0xa8>
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	68db      	ldr	r3, [r3, #12]
 8016fc2:	2b67      	cmp	r3, #103	; 0x67
 8016fc4:	d90a      	bls.n	8016fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d006      	beq.n	8016fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	695b      	ldr	r3, [r3, #20]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d002      	beq.n	8016fdc <osThreadNew+0xa8>
        mem = 1;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	61bb      	str	r3, [r7, #24]
 8016fda:	e010      	b.n	8016ffe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	689b      	ldr	r3, [r3, #8]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d10c      	bne.n	8016ffe <osThreadNew+0xca>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d108      	bne.n	8016ffe <osThreadNew+0xca>
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	691b      	ldr	r3, [r3, #16]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d104      	bne.n	8016ffe <osThreadNew+0xca>
          mem = 0;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	61bb      	str	r3, [r7, #24]
 8016ff8:	e001      	b.n	8016ffe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	2b01      	cmp	r3, #1
 8017002:	d110      	bne.n	8017026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017008:	687a      	ldr	r2, [r7, #4]
 801700a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801700c:	9202      	str	r2, [sp, #8]
 801700e:	9301      	str	r3, [sp, #4]
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	9300      	str	r3, [sp, #0]
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	6a3a      	ldr	r2, [r7, #32]
 8017018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801701a:	68f8      	ldr	r0, [r7, #12]
 801701c:	f001 fb34 	bl	8018688 <xTaskCreateStatic>
 8017020:	4603      	mov	r3, r0
 8017022:	613b      	str	r3, [r7, #16]
 8017024:	e013      	b.n	801704e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017026:	69bb      	ldr	r3, [r7, #24]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d110      	bne.n	801704e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801702c:	6a3b      	ldr	r3, [r7, #32]
 801702e:	b29a      	uxth	r2, r3
 8017030:	f107 0310 	add.w	r3, r7, #16
 8017034:	9301      	str	r3, [sp, #4]
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	9300      	str	r3, [sp, #0]
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801703e:	68f8      	ldr	r0, [r7, #12]
 8017040:	f001 fb7f 	bl	8018742 <xTaskCreate>
 8017044:	4603      	mov	r3, r0
 8017046:	2b01      	cmp	r3, #1
 8017048:	d001      	beq.n	801704e <osThreadNew+0x11a>
            hTask = NULL;
 801704a:	2300      	movs	r3, #0
 801704c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801704e:	693b      	ldr	r3, [r7, #16]
}
 8017050:	4618      	mov	r0, r3
 8017052:	3728      	adds	r7, #40	; 0x28
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017058:	b580      	push	{r7, lr}
 801705a:	b086      	sub	sp, #24
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017064:	f3ef 8305 	mrs	r3, IPSR
 8017068:	60fb      	str	r3, [r7, #12]
  return(result);
 801706a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801706c:	2b00      	cmp	r3, #0
 801706e:	d003      	beq.n	8017078 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8017070:	f06f 0305 	mvn.w	r3, #5
 8017074:	617b      	str	r3, [r7, #20]
 8017076:	e00b      	b.n	8017090 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8017078:	693b      	ldr	r3, [r7, #16]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d103      	bne.n	8017086 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801707e:	f06f 0303 	mvn.w	r3, #3
 8017082:	617b      	str	r3, [r7, #20]
 8017084:	e004      	b.n	8017090 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8017086:	2300      	movs	r3, #0
 8017088:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801708a:	6938      	ldr	r0, [r7, #16]
 801708c:	f001 fca6 	bl	80189dc <vTaskSuspend>
  }

  return (stat);
 8017090:	697b      	ldr	r3, [r7, #20]
}
 8017092:	4618      	mov	r0, r3
 8017094:	3718      	adds	r7, #24
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}

0801709a <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 801709a:	b580      	push	{r7, lr}
 801709c:	b086      	sub	sp, #24
 801709e:	af00      	add	r7, sp, #0
 80170a0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170a6:	f3ef 8305 	mrs	r3, IPSR
 80170aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80170ac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d003      	beq.n	80170ba <osThreadResume+0x20>
    stat = osErrorISR;
 80170b2:	f06f 0305 	mvn.w	r3, #5
 80170b6:	617b      	str	r3, [r7, #20]
 80170b8:	e00b      	b.n	80170d2 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d103      	bne.n	80170c8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80170c0:	f06f 0303 	mvn.w	r3, #3
 80170c4:	617b      	str	r3, [r7, #20]
 80170c6:	e004      	b.n	80170d2 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80170c8:	2300      	movs	r3, #0
 80170ca:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80170cc:	6938      	ldr	r0, [r7, #16]
 80170ce:	f001 fd2d 	bl	8018b2c <vTaskResume>
  }

  return (stat);
 80170d2:	697b      	ldr	r3, [r7, #20]
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	3718      	adds	r7, #24
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}

080170dc <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80170dc:	b580      	push	{r7, lr}
 80170de:	b084      	sub	sp, #16
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f002 ffad 	bl	801a044 <pvTimerGetTimerID>
 80170ea:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d005      	beq.n	80170fe <TimerCallback+0x22>
    callb->func (callb->arg);
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	68fa      	ldr	r2, [r7, #12]
 80170f8:	6852      	ldr	r2, [r2, #4]
 80170fa:	4610      	mov	r0, r2
 80170fc:	4798      	blx	r3
  }
}
 80170fe:	bf00      	nop
 8017100:	3710      	adds	r7, #16
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}
	...

08017108 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8017108:	b580      	push	{r7, lr}
 801710a:	b08c      	sub	sp, #48	; 0x30
 801710c:	af02      	add	r7, sp, #8
 801710e:	60f8      	str	r0, [r7, #12]
 8017110:	607a      	str	r2, [r7, #4]
 8017112:	603b      	str	r3, [r7, #0]
 8017114:	460b      	mov	r3, r1
 8017116:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8017118:	2300      	movs	r3, #0
 801711a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801711c:	f3ef 8305 	mrs	r3, IPSR
 8017120:	613b      	str	r3, [r7, #16]
  return(result);
 8017122:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8017124:	2b00      	cmp	r3, #0
 8017126:	d163      	bne.n	80171f0 <osTimerNew+0xe8>
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d060      	beq.n	80171f0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801712e:	2008      	movs	r0, #8
 8017130:	f003 f9fa 	bl	801a528 <pvPortMalloc>
 8017134:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d059      	beq.n	80171f0 <osTimerNew+0xe8>
      callb->func = func;
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	68fa      	ldr	r2, [r7, #12]
 8017140:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	687a      	ldr	r2, [r7, #4]
 8017146:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8017148:	7afb      	ldrb	r3, [r7, #11]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d102      	bne.n	8017154 <osTimerNew+0x4c>
        reload = pdFALSE;
 801714e:	2300      	movs	r3, #0
 8017150:	61fb      	str	r3, [r7, #28]
 8017152:	e001      	b.n	8017158 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8017154:	2301      	movs	r3, #1
 8017156:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8017158:	f04f 33ff 	mov.w	r3, #4294967295
 801715c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 801715e:	2300      	movs	r3, #0
 8017160:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d01c      	beq.n	80171a2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d002      	beq.n	8017176 <osTimerNew+0x6e>
          name = attr->name;
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	689b      	ldr	r3, [r3, #8]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d006      	beq.n	801718c <osTimerNew+0x84>
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	68db      	ldr	r3, [r3, #12]
 8017182:	2b2b      	cmp	r3, #43	; 0x2b
 8017184:	d902      	bls.n	801718c <osTimerNew+0x84>
          mem = 1;
 8017186:	2301      	movs	r3, #1
 8017188:	61bb      	str	r3, [r7, #24]
 801718a:	e00c      	b.n	80171a6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	689b      	ldr	r3, [r3, #8]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d108      	bne.n	80171a6 <osTimerNew+0x9e>
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	68db      	ldr	r3, [r3, #12]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d104      	bne.n	80171a6 <osTimerNew+0x9e>
            mem = 0;
 801719c:	2300      	movs	r3, #0
 801719e:	61bb      	str	r3, [r7, #24]
 80171a0:	e001      	b.n	80171a6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80171a6:	69bb      	ldr	r3, [r7, #24]
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d10c      	bne.n	80171c6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	689b      	ldr	r3, [r3, #8]
 80171b0:	9301      	str	r3, [sp, #4]
 80171b2:	4b12      	ldr	r3, [pc, #72]	; (80171fc <osTimerNew+0xf4>)
 80171b4:	9300      	str	r3, [sp, #0]
 80171b6:	697b      	ldr	r3, [r7, #20]
 80171b8:	69fa      	ldr	r2, [r7, #28]
 80171ba:	2101      	movs	r1, #1
 80171bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171be:	f002 fbc2 	bl	8019946 <xTimerCreateStatic>
 80171c2:	6238      	str	r0, [r7, #32]
 80171c4:	e00b      	b.n	80171de <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80171c6:	69bb      	ldr	r3, [r7, #24]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d108      	bne.n	80171de <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80171cc:	4b0b      	ldr	r3, [pc, #44]	; (80171fc <osTimerNew+0xf4>)
 80171ce:	9300      	str	r3, [sp, #0]
 80171d0:	697b      	ldr	r3, [r7, #20]
 80171d2:	69fa      	ldr	r2, [r7, #28]
 80171d4:	2101      	movs	r1, #1
 80171d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171d8:	f002 fb94 	bl	8019904 <xTimerCreate>
 80171dc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80171de:	6a3b      	ldr	r3, [r7, #32]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d105      	bne.n	80171f0 <osTimerNew+0xe8>
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d002      	beq.n	80171f0 <osTimerNew+0xe8>
        vPortFree (callb);
 80171ea:	6978      	ldr	r0, [r7, #20]
 80171ec:	f003 fa68 	bl	801a6c0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80171f0:	6a3b      	ldr	r3, [r7, #32]
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3728      	adds	r7, #40	; 0x28
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	080170dd 	.word	0x080170dd

08017200 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8017200:	b580      	push	{r7, lr}
 8017202:	b088      	sub	sp, #32
 8017204:	af02      	add	r7, sp, #8
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801720e:	f3ef 8305 	mrs	r3, IPSR
 8017212:	60fb      	str	r3, [r7, #12]
  return(result);
 8017214:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017216:	2b00      	cmp	r3, #0
 8017218:	d003      	beq.n	8017222 <osTimerStart+0x22>
    stat = osErrorISR;
 801721a:	f06f 0305 	mvn.w	r3, #5
 801721e:	617b      	str	r3, [r7, #20]
 8017220:	e017      	b.n	8017252 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d103      	bne.n	8017230 <osTimerStart+0x30>
    stat = osErrorParameter;
 8017228:	f06f 0303 	mvn.w	r3, #3
 801722c:	617b      	str	r3, [r7, #20]
 801722e:	e010      	b.n	8017252 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8017230:	2300      	movs	r3, #0
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	2300      	movs	r3, #0
 8017236:	683a      	ldr	r2, [r7, #0]
 8017238:	2104      	movs	r1, #4
 801723a:	6938      	ldr	r0, [r7, #16]
 801723c:	f002 fbfc 	bl	8019a38 <xTimerGenericCommand>
 8017240:	4603      	mov	r3, r0
 8017242:	2b01      	cmp	r3, #1
 8017244:	d102      	bne.n	801724c <osTimerStart+0x4c>
      stat = osOK;
 8017246:	2300      	movs	r3, #0
 8017248:	617b      	str	r3, [r7, #20]
 801724a:	e002      	b.n	8017252 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 801724c:	f06f 0302 	mvn.w	r3, #2
 8017250:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8017252:	697b      	ldr	r3, [r7, #20]
}
 8017254:	4618      	mov	r0, r3
 8017256:	3718      	adds	r7, #24
 8017258:	46bd      	mov	sp, r7
 801725a:	bd80      	pop	{r7, pc}

0801725c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801725c:	b580      	push	{r7, lr}
 801725e:	b08a      	sub	sp, #40	; 0x28
 8017260:	af02      	add	r7, sp, #8
 8017262:	60f8      	str	r0, [r7, #12]
 8017264:	60b9      	str	r1, [r7, #8]
 8017266:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8017268:	2300      	movs	r3, #0
 801726a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801726c:	f3ef 8305 	mrs	r3, IPSR
 8017270:	613b      	str	r3, [r7, #16]
  return(result);
 8017272:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8017274:	2b00      	cmp	r3, #0
 8017276:	d175      	bne.n	8017364 <osSemaphoreNew+0x108>
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d072      	beq.n	8017364 <osSemaphoreNew+0x108>
 801727e:	68ba      	ldr	r2, [r7, #8]
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	429a      	cmp	r2, r3
 8017284:	d86e      	bhi.n	8017364 <osSemaphoreNew+0x108>
    mem = -1;
 8017286:	f04f 33ff 	mov.w	r3, #4294967295
 801728a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d015      	beq.n	80172be <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	689b      	ldr	r3, [r3, #8]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d006      	beq.n	80172a8 <osSemaphoreNew+0x4c>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	68db      	ldr	r3, [r3, #12]
 801729e:	2b4f      	cmp	r3, #79	; 0x4f
 80172a0:	d902      	bls.n	80172a8 <osSemaphoreNew+0x4c>
        mem = 1;
 80172a2:	2301      	movs	r3, #1
 80172a4:	61bb      	str	r3, [r7, #24]
 80172a6:	e00c      	b.n	80172c2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	689b      	ldr	r3, [r3, #8]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d108      	bne.n	80172c2 <osSemaphoreNew+0x66>
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	68db      	ldr	r3, [r3, #12]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d104      	bne.n	80172c2 <osSemaphoreNew+0x66>
          mem = 0;
 80172b8:	2300      	movs	r3, #0
 80172ba:	61bb      	str	r3, [r7, #24]
 80172bc:	e001      	b.n	80172c2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80172be:	2300      	movs	r3, #0
 80172c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80172c2:	69bb      	ldr	r3, [r7, #24]
 80172c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172c8:	d04c      	beq.n	8017364 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d128      	bne.n	8017322 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80172d0:	69bb      	ldr	r3, [r7, #24]
 80172d2:	2b01      	cmp	r3, #1
 80172d4:	d10a      	bne.n	80172ec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	689b      	ldr	r3, [r3, #8]
 80172da:	2203      	movs	r2, #3
 80172dc:	9200      	str	r2, [sp, #0]
 80172de:	2200      	movs	r2, #0
 80172e0:	2100      	movs	r1, #0
 80172e2:	2001      	movs	r0, #1
 80172e4:	f000 fa2a 	bl	801773c <xQueueGenericCreateStatic>
 80172e8:	61f8      	str	r0, [r7, #28]
 80172ea:	e005      	b.n	80172f8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80172ec:	2203      	movs	r2, #3
 80172ee:	2100      	movs	r1, #0
 80172f0:	2001      	movs	r0, #1
 80172f2:	f000 fa9b 	bl	801782c <xQueueGenericCreate>
 80172f6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d022      	beq.n	8017344 <osSemaphoreNew+0xe8>
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d01f      	beq.n	8017344 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017304:	2300      	movs	r3, #0
 8017306:	2200      	movs	r2, #0
 8017308:	2100      	movs	r1, #0
 801730a:	69f8      	ldr	r0, [r7, #28]
 801730c:	f000 fb56 	bl	80179bc <xQueueGenericSend>
 8017310:	4603      	mov	r3, r0
 8017312:	2b01      	cmp	r3, #1
 8017314:	d016      	beq.n	8017344 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8017316:	69f8      	ldr	r0, [r7, #28]
 8017318:	f000 ffe2 	bl	80182e0 <vQueueDelete>
            hSemaphore = NULL;
 801731c:	2300      	movs	r3, #0
 801731e:	61fb      	str	r3, [r7, #28]
 8017320:	e010      	b.n	8017344 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8017322:	69bb      	ldr	r3, [r7, #24]
 8017324:	2b01      	cmp	r3, #1
 8017326:	d108      	bne.n	801733a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	689b      	ldr	r3, [r3, #8]
 801732c:	461a      	mov	r2, r3
 801732e:	68b9      	ldr	r1, [r7, #8]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f000 fad8 	bl	80178e6 <xQueueCreateCountingSemaphoreStatic>
 8017336:	61f8      	str	r0, [r7, #28]
 8017338:	e004      	b.n	8017344 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801733a:	68b9      	ldr	r1, [r7, #8]
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	f000 fb09 	bl	8017954 <xQueueCreateCountingSemaphore>
 8017342:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8017344:	69fb      	ldr	r3, [r7, #28]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d00c      	beq.n	8017364 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d003      	beq.n	8017358 <osSemaphoreNew+0xfc>
          name = attr->name;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	617b      	str	r3, [r7, #20]
 8017356:	e001      	b.n	801735c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8017358:	2300      	movs	r3, #0
 801735a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801735c:	6979      	ldr	r1, [r7, #20]
 801735e:	69f8      	ldr	r0, [r7, #28]
 8017360:	f001 f90a 	bl	8018578 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8017364:	69fb      	ldr	r3, [r7, #28]
}
 8017366:	4618      	mov	r0, r3
 8017368:	3720      	adds	r7, #32
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}
	...

08017370 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8017370:	b580      	push	{r7, lr}
 8017372:	b086      	sub	sp, #24
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801737e:	2300      	movs	r3, #0
 8017380:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8017382:	693b      	ldr	r3, [r7, #16]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d103      	bne.n	8017390 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8017388:	f06f 0303 	mvn.w	r3, #3
 801738c:	617b      	str	r3, [r7, #20]
 801738e:	e039      	b.n	8017404 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017390:	f3ef 8305 	mrs	r3, IPSR
 8017394:	60fb      	str	r3, [r7, #12]
  return(result);
 8017396:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017398:	2b00      	cmp	r3, #0
 801739a:	d022      	beq.n	80173e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d003      	beq.n	80173aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80173a2:	f06f 0303 	mvn.w	r3, #3
 80173a6:	617b      	str	r3, [r7, #20]
 80173a8:	e02c      	b.n	8017404 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80173aa:	2300      	movs	r3, #0
 80173ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80173ae:	f107 0308 	add.w	r3, r7, #8
 80173b2:	461a      	mov	r2, r3
 80173b4:	2100      	movs	r1, #0
 80173b6:	6938      	ldr	r0, [r7, #16]
 80173b8:	f000 ff12 	bl	80181e0 <xQueueReceiveFromISR>
 80173bc:	4603      	mov	r3, r0
 80173be:	2b01      	cmp	r3, #1
 80173c0:	d003      	beq.n	80173ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80173c2:	f06f 0302 	mvn.w	r3, #2
 80173c6:	617b      	str	r3, [r7, #20]
 80173c8:	e01c      	b.n	8017404 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d019      	beq.n	8017404 <osSemaphoreAcquire+0x94>
 80173d0:	4b0f      	ldr	r3, [pc, #60]	; (8017410 <osSemaphoreAcquire+0xa0>)
 80173d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173d6:	601a      	str	r2, [r3, #0]
 80173d8:	f3bf 8f4f 	dsb	sy
 80173dc:	f3bf 8f6f 	isb	sy
 80173e0:	e010      	b.n	8017404 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80173e2:	6839      	ldr	r1, [r7, #0]
 80173e4:	6938      	ldr	r0, [r7, #16]
 80173e6:	f000 fdef 	bl	8017fc8 <xQueueSemaphoreTake>
 80173ea:	4603      	mov	r3, r0
 80173ec:	2b01      	cmp	r3, #1
 80173ee:	d009      	beq.n	8017404 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d003      	beq.n	80173fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80173f6:	f06f 0301 	mvn.w	r3, #1
 80173fa:	617b      	str	r3, [r7, #20]
 80173fc:	e002      	b.n	8017404 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80173fe:	f06f 0302 	mvn.w	r3, #2
 8017402:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017404:	697b      	ldr	r3, [r7, #20]
}
 8017406:	4618      	mov	r0, r3
 8017408:	3718      	adds	r7, #24
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	e000ed04 	.word	0xe000ed04

08017414 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8017414:	b580      	push	{r7, lr}
 8017416:	b086      	sub	sp, #24
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8017420:	2300      	movs	r3, #0
 8017422:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d103      	bne.n	8017432 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801742a:	f06f 0303 	mvn.w	r3, #3
 801742e:	617b      	str	r3, [r7, #20]
 8017430:	e02c      	b.n	801748c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017432:	f3ef 8305 	mrs	r3, IPSR
 8017436:	60fb      	str	r3, [r7, #12]
  return(result);
 8017438:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801743a:	2b00      	cmp	r3, #0
 801743c:	d01a      	beq.n	8017474 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801743e:	2300      	movs	r3, #0
 8017440:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8017442:	f107 0308 	add.w	r3, r7, #8
 8017446:	4619      	mov	r1, r3
 8017448:	6938      	ldr	r0, [r7, #16]
 801744a:	f000 fc50 	bl	8017cee <xQueueGiveFromISR>
 801744e:	4603      	mov	r3, r0
 8017450:	2b01      	cmp	r3, #1
 8017452:	d003      	beq.n	801745c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8017454:	f06f 0302 	mvn.w	r3, #2
 8017458:	617b      	str	r3, [r7, #20]
 801745a:	e017      	b.n	801748c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d014      	beq.n	801748c <osSemaphoreRelease+0x78>
 8017462:	4b0d      	ldr	r3, [pc, #52]	; (8017498 <osSemaphoreRelease+0x84>)
 8017464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017468:	601a      	str	r2, [r3, #0]
 801746a:	f3bf 8f4f 	dsb	sy
 801746e:	f3bf 8f6f 	isb	sy
 8017472:	e00b      	b.n	801748c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017474:	2300      	movs	r3, #0
 8017476:	2200      	movs	r2, #0
 8017478:	2100      	movs	r1, #0
 801747a:	6938      	ldr	r0, [r7, #16]
 801747c:	f000 fa9e 	bl	80179bc <xQueueGenericSend>
 8017480:	4603      	mov	r3, r0
 8017482:	2b01      	cmp	r3, #1
 8017484:	d002      	beq.n	801748c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8017486:	f06f 0302 	mvn.w	r3, #2
 801748a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801748c:	697b      	ldr	r3, [r7, #20]
}
 801748e:	4618      	mov	r0, r3
 8017490:	3718      	adds	r7, #24
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}
 8017496:	bf00      	nop
 8017498:	e000ed04 	.word	0xe000ed04

0801749c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801749c:	b480      	push	{r7}
 801749e:	b085      	sub	sp, #20
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	4a07      	ldr	r2, [pc, #28]	; (80174c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80174ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80174ae:	68bb      	ldr	r3, [r7, #8]
 80174b0:	4a06      	ldr	r2, [pc, #24]	; (80174cc <vApplicationGetIdleTaskMemory+0x30>)
 80174b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2280      	movs	r2, #128	; 0x80
 80174b8:	601a      	str	r2, [r3, #0]
}
 80174ba:	bf00      	nop
 80174bc:	3714      	adds	r7, #20
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop
 80174c8:	24001960 	.word	0x24001960
 80174cc:	240019c8 	.word	0x240019c8

080174d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80174d0:	b480      	push	{r7}
 80174d2:	b085      	sub	sp, #20
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	4a07      	ldr	r2, [pc, #28]	; (80174fc <vApplicationGetTimerTaskMemory+0x2c>)
 80174e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	4a06      	ldr	r2, [pc, #24]	; (8017500 <vApplicationGetTimerTaskMemory+0x30>)
 80174e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80174ee:	601a      	str	r2, [r3, #0]
}
 80174f0:	bf00      	nop
 80174f2:	3714      	adds	r7, #20
 80174f4:	46bd      	mov	sp, r7
 80174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fa:	4770      	bx	lr
 80174fc:	24001bc8 	.word	0x24001bc8
 8017500:	24001c30 	.word	0x24001c30

08017504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017504:	b480      	push	{r7}
 8017506:	b083      	sub	sp, #12
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f103 0208 	add.w	r2, r3, #8
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f04f 32ff 	mov.w	r2, #4294967295
 801751c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f103 0208 	add.w	r2, r3, #8
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f103 0208 	add.w	r2, r3, #8
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	2200      	movs	r2, #0
 8017536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017538:	bf00      	nop
 801753a:	370c      	adds	r7, #12
 801753c:	46bd      	mov	sp, r7
 801753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017542:	4770      	bx	lr

08017544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017544:	b480      	push	{r7}
 8017546:	b083      	sub	sp, #12
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2200      	movs	r2, #0
 8017550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017552:	bf00      	nop
 8017554:	370c      	adds	r7, #12
 8017556:	46bd      	mov	sp, r7
 8017558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755c:	4770      	bx	lr

0801755e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801755e:	b480      	push	{r7}
 8017560:	b085      	sub	sp, #20
 8017562:	af00      	add	r7, sp, #0
 8017564:	6078      	str	r0, [r7, #4]
 8017566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	68fa      	ldr	r2, [r7, #12]
 8017572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	689a      	ldr	r2, [r3, #8]
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	689b      	ldr	r3, [r3, #8]
 8017580:	683a      	ldr	r2, [r7, #0]
 8017582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	683a      	ldr	r2, [r7, #0]
 8017588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	687a      	ldr	r2, [r7, #4]
 801758e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	1c5a      	adds	r2, r3, #1
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	601a      	str	r2, [r3, #0]
}
 801759a:	bf00      	nop
 801759c:	3714      	adds	r7, #20
 801759e:	46bd      	mov	sp, r7
 80175a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a4:	4770      	bx	lr

080175a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80175a6:	b480      	push	{r7}
 80175a8:	b085      	sub	sp, #20
 80175aa:	af00      	add	r7, sp, #0
 80175ac:	6078      	str	r0, [r7, #4]
 80175ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175bc:	d103      	bne.n	80175c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	691b      	ldr	r3, [r3, #16]
 80175c2:	60fb      	str	r3, [r7, #12]
 80175c4:	e00c      	b.n	80175e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	3308      	adds	r3, #8
 80175ca:	60fb      	str	r3, [r7, #12]
 80175cc:	e002      	b.n	80175d4 <vListInsert+0x2e>
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	685b      	ldr	r3, [r3, #4]
 80175d2:	60fb      	str	r3, [r7, #12]
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	685b      	ldr	r3, [r3, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	68ba      	ldr	r2, [r7, #8]
 80175dc:	429a      	cmp	r2, r3
 80175de:	d2f6      	bcs.n	80175ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	685a      	ldr	r2, [r3, #4]
 80175e4:	683b      	ldr	r3, [r7, #0]
 80175e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80175e8:	683b      	ldr	r3, [r7, #0]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	683a      	ldr	r2, [r7, #0]
 80175ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	68fa      	ldr	r2, [r7, #12]
 80175f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	683a      	ldr	r2, [r7, #0]
 80175fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	1c5a      	adds	r2, r3, #1
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	601a      	str	r2, [r3, #0]
}
 801760c:	bf00      	nop
 801760e:	3714      	adds	r7, #20
 8017610:	46bd      	mov	sp, r7
 8017612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017616:	4770      	bx	lr

08017618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017618:	b480      	push	{r7}
 801761a:	b085      	sub	sp, #20
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	691b      	ldr	r3, [r3, #16]
 8017624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	6892      	ldr	r2, [r2, #8]
 801762e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	689b      	ldr	r3, [r3, #8]
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	6852      	ldr	r2, [r2, #4]
 8017638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	429a      	cmp	r2, r3
 8017642:	d103      	bne.n	801764c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	689a      	ldr	r2, [r3, #8]
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2200      	movs	r2, #0
 8017650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	1e5a      	subs	r2, r3, #1
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	681b      	ldr	r3, [r3, #0]
}
 8017660:	4618      	mov	r0, r3
 8017662:	3714      	adds	r7, #20
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr

0801766c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b084      	sub	sp, #16
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d10a      	bne.n	8017696 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017684:	f383 8811 	msr	BASEPRI, r3
 8017688:	f3bf 8f6f 	isb	sy
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017692:	bf00      	nop
 8017694:	e7fe      	b.n	8017694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017696:	f002 fe25 	bl	801a2e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176a2:	68f9      	ldr	r1, [r7, #12]
 80176a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176a6:	fb01 f303 	mul.w	r3, r1, r3
 80176aa:	441a      	add	r2, r3
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	2200      	movs	r2, #0
 80176b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	681a      	ldr	r2, [r3, #0]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176c6:	3b01      	subs	r3, #1
 80176c8:	68f9      	ldr	r1, [r7, #12]
 80176ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176cc:	fb01 f303 	mul.w	r3, r1, r3
 80176d0:	441a      	add	r2, r3
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	22ff      	movs	r2, #255	; 0xff
 80176da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	22ff      	movs	r2, #255	; 0xff
 80176e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d114      	bne.n	8017716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	691b      	ldr	r3, [r3, #16]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d01a      	beq.n	801772a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	3310      	adds	r3, #16
 80176f8:	4618      	mov	r0, r3
 80176fa:	f001 fd1f 	bl	801913c <xTaskRemoveFromEventList>
 80176fe:	4603      	mov	r3, r0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d012      	beq.n	801772a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017704:	4b0c      	ldr	r3, [pc, #48]	; (8017738 <xQueueGenericReset+0xcc>)
 8017706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801770a:	601a      	str	r2, [r3, #0]
 801770c:	f3bf 8f4f 	dsb	sy
 8017710:	f3bf 8f6f 	isb	sy
 8017714:	e009      	b.n	801772a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	3310      	adds	r3, #16
 801771a:	4618      	mov	r0, r3
 801771c:	f7ff fef2 	bl	8017504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	3324      	adds	r3, #36	; 0x24
 8017724:	4618      	mov	r0, r3
 8017726:	f7ff feed 	bl	8017504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801772a:	f002 fe0b 	bl	801a344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801772e:	2301      	movs	r3, #1
}
 8017730:	4618      	mov	r0, r3
 8017732:	3710      	adds	r7, #16
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}
 8017738:	e000ed04 	.word	0xe000ed04

0801773c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801773c:	b580      	push	{r7, lr}
 801773e:	b08e      	sub	sp, #56	; 0x38
 8017740:	af02      	add	r7, sp, #8
 8017742:	60f8      	str	r0, [r7, #12]
 8017744:	60b9      	str	r1, [r7, #8]
 8017746:	607a      	str	r2, [r7, #4]
 8017748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d10a      	bne.n	8017766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017754:	f383 8811 	msr	BASEPRI, r3
 8017758:	f3bf 8f6f 	isb	sy
 801775c:	f3bf 8f4f 	dsb	sy
 8017760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017762:	bf00      	nop
 8017764:	e7fe      	b.n	8017764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d10a      	bne.n	8017782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017770:	f383 8811 	msr	BASEPRI, r3
 8017774:	f3bf 8f6f 	isb	sy
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801777e:	bf00      	nop
 8017780:	e7fe      	b.n	8017780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d002      	beq.n	801778e <xQueueGenericCreateStatic+0x52>
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d001      	beq.n	8017792 <xQueueGenericCreateStatic+0x56>
 801778e:	2301      	movs	r3, #1
 8017790:	e000      	b.n	8017794 <xQueueGenericCreateStatic+0x58>
 8017792:	2300      	movs	r3, #0
 8017794:	2b00      	cmp	r3, #0
 8017796:	d10a      	bne.n	80177ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801779c:	f383 8811 	msr	BASEPRI, r3
 80177a0:	f3bf 8f6f 	isb	sy
 80177a4:	f3bf 8f4f 	dsb	sy
 80177a8:	623b      	str	r3, [r7, #32]
}
 80177aa:	bf00      	nop
 80177ac:	e7fe      	b.n	80177ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d102      	bne.n	80177ba <xQueueGenericCreateStatic+0x7e>
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d101      	bne.n	80177be <xQueueGenericCreateStatic+0x82>
 80177ba:	2301      	movs	r3, #1
 80177bc:	e000      	b.n	80177c0 <xQueueGenericCreateStatic+0x84>
 80177be:	2300      	movs	r3, #0
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d10a      	bne.n	80177da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80177c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c8:	f383 8811 	msr	BASEPRI, r3
 80177cc:	f3bf 8f6f 	isb	sy
 80177d0:	f3bf 8f4f 	dsb	sy
 80177d4:	61fb      	str	r3, [r7, #28]
}
 80177d6:	bf00      	nop
 80177d8:	e7fe      	b.n	80177d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80177da:	2350      	movs	r3, #80	; 0x50
 80177dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	2b50      	cmp	r3, #80	; 0x50
 80177e2:	d00a      	beq.n	80177fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80177e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e8:	f383 8811 	msr	BASEPRI, r3
 80177ec:	f3bf 8f6f 	isb	sy
 80177f0:	f3bf 8f4f 	dsb	sy
 80177f4:	61bb      	str	r3, [r7, #24]
}
 80177f6:	bf00      	nop
 80177f8:	e7fe      	b.n	80177f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80177fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017802:	2b00      	cmp	r3, #0
 8017804:	d00d      	beq.n	8017822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017808:	2201      	movs	r2, #1
 801780a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801780e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017814:	9300      	str	r3, [sp, #0]
 8017816:	4613      	mov	r3, r2
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	68b9      	ldr	r1, [r7, #8]
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	f000 f83f 	bl	80178a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017824:	4618      	mov	r0, r3
 8017826:	3730      	adds	r7, #48	; 0x30
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}

0801782c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801782c:	b580      	push	{r7, lr}
 801782e:	b08a      	sub	sp, #40	; 0x28
 8017830:	af02      	add	r7, sp, #8
 8017832:	60f8      	str	r0, [r7, #12]
 8017834:	60b9      	str	r1, [r7, #8]
 8017836:	4613      	mov	r3, r2
 8017838:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d10a      	bne.n	8017856 <xQueueGenericCreate+0x2a>
	__asm volatile
 8017840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017844:	f383 8811 	msr	BASEPRI, r3
 8017848:	f3bf 8f6f 	isb	sy
 801784c:	f3bf 8f4f 	dsb	sy
 8017850:	613b      	str	r3, [r7, #16]
}
 8017852:	bf00      	nop
 8017854:	e7fe      	b.n	8017854 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	68ba      	ldr	r2, [r7, #8]
 801785a:	fb02 f303 	mul.w	r3, r2, r3
 801785e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	3350      	adds	r3, #80	; 0x50
 8017864:	4618      	mov	r0, r3
 8017866:	f002 fe5f 	bl	801a528 <pvPortMalloc>
 801786a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801786c:	69bb      	ldr	r3, [r7, #24]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d011      	beq.n	8017896 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017872:	69bb      	ldr	r3, [r7, #24]
 8017874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	3350      	adds	r3, #80	; 0x50
 801787a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801787c:	69bb      	ldr	r3, [r7, #24]
 801787e:	2200      	movs	r2, #0
 8017880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017884:	79fa      	ldrb	r2, [r7, #7]
 8017886:	69bb      	ldr	r3, [r7, #24]
 8017888:	9300      	str	r3, [sp, #0]
 801788a:	4613      	mov	r3, r2
 801788c:	697a      	ldr	r2, [r7, #20]
 801788e:	68b9      	ldr	r1, [r7, #8]
 8017890:	68f8      	ldr	r0, [r7, #12]
 8017892:	f000 f805 	bl	80178a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017896:	69bb      	ldr	r3, [r7, #24]
	}
 8017898:	4618      	mov	r0, r3
 801789a:	3720      	adds	r7, #32
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	60f8      	str	r0, [r7, #12]
 80178a8:	60b9      	str	r1, [r7, #8]
 80178aa:	607a      	str	r2, [r7, #4]
 80178ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d103      	bne.n	80178bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	69ba      	ldr	r2, [r7, #24]
 80178b8:	601a      	str	r2, [r3, #0]
 80178ba:	e002      	b.n	80178c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	687a      	ldr	r2, [r7, #4]
 80178c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80178c2:	69bb      	ldr	r3, [r7, #24]
 80178c4:	68fa      	ldr	r2, [r7, #12]
 80178c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	68ba      	ldr	r2, [r7, #8]
 80178cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80178ce:	2101      	movs	r1, #1
 80178d0:	69b8      	ldr	r0, [r7, #24]
 80178d2:	f7ff fecb 	bl	801766c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80178d6:	69bb      	ldr	r3, [r7, #24]
 80178d8:	78fa      	ldrb	r2, [r7, #3]
 80178da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80178de:	bf00      	nop
 80178e0:	3710      	adds	r7, #16
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}

080178e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80178e6:	b580      	push	{r7, lr}
 80178e8:	b08a      	sub	sp, #40	; 0x28
 80178ea:	af02      	add	r7, sp, #8
 80178ec:	60f8      	str	r0, [r7, #12]
 80178ee:	60b9      	str	r1, [r7, #8]
 80178f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d10a      	bne.n	801790e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80178f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fc:	f383 8811 	msr	BASEPRI, r3
 8017900:	f3bf 8f6f 	isb	sy
 8017904:	f3bf 8f4f 	dsb	sy
 8017908:	61bb      	str	r3, [r7, #24]
}
 801790a:	bf00      	nop
 801790c:	e7fe      	b.n	801790c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801790e:	68ba      	ldr	r2, [r7, #8]
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	429a      	cmp	r2, r3
 8017914:	d90a      	bls.n	801792c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8017916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791a:	f383 8811 	msr	BASEPRI, r3
 801791e:	f3bf 8f6f 	isb	sy
 8017922:	f3bf 8f4f 	dsb	sy
 8017926:	617b      	str	r3, [r7, #20]
}
 8017928:	bf00      	nop
 801792a:	e7fe      	b.n	801792a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801792c:	2302      	movs	r3, #2
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2200      	movs	r2, #0
 8017934:	2100      	movs	r1, #0
 8017936:	68f8      	ldr	r0, [r7, #12]
 8017938:	f7ff ff00 	bl	801773c <xQueueGenericCreateStatic>
 801793c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801793e:	69fb      	ldr	r3, [r7, #28]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d002      	beq.n	801794a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	68ba      	ldr	r2, [r7, #8]
 8017948:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801794a:	69fb      	ldr	r3, [r7, #28]
	}
 801794c:	4618      	mov	r0, r3
 801794e:	3720      	adds	r7, #32
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017954:	b580      	push	{r7, lr}
 8017956:	b086      	sub	sp, #24
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d10a      	bne.n	801797a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017968:	f383 8811 	msr	BASEPRI, r3
 801796c:	f3bf 8f6f 	isb	sy
 8017970:	f3bf 8f4f 	dsb	sy
 8017974:	613b      	str	r3, [r7, #16]
}
 8017976:	bf00      	nop
 8017978:	e7fe      	b.n	8017978 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801797a:	683a      	ldr	r2, [r7, #0]
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	429a      	cmp	r2, r3
 8017980:	d90a      	bls.n	8017998 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8017982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	60fb      	str	r3, [r7, #12]
}
 8017994:	bf00      	nop
 8017996:	e7fe      	b.n	8017996 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017998:	2202      	movs	r2, #2
 801799a:	2100      	movs	r1, #0
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f7ff ff45 	bl	801782c <xQueueGenericCreate>
 80179a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d002      	beq.n	80179b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	683a      	ldr	r2, [r7, #0]
 80179ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80179b0:	697b      	ldr	r3, [r7, #20]
	}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3718      	adds	r7, #24
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
	...

080179bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b08e      	sub	sp, #56	; 0x38
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80179ca:	2300      	movs	r3, #0
 80179cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80179d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d10a      	bne.n	80179ee <xQueueGenericSend+0x32>
	__asm volatile
 80179d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179dc:	f383 8811 	msr	BASEPRI, r3
 80179e0:	f3bf 8f6f 	isb	sy
 80179e4:	f3bf 8f4f 	dsb	sy
 80179e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80179ea:	bf00      	nop
 80179ec:	e7fe      	b.n	80179ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d103      	bne.n	80179fc <xQueueGenericSend+0x40>
 80179f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d101      	bne.n	8017a00 <xQueueGenericSend+0x44>
 80179fc:	2301      	movs	r3, #1
 80179fe:	e000      	b.n	8017a02 <xQueueGenericSend+0x46>
 8017a00:	2300      	movs	r3, #0
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d10a      	bne.n	8017a1c <xQueueGenericSend+0x60>
	__asm volatile
 8017a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a0a:	f383 8811 	msr	BASEPRI, r3
 8017a0e:	f3bf 8f6f 	isb	sy
 8017a12:	f3bf 8f4f 	dsb	sy
 8017a16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017a18:	bf00      	nop
 8017a1a:	e7fe      	b.n	8017a1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	2b02      	cmp	r3, #2
 8017a20:	d103      	bne.n	8017a2a <xQueueGenericSend+0x6e>
 8017a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a26:	2b01      	cmp	r3, #1
 8017a28:	d101      	bne.n	8017a2e <xQueueGenericSend+0x72>
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	e000      	b.n	8017a30 <xQueueGenericSend+0x74>
 8017a2e:	2300      	movs	r3, #0
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d10a      	bne.n	8017a4a <xQueueGenericSend+0x8e>
	__asm volatile
 8017a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a38:	f383 8811 	msr	BASEPRI, r3
 8017a3c:	f3bf 8f6f 	isb	sy
 8017a40:	f3bf 8f4f 	dsb	sy
 8017a44:	623b      	str	r3, [r7, #32]
}
 8017a46:	bf00      	nop
 8017a48:	e7fe      	b.n	8017a48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a4a:	f001 fd35 	bl	80194b8 <xTaskGetSchedulerState>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d102      	bne.n	8017a5a <xQueueGenericSend+0x9e>
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d101      	bne.n	8017a5e <xQueueGenericSend+0xa2>
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	e000      	b.n	8017a60 <xQueueGenericSend+0xa4>
 8017a5e:	2300      	movs	r3, #0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d10a      	bne.n	8017a7a <xQueueGenericSend+0xbe>
	__asm volatile
 8017a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a68:	f383 8811 	msr	BASEPRI, r3
 8017a6c:	f3bf 8f6f 	isb	sy
 8017a70:	f3bf 8f4f 	dsb	sy
 8017a74:	61fb      	str	r3, [r7, #28]
}
 8017a76:	bf00      	nop
 8017a78:	e7fe      	b.n	8017a78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017a7a:	f002 fc33 	bl	801a2e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d302      	bcc.n	8017a90 <xQueueGenericSend+0xd4>
 8017a8a:	683b      	ldr	r3, [r7, #0]
 8017a8c:	2b02      	cmp	r3, #2
 8017a8e:	d129      	bne.n	8017ae4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017a90:	683a      	ldr	r2, [r7, #0]
 8017a92:	68b9      	ldr	r1, [r7, #8]
 8017a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a96:	f000 fc5e 	bl	8018356 <prvCopyDataToQueue>
 8017a9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d010      	beq.n	8017ac6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa6:	3324      	adds	r3, #36	; 0x24
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f001 fb47 	bl	801913c <xTaskRemoveFromEventList>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d013      	beq.n	8017adc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017ab4:	4b3f      	ldr	r3, [pc, #252]	; (8017bb4 <xQueueGenericSend+0x1f8>)
 8017ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017aba:	601a      	str	r2, [r3, #0]
 8017abc:	f3bf 8f4f 	dsb	sy
 8017ac0:	f3bf 8f6f 	isb	sy
 8017ac4:	e00a      	b.n	8017adc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d007      	beq.n	8017adc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017acc:	4b39      	ldr	r3, [pc, #228]	; (8017bb4 <xQueueGenericSend+0x1f8>)
 8017ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ad2:	601a      	str	r2, [r3, #0]
 8017ad4:	f3bf 8f4f 	dsb	sy
 8017ad8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017adc:	f002 fc32 	bl	801a344 <vPortExitCritical>
				return pdPASS;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	e063      	b.n	8017bac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d103      	bne.n	8017af2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017aea:	f002 fc2b 	bl	801a344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017aee:	2300      	movs	r3, #0
 8017af0:	e05c      	b.n	8017bac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d106      	bne.n	8017b06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017af8:	f107 0314 	add.w	r3, r7, #20
 8017afc:	4618      	mov	r0, r3
 8017afe:	f001 fb81 	bl	8019204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017b02:	2301      	movs	r3, #1
 8017b04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017b06:	f002 fc1d 	bl	801a344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017b0a:	f001 f8d5 	bl	8018cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017b0e:	f002 fbe9 	bl	801a2e4 <vPortEnterCritical>
 8017b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b18:	b25b      	sxtb	r3, r3
 8017b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b1e:	d103      	bne.n	8017b28 <xQueueGenericSend+0x16c>
 8017b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b22:	2200      	movs	r2, #0
 8017b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b2e:	b25b      	sxtb	r3, r3
 8017b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b34:	d103      	bne.n	8017b3e <xQueueGenericSend+0x182>
 8017b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b38:	2200      	movs	r2, #0
 8017b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b3e:	f002 fc01 	bl	801a344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b42:	1d3a      	adds	r2, r7, #4
 8017b44:	f107 0314 	add.w	r3, r7, #20
 8017b48:	4611      	mov	r1, r2
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f001 fb70 	bl	8019230 <xTaskCheckForTimeOut>
 8017b50:	4603      	mov	r3, r0
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d124      	bne.n	8017ba0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b58:	f000 fcf5 	bl	8018546 <prvIsQueueFull>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d018      	beq.n	8017b94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	3310      	adds	r3, #16
 8017b66:	687a      	ldr	r2, [r7, #4]
 8017b68:	4611      	mov	r1, r2
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f001 fa96 	bl	801909c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b72:	f000 fc80 	bl	8018476 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017b76:	f001 f8ad 	bl	8018cd4 <xTaskResumeAll>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	f47f af7c 	bne.w	8017a7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017b82:	4b0c      	ldr	r3, [pc, #48]	; (8017bb4 <xQueueGenericSend+0x1f8>)
 8017b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b88:	601a      	str	r2, [r3, #0]
 8017b8a:	f3bf 8f4f 	dsb	sy
 8017b8e:	f3bf 8f6f 	isb	sy
 8017b92:	e772      	b.n	8017a7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b96:	f000 fc6e 	bl	8018476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017b9a:	f001 f89b 	bl	8018cd4 <xTaskResumeAll>
 8017b9e:	e76c      	b.n	8017a7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ba2:	f000 fc68 	bl	8018476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017ba6:	f001 f895 	bl	8018cd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017baa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	3738      	adds	r7, #56	; 0x38
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}
 8017bb4:	e000ed04 	.word	0xe000ed04

08017bb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b090      	sub	sp, #64	; 0x40
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	60f8      	str	r0, [r7, #12]
 8017bc0:	60b9      	str	r1, [r7, #8]
 8017bc2:	607a      	str	r2, [r7, #4]
 8017bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d10a      	bne.n	8017be6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd4:	f383 8811 	msr	BASEPRI, r3
 8017bd8:	f3bf 8f6f 	isb	sy
 8017bdc:	f3bf 8f4f 	dsb	sy
 8017be0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017be2:	bf00      	nop
 8017be4:	e7fe      	b.n	8017be4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d103      	bne.n	8017bf4 <xQueueGenericSendFromISR+0x3c>
 8017bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d101      	bne.n	8017bf8 <xQueueGenericSendFromISR+0x40>
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	e000      	b.n	8017bfa <xQueueGenericSendFromISR+0x42>
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d10a      	bne.n	8017c14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c02:	f383 8811 	msr	BASEPRI, r3
 8017c06:	f3bf 8f6f 	isb	sy
 8017c0a:	f3bf 8f4f 	dsb	sy
 8017c0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c10:	bf00      	nop
 8017c12:	e7fe      	b.n	8017c12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	2b02      	cmp	r3, #2
 8017c18:	d103      	bne.n	8017c22 <xQueueGenericSendFromISR+0x6a>
 8017c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	d101      	bne.n	8017c26 <xQueueGenericSendFromISR+0x6e>
 8017c22:	2301      	movs	r3, #1
 8017c24:	e000      	b.n	8017c28 <xQueueGenericSendFromISR+0x70>
 8017c26:	2300      	movs	r3, #0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d10a      	bne.n	8017c42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c30:	f383 8811 	msr	BASEPRI, r3
 8017c34:	f3bf 8f6f 	isb	sy
 8017c38:	f3bf 8f4f 	dsb	sy
 8017c3c:	623b      	str	r3, [r7, #32]
}
 8017c3e:	bf00      	nop
 8017c40:	e7fe      	b.n	8017c40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017c42:	f002 fc31 	bl	801a4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017c46:	f3ef 8211 	mrs	r2, BASEPRI
 8017c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c4e:	f383 8811 	msr	BASEPRI, r3
 8017c52:	f3bf 8f6f 	isb	sy
 8017c56:	f3bf 8f4f 	dsb	sy
 8017c5a:	61fa      	str	r2, [r7, #28]
 8017c5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017c5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017c60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d302      	bcc.n	8017c74 <xQueueGenericSendFromISR+0xbc>
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	2b02      	cmp	r3, #2
 8017c72:	d12f      	bne.n	8017cd4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017c84:	683a      	ldr	r2, [r7, #0]
 8017c86:	68b9      	ldr	r1, [r7, #8]
 8017c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017c8a:	f000 fb64 	bl	8018356 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017c8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c96:	d112      	bne.n	8017cbe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d016      	beq.n	8017cce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca2:	3324      	adds	r3, #36	; 0x24
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f001 fa49 	bl	801913c <xTaskRemoveFromEventList>
 8017caa:	4603      	mov	r3, r0
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d00e      	beq.n	8017cce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d00b      	beq.n	8017cce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2201      	movs	r2, #1
 8017cba:	601a      	str	r2, [r3, #0]
 8017cbc:	e007      	b.n	8017cce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	b25a      	sxtb	r2, r3
 8017cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017cce:	2301      	movs	r3, #1
 8017cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017cd2:	e001      	b.n	8017cd8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017cdc:	697b      	ldr	r3, [r7, #20]
 8017cde:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017ce2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3740      	adds	r7, #64	; 0x40
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}

08017cee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017cee:	b580      	push	{r7, lr}
 8017cf0:	b08e      	sub	sp, #56	; 0x38
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
 8017cf6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d10a      	bne.n	8017d18 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8017d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d06:	f383 8811 	msr	BASEPRI, r3
 8017d0a:	f3bf 8f6f 	isb	sy
 8017d0e:	f3bf 8f4f 	dsb	sy
 8017d12:	623b      	str	r3, [r7, #32]
}
 8017d14:	bf00      	nop
 8017d16:	e7fe      	b.n	8017d16 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d00a      	beq.n	8017d36 <xQueueGiveFromISR+0x48>
	__asm volatile
 8017d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d24:	f383 8811 	msr	BASEPRI, r3
 8017d28:	f3bf 8f6f 	isb	sy
 8017d2c:	f3bf 8f4f 	dsb	sy
 8017d30:	61fb      	str	r3, [r7, #28]
}
 8017d32:	bf00      	nop
 8017d34:	e7fe      	b.n	8017d34 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d103      	bne.n	8017d46 <xQueueGiveFromISR+0x58>
 8017d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d40:	689b      	ldr	r3, [r3, #8]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d101      	bne.n	8017d4a <xQueueGiveFromISR+0x5c>
 8017d46:	2301      	movs	r3, #1
 8017d48:	e000      	b.n	8017d4c <xQueueGiveFromISR+0x5e>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d10a      	bne.n	8017d66 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d54:	f383 8811 	msr	BASEPRI, r3
 8017d58:	f3bf 8f6f 	isb	sy
 8017d5c:	f3bf 8f4f 	dsb	sy
 8017d60:	61bb      	str	r3, [r7, #24]
}
 8017d62:	bf00      	nop
 8017d64:	e7fe      	b.n	8017d64 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017d66:	f002 fb9f 	bl	801a4a8 <vPortValidateInterruptPriority>
	__asm volatile
 8017d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8017d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d72:	f383 8811 	msr	BASEPRI, r3
 8017d76:	f3bf 8f6f 	isb	sy
 8017d7a:	f3bf 8f4f 	dsb	sy
 8017d7e:	617a      	str	r2, [r7, #20]
 8017d80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017d82:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d22b      	bcs.n	8017dee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da2:	1c5a      	adds	r2, r3, #1
 8017da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017db0:	d112      	bne.n	8017dd8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d016      	beq.n	8017de8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dbc:	3324      	adds	r3, #36	; 0x24
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f001 f9bc 	bl	801913c <xTaskRemoveFromEventList>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00e      	beq.n	8017de8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d00b      	beq.n	8017de8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	601a      	str	r2, [r3, #0]
 8017dd6:	e007      	b.n	8017de8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ddc:	3301      	adds	r3, #1
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	b25a      	sxtb	r2, r3
 8017de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017de8:	2301      	movs	r3, #1
 8017dea:	637b      	str	r3, [r7, #52]	; 0x34
 8017dec:	e001      	b.n	8017df2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017dee:	2300      	movs	r3, #0
 8017df0:	637b      	str	r3, [r7, #52]	; 0x34
 8017df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f383 8811 	msr	BASEPRI, r3
}
 8017dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	3738      	adds	r7, #56	; 0x38
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}

08017e08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b08c      	sub	sp, #48	; 0x30
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	60b9      	str	r1, [r7, #8]
 8017e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017e14:	2300      	movs	r3, #0
 8017e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d10a      	bne.n	8017e38 <xQueueReceive+0x30>
	__asm volatile
 8017e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e26:	f383 8811 	msr	BASEPRI, r3
 8017e2a:	f3bf 8f6f 	isb	sy
 8017e2e:	f3bf 8f4f 	dsb	sy
 8017e32:	623b      	str	r3, [r7, #32]
}
 8017e34:	bf00      	nop
 8017e36:	e7fe      	b.n	8017e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d103      	bne.n	8017e46 <xQueueReceive+0x3e>
 8017e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d101      	bne.n	8017e4a <xQueueReceive+0x42>
 8017e46:	2301      	movs	r3, #1
 8017e48:	e000      	b.n	8017e4c <xQueueReceive+0x44>
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d10a      	bne.n	8017e66 <xQueueReceive+0x5e>
	__asm volatile
 8017e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e54:	f383 8811 	msr	BASEPRI, r3
 8017e58:	f3bf 8f6f 	isb	sy
 8017e5c:	f3bf 8f4f 	dsb	sy
 8017e60:	61fb      	str	r3, [r7, #28]
}
 8017e62:	bf00      	nop
 8017e64:	e7fe      	b.n	8017e64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017e66:	f001 fb27 	bl	80194b8 <xTaskGetSchedulerState>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d102      	bne.n	8017e76 <xQueueReceive+0x6e>
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d101      	bne.n	8017e7a <xQueueReceive+0x72>
 8017e76:	2301      	movs	r3, #1
 8017e78:	e000      	b.n	8017e7c <xQueueReceive+0x74>
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d10a      	bne.n	8017e96 <xQueueReceive+0x8e>
	__asm volatile
 8017e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e84:	f383 8811 	msr	BASEPRI, r3
 8017e88:	f3bf 8f6f 	isb	sy
 8017e8c:	f3bf 8f4f 	dsb	sy
 8017e90:	61bb      	str	r3, [r7, #24]
}
 8017e92:	bf00      	nop
 8017e94:	e7fe      	b.n	8017e94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017e96:	f002 fa25 	bl	801a2e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d01f      	beq.n	8017ee6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017ea6:	68b9      	ldr	r1, [r7, #8]
 8017ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eaa:	f000 fabe 	bl	801842a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb0:	1e5a      	subs	r2, r3, #1
 8017eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	691b      	ldr	r3, [r3, #16]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d00f      	beq.n	8017ede <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec0:	3310      	adds	r3, #16
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f001 f93a 	bl	801913c <xTaskRemoveFromEventList>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d007      	beq.n	8017ede <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017ece:	4b3d      	ldr	r3, [pc, #244]	; (8017fc4 <xQueueReceive+0x1bc>)
 8017ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ed4:	601a      	str	r2, [r3, #0]
 8017ed6:	f3bf 8f4f 	dsb	sy
 8017eda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017ede:	f002 fa31 	bl	801a344 <vPortExitCritical>
				return pdPASS;
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	e069      	b.n	8017fba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d103      	bne.n	8017ef4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017eec:	f002 fa2a 	bl	801a344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	e062      	b.n	8017fba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d106      	bne.n	8017f08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017efa:	f107 0310 	add.w	r3, r7, #16
 8017efe:	4618      	mov	r0, r3
 8017f00:	f001 f980 	bl	8019204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017f04:	2301      	movs	r3, #1
 8017f06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017f08:	f002 fa1c 	bl	801a344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017f0c:	f000 fed4 	bl	8018cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017f10:	f002 f9e8 	bl	801a2e4 <vPortEnterCritical>
 8017f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f1a:	b25b      	sxtb	r3, r3
 8017f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f20:	d103      	bne.n	8017f2a <xQueueReceive+0x122>
 8017f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f24:	2200      	movs	r2, #0
 8017f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f30:	b25b      	sxtb	r3, r3
 8017f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f36:	d103      	bne.n	8017f40 <xQueueReceive+0x138>
 8017f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017f40:	f002 fa00 	bl	801a344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017f44:	1d3a      	adds	r2, r7, #4
 8017f46:	f107 0310 	add.w	r3, r7, #16
 8017f4a:	4611      	mov	r1, r2
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f001 f96f 	bl	8019230 <xTaskCheckForTimeOut>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d123      	bne.n	8017fa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f5a:	f000 fade 	bl	801851a <prvIsQueueEmpty>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d017      	beq.n	8017f94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f66:	3324      	adds	r3, #36	; 0x24
 8017f68:	687a      	ldr	r2, [r7, #4]
 8017f6a:	4611      	mov	r1, r2
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	f001 f895 	bl	801909c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f74:	f000 fa7f 	bl	8018476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017f78:	f000 feac 	bl	8018cd4 <xTaskResumeAll>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d189      	bne.n	8017e96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017f82:	4b10      	ldr	r3, [pc, #64]	; (8017fc4 <xQueueReceive+0x1bc>)
 8017f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f88:	601a      	str	r2, [r3, #0]
 8017f8a:	f3bf 8f4f 	dsb	sy
 8017f8e:	f3bf 8f6f 	isb	sy
 8017f92:	e780      	b.n	8017e96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f96:	f000 fa6e 	bl	8018476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017f9a:	f000 fe9b 	bl	8018cd4 <xTaskResumeAll>
 8017f9e:	e77a      	b.n	8017e96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fa2:	f000 fa68 	bl	8018476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017fa6:	f000 fe95 	bl	8018cd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fac:	f000 fab5 	bl	801851a <prvIsQueueEmpty>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f43f af6f 	beq.w	8017e96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3730      	adds	r7, #48	; 0x30
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	e000ed04 	.word	0xe000ed04

08017fc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b08e      	sub	sp, #56	; 0x38
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d10a      	bne.n	8017ffa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8017fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fe8:	f383 8811 	msr	BASEPRI, r3
 8017fec:	f3bf 8f6f 	isb	sy
 8017ff0:	f3bf 8f4f 	dsb	sy
 8017ff4:	623b      	str	r3, [r7, #32]
}
 8017ff6:	bf00      	nop
 8017ff8:	e7fe      	b.n	8017ff8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00a      	beq.n	8018018 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8018002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018006:	f383 8811 	msr	BASEPRI, r3
 801800a:	f3bf 8f6f 	isb	sy
 801800e:	f3bf 8f4f 	dsb	sy
 8018012:	61fb      	str	r3, [r7, #28]
}
 8018014:	bf00      	nop
 8018016:	e7fe      	b.n	8018016 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018018:	f001 fa4e 	bl	80194b8 <xTaskGetSchedulerState>
 801801c:	4603      	mov	r3, r0
 801801e:	2b00      	cmp	r3, #0
 8018020:	d102      	bne.n	8018028 <xQueueSemaphoreTake+0x60>
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d101      	bne.n	801802c <xQueueSemaphoreTake+0x64>
 8018028:	2301      	movs	r3, #1
 801802a:	e000      	b.n	801802e <xQueueSemaphoreTake+0x66>
 801802c:	2300      	movs	r3, #0
 801802e:	2b00      	cmp	r3, #0
 8018030:	d10a      	bne.n	8018048 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8018032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018036:	f383 8811 	msr	BASEPRI, r3
 801803a:	f3bf 8f6f 	isb	sy
 801803e:	f3bf 8f4f 	dsb	sy
 8018042:	61bb      	str	r3, [r7, #24]
}
 8018044:	bf00      	nop
 8018046:	e7fe      	b.n	8018046 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018048:	f002 f94c 	bl	801a2e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018050:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018054:	2b00      	cmp	r3, #0
 8018056:	d024      	beq.n	80180a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801805a:	1e5a      	subs	r2, r3, #1
 801805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d104      	bne.n	8018072 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018068:	f001 fb9c 	bl	80197a4 <pvTaskIncrementMutexHeldCount>
 801806c:	4602      	mov	r2, r0
 801806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018070:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018074:	691b      	ldr	r3, [r3, #16]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d00f      	beq.n	801809a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807c:	3310      	adds	r3, #16
 801807e:	4618      	mov	r0, r3
 8018080:	f001 f85c 	bl	801913c <xTaskRemoveFromEventList>
 8018084:	4603      	mov	r3, r0
 8018086:	2b00      	cmp	r3, #0
 8018088:	d007      	beq.n	801809a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801808a:	4b54      	ldr	r3, [pc, #336]	; (80181dc <xQueueSemaphoreTake+0x214>)
 801808c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018090:	601a      	str	r2, [r3, #0]
 8018092:	f3bf 8f4f 	dsb	sy
 8018096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801809a:	f002 f953 	bl	801a344 <vPortExitCritical>
				return pdPASS;
 801809e:	2301      	movs	r3, #1
 80180a0:	e097      	b.n	80181d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d111      	bne.n	80180cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80180a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d00a      	beq.n	80180c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80180ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180b2:	f383 8811 	msr	BASEPRI, r3
 80180b6:	f3bf 8f6f 	isb	sy
 80180ba:	f3bf 8f4f 	dsb	sy
 80180be:	617b      	str	r3, [r7, #20]
}
 80180c0:	bf00      	nop
 80180c2:	e7fe      	b.n	80180c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80180c4:	f002 f93e 	bl	801a344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80180c8:	2300      	movs	r3, #0
 80180ca:	e082      	b.n	80181d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80180cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d106      	bne.n	80180e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80180d2:	f107 030c 	add.w	r3, r7, #12
 80180d6:	4618      	mov	r0, r3
 80180d8:	f001 f894 	bl	8019204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80180dc:	2301      	movs	r3, #1
 80180de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80180e0:	f002 f930 	bl	801a344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80180e4:	f000 fde8 	bl	8018cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80180e8:	f002 f8fc 	bl	801a2e4 <vPortEnterCritical>
 80180ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80180f2:	b25b      	sxtb	r3, r3
 80180f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180f8:	d103      	bne.n	8018102 <xQueueSemaphoreTake+0x13a>
 80180fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fc:	2200      	movs	r2, #0
 80180fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018108:	b25b      	sxtb	r3, r3
 801810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801810e:	d103      	bne.n	8018118 <xQueueSemaphoreTake+0x150>
 8018110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018112:	2200      	movs	r2, #0
 8018114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018118:	f002 f914 	bl	801a344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801811c:	463a      	mov	r2, r7
 801811e:	f107 030c 	add.w	r3, r7, #12
 8018122:	4611      	mov	r1, r2
 8018124:	4618      	mov	r0, r3
 8018126:	f001 f883 	bl	8019230 <xTaskCheckForTimeOut>
 801812a:	4603      	mov	r3, r0
 801812c:	2b00      	cmp	r3, #0
 801812e:	d132      	bne.n	8018196 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018132:	f000 f9f2 	bl	801851a <prvIsQueueEmpty>
 8018136:	4603      	mov	r3, r0
 8018138:	2b00      	cmp	r3, #0
 801813a:	d026      	beq.n	801818a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d109      	bne.n	8018158 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8018144:	f002 f8ce 	bl	801a2e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801814a:	689b      	ldr	r3, [r3, #8]
 801814c:	4618      	mov	r0, r3
 801814e:	f001 f9d1 	bl	80194f4 <xTaskPriorityInherit>
 8018152:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8018154:	f002 f8f6 	bl	801a344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815a:	3324      	adds	r3, #36	; 0x24
 801815c:	683a      	ldr	r2, [r7, #0]
 801815e:	4611      	mov	r1, r2
 8018160:	4618      	mov	r0, r3
 8018162:	f000 ff9b 	bl	801909c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018168:	f000 f985 	bl	8018476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801816c:	f000 fdb2 	bl	8018cd4 <xTaskResumeAll>
 8018170:	4603      	mov	r3, r0
 8018172:	2b00      	cmp	r3, #0
 8018174:	f47f af68 	bne.w	8018048 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8018178:	4b18      	ldr	r3, [pc, #96]	; (80181dc <xQueueSemaphoreTake+0x214>)
 801817a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801817e:	601a      	str	r2, [r3, #0]
 8018180:	f3bf 8f4f 	dsb	sy
 8018184:	f3bf 8f6f 	isb	sy
 8018188:	e75e      	b.n	8018048 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801818a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801818c:	f000 f973 	bl	8018476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018190:	f000 fda0 	bl	8018cd4 <xTaskResumeAll>
 8018194:	e758      	b.n	8018048 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018198:	f000 f96d 	bl	8018476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801819c:	f000 fd9a 	bl	8018cd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80181a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181a2:	f000 f9ba 	bl	801851a <prvIsQueueEmpty>
 80181a6:	4603      	mov	r3, r0
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	f43f af4d 	beq.w	8018048 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80181ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d00d      	beq.n	80181d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80181b4:	f002 f896 	bl	801a2e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80181b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181ba:	f000 f8b4 	bl	8018326 <prvGetDisinheritPriorityAfterTimeout>
 80181be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80181c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c2:	689b      	ldr	r3, [r3, #8]
 80181c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80181c6:	4618      	mov	r0, r3
 80181c8:	f001 fa6a 	bl	80196a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80181cc:	f002 f8ba 	bl	801a344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80181d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80181d2:	4618      	mov	r0, r3
 80181d4:	3738      	adds	r7, #56	; 0x38
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}
 80181da:	bf00      	nop
 80181dc:	e000ed04 	.word	0xe000ed04

080181e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b08e      	sub	sp, #56	; 0x38
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	60b9      	str	r1, [r7, #8]
 80181ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80181f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d10a      	bne.n	801820c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80181f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181fa:	f383 8811 	msr	BASEPRI, r3
 80181fe:	f3bf 8f6f 	isb	sy
 8018202:	f3bf 8f4f 	dsb	sy
 8018206:	623b      	str	r3, [r7, #32]
}
 8018208:	bf00      	nop
 801820a:	e7fe      	b.n	801820a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d103      	bne.n	801821a <xQueueReceiveFromISR+0x3a>
 8018212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018216:	2b00      	cmp	r3, #0
 8018218:	d101      	bne.n	801821e <xQueueReceiveFromISR+0x3e>
 801821a:	2301      	movs	r3, #1
 801821c:	e000      	b.n	8018220 <xQueueReceiveFromISR+0x40>
 801821e:	2300      	movs	r3, #0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d10a      	bne.n	801823a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8018224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018228:	f383 8811 	msr	BASEPRI, r3
 801822c:	f3bf 8f6f 	isb	sy
 8018230:	f3bf 8f4f 	dsb	sy
 8018234:	61fb      	str	r3, [r7, #28]
}
 8018236:	bf00      	nop
 8018238:	e7fe      	b.n	8018238 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801823a:	f002 f935 	bl	801a4a8 <vPortValidateInterruptPriority>
	__asm volatile
 801823e:	f3ef 8211 	mrs	r2, BASEPRI
 8018242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018246:	f383 8811 	msr	BASEPRI, r3
 801824a:	f3bf 8f6f 	isb	sy
 801824e:	f3bf 8f4f 	dsb	sy
 8018252:	61ba      	str	r2, [r7, #24]
 8018254:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018256:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018258:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801825e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018262:	2b00      	cmp	r3, #0
 8018264:	d02f      	beq.n	80182c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801826c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018270:	68b9      	ldr	r1, [r7, #8]
 8018272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018274:	f000 f8d9 	bl	801842a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827a:	1e5a      	subs	r2, r3, #1
 801827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018288:	d112      	bne.n	80182b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828c:	691b      	ldr	r3, [r3, #16]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d016      	beq.n	80182c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018294:	3310      	adds	r3, #16
 8018296:	4618      	mov	r0, r3
 8018298:	f000 ff50 	bl	801913c <xTaskRemoveFromEventList>
 801829c:	4603      	mov	r3, r0
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d00e      	beq.n	80182c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d00b      	beq.n	80182c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2201      	movs	r2, #1
 80182ac:	601a      	str	r2, [r3, #0]
 80182ae:	e007      	b.n	80182c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80182b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182b4:	3301      	adds	r3, #1
 80182b6:	b2db      	uxtb	r3, r3
 80182b8:	b25a      	sxtb	r2, r3
 80182ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80182c0:	2301      	movs	r3, #1
 80182c2:	637b      	str	r3, [r7, #52]	; 0x34
 80182c4:	e001      	b.n	80182ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80182c6:	2300      	movs	r3, #0
 80182c8:	637b      	str	r3, [r7, #52]	; 0x34
 80182ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	f383 8811 	msr	BASEPRI, r3
}
 80182d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80182d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80182d8:	4618      	mov	r0, r3
 80182da:	3738      	adds	r7, #56	; 0x38
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}

080182e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b084      	sub	sp, #16
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d10a      	bne.n	8018308 <vQueueDelete+0x28>
	__asm volatile
 80182f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f6:	f383 8811 	msr	BASEPRI, r3
 80182fa:	f3bf 8f6f 	isb	sy
 80182fe:	f3bf 8f4f 	dsb	sy
 8018302:	60bb      	str	r3, [r7, #8]
}
 8018304:	bf00      	nop
 8018306:	e7fe      	b.n	8018306 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8018308:	68f8      	ldr	r0, [r7, #12]
 801830a:	f000 f95f 	bl	80185cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8018314:	2b00      	cmp	r3, #0
 8018316:	d102      	bne.n	801831e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8018318:	68f8      	ldr	r0, [r7, #12]
 801831a:	f002 f9d1 	bl	801a6c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801831e:	bf00      	nop
 8018320:	3710      	adds	r7, #16
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}

08018326 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018326:	b480      	push	{r7}
 8018328:	b085      	sub	sp, #20
 801832a:	af00      	add	r7, sp, #0
 801832c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018332:	2b00      	cmp	r3, #0
 8018334:	d006      	beq.n	8018344 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8018340:	60fb      	str	r3, [r7, #12]
 8018342:	e001      	b.n	8018348 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018344:	2300      	movs	r3, #0
 8018346:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018348:	68fb      	ldr	r3, [r7, #12]
	}
 801834a:	4618      	mov	r0, r3
 801834c:	3714      	adds	r7, #20
 801834e:	46bd      	mov	sp, r7
 8018350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018354:	4770      	bx	lr

08018356 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018356:	b580      	push	{r7, lr}
 8018358:	b086      	sub	sp, #24
 801835a:	af00      	add	r7, sp, #0
 801835c:	60f8      	str	r0, [r7, #12]
 801835e:	60b9      	str	r1, [r7, #8]
 8018360:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018362:	2300      	movs	r3, #0
 8018364:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801836a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018370:	2b00      	cmp	r3, #0
 8018372:	d10d      	bne.n	8018390 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d14d      	bne.n	8018418 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	689b      	ldr	r3, [r3, #8]
 8018380:	4618      	mov	r0, r3
 8018382:	f001 f91f 	bl	80195c4 <xTaskPriorityDisinherit>
 8018386:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	2200      	movs	r2, #0
 801838c:	609a      	str	r2, [r3, #8]
 801838e:	e043      	b.n	8018418 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d119      	bne.n	80183ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	6858      	ldr	r0, [r3, #4]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801839e:	461a      	mov	r2, r3
 80183a0:	68b9      	ldr	r1, [r7, #8]
 80183a2:	f003 f843 	bl	801b42c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	685a      	ldr	r2, [r3, #4]
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183ae:	441a      	add	r2, r3
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	685a      	ldr	r2, [r3, #4]
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	689b      	ldr	r3, [r3, #8]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d32b      	bcc.n	8018418 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	681a      	ldr	r2, [r3, #0]
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	605a      	str	r2, [r3, #4]
 80183c8:	e026      	b.n	8018418 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	68d8      	ldr	r0, [r3, #12]
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183d2:	461a      	mov	r2, r3
 80183d4:	68b9      	ldr	r1, [r7, #8]
 80183d6:	f003 f829 	bl	801b42c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	68da      	ldr	r2, [r3, #12]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e2:	425b      	negs	r3, r3
 80183e4:	441a      	add	r2, r3
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	68da      	ldr	r2, [r3, #12]
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d207      	bcs.n	8018406 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	689a      	ldr	r2, [r3, #8]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183fe:	425b      	negs	r3, r3
 8018400:	441a      	add	r2, r3
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	2b02      	cmp	r3, #2
 801840a:	d105      	bne.n	8018418 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d002      	beq.n	8018418 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018412:	693b      	ldr	r3, [r7, #16]
 8018414:	3b01      	subs	r3, #1
 8018416:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018418:	693b      	ldr	r3, [r7, #16]
 801841a:	1c5a      	adds	r2, r3, #1
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018420:	697b      	ldr	r3, [r7, #20]
}
 8018422:	4618      	mov	r0, r3
 8018424:	3718      	adds	r7, #24
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}

0801842a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801842a:	b580      	push	{r7, lr}
 801842c:	b082      	sub	sp, #8
 801842e:	af00      	add	r7, sp, #0
 8018430:	6078      	str	r0, [r7, #4]
 8018432:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018438:	2b00      	cmp	r3, #0
 801843a:	d018      	beq.n	801846e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	68da      	ldr	r2, [r3, #12]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018444:	441a      	add	r2, r3
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	68da      	ldr	r2, [r3, #12]
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	689b      	ldr	r3, [r3, #8]
 8018452:	429a      	cmp	r2, r3
 8018454:	d303      	bcc.n	801845e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681a      	ldr	r2, [r3, #0]
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	68d9      	ldr	r1, [r3, #12]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018466:	461a      	mov	r2, r3
 8018468:	6838      	ldr	r0, [r7, #0]
 801846a:	f002 ffdf 	bl	801b42c <memcpy>
	}
}
 801846e:	bf00      	nop
 8018470:	3708      	adds	r7, #8
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}

08018476 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018476:	b580      	push	{r7, lr}
 8018478:	b084      	sub	sp, #16
 801847a:	af00      	add	r7, sp, #0
 801847c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801847e:	f001 ff31 	bl	801a2e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018488:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801848a:	e011      	b.n	80184b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018490:	2b00      	cmp	r3, #0
 8018492:	d012      	beq.n	80184ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	3324      	adds	r3, #36	; 0x24
 8018498:	4618      	mov	r0, r3
 801849a:	f000 fe4f 	bl	801913c <xTaskRemoveFromEventList>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d001      	beq.n	80184a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80184a4:	f000 ff26 	bl	80192f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80184a8:	7bfb      	ldrb	r3, [r7, #15]
 80184aa:	3b01      	subs	r3, #1
 80184ac:	b2db      	uxtb	r3, r3
 80184ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	dce9      	bgt.n	801848c <prvUnlockQueue+0x16>
 80184b8:	e000      	b.n	80184bc <prvUnlockQueue+0x46>
					break;
 80184ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	22ff      	movs	r2, #255	; 0xff
 80184c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80184c4:	f001 ff3e 	bl	801a344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80184c8:	f001 ff0c 	bl	801a2e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184d4:	e011      	b.n	80184fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	691b      	ldr	r3, [r3, #16]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d012      	beq.n	8018504 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	3310      	adds	r3, #16
 80184e2:	4618      	mov	r0, r3
 80184e4:	f000 fe2a 	bl	801913c <xTaskRemoveFromEventList>
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d001      	beq.n	80184f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80184ee:	f000 ff01 	bl	80192f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80184f2:	7bbb      	ldrb	r3, [r7, #14]
 80184f4:	3b01      	subs	r3, #1
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	dce9      	bgt.n	80184d6 <prvUnlockQueue+0x60>
 8018502:	e000      	b.n	8018506 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018504:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	22ff      	movs	r2, #255	; 0xff
 801850a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801850e:	f001 ff19 	bl	801a344 <vPortExitCritical>
}
 8018512:	bf00      	nop
 8018514:	3710      	adds	r7, #16
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}

0801851a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801851a:	b580      	push	{r7, lr}
 801851c:	b084      	sub	sp, #16
 801851e:	af00      	add	r7, sp, #0
 8018520:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018522:	f001 fedf 	bl	801a2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801852a:	2b00      	cmp	r3, #0
 801852c:	d102      	bne.n	8018534 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801852e:	2301      	movs	r3, #1
 8018530:	60fb      	str	r3, [r7, #12]
 8018532:	e001      	b.n	8018538 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018534:	2300      	movs	r3, #0
 8018536:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018538:	f001 ff04 	bl	801a344 <vPortExitCritical>

	return xReturn;
 801853c:	68fb      	ldr	r3, [r7, #12]
}
 801853e:	4618      	mov	r0, r3
 8018540:	3710      	adds	r7, #16
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}

08018546 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018546:	b580      	push	{r7, lr}
 8018548:	b084      	sub	sp, #16
 801854a:	af00      	add	r7, sp, #0
 801854c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801854e:	f001 fec9 	bl	801a2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801855a:	429a      	cmp	r2, r3
 801855c:	d102      	bne.n	8018564 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801855e:	2301      	movs	r3, #1
 8018560:	60fb      	str	r3, [r7, #12]
 8018562:	e001      	b.n	8018568 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018564:	2300      	movs	r3, #0
 8018566:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018568:	f001 feec 	bl	801a344 <vPortExitCritical>

	return xReturn;
 801856c:	68fb      	ldr	r3, [r7, #12]
}
 801856e:	4618      	mov	r0, r3
 8018570:	3710      	adds	r7, #16
 8018572:	46bd      	mov	sp, r7
 8018574:	bd80      	pop	{r7, pc}
	...

08018578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018578:	b480      	push	{r7}
 801857a:	b085      	sub	sp, #20
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018582:	2300      	movs	r3, #0
 8018584:	60fb      	str	r3, [r7, #12]
 8018586:	e014      	b.n	80185b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018588:	4a0f      	ldr	r2, [pc, #60]	; (80185c8 <vQueueAddToRegistry+0x50>)
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d10b      	bne.n	80185ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018594:	490c      	ldr	r1, [pc, #48]	; (80185c8 <vQueueAddToRegistry+0x50>)
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	683a      	ldr	r2, [r7, #0]
 801859a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801859e:	4a0a      	ldr	r2, [pc, #40]	; (80185c8 <vQueueAddToRegistry+0x50>)
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	00db      	lsls	r3, r3, #3
 80185a4:	4413      	add	r3, r2
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80185aa:	e006      	b.n	80185ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	3301      	adds	r3, #1
 80185b0:	60fb      	str	r3, [r7, #12]
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	2b07      	cmp	r3, #7
 80185b6:	d9e7      	bls.n	8018588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80185b8:	bf00      	nop
 80185ba:	bf00      	nop
 80185bc:	3714      	adds	r7, #20
 80185be:	46bd      	mov	sp, r7
 80185c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c4:	4770      	bx	lr
 80185c6:	bf00      	nop
 80185c8:	24002030 	.word	0x24002030

080185cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80185cc:	b480      	push	{r7}
 80185ce:	b085      	sub	sp, #20
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80185d4:	2300      	movs	r3, #0
 80185d6:	60fb      	str	r3, [r7, #12]
 80185d8:	e016      	b.n	8018608 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80185da:	4a10      	ldr	r2, [pc, #64]	; (801861c <vQueueUnregisterQueue+0x50>)
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	00db      	lsls	r3, r3, #3
 80185e0:	4413      	add	r3, r2
 80185e2:	685b      	ldr	r3, [r3, #4]
 80185e4:	687a      	ldr	r2, [r7, #4]
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d10b      	bne.n	8018602 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80185ea:	4a0c      	ldr	r2, [pc, #48]	; (801861c <vQueueUnregisterQueue+0x50>)
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	2100      	movs	r1, #0
 80185f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80185f4:	4a09      	ldr	r2, [pc, #36]	; (801861c <vQueueUnregisterQueue+0x50>)
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	00db      	lsls	r3, r3, #3
 80185fa:	4413      	add	r3, r2
 80185fc:	2200      	movs	r2, #0
 80185fe:	605a      	str	r2, [r3, #4]
				break;
 8018600:	e006      	b.n	8018610 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	3301      	adds	r3, #1
 8018606:	60fb      	str	r3, [r7, #12]
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	2b07      	cmp	r3, #7
 801860c:	d9e5      	bls.n	80185da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801860e:	bf00      	nop
 8018610:	bf00      	nop
 8018612:	3714      	adds	r7, #20
 8018614:	46bd      	mov	sp, r7
 8018616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861a:	4770      	bx	lr
 801861c:	24002030 	.word	0x24002030

08018620 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018620:	b580      	push	{r7, lr}
 8018622:	b086      	sub	sp, #24
 8018624:	af00      	add	r7, sp, #0
 8018626:	60f8      	str	r0, [r7, #12]
 8018628:	60b9      	str	r1, [r7, #8]
 801862a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018630:	f001 fe58 	bl	801a2e4 <vPortEnterCritical>
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801863a:	b25b      	sxtb	r3, r3
 801863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018640:	d103      	bne.n	801864a <vQueueWaitForMessageRestricted+0x2a>
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	2200      	movs	r2, #0
 8018646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018650:	b25b      	sxtb	r3, r3
 8018652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018656:	d103      	bne.n	8018660 <vQueueWaitForMessageRestricted+0x40>
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	2200      	movs	r2, #0
 801865c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018660:	f001 fe70 	bl	801a344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018664:	697b      	ldr	r3, [r7, #20]
 8018666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018668:	2b00      	cmp	r3, #0
 801866a:	d106      	bne.n	801867a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	3324      	adds	r3, #36	; 0x24
 8018670:	687a      	ldr	r2, [r7, #4]
 8018672:	68b9      	ldr	r1, [r7, #8]
 8018674:	4618      	mov	r0, r3
 8018676:	f000 fd35 	bl	80190e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801867a:	6978      	ldr	r0, [r7, #20]
 801867c:	f7ff fefb 	bl	8018476 <prvUnlockQueue>
	}
 8018680:	bf00      	nop
 8018682:	3718      	adds	r7, #24
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}

08018688 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018688:	b580      	push	{r7, lr}
 801868a:	b08e      	sub	sp, #56	; 0x38
 801868c:	af04      	add	r7, sp, #16
 801868e:	60f8      	str	r0, [r7, #12]
 8018690:	60b9      	str	r1, [r7, #8]
 8018692:	607a      	str	r2, [r7, #4]
 8018694:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018698:	2b00      	cmp	r3, #0
 801869a:	d10a      	bne.n	80186b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 801869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186a0:	f383 8811 	msr	BASEPRI, r3
 80186a4:	f3bf 8f6f 	isb	sy
 80186a8:	f3bf 8f4f 	dsb	sy
 80186ac:	623b      	str	r3, [r7, #32]
}
 80186ae:	bf00      	nop
 80186b0:	e7fe      	b.n	80186b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80186b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d10a      	bne.n	80186ce <xTaskCreateStatic+0x46>
	__asm volatile
 80186b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186bc:	f383 8811 	msr	BASEPRI, r3
 80186c0:	f3bf 8f6f 	isb	sy
 80186c4:	f3bf 8f4f 	dsb	sy
 80186c8:	61fb      	str	r3, [r7, #28]
}
 80186ca:	bf00      	nop
 80186cc:	e7fe      	b.n	80186cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80186ce:	2368      	movs	r3, #104	; 0x68
 80186d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	2b68      	cmp	r3, #104	; 0x68
 80186d6:	d00a      	beq.n	80186ee <xTaskCreateStatic+0x66>
	__asm volatile
 80186d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186dc:	f383 8811 	msr	BASEPRI, r3
 80186e0:	f3bf 8f6f 	isb	sy
 80186e4:	f3bf 8f4f 	dsb	sy
 80186e8:	61bb      	str	r3, [r7, #24]
}
 80186ea:	bf00      	nop
 80186ec:	e7fe      	b.n	80186ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80186ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80186f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d01e      	beq.n	8018734 <xTaskCreateStatic+0xac>
 80186f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d01b      	beq.n	8018734 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80186fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018704:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018708:	2202      	movs	r2, #2
 801870a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801870e:	2300      	movs	r3, #0
 8018710:	9303      	str	r3, [sp, #12]
 8018712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018714:	9302      	str	r3, [sp, #8]
 8018716:	f107 0314 	add.w	r3, r7, #20
 801871a:	9301      	str	r3, [sp, #4]
 801871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871e:	9300      	str	r3, [sp, #0]
 8018720:	683b      	ldr	r3, [r7, #0]
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	68b9      	ldr	r1, [r7, #8]
 8018726:	68f8      	ldr	r0, [r7, #12]
 8018728:	f000 f850 	bl	80187cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801872c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801872e:	f000 f8e5 	bl	80188fc <prvAddNewTaskToReadyList>
 8018732:	e001      	b.n	8018738 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018734:	2300      	movs	r3, #0
 8018736:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018738:	697b      	ldr	r3, [r7, #20]
	}
 801873a:	4618      	mov	r0, r3
 801873c:	3728      	adds	r7, #40	; 0x28
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}

08018742 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018742:	b580      	push	{r7, lr}
 8018744:	b08c      	sub	sp, #48	; 0x30
 8018746:	af04      	add	r7, sp, #16
 8018748:	60f8      	str	r0, [r7, #12]
 801874a:	60b9      	str	r1, [r7, #8]
 801874c:	603b      	str	r3, [r7, #0]
 801874e:	4613      	mov	r3, r2
 8018750:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018752:	88fb      	ldrh	r3, [r7, #6]
 8018754:	009b      	lsls	r3, r3, #2
 8018756:	4618      	mov	r0, r3
 8018758:	f001 fee6 	bl	801a528 <pvPortMalloc>
 801875c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d00e      	beq.n	8018782 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018764:	2068      	movs	r0, #104	; 0x68
 8018766:	f001 fedf 	bl	801a528 <pvPortMalloc>
 801876a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801876c:	69fb      	ldr	r3, [r7, #28]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d003      	beq.n	801877a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	697a      	ldr	r2, [r7, #20]
 8018776:	631a      	str	r2, [r3, #48]	; 0x30
 8018778:	e005      	b.n	8018786 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801877a:	6978      	ldr	r0, [r7, #20]
 801877c:	f001 ffa0 	bl	801a6c0 <vPortFree>
 8018780:	e001      	b.n	8018786 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018782:	2300      	movs	r3, #0
 8018784:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d017      	beq.n	80187bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801878c:	69fb      	ldr	r3, [r7, #28]
 801878e:	2200      	movs	r2, #0
 8018790:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018794:	88fa      	ldrh	r2, [r7, #6]
 8018796:	2300      	movs	r3, #0
 8018798:	9303      	str	r3, [sp, #12]
 801879a:	69fb      	ldr	r3, [r7, #28]
 801879c:	9302      	str	r3, [sp, #8]
 801879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a0:	9301      	str	r3, [sp, #4]
 80187a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a4:	9300      	str	r3, [sp, #0]
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	68b9      	ldr	r1, [r7, #8]
 80187aa:	68f8      	ldr	r0, [r7, #12]
 80187ac:	f000 f80e 	bl	80187cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80187b0:	69f8      	ldr	r0, [r7, #28]
 80187b2:	f000 f8a3 	bl	80188fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80187b6:	2301      	movs	r3, #1
 80187b8:	61bb      	str	r3, [r7, #24]
 80187ba:	e002      	b.n	80187c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80187bc:	f04f 33ff 	mov.w	r3, #4294967295
 80187c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80187c2:	69bb      	ldr	r3, [r7, #24]
	}
 80187c4:	4618      	mov	r0, r3
 80187c6:	3720      	adds	r7, #32
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}

080187cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b088      	sub	sp, #32
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	60f8      	str	r0, [r7, #12]
 80187d4:	60b9      	str	r1, [r7, #8]
 80187d6:	607a      	str	r2, [r7, #4]
 80187d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80187da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	009b      	lsls	r3, r3, #2
 80187e2:	461a      	mov	r2, r3
 80187e4:	21a5      	movs	r1, #165	; 0xa5
 80187e6:	f002 fe2f 	bl	801b448 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80187ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80187ee:	6879      	ldr	r1, [r7, #4]
 80187f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80187f4:	440b      	add	r3, r1
 80187f6:	009b      	lsls	r3, r3, #2
 80187f8:	4413      	add	r3, r2
 80187fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80187fc:	69bb      	ldr	r3, [r7, #24]
 80187fe:	f023 0307 	bic.w	r3, r3, #7
 8018802:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018804:	69bb      	ldr	r3, [r7, #24]
 8018806:	f003 0307 	and.w	r3, r3, #7
 801880a:	2b00      	cmp	r3, #0
 801880c:	d00a      	beq.n	8018824 <prvInitialiseNewTask+0x58>
	__asm volatile
 801880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018812:	f383 8811 	msr	BASEPRI, r3
 8018816:	f3bf 8f6f 	isb	sy
 801881a:	f3bf 8f4f 	dsb	sy
 801881e:	617b      	str	r3, [r7, #20]
}
 8018820:	bf00      	nop
 8018822:	e7fe      	b.n	8018822 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8018824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018826:	69ba      	ldr	r2, [r7, #24]
 8018828:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d01f      	beq.n	8018870 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018830:	2300      	movs	r3, #0
 8018832:	61fb      	str	r3, [r7, #28]
 8018834:	e012      	b.n	801885c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018836:	68ba      	ldr	r2, [r7, #8]
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	4413      	add	r3, r2
 801883c:	7819      	ldrb	r1, [r3, #0]
 801883e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018840:	69fb      	ldr	r3, [r7, #28]
 8018842:	4413      	add	r3, r2
 8018844:	3334      	adds	r3, #52	; 0x34
 8018846:	460a      	mov	r2, r1
 8018848:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801884a:	68ba      	ldr	r2, [r7, #8]
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	4413      	add	r3, r2
 8018850:	781b      	ldrb	r3, [r3, #0]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d006      	beq.n	8018864 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018856:	69fb      	ldr	r3, [r7, #28]
 8018858:	3301      	adds	r3, #1
 801885a:	61fb      	str	r3, [r7, #28]
 801885c:	69fb      	ldr	r3, [r7, #28]
 801885e:	2b0f      	cmp	r3, #15
 8018860:	d9e9      	bls.n	8018836 <prvInitialiseNewTask+0x6a>
 8018862:	e000      	b.n	8018866 <prvInitialiseNewTask+0x9a>
			{
				break;
 8018864:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018868:	2200      	movs	r2, #0
 801886a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801886e:	e003      	b.n	8018878 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018872:	2200      	movs	r2, #0
 8018874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801887a:	2b37      	cmp	r3, #55	; 0x37
 801887c:	d901      	bls.n	8018882 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801887e:	2337      	movs	r3, #55	; 0x37
 8018880:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018886:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801888c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018890:	2200      	movs	r2, #0
 8018892:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018896:	3304      	adds	r3, #4
 8018898:	4618      	mov	r0, r3
 801889a:	f7fe fe53 	bl	8017544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a0:	3318      	adds	r3, #24
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7fe fe4e 	bl	8017544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80188a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80188b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80188b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80188be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c0:	2200      	movs	r2, #0
 80188c2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80188c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c6:	2200      	movs	r2, #0
 80188c8:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80188ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188cc:	2200      	movs	r2, #0
 80188ce:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80188d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d2:	2200      	movs	r2, #0
 80188d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80188d8:	683a      	ldr	r2, [r7, #0]
 80188da:	68f9      	ldr	r1, [r7, #12]
 80188dc:	69b8      	ldr	r0, [r7, #24]
 80188de:	f001 fbd1 	bl	801a084 <pxPortInitialiseStack>
 80188e2:	4602      	mov	r2, r0
 80188e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80188e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d002      	beq.n	80188f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80188ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188f4:	bf00      	nop
 80188f6:	3720      	adds	r7, #32
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}

080188fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018904:	f001 fcee 	bl	801a2e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018908:	4b2d      	ldr	r3, [pc, #180]	; (80189c0 <prvAddNewTaskToReadyList+0xc4>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	3301      	adds	r3, #1
 801890e:	4a2c      	ldr	r2, [pc, #176]	; (80189c0 <prvAddNewTaskToReadyList+0xc4>)
 8018910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018912:	4b2c      	ldr	r3, [pc, #176]	; (80189c4 <prvAddNewTaskToReadyList+0xc8>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d109      	bne.n	801892e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801891a:	4a2a      	ldr	r2, [pc, #168]	; (80189c4 <prvAddNewTaskToReadyList+0xc8>)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018920:	4b27      	ldr	r3, [pc, #156]	; (80189c0 <prvAddNewTaskToReadyList+0xc4>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	2b01      	cmp	r3, #1
 8018926:	d110      	bne.n	801894a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018928:	f000 fd08 	bl	801933c <prvInitialiseTaskLists>
 801892c:	e00d      	b.n	801894a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801892e:	4b26      	ldr	r3, [pc, #152]	; (80189c8 <prvAddNewTaskToReadyList+0xcc>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d109      	bne.n	801894a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018936:	4b23      	ldr	r3, [pc, #140]	; (80189c4 <prvAddNewTaskToReadyList+0xc8>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018940:	429a      	cmp	r2, r3
 8018942:	d802      	bhi.n	801894a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018944:	4a1f      	ldr	r2, [pc, #124]	; (80189c4 <prvAddNewTaskToReadyList+0xc8>)
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801894a:	4b20      	ldr	r3, [pc, #128]	; (80189cc <prvAddNewTaskToReadyList+0xd0>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	3301      	adds	r3, #1
 8018950:	4a1e      	ldr	r2, [pc, #120]	; (80189cc <prvAddNewTaskToReadyList+0xd0>)
 8018952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018954:	4b1d      	ldr	r3, [pc, #116]	; (80189cc <prvAddNewTaskToReadyList+0xd0>)
 8018956:	681a      	ldr	r2, [r3, #0]
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018960:	4b1b      	ldr	r3, [pc, #108]	; (80189d0 <prvAddNewTaskToReadyList+0xd4>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	429a      	cmp	r2, r3
 8018966:	d903      	bls.n	8018970 <prvAddNewTaskToReadyList+0x74>
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801896c:	4a18      	ldr	r2, [pc, #96]	; (80189d0 <prvAddNewTaskToReadyList+0xd4>)
 801896e:	6013      	str	r3, [r2, #0]
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018974:	4613      	mov	r3, r2
 8018976:	009b      	lsls	r3, r3, #2
 8018978:	4413      	add	r3, r2
 801897a:	009b      	lsls	r3, r3, #2
 801897c:	4a15      	ldr	r2, [pc, #84]	; (80189d4 <prvAddNewTaskToReadyList+0xd8>)
 801897e:	441a      	add	r2, r3
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	3304      	adds	r3, #4
 8018984:	4619      	mov	r1, r3
 8018986:	4610      	mov	r0, r2
 8018988:	f7fe fde9 	bl	801755e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801898c:	f001 fcda 	bl	801a344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018990:	4b0d      	ldr	r3, [pc, #52]	; (80189c8 <prvAddNewTaskToReadyList+0xcc>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d00e      	beq.n	80189b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018998:	4b0a      	ldr	r3, [pc, #40]	; (80189c4 <prvAddNewTaskToReadyList+0xc8>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d207      	bcs.n	80189b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80189a6:	4b0c      	ldr	r3, [pc, #48]	; (80189d8 <prvAddNewTaskToReadyList+0xdc>)
 80189a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189ac:	601a      	str	r2, [r3, #0]
 80189ae:	f3bf 8f4f 	dsb	sy
 80189b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80189b6:	bf00      	nop
 80189b8:	3708      	adds	r7, #8
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	24002544 	.word	0x24002544
 80189c4:	24002070 	.word	0x24002070
 80189c8:	24002550 	.word	0x24002550
 80189cc:	24002560 	.word	0x24002560
 80189d0:	2400254c 	.word	0x2400254c
 80189d4:	24002074 	.word	0x24002074
 80189d8:	e000ed04 	.word	0xe000ed04

080189dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80189e4:	f001 fc7e 	bl	801a2e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d102      	bne.n	80189f4 <vTaskSuspend+0x18>
 80189ee:	4b30      	ldr	r3, [pc, #192]	; (8018ab0 <vTaskSuspend+0xd4>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	e000      	b.n	80189f6 <vTaskSuspend+0x1a>
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	3304      	adds	r3, #4
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7fe fe0b 	bl	8017618 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d004      	beq.n	8018a14 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	3318      	adds	r3, #24
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7fe fe02 	bl	8017618 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	3304      	adds	r3, #4
 8018a18:	4619      	mov	r1, r3
 8018a1a:	4826      	ldr	r0, [pc, #152]	; (8018ab4 <vTaskSuspend+0xd8>)
 8018a1c:	f7fe fd9f 	bl	801755e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018a26:	b2db      	uxtb	r3, r3
 8018a28:	2b01      	cmp	r3, #1
 8018a2a:	d103      	bne.n	8018a34 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2200      	movs	r2, #0
 8018a30:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018a34:	f001 fc86 	bl	801a344 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018a38:	4b1f      	ldr	r3, [pc, #124]	; (8018ab8 <vTaskSuspend+0xdc>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d005      	beq.n	8018a4c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018a40:	f001 fc50 	bl	801a2e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018a44:	f000 fd18 	bl	8019478 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018a48:	f001 fc7c 	bl	801a344 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018a4c:	4b18      	ldr	r3, [pc, #96]	; (8018ab0 <vTaskSuspend+0xd4>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	68fa      	ldr	r2, [r7, #12]
 8018a52:	429a      	cmp	r2, r3
 8018a54:	d127      	bne.n	8018aa6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8018a56:	4b18      	ldr	r3, [pc, #96]	; (8018ab8 <vTaskSuspend+0xdc>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d017      	beq.n	8018a8e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018a5e:	4b17      	ldr	r3, [pc, #92]	; (8018abc <vTaskSuspend+0xe0>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d00a      	beq.n	8018a7c <vTaskSuspend+0xa0>
	__asm volatile
 8018a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a6a:	f383 8811 	msr	BASEPRI, r3
 8018a6e:	f3bf 8f6f 	isb	sy
 8018a72:	f3bf 8f4f 	dsb	sy
 8018a76:	60bb      	str	r3, [r7, #8]
}
 8018a78:	bf00      	nop
 8018a7a:	e7fe      	b.n	8018a7a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018a7c:	4b10      	ldr	r3, [pc, #64]	; (8018ac0 <vTaskSuspend+0xe4>)
 8018a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a82:	601a      	str	r2, [r3, #0]
 8018a84:	f3bf 8f4f 	dsb	sy
 8018a88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a8c:	e00b      	b.n	8018aa6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018a8e:	4b09      	ldr	r3, [pc, #36]	; (8018ab4 <vTaskSuspend+0xd8>)
 8018a90:	681a      	ldr	r2, [r3, #0]
 8018a92:	4b0c      	ldr	r3, [pc, #48]	; (8018ac4 <vTaskSuspend+0xe8>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d103      	bne.n	8018aa2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018a9a:	4b05      	ldr	r3, [pc, #20]	; (8018ab0 <vTaskSuspend+0xd4>)
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	601a      	str	r2, [r3, #0]
	}
 8018aa0:	e001      	b.n	8018aa6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018aa2:	f000 fa7f 	bl	8018fa4 <vTaskSwitchContext>
	}
 8018aa6:	bf00      	nop
 8018aa8:	3710      	adds	r7, #16
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}
 8018aae:	bf00      	nop
 8018ab0:	24002070 	.word	0x24002070
 8018ab4:	24002530 	.word	0x24002530
 8018ab8:	24002550 	.word	0x24002550
 8018abc:	2400256c 	.word	0x2400256c
 8018ac0:	e000ed04 	.word	0xe000ed04
 8018ac4:	24002544 	.word	0x24002544

08018ac8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018ac8:	b480      	push	{r7}
 8018aca:	b087      	sub	sp, #28
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d10a      	bne.n	8018af4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ae2:	f383 8811 	msr	BASEPRI, r3
 8018ae6:	f3bf 8f6f 	isb	sy
 8018aea:	f3bf 8f4f 	dsb	sy
 8018aee:	60fb      	str	r3, [r7, #12]
}
 8018af0:	bf00      	nop
 8018af2:	e7fe      	b.n	8018af2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	695b      	ldr	r3, [r3, #20]
 8018af8:	4a0a      	ldr	r2, [pc, #40]	; (8018b24 <prvTaskIsTaskSuspended+0x5c>)
 8018afa:	4293      	cmp	r3, r2
 8018afc:	d10a      	bne.n	8018b14 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018afe:	693b      	ldr	r3, [r7, #16]
 8018b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b02:	4a09      	ldr	r2, [pc, #36]	; (8018b28 <prvTaskIsTaskSuspended+0x60>)
 8018b04:	4293      	cmp	r3, r2
 8018b06:	d005      	beq.n	8018b14 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018b08:	693b      	ldr	r3, [r7, #16]
 8018b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d101      	bne.n	8018b14 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018b10:	2301      	movs	r3, #1
 8018b12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018b14:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018b16:	4618      	mov	r0, r3
 8018b18:	371c      	adds	r7, #28
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b20:	4770      	bx	lr
 8018b22:	bf00      	nop
 8018b24:	24002530 	.word	0x24002530
 8018b28:	24002504 	.word	0x24002504

08018b2c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b084      	sub	sp, #16
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d10a      	bne.n	8018b54 <vTaskResume+0x28>
	__asm volatile
 8018b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b42:	f383 8811 	msr	BASEPRI, r3
 8018b46:	f3bf 8f6f 	isb	sy
 8018b4a:	f3bf 8f4f 	dsb	sy
 8018b4e:	60bb      	str	r3, [r7, #8]
}
 8018b50:	bf00      	nop
 8018b52:	e7fe      	b.n	8018b52 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018b54:	4b20      	ldr	r3, [pc, #128]	; (8018bd8 <vTaskResume+0xac>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	68fa      	ldr	r2, [r7, #12]
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d038      	beq.n	8018bd0 <vTaskResume+0xa4>
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d035      	beq.n	8018bd0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018b64:	f001 fbbe 	bl	801a2e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f7ff ffad 	bl	8018ac8 <prvTaskIsTaskSuspended>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d02b      	beq.n	8018bcc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	3304      	adds	r3, #4
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7fe fd4d 	bl	8017618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b82:	4b16      	ldr	r3, [pc, #88]	; (8018bdc <vTaskResume+0xb0>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	429a      	cmp	r2, r3
 8018b88:	d903      	bls.n	8018b92 <vTaskResume+0x66>
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b8e:	4a13      	ldr	r2, [pc, #76]	; (8018bdc <vTaskResume+0xb0>)
 8018b90:	6013      	str	r3, [r2, #0]
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b96:	4613      	mov	r3, r2
 8018b98:	009b      	lsls	r3, r3, #2
 8018b9a:	4413      	add	r3, r2
 8018b9c:	009b      	lsls	r3, r3, #2
 8018b9e:	4a10      	ldr	r2, [pc, #64]	; (8018be0 <vTaskResume+0xb4>)
 8018ba0:	441a      	add	r2, r3
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	3304      	adds	r3, #4
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	4610      	mov	r0, r2
 8018baa:	f7fe fcd8 	bl	801755e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bb2:	4b09      	ldr	r3, [pc, #36]	; (8018bd8 <vTaskResume+0xac>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d307      	bcc.n	8018bcc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018bbc:	4b09      	ldr	r3, [pc, #36]	; (8018be4 <vTaskResume+0xb8>)
 8018bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bc2:	601a      	str	r2, [r3, #0]
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018bcc:	f001 fbba 	bl	801a344 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018bd0:	bf00      	nop
 8018bd2:	3710      	adds	r7, #16
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}
 8018bd8:	24002070 	.word	0x24002070
 8018bdc:	2400254c 	.word	0x2400254c
 8018be0:	24002074 	.word	0x24002074
 8018be4:	e000ed04 	.word	0xe000ed04

08018be8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b08a      	sub	sp, #40	; 0x28
 8018bec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018bf6:	463a      	mov	r2, r7
 8018bf8:	1d39      	adds	r1, r7, #4
 8018bfa:	f107 0308 	add.w	r3, r7, #8
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7fe fc4c 	bl	801749c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018c04:	6839      	ldr	r1, [r7, #0]
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	68ba      	ldr	r2, [r7, #8]
 8018c0a:	9202      	str	r2, [sp, #8]
 8018c0c:	9301      	str	r3, [sp, #4]
 8018c0e:	2300      	movs	r3, #0
 8018c10:	9300      	str	r3, [sp, #0]
 8018c12:	2300      	movs	r3, #0
 8018c14:	460a      	mov	r2, r1
 8018c16:	4922      	ldr	r1, [pc, #136]	; (8018ca0 <vTaskStartScheduler+0xb8>)
 8018c18:	4822      	ldr	r0, [pc, #136]	; (8018ca4 <vTaskStartScheduler+0xbc>)
 8018c1a:	f7ff fd35 	bl	8018688 <xTaskCreateStatic>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	4a21      	ldr	r2, [pc, #132]	; (8018ca8 <vTaskStartScheduler+0xc0>)
 8018c22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018c24:	4b20      	ldr	r3, [pc, #128]	; (8018ca8 <vTaskStartScheduler+0xc0>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d002      	beq.n	8018c32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	617b      	str	r3, [r7, #20]
 8018c30:	e001      	b.n	8018c36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018c32:	2300      	movs	r3, #0
 8018c34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	2b01      	cmp	r3, #1
 8018c3a:	d102      	bne.n	8018c42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018c3c:	f000 fe1a 	bl	8019874 <xTimerCreateTimerTask>
 8018c40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018c42:	697b      	ldr	r3, [r7, #20]
 8018c44:	2b01      	cmp	r3, #1
 8018c46:	d118      	bne.n	8018c7a <vTaskStartScheduler+0x92>
	__asm volatile
 8018c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c4c:	f383 8811 	msr	BASEPRI, r3
 8018c50:	f3bf 8f6f 	isb	sy
 8018c54:	f3bf 8f4f 	dsb	sy
 8018c58:	613b      	str	r3, [r7, #16]
}
 8018c5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018c5c:	4b13      	ldr	r3, [pc, #76]	; (8018cac <vTaskStartScheduler+0xc4>)
 8018c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8018c62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018c64:	4b12      	ldr	r3, [pc, #72]	; (8018cb0 <vTaskStartScheduler+0xc8>)
 8018c66:	2201      	movs	r2, #1
 8018c68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018c6a:	4b12      	ldr	r3, [pc, #72]	; (8018cb4 <vTaskStartScheduler+0xcc>)
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8018c70:	f7e8 fe9e 	bl	80019b0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018c74:	f001 fa94 	bl	801a1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018c78:	e00e      	b.n	8018c98 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c80:	d10a      	bne.n	8018c98 <vTaskStartScheduler+0xb0>
	__asm volatile
 8018c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c86:	f383 8811 	msr	BASEPRI, r3
 8018c8a:	f3bf 8f6f 	isb	sy
 8018c8e:	f3bf 8f4f 	dsb	sy
 8018c92:	60fb      	str	r3, [r7, #12]
}
 8018c94:	bf00      	nop
 8018c96:	e7fe      	b.n	8018c96 <vTaskStartScheduler+0xae>
}
 8018c98:	bf00      	nop
 8018c9a:	3718      	adds	r7, #24
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}
 8018ca0:	0801ddbc 	.word	0x0801ddbc
 8018ca4:	0801930d 	.word	0x0801930d
 8018ca8:	24002568 	.word	0x24002568
 8018cac:	24002564 	.word	0x24002564
 8018cb0:	24002550 	.word	0x24002550
 8018cb4:	24002548 	.word	0x24002548

08018cb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018cb8:	b480      	push	{r7}
 8018cba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018cbc:	4b04      	ldr	r3, [pc, #16]	; (8018cd0 <vTaskSuspendAll+0x18>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	3301      	adds	r3, #1
 8018cc2:	4a03      	ldr	r2, [pc, #12]	; (8018cd0 <vTaskSuspendAll+0x18>)
 8018cc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018cc6:	bf00      	nop
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr
 8018cd0:	2400256c 	.word	0x2400256c

08018cd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b084      	sub	sp, #16
 8018cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018cda:	2300      	movs	r3, #0
 8018cdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018cde:	2300      	movs	r3, #0
 8018ce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018ce2:	4b42      	ldr	r3, [pc, #264]	; (8018dec <xTaskResumeAll+0x118>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d10a      	bne.n	8018d00 <xTaskResumeAll+0x2c>
	__asm volatile
 8018cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cee:	f383 8811 	msr	BASEPRI, r3
 8018cf2:	f3bf 8f6f 	isb	sy
 8018cf6:	f3bf 8f4f 	dsb	sy
 8018cfa:	603b      	str	r3, [r7, #0]
}
 8018cfc:	bf00      	nop
 8018cfe:	e7fe      	b.n	8018cfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018d00:	f001 faf0 	bl	801a2e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018d04:	4b39      	ldr	r3, [pc, #228]	; (8018dec <xTaskResumeAll+0x118>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	3b01      	subs	r3, #1
 8018d0a:	4a38      	ldr	r2, [pc, #224]	; (8018dec <xTaskResumeAll+0x118>)
 8018d0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018d0e:	4b37      	ldr	r3, [pc, #220]	; (8018dec <xTaskResumeAll+0x118>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d162      	bne.n	8018ddc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018d16:	4b36      	ldr	r3, [pc, #216]	; (8018df0 <xTaskResumeAll+0x11c>)
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d05e      	beq.n	8018ddc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d1e:	e02f      	b.n	8018d80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d20:	4b34      	ldr	r3, [pc, #208]	; (8018df4 <xTaskResumeAll+0x120>)
 8018d22:	68db      	ldr	r3, [r3, #12]
 8018d24:	68db      	ldr	r3, [r3, #12]
 8018d26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	3318      	adds	r3, #24
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7fe fc73 	bl	8017618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	3304      	adds	r3, #4
 8018d36:	4618      	mov	r0, r3
 8018d38:	f7fe fc6e 	bl	8017618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d40:	4b2d      	ldr	r3, [pc, #180]	; (8018df8 <xTaskResumeAll+0x124>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	429a      	cmp	r2, r3
 8018d46:	d903      	bls.n	8018d50 <xTaskResumeAll+0x7c>
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d4c:	4a2a      	ldr	r2, [pc, #168]	; (8018df8 <xTaskResumeAll+0x124>)
 8018d4e:	6013      	str	r3, [r2, #0]
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d54:	4613      	mov	r3, r2
 8018d56:	009b      	lsls	r3, r3, #2
 8018d58:	4413      	add	r3, r2
 8018d5a:	009b      	lsls	r3, r3, #2
 8018d5c:	4a27      	ldr	r2, [pc, #156]	; (8018dfc <xTaskResumeAll+0x128>)
 8018d5e:	441a      	add	r2, r3
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	3304      	adds	r3, #4
 8018d64:	4619      	mov	r1, r3
 8018d66:	4610      	mov	r0, r2
 8018d68:	f7fe fbf9 	bl	801755e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d70:	4b23      	ldr	r3, [pc, #140]	; (8018e00 <xTaskResumeAll+0x12c>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d302      	bcc.n	8018d80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018d7a:	4b22      	ldr	r3, [pc, #136]	; (8018e04 <xTaskResumeAll+0x130>)
 8018d7c:	2201      	movs	r2, #1
 8018d7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d80:	4b1c      	ldr	r3, [pc, #112]	; (8018df4 <xTaskResumeAll+0x120>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d1cb      	bne.n	8018d20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d001      	beq.n	8018d92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d8e:	f000 fb73 	bl	8019478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d92:	4b1d      	ldr	r3, [pc, #116]	; (8018e08 <xTaskResumeAll+0x134>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d010      	beq.n	8018dc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d9e:	f000 f847 	bl	8018e30 <xTaskIncrementTick>
 8018da2:	4603      	mov	r3, r0
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d002      	beq.n	8018dae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018da8:	4b16      	ldr	r3, [pc, #88]	; (8018e04 <xTaskResumeAll+0x130>)
 8018daa:	2201      	movs	r2, #1
 8018dac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	3b01      	subs	r3, #1
 8018db2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d1f1      	bne.n	8018d9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018dba:	4b13      	ldr	r3, [pc, #76]	; (8018e08 <xTaskResumeAll+0x134>)
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018dc0:	4b10      	ldr	r3, [pc, #64]	; (8018e04 <xTaskResumeAll+0x130>)
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d009      	beq.n	8018ddc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018dc8:	2301      	movs	r3, #1
 8018dca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018dcc:	4b0f      	ldr	r3, [pc, #60]	; (8018e0c <xTaskResumeAll+0x138>)
 8018dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dd2:	601a      	str	r2, [r3, #0]
 8018dd4:	f3bf 8f4f 	dsb	sy
 8018dd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018ddc:	f001 fab2 	bl	801a344 <vPortExitCritical>

	return xAlreadyYielded;
 8018de0:	68bb      	ldr	r3, [r7, #8]
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	3710      	adds	r7, #16
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop
 8018dec:	2400256c 	.word	0x2400256c
 8018df0:	24002544 	.word	0x24002544
 8018df4:	24002504 	.word	0x24002504
 8018df8:	2400254c 	.word	0x2400254c
 8018dfc:	24002074 	.word	0x24002074
 8018e00:	24002070 	.word	0x24002070
 8018e04:	24002558 	.word	0x24002558
 8018e08:	24002554 	.word	0x24002554
 8018e0c:	e000ed04 	.word	0xe000ed04

08018e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018e16:	4b05      	ldr	r3, [pc, #20]	; (8018e2c <xTaskGetTickCount+0x1c>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018e1c:	687b      	ldr	r3, [r7, #4]
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	370c      	adds	r7, #12
 8018e22:	46bd      	mov	sp, r7
 8018e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	24002548 	.word	0x24002548

08018e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018e36:	2300      	movs	r3, #0
 8018e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e3a:	4b4f      	ldr	r3, [pc, #316]	; (8018f78 <xTaskIncrementTick+0x148>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	f040 808f 	bne.w	8018f62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018e44:	4b4d      	ldr	r3, [pc, #308]	; (8018f7c <xTaskIncrementTick+0x14c>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	3301      	adds	r3, #1
 8018e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018e4c:	4a4b      	ldr	r2, [pc, #300]	; (8018f7c <xTaskIncrementTick+0x14c>)
 8018e4e:	693b      	ldr	r3, [r7, #16]
 8018e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018e52:	693b      	ldr	r3, [r7, #16]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d120      	bne.n	8018e9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018e58:	4b49      	ldr	r3, [pc, #292]	; (8018f80 <xTaskIncrementTick+0x150>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d00a      	beq.n	8018e78 <xTaskIncrementTick+0x48>
	__asm volatile
 8018e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e66:	f383 8811 	msr	BASEPRI, r3
 8018e6a:	f3bf 8f6f 	isb	sy
 8018e6e:	f3bf 8f4f 	dsb	sy
 8018e72:	603b      	str	r3, [r7, #0]
}
 8018e74:	bf00      	nop
 8018e76:	e7fe      	b.n	8018e76 <xTaskIncrementTick+0x46>
 8018e78:	4b41      	ldr	r3, [pc, #260]	; (8018f80 <xTaskIncrementTick+0x150>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	60fb      	str	r3, [r7, #12]
 8018e7e:	4b41      	ldr	r3, [pc, #260]	; (8018f84 <xTaskIncrementTick+0x154>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	4a3f      	ldr	r2, [pc, #252]	; (8018f80 <xTaskIncrementTick+0x150>)
 8018e84:	6013      	str	r3, [r2, #0]
 8018e86:	4a3f      	ldr	r2, [pc, #252]	; (8018f84 <xTaskIncrementTick+0x154>)
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	6013      	str	r3, [r2, #0]
 8018e8c:	4b3e      	ldr	r3, [pc, #248]	; (8018f88 <xTaskIncrementTick+0x158>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	3301      	adds	r3, #1
 8018e92:	4a3d      	ldr	r2, [pc, #244]	; (8018f88 <xTaskIncrementTick+0x158>)
 8018e94:	6013      	str	r3, [r2, #0]
 8018e96:	f000 faef 	bl	8019478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e9a:	4b3c      	ldr	r3, [pc, #240]	; (8018f8c <xTaskIncrementTick+0x15c>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	693a      	ldr	r2, [r7, #16]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d349      	bcc.n	8018f38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ea4:	4b36      	ldr	r3, [pc, #216]	; (8018f80 <xTaskIncrementTick+0x150>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d104      	bne.n	8018eb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018eae:	4b37      	ldr	r3, [pc, #220]	; (8018f8c <xTaskIncrementTick+0x15c>)
 8018eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8018eb4:	601a      	str	r2, [r3, #0]
					break;
 8018eb6:	e03f      	b.n	8018f38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018eb8:	4b31      	ldr	r3, [pc, #196]	; (8018f80 <xTaskIncrementTick+0x150>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	68db      	ldr	r3, [r3, #12]
 8018ec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018ec2:	68bb      	ldr	r3, [r7, #8]
 8018ec4:	685b      	ldr	r3, [r3, #4]
 8018ec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018ec8:	693a      	ldr	r2, [r7, #16]
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d203      	bcs.n	8018ed8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018ed0:	4a2e      	ldr	r2, [pc, #184]	; (8018f8c <xTaskIncrementTick+0x15c>)
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018ed6:	e02f      	b.n	8018f38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	3304      	adds	r3, #4
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7fe fb9b 	bl	8017618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d004      	beq.n	8018ef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018eea:	68bb      	ldr	r3, [r7, #8]
 8018eec:	3318      	adds	r3, #24
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f7fe fb92 	bl	8017618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ef8:	4b25      	ldr	r3, [pc, #148]	; (8018f90 <xTaskIncrementTick+0x160>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d903      	bls.n	8018f08 <xTaskIncrementTick+0xd8>
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f04:	4a22      	ldr	r2, [pc, #136]	; (8018f90 <xTaskIncrementTick+0x160>)
 8018f06:	6013      	str	r3, [r2, #0]
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f0c:	4613      	mov	r3, r2
 8018f0e:	009b      	lsls	r3, r3, #2
 8018f10:	4413      	add	r3, r2
 8018f12:	009b      	lsls	r3, r3, #2
 8018f14:	4a1f      	ldr	r2, [pc, #124]	; (8018f94 <xTaskIncrementTick+0x164>)
 8018f16:	441a      	add	r2, r3
 8018f18:	68bb      	ldr	r3, [r7, #8]
 8018f1a:	3304      	adds	r3, #4
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4610      	mov	r0, r2
 8018f20:	f7fe fb1d 	bl	801755e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f28:	4b1b      	ldr	r3, [pc, #108]	; (8018f98 <xTaskIncrementTick+0x168>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d3b8      	bcc.n	8018ea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018f32:	2301      	movs	r3, #1
 8018f34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018f36:	e7b5      	b.n	8018ea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018f38:	4b17      	ldr	r3, [pc, #92]	; (8018f98 <xTaskIncrementTick+0x168>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f3e:	4915      	ldr	r1, [pc, #84]	; (8018f94 <xTaskIncrementTick+0x164>)
 8018f40:	4613      	mov	r3, r2
 8018f42:	009b      	lsls	r3, r3, #2
 8018f44:	4413      	add	r3, r2
 8018f46:	009b      	lsls	r3, r3, #2
 8018f48:	440b      	add	r3, r1
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2b01      	cmp	r3, #1
 8018f4e:	d901      	bls.n	8018f54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018f50:	2301      	movs	r3, #1
 8018f52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018f54:	4b11      	ldr	r3, [pc, #68]	; (8018f9c <xTaskIncrementTick+0x16c>)
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d007      	beq.n	8018f6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018f5c:	2301      	movs	r3, #1
 8018f5e:	617b      	str	r3, [r7, #20]
 8018f60:	e004      	b.n	8018f6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018f62:	4b0f      	ldr	r3, [pc, #60]	; (8018fa0 <xTaskIncrementTick+0x170>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	3301      	adds	r3, #1
 8018f68:	4a0d      	ldr	r2, [pc, #52]	; (8018fa0 <xTaskIncrementTick+0x170>)
 8018f6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018f6c:	697b      	ldr	r3, [r7, #20]
}
 8018f6e:	4618      	mov	r0, r3
 8018f70:	3718      	adds	r7, #24
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}
 8018f76:	bf00      	nop
 8018f78:	2400256c 	.word	0x2400256c
 8018f7c:	24002548 	.word	0x24002548
 8018f80:	240024fc 	.word	0x240024fc
 8018f84:	24002500 	.word	0x24002500
 8018f88:	2400255c 	.word	0x2400255c
 8018f8c:	24002564 	.word	0x24002564
 8018f90:	2400254c 	.word	0x2400254c
 8018f94:	24002074 	.word	0x24002074
 8018f98:	24002070 	.word	0x24002070
 8018f9c:	24002558 	.word	0x24002558
 8018fa0:	24002554 	.word	0x24002554

08018fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018fa4:	b480      	push	{r7}
 8018fa6:	b085      	sub	sp, #20
 8018fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018faa:	4b34      	ldr	r3, [pc, #208]	; (801907c <vTaskSwitchContext+0xd8>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d003      	beq.n	8018fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018fb2:	4b33      	ldr	r3, [pc, #204]	; (8019080 <vTaskSwitchContext+0xdc>)
 8018fb4:	2201      	movs	r2, #1
 8018fb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018fb8:	e059      	b.n	801906e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8018fba:	4b31      	ldr	r3, [pc, #196]	; (8019080 <vTaskSwitchContext+0xdc>)
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8018fc0:	4b30      	ldr	r3, [pc, #192]	; (8019084 <vTaskSwitchContext+0xe0>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4a30      	ldr	r2, [pc, #192]	; (8019088 <vTaskSwitchContext+0xe4>)
 8018fc6:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8018fc8:	4b2f      	ldr	r3, [pc, #188]	; (8019088 <vTaskSwitchContext+0xe4>)
 8018fca:	681a      	ldr	r2, [r3, #0]
 8018fcc:	4b2f      	ldr	r3, [pc, #188]	; (801908c <vTaskSwitchContext+0xe8>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d909      	bls.n	8018fe8 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8018fd4:	4b2e      	ldr	r3, [pc, #184]	; (8019090 <vTaskSwitchContext+0xec>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018fda:	4a2b      	ldr	r2, [pc, #172]	; (8019088 <vTaskSwitchContext+0xe4>)
 8018fdc:	6810      	ldr	r0, [r2, #0]
 8018fde:	4a2b      	ldr	r2, [pc, #172]	; (801908c <vTaskSwitchContext+0xe8>)
 8018fe0:	6812      	ldr	r2, [r2, #0]
 8018fe2:	1a82      	subs	r2, r0, r2
 8018fe4:	440a      	add	r2, r1
 8018fe6:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8018fe8:	4b27      	ldr	r3, [pc, #156]	; (8019088 <vTaskSwitchContext+0xe4>)
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4a27      	ldr	r2, [pc, #156]	; (801908c <vTaskSwitchContext+0xe8>)
 8018fee:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ff0:	4b28      	ldr	r3, [pc, #160]	; (8019094 <vTaskSwitchContext+0xf0>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	60fb      	str	r3, [r7, #12]
 8018ff6:	e010      	b.n	801901a <vTaskSwitchContext+0x76>
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d10a      	bne.n	8019014 <vTaskSwitchContext+0x70>
	__asm volatile
 8018ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019002:	f383 8811 	msr	BASEPRI, r3
 8019006:	f3bf 8f6f 	isb	sy
 801900a:	f3bf 8f4f 	dsb	sy
 801900e:	607b      	str	r3, [r7, #4]
}
 8019010:	bf00      	nop
 8019012:	e7fe      	b.n	8019012 <vTaskSwitchContext+0x6e>
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	3b01      	subs	r3, #1
 8019018:	60fb      	str	r3, [r7, #12]
 801901a:	491f      	ldr	r1, [pc, #124]	; (8019098 <vTaskSwitchContext+0xf4>)
 801901c:	68fa      	ldr	r2, [r7, #12]
 801901e:	4613      	mov	r3, r2
 8019020:	009b      	lsls	r3, r3, #2
 8019022:	4413      	add	r3, r2
 8019024:	009b      	lsls	r3, r3, #2
 8019026:	440b      	add	r3, r1
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d0e4      	beq.n	8018ff8 <vTaskSwitchContext+0x54>
 801902e:	68fa      	ldr	r2, [r7, #12]
 8019030:	4613      	mov	r3, r2
 8019032:	009b      	lsls	r3, r3, #2
 8019034:	4413      	add	r3, r2
 8019036:	009b      	lsls	r3, r3, #2
 8019038:	4a17      	ldr	r2, [pc, #92]	; (8019098 <vTaskSwitchContext+0xf4>)
 801903a:	4413      	add	r3, r2
 801903c:	60bb      	str	r3, [r7, #8]
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	685b      	ldr	r3, [r3, #4]
 8019042:	685a      	ldr	r2, [r3, #4]
 8019044:	68bb      	ldr	r3, [r7, #8]
 8019046:	605a      	str	r2, [r3, #4]
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	685a      	ldr	r2, [r3, #4]
 801904c:	68bb      	ldr	r3, [r7, #8]
 801904e:	3308      	adds	r3, #8
 8019050:	429a      	cmp	r2, r3
 8019052:	d104      	bne.n	801905e <vTaskSwitchContext+0xba>
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	685b      	ldr	r3, [r3, #4]
 8019058:	685a      	ldr	r2, [r3, #4]
 801905a:	68bb      	ldr	r3, [r7, #8]
 801905c:	605a      	str	r2, [r3, #4]
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	68db      	ldr	r3, [r3, #12]
 8019064:	4a0a      	ldr	r2, [pc, #40]	; (8019090 <vTaskSwitchContext+0xec>)
 8019066:	6013      	str	r3, [r2, #0]
 8019068:	4a0a      	ldr	r2, [pc, #40]	; (8019094 <vTaskSwitchContext+0xf0>)
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	6013      	str	r3, [r2, #0]
}
 801906e:	bf00      	nop
 8019070:	3714      	adds	r7, #20
 8019072:	46bd      	mov	sp, r7
 8019074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019078:	4770      	bx	lr
 801907a:	bf00      	nop
 801907c:	2400256c 	.word	0x2400256c
 8019080:	24002558 	.word	0x24002558
 8019084:	2400148c 	.word	0x2400148c
 8019088:	24002574 	.word	0x24002574
 801908c:	24002570 	.word	0x24002570
 8019090:	24002070 	.word	0x24002070
 8019094:	2400254c 	.word	0x2400254c
 8019098:	24002074 	.word	0x24002074

0801909c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b084      	sub	sp, #16
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d10a      	bne.n	80190c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80190ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190b0:	f383 8811 	msr	BASEPRI, r3
 80190b4:	f3bf 8f6f 	isb	sy
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	60fb      	str	r3, [r7, #12]
}
 80190be:	bf00      	nop
 80190c0:	e7fe      	b.n	80190c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190c2:	4b07      	ldr	r3, [pc, #28]	; (80190e0 <vTaskPlaceOnEventList+0x44>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	3318      	adds	r3, #24
 80190c8:	4619      	mov	r1, r3
 80190ca:	6878      	ldr	r0, [r7, #4]
 80190cc:	f7fe fa6b 	bl	80175a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190d0:	2101      	movs	r1, #1
 80190d2:	6838      	ldr	r0, [r7, #0]
 80190d4:	f000 fb7a 	bl	80197cc <prvAddCurrentTaskToDelayedList>
}
 80190d8:	bf00      	nop
 80190da:	3710      	adds	r7, #16
 80190dc:	46bd      	mov	sp, r7
 80190de:	bd80      	pop	{r7, pc}
 80190e0:	24002070 	.word	0x24002070

080190e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b086      	sub	sp, #24
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	60f8      	str	r0, [r7, #12]
 80190ec:	60b9      	str	r1, [r7, #8]
 80190ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d10a      	bne.n	801910c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80190f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190fa:	f383 8811 	msr	BASEPRI, r3
 80190fe:	f3bf 8f6f 	isb	sy
 8019102:	f3bf 8f4f 	dsb	sy
 8019106:	617b      	str	r3, [r7, #20]
}
 8019108:	bf00      	nop
 801910a:	e7fe      	b.n	801910a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801910c:	4b0a      	ldr	r3, [pc, #40]	; (8019138 <vTaskPlaceOnEventListRestricted+0x54>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	3318      	adds	r3, #24
 8019112:	4619      	mov	r1, r3
 8019114:	68f8      	ldr	r0, [r7, #12]
 8019116:	f7fe fa22 	bl	801755e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	2b00      	cmp	r3, #0
 801911e:	d002      	beq.n	8019126 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019120:	f04f 33ff 	mov.w	r3, #4294967295
 8019124:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019126:	6879      	ldr	r1, [r7, #4]
 8019128:	68b8      	ldr	r0, [r7, #8]
 801912a:	f000 fb4f 	bl	80197cc <prvAddCurrentTaskToDelayedList>
	}
 801912e:	bf00      	nop
 8019130:	3718      	adds	r7, #24
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}
 8019136:	bf00      	nop
 8019138:	24002070 	.word	0x24002070

0801913c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b086      	sub	sp, #24
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	68db      	ldr	r3, [r3, #12]
 8019148:	68db      	ldr	r3, [r3, #12]
 801914a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d10a      	bne.n	8019168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8019152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019156:	f383 8811 	msr	BASEPRI, r3
 801915a:	f3bf 8f6f 	isb	sy
 801915e:	f3bf 8f4f 	dsb	sy
 8019162:	60fb      	str	r3, [r7, #12]
}
 8019164:	bf00      	nop
 8019166:	e7fe      	b.n	8019166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019168:	693b      	ldr	r3, [r7, #16]
 801916a:	3318      	adds	r3, #24
 801916c:	4618      	mov	r0, r3
 801916e:	f7fe fa53 	bl	8017618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019172:	4b1e      	ldr	r3, [pc, #120]	; (80191ec <xTaskRemoveFromEventList+0xb0>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d11d      	bne.n	80191b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	3304      	adds	r3, #4
 801917e:	4618      	mov	r0, r3
 8019180:	f7fe fa4a 	bl	8017618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019188:	4b19      	ldr	r3, [pc, #100]	; (80191f0 <xTaskRemoveFromEventList+0xb4>)
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	429a      	cmp	r2, r3
 801918e:	d903      	bls.n	8019198 <xTaskRemoveFromEventList+0x5c>
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019194:	4a16      	ldr	r2, [pc, #88]	; (80191f0 <xTaskRemoveFromEventList+0xb4>)
 8019196:	6013      	str	r3, [r2, #0]
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801919c:	4613      	mov	r3, r2
 801919e:	009b      	lsls	r3, r3, #2
 80191a0:	4413      	add	r3, r2
 80191a2:	009b      	lsls	r3, r3, #2
 80191a4:	4a13      	ldr	r2, [pc, #76]	; (80191f4 <xTaskRemoveFromEventList+0xb8>)
 80191a6:	441a      	add	r2, r3
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	3304      	adds	r3, #4
 80191ac:	4619      	mov	r1, r3
 80191ae:	4610      	mov	r0, r2
 80191b0:	f7fe f9d5 	bl	801755e <vListInsertEnd>
 80191b4:	e005      	b.n	80191c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	3318      	adds	r3, #24
 80191ba:	4619      	mov	r1, r3
 80191bc:	480e      	ldr	r0, [pc, #56]	; (80191f8 <xTaskRemoveFromEventList+0xbc>)
 80191be:	f7fe f9ce 	bl	801755e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80191c2:	693b      	ldr	r3, [r7, #16]
 80191c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191c6:	4b0d      	ldr	r3, [pc, #52]	; (80191fc <xTaskRemoveFromEventList+0xc0>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191cc:	429a      	cmp	r2, r3
 80191ce:	d905      	bls.n	80191dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80191d0:	2301      	movs	r3, #1
 80191d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80191d4:	4b0a      	ldr	r3, [pc, #40]	; (8019200 <xTaskRemoveFromEventList+0xc4>)
 80191d6:	2201      	movs	r2, #1
 80191d8:	601a      	str	r2, [r3, #0]
 80191da:	e001      	b.n	80191e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80191dc:	2300      	movs	r3, #0
 80191de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80191e0:	697b      	ldr	r3, [r7, #20]
}
 80191e2:	4618      	mov	r0, r3
 80191e4:	3718      	adds	r7, #24
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}
 80191ea:	bf00      	nop
 80191ec:	2400256c 	.word	0x2400256c
 80191f0:	2400254c 	.word	0x2400254c
 80191f4:	24002074 	.word	0x24002074
 80191f8:	24002504 	.word	0x24002504
 80191fc:	24002070 	.word	0x24002070
 8019200:	24002558 	.word	0x24002558

08019204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019204:	b480      	push	{r7}
 8019206:	b083      	sub	sp, #12
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801920c:	4b06      	ldr	r3, [pc, #24]	; (8019228 <vTaskInternalSetTimeOutState+0x24>)
 801920e:	681a      	ldr	r2, [r3, #0]
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019214:	4b05      	ldr	r3, [pc, #20]	; (801922c <vTaskInternalSetTimeOutState+0x28>)
 8019216:	681a      	ldr	r2, [r3, #0]
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	605a      	str	r2, [r3, #4]
}
 801921c:	bf00      	nop
 801921e:	370c      	adds	r7, #12
 8019220:	46bd      	mov	sp, r7
 8019222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019226:	4770      	bx	lr
 8019228:	2400255c 	.word	0x2400255c
 801922c:	24002548 	.word	0x24002548

08019230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b088      	sub	sp, #32
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
 8019238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d10a      	bne.n	8019256 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019244:	f383 8811 	msr	BASEPRI, r3
 8019248:	f3bf 8f6f 	isb	sy
 801924c:	f3bf 8f4f 	dsb	sy
 8019250:	613b      	str	r3, [r7, #16]
}
 8019252:	bf00      	nop
 8019254:	e7fe      	b.n	8019254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d10a      	bne.n	8019272 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019260:	f383 8811 	msr	BASEPRI, r3
 8019264:	f3bf 8f6f 	isb	sy
 8019268:	f3bf 8f4f 	dsb	sy
 801926c:	60fb      	str	r3, [r7, #12]
}
 801926e:	bf00      	nop
 8019270:	e7fe      	b.n	8019270 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8019272:	f001 f837 	bl	801a2e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019276:	4b1d      	ldr	r3, [pc, #116]	; (80192ec <xTaskCheckForTimeOut+0xbc>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	685b      	ldr	r3, [r3, #4]
 8019280:	69ba      	ldr	r2, [r7, #24]
 8019282:	1ad3      	subs	r3, r2, r3
 8019284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019286:	683b      	ldr	r3, [r7, #0]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801928e:	d102      	bne.n	8019296 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019290:	2300      	movs	r3, #0
 8019292:	61fb      	str	r3, [r7, #28]
 8019294:	e023      	b.n	80192de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681a      	ldr	r2, [r3, #0]
 801929a:	4b15      	ldr	r3, [pc, #84]	; (80192f0 <xTaskCheckForTimeOut+0xc0>)
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	429a      	cmp	r2, r3
 80192a0:	d007      	beq.n	80192b2 <xTaskCheckForTimeOut+0x82>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	69ba      	ldr	r2, [r7, #24]
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d302      	bcc.n	80192b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80192ac:	2301      	movs	r3, #1
 80192ae:	61fb      	str	r3, [r7, #28]
 80192b0:	e015      	b.n	80192de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	697a      	ldr	r2, [r7, #20]
 80192b8:	429a      	cmp	r2, r3
 80192ba:	d20b      	bcs.n	80192d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	681a      	ldr	r2, [r3, #0]
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	1ad2      	subs	r2, r2, r3
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	f7ff ff9b 	bl	8019204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80192ce:	2300      	movs	r3, #0
 80192d0:	61fb      	str	r3, [r7, #28]
 80192d2:	e004      	b.n	80192de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	2200      	movs	r2, #0
 80192d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80192da:	2301      	movs	r3, #1
 80192dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80192de:	f001 f831 	bl	801a344 <vPortExitCritical>

	return xReturn;
 80192e2:	69fb      	ldr	r3, [r7, #28]
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3720      	adds	r7, #32
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	24002548 	.word	0x24002548
 80192f0:	2400255c 	.word	0x2400255c

080192f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80192f4:	b480      	push	{r7}
 80192f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80192f8:	4b03      	ldr	r3, [pc, #12]	; (8019308 <vTaskMissedYield+0x14>)
 80192fa:	2201      	movs	r2, #1
 80192fc:	601a      	str	r2, [r3, #0]
}
 80192fe:	bf00      	nop
 8019300:	46bd      	mov	sp, r7
 8019302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019306:	4770      	bx	lr
 8019308:	24002558 	.word	0x24002558

0801930c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b082      	sub	sp, #8
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019314:	f000 f852 	bl	80193bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019318:	4b06      	ldr	r3, [pc, #24]	; (8019334 <prvIdleTask+0x28>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	2b01      	cmp	r3, #1
 801931e:	d9f9      	bls.n	8019314 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019320:	4b05      	ldr	r3, [pc, #20]	; (8019338 <prvIdleTask+0x2c>)
 8019322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019326:	601a      	str	r2, [r3, #0]
 8019328:	f3bf 8f4f 	dsb	sy
 801932c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019330:	e7f0      	b.n	8019314 <prvIdleTask+0x8>
 8019332:	bf00      	nop
 8019334:	24002074 	.word	0x24002074
 8019338:	e000ed04 	.word	0xe000ed04

0801933c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b082      	sub	sp, #8
 8019340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019342:	2300      	movs	r3, #0
 8019344:	607b      	str	r3, [r7, #4]
 8019346:	e00c      	b.n	8019362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019348:	687a      	ldr	r2, [r7, #4]
 801934a:	4613      	mov	r3, r2
 801934c:	009b      	lsls	r3, r3, #2
 801934e:	4413      	add	r3, r2
 8019350:	009b      	lsls	r3, r3, #2
 8019352:	4a12      	ldr	r2, [pc, #72]	; (801939c <prvInitialiseTaskLists+0x60>)
 8019354:	4413      	add	r3, r2
 8019356:	4618      	mov	r0, r3
 8019358:	f7fe f8d4 	bl	8017504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	3301      	adds	r3, #1
 8019360:	607b      	str	r3, [r7, #4]
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2b37      	cmp	r3, #55	; 0x37
 8019366:	d9ef      	bls.n	8019348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019368:	480d      	ldr	r0, [pc, #52]	; (80193a0 <prvInitialiseTaskLists+0x64>)
 801936a:	f7fe f8cb 	bl	8017504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801936e:	480d      	ldr	r0, [pc, #52]	; (80193a4 <prvInitialiseTaskLists+0x68>)
 8019370:	f7fe f8c8 	bl	8017504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019374:	480c      	ldr	r0, [pc, #48]	; (80193a8 <prvInitialiseTaskLists+0x6c>)
 8019376:	f7fe f8c5 	bl	8017504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801937a:	480c      	ldr	r0, [pc, #48]	; (80193ac <prvInitialiseTaskLists+0x70>)
 801937c:	f7fe f8c2 	bl	8017504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019380:	480b      	ldr	r0, [pc, #44]	; (80193b0 <prvInitialiseTaskLists+0x74>)
 8019382:	f7fe f8bf 	bl	8017504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019386:	4b0b      	ldr	r3, [pc, #44]	; (80193b4 <prvInitialiseTaskLists+0x78>)
 8019388:	4a05      	ldr	r2, [pc, #20]	; (80193a0 <prvInitialiseTaskLists+0x64>)
 801938a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801938c:	4b0a      	ldr	r3, [pc, #40]	; (80193b8 <prvInitialiseTaskLists+0x7c>)
 801938e:	4a05      	ldr	r2, [pc, #20]	; (80193a4 <prvInitialiseTaskLists+0x68>)
 8019390:	601a      	str	r2, [r3, #0]
}
 8019392:	bf00      	nop
 8019394:	3708      	adds	r7, #8
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	24002074 	.word	0x24002074
 80193a0:	240024d4 	.word	0x240024d4
 80193a4:	240024e8 	.word	0x240024e8
 80193a8:	24002504 	.word	0x24002504
 80193ac:	24002518 	.word	0x24002518
 80193b0:	24002530 	.word	0x24002530
 80193b4:	240024fc 	.word	0x240024fc
 80193b8:	24002500 	.word	0x24002500

080193bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80193c2:	e019      	b.n	80193f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80193c4:	f000 ff8e 	bl	801a2e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80193c8:	4b10      	ldr	r3, [pc, #64]	; (801940c <prvCheckTasksWaitingTermination+0x50>)
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	68db      	ldr	r3, [r3, #12]
 80193ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	3304      	adds	r3, #4
 80193d4:	4618      	mov	r0, r3
 80193d6:	f7fe f91f 	bl	8017618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80193da:	4b0d      	ldr	r3, [pc, #52]	; (8019410 <prvCheckTasksWaitingTermination+0x54>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	3b01      	subs	r3, #1
 80193e0:	4a0b      	ldr	r2, [pc, #44]	; (8019410 <prvCheckTasksWaitingTermination+0x54>)
 80193e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80193e4:	4b0b      	ldr	r3, [pc, #44]	; (8019414 <prvCheckTasksWaitingTermination+0x58>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	3b01      	subs	r3, #1
 80193ea:	4a0a      	ldr	r2, [pc, #40]	; (8019414 <prvCheckTasksWaitingTermination+0x58>)
 80193ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80193ee:	f000 ffa9 	bl	801a344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80193f2:	6878      	ldr	r0, [r7, #4]
 80193f4:	f000 f810 	bl	8019418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80193f8:	4b06      	ldr	r3, [pc, #24]	; (8019414 <prvCheckTasksWaitingTermination+0x58>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d1e1      	bne.n	80193c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019400:	bf00      	nop
 8019402:	bf00      	nop
 8019404:	3708      	adds	r7, #8
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	24002518 	.word	0x24002518
 8019410:	24002544 	.word	0x24002544
 8019414:	2400252c 	.word	0x2400252c

08019418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8019426:	2b00      	cmp	r3, #0
 8019428:	d108      	bne.n	801943c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801942e:	4618      	mov	r0, r3
 8019430:	f001 f946 	bl	801a6c0 <vPortFree>
				vPortFree( pxTCB );
 8019434:	6878      	ldr	r0, [r7, #4]
 8019436:	f001 f943 	bl	801a6c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801943a:	e018      	b.n	801946e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8019442:	2b01      	cmp	r3, #1
 8019444:	d103      	bne.n	801944e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019446:	6878      	ldr	r0, [r7, #4]
 8019448:	f001 f93a 	bl	801a6c0 <vPortFree>
	}
 801944c:	e00f      	b.n	801946e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8019454:	2b02      	cmp	r3, #2
 8019456:	d00a      	beq.n	801946e <prvDeleteTCB+0x56>
	__asm volatile
 8019458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801945c:	f383 8811 	msr	BASEPRI, r3
 8019460:	f3bf 8f6f 	isb	sy
 8019464:	f3bf 8f4f 	dsb	sy
 8019468:	60fb      	str	r3, [r7, #12]
}
 801946a:	bf00      	nop
 801946c:	e7fe      	b.n	801946c <prvDeleteTCB+0x54>
	}
 801946e:	bf00      	nop
 8019470:	3710      	adds	r7, #16
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
	...

08019478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019478:	b480      	push	{r7}
 801947a:	b083      	sub	sp, #12
 801947c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801947e:	4b0c      	ldr	r3, [pc, #48]	; (80194b0 <prvResetNextTaskUnblockTime+0x38>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d104      	bne.n	8019492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019488:	4b0a      	ldr	r3, [pc, #40]	; (80194b4 <prvResetNextTaskUnblockTime+0x3c>)
 801948a:	f04f 32ff 	mov.w	r2, #4294967295
 801948e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019490:	e008      	b.n	80194a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019492:	4b07      	ldr	r3, [pc, #28]	; (80194b0 <prvResetNextTaskUnblockTime+0x38>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	68db      	ldr	r3, [r3, #12]
 801949a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	685b      	ldr	r3, [r3, #4]
 80194a0:	4a04      	ldr	r2, [pc, #16]	; (80194b4 <prvResetNextTaskUnblockTime+0x3c>)
 80194a2:	6013      	str	r3, [r2, #0]
}
 80194a4:	bf00      	nop
 80194a6:	370c      	adds	r7, #12
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr
 80194b0:	240024fc 	.word	0x240024fc
 80194b4:	24002564 	.word	0x24002564

080194b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80194b8:	b480      	push	{r7}
 80194ba:	b083      	sub	sp, #12
 80194bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80194be:	4b0b      	ldr	r3, [pc, #44]	; (80194ec <xTaskGetSchedulerState+0x34>)
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d102      	bne.n	80194cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80194c6:	2301      	movs	r3, #1
 80194c8:	607b      	str	r3, [r7, #4]
 80194ca:	e008      	b.n	80194de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80194cc:	4b08      	ldr	r3, [pc, #32]	; (80194f0 <xTaskGetSchedulerState+0x38>)
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d102      	bne.n	80194da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80194d4:	2302      	movs	r3, #2
 80194d6:	607b      	str	r3, [r7, #4]
 80194d8:	e001      	b.n	80194de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80194da:	2300      	movs	r3, #0
 80194dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80194de:	687b      	ldr	r3, [r7, #4]
	}
 80194e0:	4618      	mov	r0, r3
 80194e2:	370c      	adds	r7, #12
 80194e4:	46bd      	mov	sp, r7
 80194e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ea:	4770      	bx	lr
 80194ec:	24002550 	.word	0x24002550
 80194f0:	2400256c 	.word	0x2400256c

080194f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b084      	sub	sp, #16
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019500:	2300      	movs	r3, #0
 8019502:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d051      	beq.n	80195ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801950a:	68bb      	ldr	r3, [r7, #8]
 801950c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801950e:	4b2a      	ldr	r3, [pc, #168]	; (80195b8 <xTaskPriorityInherit+0xc4>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019514:	429a      	cmp	r2, r3
 8019516:	d241      	bcs.n	801959c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	699b      	ldr	r3, [r3, #24]
 801951c:	2b00      	cmp	r3, #0
 801951e:	db06      	blt.n	801952e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019520:	4b25      	ldr	r3, [pc, #148]	; (80195b8 <xTaskPriorityInherit+0xc4>)
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801952e:	68bb      	ldr	r3, [r7, #8]
 8019530:	6959      	ldr	r1, [r3, #20]
 8019532:	68bb      	ldr	r3, [r7, #8]
 8019534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019536:	4613      	mov	r3, r2
 8019538:	009b      	lsls	r3, r3, #2
 801953a:	4413      	add	r3, r2
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	4a1f      	ldr	r2, [pc, #124]	; (80195bc <xTaskPriorityInherit+0xc8>)
 8019540:	4413      	add	r3, r2
 8019542:	4299      	cmp	r1, r3
 8019544:	d122      	bne.n	801958c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	3304      	adds	r3, #4
 801954a:	4618      	mov	r0, r3
 801954c:	f7fe f864 	bl	8017618 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019550:	4b19      	ldr	r3, [pc, #100]	; (80195b8 <xTaskPriorityInherit+0xc4>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801955a:	68bb      	ldr	r3, [r7, #8]
 801955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801955e:	4b18      	ldr	r3, [pc, #96]	; (80195c0 <xTaskPriorityInherit+0xcc>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	429a      	cmp	r2, r3
 8019564:	d903      	bls.n	801956e <xTaskPriorityInherit+0x7a>
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801956a:	4a15      	ldr	r2, [pc, #84]	; (80195c0 <xTaskPriorityInherit+0xcc>)
 801956c:	6013      	str	r3, [r2, #0]
 801956e:	68bb      	ldr	r3, [r7, #8]
 8019570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019572:	4613      	mov	r3, r2
 8019574:	009b      	lsls	r3, r3, #2
 8019576:	4413      	add	r3, r2
 8019578:	009b      	lsls	r3, r3, #2
 801957a:	4a10      	ldr	r2, [pc, #64]	; (80195bc <xTaskPriorityInherit+0xc8>)
 801957c:	441a      	add	r2, r3
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	3304      	adds	r3, #4
 8019582:	4619      	mov	r1, r3
 8019584:	4610      	mov	r0, r2
 8019586:	f7fd ffea 	bl	801755e <vListInsertEnd>
 801958a:	e004      	b.n	8019596 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801958c:	4b0a      	ldr	r3, [pc, #40]	; (80195b8 <xTaskPriorityInherit+0xc4>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019596:	2301      	movs	r3, #1
 8019598:	60fb      	str	r3, [r7, #12]
 801959a:	e008      	b.n	80195ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801959c:	68bb      	ldr	r3, [r7, #8]
 801959e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80195a0:	4b05      	ldr	r3, [pc, #20]	; (80195b8 <xTaskPriorityInherit+0xc4>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195a6:	429a      	cmp	r2, r3
 80195a8:	d201      	bcs.n	80195ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80195aa:	2301      	movs	r3, #1
 80195ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80195ae:	68fb      	ldr	r3, [r7, #12]
	}
 80195b0:	4618      	mov	r0, r3
 80195b2:	3710      	adds	r7, #16
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}
 80195b8:	24002070 	.word	0x24002070
 80195bc:	24002074 	.word	0x24002074
 80195c0:	2400254c 	.word	0x2400254c

080195c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b086      	sub	sp, #24
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80195d0:	2300      	movs	r3, #0
 80195d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d056      	beq.n	8019688 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80195da:	4b2e      	ldr	r3, [pc, #184]	; (8019694 <xTaskPriorityDisinherit+0xd0>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	693a      	ldr	r2, [r7, #16]
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d00a      	beq.n	80195fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80195e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e8:	f383 8811 	msr	BASEPRI, r3
 80195ec:	f3bf 8f6f 	isb	sy
 80195f0:	f3bf 8f4f 	dsb	sy
 80195f4:	60fb      	str	r3, [r7, #12]
}
 80195f6:	bf00      	nop
 80195f8:	e7fe      	b.n	80195f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d10a      	bne.n	8019618 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019606:	f383 8811 	msr	BASEPRI, r3
 801960a:	f3bf 8f6f 	isb	sy
 801960e:	f3bf 8f4f 	dsb	sy
 8019612:	60bb      	str	r3, [r7, #8]
}
 8019614:	bf00      	nop
 8019616:	e7fe      	b.n	8019616 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019618:	693b      	ldr	r3, [r7, #16]
 801961a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801961c:	1e5a      	subs	r2, r3, #1
 801961e:	693b      	ldr	r3, [r7, #16]
 8019620:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019622:	693b      	ldr	r3, [r7, #16]
 8019624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801962a:	429a      	cmp	r2, r3
 801962c:	d02c      	beq.n	8019688 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019632:	2b00      	cmp	r3, #0
 8019634:	d128      	bne.n	8019688 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	3304      	adds	r3, #4
 801963a:	4618      	mov	r0, r3
 801963c:	f7fd ffec 	bl	8017618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019640:	693b      	ldr	r3, [r7, #16]
 8019642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019644:	693b      	ldr	r3, [r7, #16]
 8019646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019648:	693b      	ldr	r3, [r7, #16]
 801964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801964c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019654:	693b      	ldr	r3, [r7, #16]
 8019656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019658:	4b0f      	ldr	r3, [pc, #60]	; (8019698 <xTaskPriorityDisinherit+0xd4>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	429a      	cmp	r2, r3
 801965e:	d903      	bls.n	8019668 <xTaskPriorityDisinherit+0xa4>
 8019660:	693b      	ldr	r3, [r7, #16]
 8019662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019664:	4a0c      	ldr	r2, [pc, #48]	; (8019698 <xTaskPriorityDisinherit+0xd4>)
 8019666:	6013      	str	r3, [r2, #0]
 8019668:	693b      	ldr	r3, [r7, #16]
 801966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801966c:	4613      	mov	r3, r2
 801966e:	009b      	lsls	r3, r3, #2
 8019670:	4413      	add	r3, r2
 8019672:	009b      	lsls	r3, r3, #2
 8019674:	4a09      	ldr	r2, [pc, #36]	; (801969c <xTaskPriorityDisinherit+0xd8>)
 8019676:	441a      	add	r2, r3
 8019678:	693b      	ldr	r3, [r7, #16]
 801967a:	3304      	adds	r3, #4
 801967c:	4619      	mov	r1, r3
 801967e:	4610      	mov	r0, r2
 8019680:	f7fd ff6d 	bl	801755e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019684:	2301      	movs	r3, #1
 8019686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019688:	697b      	ldr	r3, [r7, #20]
	}
 801968a:	4618      	mov	r0, r3
 801968c:	3718      	adds	r7, #24
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}
 8019692:	bf00      	nop
 8019694:	24002070 	.word	0x24002070
 8019698:	2400254c 	.word	0x2400254c
 801969c:	24002074 	.word	0x24002074

080196a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b088      	sub	sp, #32
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80196ae:	2301      	movs	r3, #1
 80196b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d06a      	beq.n	801978e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80196b8:	69bb      	ldr	r3, [r7, #24]
 80196ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d10a      	bne.n	80196d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80196c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196c4:	f383 8811 	msr	BASEPRI, r3
 80196c8:	f3bf 8f6f 	isb	sy
 80196cc:	f3bf 8f4f 	dsb	sy
 80196d0:	60fb      	str	r3, [r7, #12]
}
 80196d2:	bf00      	nop
 80196d4:	e7fe      	b.n	80196d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80196d6:	69bb      	ldr	r3, [r7, #24]
 80196d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196da:	683a      	ldr	r2, [r7, #0]
 80196dc:	429a      	cmp	r2, r3
 80196de:	d902      	bls.n	80196e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	61fb      	str	r3, [r7, #28]
 80196e4:	e002      	b.n	80196ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80196e6:	69bb      	ldr	r3, [r7, #24]
 80196e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80196ec:	69bb      	ldr	r3, [r7, #24]
 80196ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196f0:	69fa      	ldr	r2, [r7, #28]
 80196f2:	429a      	cmp	r2, r3
 80196f4:	d04b      	beq.n	801978e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80196f6:	69bb      	ldr	r3, [r7, #24]
 80196f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196fa:	697a      	ldr	r2, [r7, #20]
 80196fc:	429a      	cmp	r2, r3
 80196fe:	d146      	bne.n	801978e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8019700:	4b25      	ldr	r3, [pc, #148]	; (8019798 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	69ba      	ldr	r2, [r7, #24]
 8019706:	429a      	cmp	r2, r3
 8019708:	d10a      	bne.n	8019720 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801970e:	f383 8811 	msr	BASEPRI, r3
 8019712:	f3bf 8f6f 	isb	sy
 8019716:	f3bf 8f4f 	dsb	sy
 801971a:	60bb      	str	r3, [r7, #8]
}
 801971c:	bf00      	nop
 801971e:	e7fe      	b.n	801971e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8019720:	69bb      	ldr	r3, [r7, #24]
 8019722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019724:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019726:	69bb      	ldr	r3, [r7, #24]
 8019728:	69fa      	ldr	r2, [r7, #28]
 801972a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801972c:	69bb      	ldr	r3, [r7, #24]
 801972e:	699b      	ldr	r3, [r3, #24]
 8019730:	2b00      	cmp	r3, #0
 8019732:	db04      	blt.n	801973e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801973e:	69bb      	ldr	r3, [r7, #24]
 8019740:	6959      	ldr	r1, [r3, #20]
 8019742:	693a      	ldr	r2, [r7, #16]
 8019744:	4613      	mov	r3, r2
 8019746:	009b      	lsls	r3, r3, #2
 8019748:	4413      	add	r3, r2
 801974a:	009b      	lsls	r3, r3, #2
 801974c:	4a13      	ldr	r2, [pc, #76]	; (801979c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801974e:	4413      	add	r3, r2
 8019750:	4299      	cmp	r1, r3
 8019752:	d11c      	bne.n	801978e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019754:	69bb      	ldr	r3, [r7, #24]
 8019756:	3304      	adds	r3, #4
 8019758:	4618      	mov	r0, r3
 801975a:	f7fd ff5d 	bl	8017618 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801975e:	69bb      	ldr	r3, [r7, #24]
 8019760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019762:	4b0f      	ldr	r3, [pc, #60]	; (80197a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	429a      	cmp	r2, r3
 8019768:	d903      	bls.n	8019772 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801976a:	69bb      	ldr	r3, [r7, #24]
 801976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801976e:	4a0c      	ldr	r2, [pc, #48]	; (80197a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019770:	6013      	str	r3, [r2, #0]
 8019772:	69bb      	ldr	r3, [r7, #24]
 8019774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019776:	4613      	mov	r3, r2
 8019778:	009b      	lsls	r3, r3, #2
 801977a:	4413      	add	r3, r2
 801977c:	009b      	lsls	r3, r3, #2
 801977e:	4a07      	ldr	r2, [pc, #28]	; (801979c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8019780:	441a      	add	r2, r3
 8019782:	69bb      	ldr	r3, [r7, #24]
 8019784:	3304      	adds	r3, #4
 8019786:	4619      	mov	r1, r3
 8019788:	4610      	mov	r0, r2
 801978a:	f7fd fee8 	bl	801755e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801978e:	bf00      	nop
 8019790:	3720      	adds	r7, #32
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	24002070 	.word	0x24002070
 801979c:	24002074 	.word	0x24002074
 80197a0:	2400254c 	.word	0x2400254c

080197a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80197a4:	b480      	push	{r7}
 80197a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80197a8:	4b07      	ldr	r3, [pc, #28]	; (80197c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d004      	beq.n	80197ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80197b0:	4b05      	ldr	r3, [pc, #20]	; (80197c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197b6:	3201      	adds	r2, #1
 80197b8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80197ba:	4b03      	ldr	r3, [pc, #12]	; (80197c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80197bc:	681b      	ldr	r3, [r3, #0]
	}
 80197be:	4618      	mov	r0, r3
 80197c0:	46bd      	mov	sp, r7
 80197c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c6:	4770      	bx	lr
 80197c8:	24002070 	.word	0x24002070

080197cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b084      	sub	sp, #16
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
 80197d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80197d6:	4b21      	ldr	r3, [pc, #132]	; (801985c <prvAddCurrentTaskToDelayedList+0x90>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80197dc:	4b20      	ldr	r3, [pc, #128]	; (8019860 <prvAddCurrentTaskToDelayedList+0x94>)
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	3304      	adds	r3, #4
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7fd ff18 	bl	8017618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197ee:	d10a      	bne.n	8019806 <prvAddCurrentTaskToDelayedList+0x3a>
 80197f0:	683b      	ldr	r3, [r7, #0]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d007      	beq.n	8019806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80197f6:	4b1a      	ldr	r3, [pc, #104]	; (8019860 <prvAddCurrentTaskToDelayedList+0x94>)
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	3304      	adds	r3, #4
 80197fc:	4619      	mov	r1, r3
 80197fe:	4819      	ldr	r0, [pc, #100]	; (8019864 <prvAddCurrentTaskToDelayedList+0x98>)
 8019800:	f7fd fead 	bl	801755e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019804:	e026      	b.n	8019854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019806:	68fa      	ldr	r2, [r7, #12]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	4413      	add	r3, r2
 801980c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801980e:	4b14      	ldr	r3, [pc, #80]	; (8019860 <prvAddCurrentTaskToDelayedList+0x94>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	68ba      	ldr	r2, [r7, #8]
 8019814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019816:	68ba      	ldr	r2, [r7, #8]
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	429a      	cmp	r2, r3
 801981c:	d209      	bcs.n	8019832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801981e:	4b12      	ldr	r3, [pc, #72]	; (8019868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019820:	681a      	ldr	r2, [r3, #0]
 8019822:	4b0f      	ldr	r3, [pc, #60]	; (8019860 <prvAddCurrentTaskToDelayedList+0x94>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	3304      	adds	r3, #4
 8019828:	4619      	mov	r1, r3
 801982a:	4610      	mov	r0, r2
 801982c:	f7fd febb 	bl	80175a6 <vListInsert>
}
 8019830:	e010      	b.n	8019854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019832:	4b0e      	ldr	r3, [pc, #56]	; (801986c <prvAddCurrentTaskToDelayedList+0xa0>)
 8019834:	681a      	ldr	r2, [r3, #0]
 8019836:	4b0a      	ldr	r3, [pc, #40]	; (8019860 <prvAddCurrentTaskToDelayedList+0x94>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	3304      	adds	r3, #4
 801983c:	4619      	mov	r1, r3
 801983e:	4610      	mov	r0, r2
 8019840:	f7fd feb1 	bl	80175a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019844:	4b0a      	ldr	r3, [pc, #40]	; (8019870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	68ba      	ldr	r2, [r7, #8]
 801984a:	429a      	cmp	r2, r3
 801984c:	d202      	bcs.n	8019854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801984e:	4a08      	ldr	r2, [pc, #32]	; (8019870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	6013      	str	r3, [r2, #0]
}
 8019854:	bf00      	nop
 8019856:	3710      	adds	r7, #16
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}
 801985c:	24002548 	.word	0x24002548
 8019860:	24002070 	.word	0x24002070
 8019864:	24002530 	.word	0x24002530
 8019868:	24002500 	.word	0x24002500
 801986c:	240024fc 	.word	0x240024fc
 8019870:	24002564 	.word	0x24002564

08019874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b08a      	sub	sp, #40	; 0x28
 8019878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801987a:	2300      	movs	r3, #0
 801987c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801987e:	f000 fba1 	bl	8019fc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019882:	4b1c      	ldr	r3, [pc, #112]	; (80198f4 <xTimerCreateTimerTask+0x80>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d021      	beq.n	80198ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801988a:	2300      	movs	r3, #0
 801988c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801988e:	2300      	movs	r3, #0
 8019890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019892:	1d3a      	adds	r2, r7, #4
 8019894:	f107 0108 	add.w	r1, r7, #8
 8019898:	f107 030c 	add.w	r3, r7, #12
 801989c:	4618      	mov	r0, r3
 801989e:	f7fd fe17 	bl	80174d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80198a2:	6879      	ldr	r1, [r7, #4]
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	68fa      	ldr	r2, [r7, #12]
 80198a8:	9202      	str	r2, [sp, #8]
 80198aa:	9301      	str	r3, [sp, #4]
 80198ac:	2337      	movs	r3, #55	; 0x37
 80198ae:	9300      	str	r3, [sp, #0]
 80198b0:	2300      	movs	r3, #0
 80198b2:	460a      	mov	r2, r1
 80198b4:	4910      	ldr	r1, [pc, #64]	; (80198f8 <xTimerCreateTimerTask+0x84>)
 80198b6:	4811      	ldr	r0, [pc, #68]	; (80198fc <xTimerCreateTimerTask+0x88>)
 80198b8:	f7fe fee6 	bl	8018688 <xTaskCreateStatic>
 80198bc:	4603      	mov	r3, r0
 80198be:	4a10      	ldr	r2, [pc, #64]	; (8019900 <xTimerCreateTimerTask+0x8c>)
 80198c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80198c2:	4b0f      	ldr	r3, [pc, #60]	; (8019900 <xTimerCreateTimerTask+0x8c>)
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d001      	beq.n	80198ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80198ca:	2301      	movs	r3, #1
 80198cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80198ce:	697b      	ldr	r3, [r7, #20]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d10a      	bne.n	80198ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80198d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198d8:	f383 8811 	msr	BASEPRI, r3
 80198dc:	f3bf 8f6f 	isb	sy
 80198e0:	f3bf 8f4f 	dsb	sy
 80198e4:	613b      	str	r3, [r7, #16]
}
 80198e6:	bf00      	nop
 80198e8:	e7fe      	b.n	80198e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80198ea:	697b      	ldr	r3, [r7, #20]
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3718      	adds	r7, #24
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}
 80198f4:	240025a8 	.word	0x240025a8
 80198f8:	0801ddec 	.word	0x0801ddec
 80198fc:	08019b6d 	.word	0x08019b6d
 8019900:	240025ac 	.word	0x240025ac

08019904 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8019904:	b580      	push	{r7, lr}
 8019906:	b088      	sub	sp, #32
 8019908:	af02      	add	r7, sp, #8
 801990a:	60f8      	str	r0, [r7, #12]
 801990c:	60b9      	str	r1, [r7, #8]
 801990e:	607a      	str	r2, [r7, #4]
 8019910:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8019912:	202c      	movs	r0, #44	; 0x2c
 8019914:	f000 fe08 	bl	801a528 <pvPortMalloc>
 8019918:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801991a:	697b      	ldr	r3, [r7, #20]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d00d      	beq.n	801993c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	2200      	movs	r2, #0
 8019924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	9301      	str	r3, [sp, #4]
 801992c:	6a3b      	ldr	r3, [r7, #32]
 801992e:	9300      	str	r3, [sp, #0]
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	687a      	ldr	r2, [r7, #4]
 8019934:	68b9      	ldr	r1, [r7, #8]
 8019936:	68f8      	ldr	r0, [r7, #12]
 8019938:	f000 f843 	bl	80199c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801993c:	697b      	ldr	r3, [r7, #20]
	}
 801993e:	4618      	mov	r0, r3
 8019940:	3718      	adds	r7, #24
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}

08019946 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8019946:	b580      	push	{r7, lr}
 8019948:	b08a      	sub	sp, #40	; 0x28
 801994a:	af02      	add	r7, sp, #8
 801994c:	60f8      	str	r0, [r7, #12]
 801994e:	60b9      	str	r1, [r7, #8]
 8019950:	607a      	str	r2, [r7, #4]
 8019952:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8019954:	232c      	movs	r3, #44	; 0x2c
 8019956:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	2b2c      	cmp	r3, #44	; 0x2c
 801995c:	d00a      	beq.n	8019974 <xTimerCreateStatic+0x2e>
	__asm volatile
 801995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019962:	f383 8811 	msr	BASEPRI, r3
 8019966:	f3bf 8f6f 	isb	sy
 801996a:	f3bf 8f4f 	dsb	sy
 801996e:	61bb      	str	r3, [r7, #24]
}
 8019970:	bf00      	nop
 8019972:	e7fe      	b.n	8019972 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019974:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8019976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019978:	2b00      	cmp	r3, #0
 801997a:	d10a      	bne.n	8019992 <xTimerCreateStatic+0x4c>
	__asm volatile
 801997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019980:	f383 8811 	msr	BASEPRI, r3
 8019984:	f3bf 8f6f 	isb	sy
 8019988:	f3bf 8f4f 	dsb	sy
 801998c:	617b      	str	r3, [r7, #20]
}
 801998e:	bf00      	nop
 8019990:	e7fe      	b.n	8019990 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8019992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019994:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8019996:	69fb      	ldr	r3, [r7, #28]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d00d      	beq.n	80199b8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801999c:	69fb      	ldr	r3, [r7, #28]
 801999e:	2202      	movs	r2, #2
 80199a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80199a4:	69fb      	ldr	r3, [r7, #28]
 80199a6:	9301      	str	r3, [sp, #4]
 80199a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199aa:	9300      	str	r3, [sp, #0]
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	68b9      	ldr	r1, [r7, #8]
 80199b2:	68f8      	ldr	r0, [r7, #12]
 80199b4:	f000 f805 	bl	80199c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80199b8:	69fb      	ldr	r3, [r7, #28]
	}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3720      	adds	r7, #32
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}

080199c2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80199c2:	b580      	push	{r7, lr}
 80199c4:	b086      	sub	sp, #24
 80199c6:	af00      	add	r7, sp, #0
 80199c8:	60f8      	str	r0, [r7, #12]
 80199ca:	60b9      	str	r1, [r7, #8]
 80199cc:	607a      	str	r2, [r7, #4]
 80199ce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80199d0:	68bb      	ldr	r3, [r7, #8]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d10a      	bne.n	80199ec <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80199d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199da:	f383 8811 	msr	BASEPRI, r3
 80199de:	f3bf 8f6f 	isb	sy
 80199e2:	f3bf 8f4f 	dsb	sy
 80199e6:	617b      	str	r3, [r7, #20]
}
 80199e8:	bf00      	nop
 80199ea:	e7fe      	b.n	80199ea <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80199ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d01e      	beq.n	8019a30 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80199f2:	f000 fae7 	bl	8019fc4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80199f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f8:	68fa      	ldr	r2, [r7, #12]
 80199fa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80199fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fe:	68ba      	ldr	r2, [r7, #8]
 8019a00:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8019a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a04:	683a      	ldr	r2, [r7, #0]
 8019a06:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8019a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a0a:	6a3a      	ldr	r2, [r7, #32]
 8019a0c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8019a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a10:	3304      	adds	r3, #4
 8019a12:	4618      	mov	r0, r3
 8019a14:	f7fd fd96 	bl	8017544 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d008      	beq.n	8019a30 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8019a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a24:	f043 0304 	orr.w	r3, r3, #4
 8019a28:	b2da      	uxtb	r2, r3
 8019a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8019a30:	bf00      	nop
 8019a32:	3718      	adds	r7, #24
 8019a34:	46bd      	mov	sp, r7
 8019a36:	bd80      	pop	{r7, pc}

08019a38 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b08a      	sub	sp, #40	; 0x28
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	60f8      	str	r0, [r7, #12]
 8019a40:	60b9      	str	r1, [r7, #8]
 8019a42:	607a      	str	r2, [r7, #4]
 8019a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019a46:	2300      	movs	r3, #0
 8019a48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d10a      	bne.n	8019a66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a54:	f383 8811 	msr	BASEPRI, r3
 8019a58:	f3bf 8f6f 	isb	sy
 8019a5c:	f3bf 8f4f 	dsb	sy
 8019a60:	623b      	str	r3, [r7, #32]
}
 8019a62:	bf00      	nop
 8019a64:	e7fe      	b.n	8019a64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019a66:	4b1a      	ldr	r3, [pc, #104]	; (8019ad0 <xTimerGenericCommand+0x98>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d02a      	beq.n	8019ac4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019a6e:	68bb      	ldr	r3, [r7, #8]
 8019a70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019a7a:	68bb      	ldr	r3, [r7, #8]
 8019a7c:	2b05      	cmp	r3, #5
 8019a7e:	dc18      	bgt.n	8019ab2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019a80:	f7ff fd1a 	bl	80194b8 <xTaskGetSchedulerState>
 8019a84:	4603      	mov	r3, r0
 8019a86:	2b02      	cmp	r3, #2
 8019a88:	d109      	bne.n	8019a9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019a8a:	4b11      	ldr	r3, [pc, #68]	; (8019ad0 <xTimerGenericCommand+0x98>)
 8019a8c:	6818      	ldr	r0, [r3, #0]
 8019a8e:	f107 0110 	add.w	r1, r7, #16
 8019a92:	2300      	movs	r3, #0
 8019a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a96:	f7fd ff91 	bl	80179bc <xQueueGenericSend>
 8019a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8019a9c:	e012      	b.n	8019ac4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019a9e:	4b0c      	ldr	r3, [pc, #48]	; (8019ad0 <xTimerGenericCommand+0x98>)
 8019aa0:	6818      	ldr	r0, [r3, #0]
 8019aa2:	f107 0110 	add.w	r1, r7, #16
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	f7fd ff87 	bl	80179bc <xQueueGenericSend>
 8019aae:	6278      	str	r0, [r7, #36]	; 0x24
 8019ab0:	e008      	b.n	8019ac4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019ab2:	4b07      	ldr	r3, [pc, #28]	; (8019ad0 <xTimerGenericCommand+0x98>)
 8019ab4:	6818      	ldr	r0, [r3, #0]
 8019ab6:	f107 0110 	add.w	r1, r7, #16
 8019aba:	2300      	movs	r3, #0
 8019abc:	683a      	ldr	r2, [r7, #0]
 8019abe:	f7fe f87b 	bl	8017bb8 <xQueueGenericSendFromISR>
 8019ac2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	3728      	adds	r7, #40	; 0x28
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bd80      	pop	{r7, pc}
 8019ace:	bf00      	nop
 8019ad0:	240025a8 	.word	0x240025a8

08019ad4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b088      	sub	sp, #32
 8019ad8:	af02      	add	r7, sp, #8
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ade:	4b22      	ldr	r3, [pc, #136]	; (8019b68 <prvProcessExpiredTimer+0x94>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	68db      	ldr	r3, [r3, #12]
 8019ae4:	68db      	ldr	r3, [r3, #12]
 8019ae6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	3304      	adds	r3, #4
 8019aec:	4618      	mov	r0, r3
 8019aee:	f7fd fd93 	bl	8017618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019af8:	f003 0304 	and.w	r3, r3, #4
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d022      	beq.n	8019b46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019b00:	697b      	ldr	r3, [r7, #20]
 8019b02:	699a      	ldr	r2, [r3, #24]
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	18d1      	adds	r1, r2, r3
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	683a      	ldr	r2, [r7, #0]
 8019b0c:	6978      	ldr	r0, [r7, #20]
 8019b0e:	f000 f8d1 	bl	8019cb4 <prvInsertTimerInActiveList>
 8019b12:	4603      	mov	r3, r0
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d01f      	beq.n	8019b58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019b18:	2300      	movs	r3, #0
 8019b1a:	9300      	str	r3, [sp, #0]
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	687a      	ldr	r2, [r7, #4]
 8019b20:	2100      	movs	r1, #0
 8019b22:	6978      	ldr	r0, [r7, #20]
 8019b24:	f7ff ff88 	bl	8019a38 <xTimerGenericCommand>
 8019b28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019b2a:	693b      	ldr	r3, [r7, #16]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d113      	bne.n	8019b58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b34:	f383 8811 	msr	BASEPRI, r3
 8019b38:	f3bf 8f6f 	isb	sy
 8019b3c:	f3bf 8f4f 	dsb	sy
 8019b40:	60fb      	str	r3, [r7, #12]
}
 8019b42:	bf00      	nop
 8019b44:	e7fe      	b.n	8019b44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b4c:	f023 0301 	bic.w	r3, r3, #1
 8019b50:	b2da      	uxtb	r2, r3
 8019b52:	697b      	ldr	r3, [r7, #20]
 8019b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	6a1b      	ldr	r3, [r3, #32]
 8019b5c:	6978      	ldr	r0, [r7, #20]
 8019b5e:	4798      	blx	r3
}
 8019b60:	bf00      	nop
 8019b62:	3718      	adds	r7, #24
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}
 8019b68:	240025a0 	.word	0x240025a0

08019b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b084      	sub	sp, #16
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b74:	f107 0308 	add.w	r3, r7, #8
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f000 f857 	bl	8019c2c <prvGetNextExpireTime>
 8019b7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019b80:	68bb      	ldr	r3, [r7, #8]
 8019b82:	4619      	mov	r1, r3
 8019b84:	68f8      	ldr	r0, [r7, #12]
 8019b86:	f000 f803 	bl	8019b90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019b8a:	f000 f8d5 	bl	8019d38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b8e:	e7f1      	b.n	8019b74 <prvTimerTask+0x8>

08019b90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b084      	sub	sp, #16
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019b9a:	f7ff f88d 	bl	8018cb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b9e:	f107 0308 	add.w	r3, r7, #8
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f000 f866 	bl	8019c74 <prvSampleTimeNow>
 8019ba8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019baa:	68bb      	ldr	r3, [r7, #8]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d130      	bne.n	8019c12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019bb0:	683b      	ldr	r3, [r7, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d10a      	bne.n	8019bcc <prvProcessTimerOrBlockTask+0x3c>
 8019bb6:	687a      	ldr	r2, [r7, #4]
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d806      	bhi.n	8019bcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019bbe:	f7ff f889 	bl	8018cd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019bc2:	68f9      	ldr	r1, [r7, #12]
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	f7ff ff85 	bl	8019ad4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019bca:	e024      	b.n	8019c16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019bcc:	683b      	ldr	r3, [r7, #0]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d008      	beq.n	8019be4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019bd2:	4b13      	ldr	r3, [pc, #76]	; (8019c20 <prvProcessTimerOrBlockTask+0x90>)
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d101      	bne.n	8019be0 <prvProcessTimerOrBlockTask+0x50>
 8019bdc:	2301      	movs	r3, #1
 8019bde:	e000      	b.n	8019be2 <prvProcessTimerOrBlockTask+0x52>
 8019be0:	2300      	movs	r3, #0
 8019be2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019be4:	4b0f      	ldr	r3, [pc, #60]	; (8019c24 <prvProcessTimerOrBlockTask+0x94>)
 8019be6:	6818      	ldr	r0, [r3, #0]
 8019be8:	687a      	ldr	r2, [r7, #4]
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	1ad3      	subs	r3, r2, r3
 8019bee:	683a      	ldr	r2, [r7, #0]
 8019bf0:	4619      	mov	r1, r3
 8019bf2:	f7fe fd15 	bl	8018620 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019bf6:	f7ff f86d 	bl	8018cd4 <xTaskResumeAll>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d10a      	bne.n	8019c16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019c00:	4b09      	ldr	r3, [pc, #36]	; (8019c28 <prvProcessTimerOrBlockTask+0x98>)
 8019c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c06:	601a      	str	r2, [r3, #0]
 8019c08:	f3bf 8f4f 	dsb	sy
 8019c0c:	f3bf 8f6f 	isb	sy
}
 8019c10:	e001      	b.n	8019c16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019c12:	f7ff f85f 	bl	8018cd4 <xTaskResumeAll>
}
 8019c16:	bf00      	nop
 8019c18:	3710      	adds	r7, #16
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd80      	pop	{r7, pc}
 8019c1e:	bf00      	nop
 8019c20:	240025a4 	.word	0x240025a4
 8019c24:	240025a8 	.word	0x240025a8
 8019c28:	e000ed04 	.word	0xe000ed04

08019c2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019c2c:	b480      	push	{r7}
 8019c2e:	b085      	sub	sp, #20
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019c34:	4b0e      	ldr	r3, [pc, #56]	; (8019c70 <prvGetNextExpireTime+0x44>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d101      	bne.n	8019c42 <prvGetNextExpireTime+0x16>
 8019c3e:	2201      	movs	r2, #1
 8019c40:	e000      	b.n	8019c44 <prvGetNextExpireTime+0x18>
 8019c42:	2200      	movs	r2, #0
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d105      	bne.n	8019c5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019c50:	4b07      	ldr	r3, [pc, #28]	; (8019c70 <prvGetNextExpireTime+0x44>)
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	68db      	ldr	r3, [r3, #12]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	60fb      	str	r3, [r7, #12]
 8019c5a:	e001      	b.n	8019c60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019c60:	68fb      	ldr	r3, [r7, #12]
}
 8019c62:	4618      	mov	r0, r3
 8019c64:	3714      	adds	r7, #20
 8019c66:	46bd      	mov	sp, r7
 8019c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6c:	4770      	bx	lr
 8019c6e:	bf00      	nop
 8019c70:	240025a0 	.word	0x240025a0

08019c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b084      	sub	sp, #16
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019c7c:	f7ff f8c8 	bl	8018e10 <xTaskGetTickCount>
 8019c80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019c82:	4b0b      	ldr	r3, [pc, #44]	; (8019cb0 <prvSampleTimeNow+0x3c>)
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	68fa      	ldr	r2, [r7, #12]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d205      	bcs.n	8019c98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019c8c:	f000 f936 	bl	8019efc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2201      	movs	r2, #1
 8019c94:	601a      	str	r2, [r3, #0]
 8019c96:	e002      	b.n	8019c9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019c9e:	4a04      	ldr	r2, [pc, #16]	; (8019cb0 <prvSampleTimeNow+0x3c>)
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019ca4:	68fb      	ldr	r3, [r7, #12]
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3710      	adds	r7, #16
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}
 8019cae:	bf00      	nop
 8019cb0:	240025b0 	.word	0x240025b0

08019cb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b086      	sub	sp, #24
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	60f8      	str	r0, [r7, #12]
 8019cbc:	60b9      	str	r1, [r7, #8]
 8019cbe:	607a      	str	r2, [r7, #4]
 8019cc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	68ba      	ldr	r2, [r7, #8]
 8019cca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	68fa      	ldr	r2, [r7, #12]
 8019cd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019cd2:	68ba      	ldr	r2, [r7, #8]
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	d812      	bhi.n	8019d00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019cda:	687a      	ldr	r2, [r7, #4]
 8019cdc:	683b      	ldr	r3, [r7, #0]
 8019cde:	1ad2      	subs	r2, r2, r3
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	699b      	ldr	r3, [r3, #24]
 8019ce4:	429a      	cmp	r2, r3
 8019ce6:	d302      	bcc.n	8019cee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019ce8:	2301      	movs	r3, #1
 8019cea:	617b      	str	r3, [r7, #20]
 8019cec:	e01b      	b.n	8019d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019cee:	4b10      	ldr	r3, [pc, #64]	; (8019d30 <prvInsertTimerInActiveList+0x7c>)
 8019cf0:	681a      	ldr	r2, [r3, #0]
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	3304      	adds	r3, #4
 8019cf6:	4619      	mov	r1, r3
 8019cf8:	4610      	mov	r0, r2
 8019cfa:	f7fd fc54 	bl	80175a6 <vListInsert>
 8019cfe:	e012      	b.n	8019d26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019d00:	687a      	ldr	r2, [r7, #4]
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d206      	bcs.n	8019d16 <prvInsertTimerInActiveList+0x62>
 8019d08:	68ba      	ldr	r2, [r7, #8]
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	429a      	cmp	r2, r3
 8019d0e:	d302      	bcc.n	8019d16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019d10:	2301      	movs	r3, #1
 8019d12:	617b      	str	r3, [r7, #20]
 8019d14:	e007      	b.n	8019d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d16:	4b07      	ldr	r3, [pc, #28]	; (8019d34 <prvInsertTimerInActiveList+0x80>)
 8019d18:	681a      	ldr	r2, [r3, #0]
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	3304      	adds	r3, #4
 8019d1e:	4619      	mov	r1, r3
 8019d20:	4610      	mov	r0, r2
 8019d22:	f7fd fc40 	bl	80175a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019d26:	697b      	ldr	r3, [r7, #20]
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	3718      	adds	r7, #24
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}
 8019d30:	240025a4 	.word	0x240025a4
 8019d34:	240025a0 	.word	0x240025a0

08019d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b08e      	sub	sp, #56	; 0x38
 8019d3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019d3e:	e0ca      	b.n	8019ed6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	da18      	bge.n	8019d78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019d46:	1d3b      	adds	r3, r7, #4
 8019d48:	3304      	adds	r3, #4
 8019d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d10a      	bne.n	8019d68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d56:	f383 8811 	msr	BASEPRI, r3
 8019d5a:	f3bf 8f6f 	isb	sy
 8019d5e:	f3bf 8f4f 	dsb	sy
 8019d62:	61fb      	str	r3, [r7, #28]
}
 8019d64:	bf00      	nop
 8019d66:	e7fe      	b.n	8019d66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d6e:	6850      	ldr	r0, [r2, #4]
 8019d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d72:	6892      	ldr	r2, [r2, #8]
 8019d74:	4611      	mov	r1, r2
 8019d76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	f2c0 80aa 	blt.w	8019ed4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d86:	695b      	ldr	r3, [r3, #20]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d004      	beq.n	8019d96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d8e:	3304      	adds	r3, #4
 8019d90:	4618      	mov	r0, r3
 8019d92:	f7fd fc41 	bl	8017618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019d96:	463b      	mov	r3, r7
 8019d98:	4618      	mov	r0, r3
 8019d9a:	f7ff ff6b 	bl	8019c74 <prvSampleTimeNow>
 8019d9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2b09      	cmp	r3, #9
 8019da4:	f200 8097 	bhi.w	8019ed6 <prvProcessReceivedCommands+0x19e>
 8019da8:	a201      	add	r2, pc, #4	; (adr r2, 8019db0 <prvProcessReceivedCommands+0x78>)
 8019daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dae:	bf00      	nop
 8019db0:	08019dd9 	.word	0x08019dd9
 8019db4:	08019dd9 	.word	0x08019dd9
 8019db8:	08019dd9 	.word	0x08019dd9
 8019dbc:	08019e4d 	.word	0x08019e4d
 8019dc0:	08019e61 	.word	0x08019e61
 8019dc4:	08019eab 	.word	0x08019eab
 8019dc8:	08019dd9 	.word	0x08019dd9
 8019dcc:	08019dd9 	.word	0x08019dd9
 8019dd0:	08019e4d 	.word	0x08019e4d
 8019dd4:	08019e61 	.word	0x08019e61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019dde:	f043 0301 	orr.w	r3, r3, #1
 8019de2:	b2da      	uxtb	r2, r3
 8019de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019dea:	68ba      	ldr	r2, [r7, #8]
 8019dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dee:	699b      	ldr	r3, [r3, #24]
 8019df0:	18d1      	adds	r1, r2, r3
 8019df2:	68bb      	ldr	r3, [r7, #8]
 8019df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019df8:	f7ff ff5c 	bl	8019cb4 <prvInsertTimerInActiveList>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d069      	beq.n	8019ed6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e04:	6a1b      	ldr	r3, [r3, #32]
 8019e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e10:	f003 0304 	and.w	r3, r3, #4
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d05e      	beq.n	8019ed6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019e18:	68ba      	ldr	r2, [r7, #8]
 8019e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e1c:	699b      	ldr	r3, [r3, #24]
 8019e1e:	441a      	add	r2, r3
 8019e20:	2300      	movs	r3, #0
 8019e22:	9300      	str	r3, [sp, #0]
 8019e24:	2300      	movs	r3, #0
 8019e26:	2100      	movs	r1, #0
 8019e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e2a:	f7ff fe05 	bl	8019a38 <xTimerGenericCommand>
 8019e2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019e30:	6a3b      	ldr	r3, [r7, #32]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d14f      	bne.n	8019ed6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e3a:	f383 8811 	msr	BASEPRI, r3
 8019e3e:	f3bf 8f6f 	isb	sy
 8019e42:	f3bf 8f4f 	dsb	sy
 8019e46:	61bb      	str	r3, [r7, #24]
}
 8019e48:	bf00      	nop
 8019e4a:	e7fe      	b.n	8019e4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e52:	f023 0301 	bic.w	r3, r3, #1
 8019e56:	b2da      	uxtb	r2, r3
 8019e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019e5e:	e03a      	b.n	8019ed6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e66:	f043 0301 	orr.w	r3, r3, #1
 8019e6a:	b2da      	uxtb	r2, r3
 8019e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019e72:	68ba      	ldr	r2, [r7, #8]
 8019e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e7a:	699b      	ldr	r3, [r3, #24]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d10a      	bne.n	8019e96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e84:	f383 8811 	msr	BASEPRI, r3
 8019e88:	f3bf 8f6f 	isb	sy
 8019e8c:	f3bf 8f4f 	dsb	sy
 8019e90:	617b      	str	r3, [r7, #20]
}
 8019e92:	bf00      	nop
 8019e94:	e7fe      	b.n	8019e94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e98:	699a      	ldr	r2, [r3, #24]
 8019e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e9c:	18d1      	adds	r1, r2, r3
 8019e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ea4:	f7ff ff06 	bl	8019cb4 <prvInsertTimerInActiveList>
					break;
 8019ea8:	e015      	b.n	8019ed6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019eb0:	f003 0302 	and.w	r3, r3, #2
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d103      	bne.n	8019ec0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019eba:	f000 fc01 	bl	801a6c0 <vPortFree>
 8019ebe:	e00a      	b.n	8019ed6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ec6:	f023 0301 	bic.w	r3, r3, #1
 8019eca:	b2da      	uxtb	r2, r3
 8019ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019ed2:	e000      	b.n	8019ed6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019ed4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019ed6:	4b08      	ldr	r3, [pc, #32]	; (8019ef8 <prvProcessReceivedCommands+0x1c0>)
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	1d39      	adds	r1, r7, #4
 8019edc:	2200      	movs	r2, #0
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7fd ff92 	bl	8017e08 <xQueueReceive>
 8019ee4:	4603      	mov	r3, r0
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f47f af2a 	bne.w	8019d40 <prvProcessReceivedCommands+0x8>
	}
}
 8019eec:	bf00      	nop
 8019eee:	bf00      	nop
 8019ef0:	3730      	adds	r7, #48	; 0x30
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}
 8019ef6:	bf00      	nop
 8019ef8:	240025a8 	.word	0x240025a8

08019efc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b088      	sub	sp, #32
 8019f00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019f02:	e048      	b.n	8019f96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019f04:	4b2d      	ldr	r3, [pc, #180]	; (8019fbc <prvSwitchTimerLists+0xc0>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	68db      	ldr	r3, [r3, #12]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f0e:	4b2b      	ldr	r3, [pc, #172]	; (8019fbc <prvSwitchTimerLists+0xc0>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	68db      	ldr	r3, [r3, #12]
 8019f14:	68db      	ldr	r3, [r3, #12]
 8019f16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	3304      	adds	r3, #4
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7fd fb7b 	bl	8017618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	6a1b      	ldr	r3, [r3, #32]
 8019f26:	68f8      	ldr	r0, [r7, #12]
 8019f28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f30:	f003 0304 	and.w	r3, r3, #4
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d02e      	beq.n	8019f96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	699b      	ldr	r3, [r3, #24]
 8019f3c:	693a      	ldr	r2, [r7, #16]
 8019f3e:	4413      	add	r3, r2
 8019f40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019f42:	68ba      	ldr	r2, [r7, #8]
 8019f44:	693b      	ldr	r3, [r7, #16]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d90e      	bls.n	8019f68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	68ba      	ldr	r2, [r7, #8]
 8019f4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	68fa      	ldr	r2, [r7, #12]
 8019f54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019f56:	4b19      	ldr	r3, [pc, #100]	; (8019fbc <prvSwitchTimerLists+0xc0>)
 8019f58:	681a      	ldr	r2, [r3, #0]
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	3304      	adds	r3, #4
 8019f5e:	4619      	mov	r1, r3
 8019f60:	4610      	mov	r0, r2
 8019f62:	f7fd fb20 	bl	80175a6 <vListInsert>
 8019f66:	e016      	b.n	8019f96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019f68:	2300      	movs	r3, #0
 8019f6a:	9300      	str	r3, [sp, #0]
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	693a      	ldr	r2, [r7, #16]
 8019f70:	2100      	movs	r1, #0
 8019f72:	68f8      	ldr	r0, [r7, #12]
 8019f74:	f7ff fd60 	bl	8019a38 <xTimerGenericCommand>
 8019f78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d10a      	bne.n	8019f96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f84:	f383 8811 	msr	BASEPRI, r3
 8019f88:	f3bf 8f6f 	isb	sy
 8019f8c:	f3bf 8f4f 	dsb	sy
 8019f90:	603b      	str	r3, [r7, #0]
}
 8019f92:	bf00      	nop
 8019f94:	e7fe      	b.n	8019f94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019f96:	4b09      	ldr	r3, [pc, #36]	; (8019fbc <prvSwitchTimerLists+0xc0>)
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d1b1      	bne.n	8019f04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019fa0:	4b06      	ldr	r3, [pc, #24]	; (8019fbc <prvSwitchTimerLists+0xc0>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019fa6:	4b06      	ldr	r3, [pc, #24]	; (8019fc0 <prvSwitchTimerLists+0xc4>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	4a04      	ldr	r2, [pc, #16]	; (8019fbc <prvSwitchTimerLists+0xc0>)
 8019fac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019fae:	4a04      	ldr	r2, [pc, #16]	; (8019fc0 <prvSwitchTimerLists+0xc4>)
 8019fb0:	697b      	ldr	r3, [r7, #20]
 8019fb2:	6013      	str	r3, [r2, #0]
}
 8019fb4:	bf00      	nop
 8019fb6:	3718      	adds	r7, #24
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}
 8019fbc:	240025a0 	.word	0x240025a0
 8019fc0:	240025a4 	.word	0x240025a4

08019fc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019fca:	f000 f98b 	bl	801a2e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019fce:	4b15      	ldr	r3, [pc, #84]	; (801a024 <prvCheckForValidListAndQueue+0x60>)
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d120      	bne.n	801a018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019fd6:	4814      	ldr	r0, [pc, #80]	; (801a028 <prvCheckForValidListAndQueue+0x64>)
 8019fd8:	f7fd fa94 	bl	8017504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019fdc:	4813      	ldr	r0, [pc, #76]	; (801a02c <prvCheckForValidListAndQueue+0x68>)
 8019fde:	f7fd fa91 	bl	8017504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019fe2:	4b13      	ldr	r3, [pc, #76]	; (801a030 <prvCheckForValidListAndQueue+0x6c>)
 8019fe4:	4a10      	ldr	r2, [pc, #64]	; (801a028 <prvCheckForValidListAndQueue+0x64>)
 8019fe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019fe8:	4b12      	ldr	r3, [pc, #72]	; (801a034 <prvCheckForValidListAndQueue+0x70>)
 8019fea:	4a10      	ldr	r2, [pc, #64]	; (801a02c <prvCheckForValidListAndQueue+0x68>)
 8019fec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019fee:	2300      	movs	r3, #0
 8019ff0:	9300      	str	r3, [sp, #0]
 8019ff2:	4b11      	ldr	r3, [pc, #68]	; (801a038 <prvCheckForValidListAndQueue+0x74>)
 8019ff4:	4a11      	ldr	r2, [pc, #68]	; (801a03c <prvCheckForValidListAndQueue+0x78>)
 8019ff6:	2110      	movs	r1, #16
 8019ff8:	200a      	movs	r0, #10
 8019ffa:	f7fd fb9f 	bl	801773c <xQueueGenericCreateStatic>
 8019ffe:	4603      	mov	r3, r0
 801a000:	4a08      	ldr	r2, [pc, #32]	; (801a024 <prvCheckForValidListAndQueue+0x60>)
 801a002:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a004:	4b07      	ldr	r3, [pc, #28]	; (801a024 <prvCheckForValidListAndQueue+0x60>)
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d005      	beq.n	801a018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a00c:	4b05      	ldr	r3, [pc, #20]	; (801a024 <prvCheckForValidListAndQueue+0x60>)
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	490b      	ldr	r1, [pc, #44]	; (801a040 <prvCheckForValidListAndQueue+0x7c>)
 801a012:	4618      	mov	r0, r3
 801a014:	f7fe fab0 	bl	8018578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a018:	f000 f994 	bl	801a344 <vPortExitCritical>
}
 801a01c:	bf00      	nop
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
 801a022:	bf00      	nop
 801a024:	240025a8 	.word	0x240025a8
 801a028:	24002578 	.word	0x24002578
 801a02c:	2400258c 	.word	0x2400258c
 801a030:	240025a0 	.word	0x240025a0
 801a034:	240025a4 	.word	0x240025a4
 801a038:	24002654 	.word	0x24002654
 801a03c:	240025b4 	.word	0x240025b4
 801a040:	0801ddf4 	.word	0x0801ddf4

0801a044 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b086      	sub	sp, #24
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	2b00      	cmp	r3, #0
 801a054:	d10a      	bne.n	801a06c <pvTimerGetTimerID+0x28>
	__asm volatile
 801a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a05a:	f383 8811 	msr	BASEPRI, r3
 801a05e:	f3bf 8f6f 	isb	sy
 801a062:	f3bf 8f4f 	dsb	sy
 801a066:	60fb      	str	r3, [r7, #12]
}
 801a068:	bf00      	nop
 801a06a:	e7fe      	b.n	801a06a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801a06c:	f000 f93a 	bl	801a2e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801a070:	697b      	ldr	r3, [r7, #20]
 801a072:	69db      	ldr	r3, [r3, #28]
 801a074:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801a076:	f000 f965 	bl	801a344 <vPortExitCritical>

	return pvReturn;
 801a07a:	693b      	ldr	r3, [r7, #16]
}
 801a07c:	4618      	mov	r0, r3
 801a07e:	3718      	adds	r7, #24
 801a080:	46bd      	mov	sp, r7
 801a082:	bd80      	pop	{r7, pc}

0801a084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a084:	b480      	push	{r7}
 801a086:	b085      	sub	sp, #20
 801a088:	af00      	add	r7, sp, #0
 801a08a:	60f8      	str	r0, [r7, #12]
 801a08c:	60b9      	str	r1, [r7, #8]
 801a08e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	3b04      	subs	r3, #4
 801a094:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	3b04      	subs	r3, #4
 801a0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	f023 0201 	bic.w	r2, r3, #1
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	3b04      	subs	r3, #4
 801a0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a0b4:	4a0c      	ldr	r2, [pc, #48]	; (801a0e8 <pxPortInitialiseStack+0x64>)
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	3b14      	subs	r3, #20
 801a0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a0c0:	687a      	ldr	r2, [r7, #4]
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	3b04      	subs	r3, #4
 801a0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	f06f 0202 	mvn.w	r2, #2
 801a0d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	3b20      	subs	r3, #32
 801a0d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a0da:	68fb      	ldr	r3, [r7, #12]
}
 801a0dc:	4618      	mov	r0, r3
 801a0de:	3714      	adds	r7, #20
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e6:	4770      	bx	lr
 801a0e8:	0801a0ed 	.word	0x0801a0ed

0801a0ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a0ec:	b480      	push	{r7}
 801a0ee:	b085      	sub	sp, #20
 801a0f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a0f6:	4b12      	ldr	r3, [pc, #72]	; (801a140 <prvTaskExitError+0x54>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0fe:	d00a      	beq.n	801a116 <prvTaskExitError+0x2a>
	__asm volatile
 801a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a104:	f383 8811 	msr	BASEPRI, r3
 801a108:	f3bf 8f6f 	isb	sy
 801a10c:	f3bf 8f4f 	dsb	sy
 801a110:	60fb      	str	r3, [r7, #12]
}
 801a112:	bf00      	nop
 801a114:	e7fe      	b.n	801a114 <prvTaskExitError+0x28>
	__asm volatile
 801a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a11a:	f383 8811 	msr	BASEPRI, r3
 801a11e:	f3bf 8f6f 	isb	sy
 801a122:	f3bf 8f4f 	dsb	sy
 801a126:	60bb      	str	r3, [r7, #8]
}
 801a128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a12a:	bf00      	nop
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d0fc      	beq.n	801a12c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a132:	bf00      	nop
 801a134:	bf00      	nop
 801a136:	3714      	adds	r7, #20
 801a138:	46bd      	mov	sp, r7
 801a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13e:	4770      	bx	lr
 801a140:	240000a0 	.word	0x240000a0
	...

0801a150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a150:	4b07      	ldr	r3, [pc, #28]	; (801a170 <pxCurrentTCBConst2>)
 801a152:	6819      	ldr	r1, [r3, #0]
 801a154:	6808      	ldr	r0, [r1, #0]
 801a156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a15a:	f380 8809 	msr	PSP, r0
 801a15e:	f3bf 8f6f 	isb	sy
 801a162:	f04f 0000 	mov.w	r0, #0
 801a166:	f380 8811 	msr	BASEPRI, r0
 801a16a:	4770      	bx	lr
 801a16c:	f3af 8000 	nop.w

0801a170 <pxCurrentTCBConst2>:
 801a170:	24002070 	.word	0x24002070
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a174:	bf00      	nop
 801a176:	bf00      	nop

0801a178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a178:	4808      	ldr	r0, [pc, #32]	; (801a19c <prvPortStartFirstTask+0x24>)
 801a17a:	6800      	ldr	r0, [r0, #0]
 801a17c:	6800      	ldr	r0, [r0, #0]
 801a17e:	f380 8808 	msr	MSP, r0
 801a182:	f04f 0000 	mov.w	r0, #0
 801a186:	f380 8814 	msr	CONTROL, r0
 801a18a:	b662      	cpsie	i
 801a18c:	b661      	cpsie	f
 801a18e:	f3bf 8f4f 	dsb	sy
 801a192:	f3bf 8f6f 	isb	sy
 801a196:	df00      	svc	0
 801a198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a19a:	bf00      	nop
 801a19c:	e000ed08 	.word	0xe000ed08

0801a1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b086      	sub	sp, #24
 801a1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a1a6:	4b46      	ldr	r3, [pc, #280]	; (801a2c0 <xPortStartScheduler+0x120>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	4a46      	ldr	r2, [pc, #280]	; (801a2c4 <xPortStartScheduler+0x124>)
 801a1ac:	4293      	cmp	r3, r2
 801a1ae:	d10a      	bne.n	801a1c6 <xPortStartScheduler+0x26>
	__asm volatile
 801a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1b4:	f383 8811 	msr	BASEPRI, r3
 801a1b8:	f3bf 8f6f 	isb	sy
 801a1bc:	f3bf 8f4f 	dsb	sy
 801a1c0:	613b      	str	r3, [r7, #16]
}
 801a1c2:	bf00      	nop
 801a1c4:	e7fe      	b.n	801a1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a1c6:	4b3e      	ldr	r3, [pc, #248]	; (801a2c0 <xPortStartScheduler+0x120>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	4a3f      	ldr	r2, [pc, #252]	; (801a2c8 <xPortStartScheduler+0x128>)
 801a1cc:	4293      	cmp	r3, r2
 801a1ce:	d10a      	bne.n	801a1e6 <xPortStartScheduler+0x46>
	__asm volatile
 801a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1d4:	f383 8811 	msr	BASEPRI, r3
 801a1d8:	f3bf 8f6f 	isb	sy
 801a1dc:	f3bf 8f4f 	dsb	sy
 801a1e0:	60fb      	str	r3, [r7, #12]
}
 801a1e2:	bf00      	nop
 801a1e4:	e7fe      	b.n	801a1e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a1e6:	4b39      	ldr	r3, [pc, #228]	; (801a2cc <xPortStartScheduler+0x12c>)
 801a1e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a1ea:	697b      	ldr	r3, [r7, #20]
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a1f2:	697b      	ldr	r3, [r7, #20]
 801a1f4:	22ff      	movs	r2, #255	; 0xff
 801a1f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	781b      	ldrb	r3, [r3, #0]
 801a1fc:	b2db      	uxtb	r3, r3
 801a1fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a200:	78fb      	ldrb	r3, [r7, #3]
 801a202:	b2db      	uxtb	r3, r3
 801a204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a208:	b2da      	uxtb	r2, r3
 801a20a:	4b31      	ldr	r3, [pc, #196]	; (801a2d0 <xPortStartScheduler+0x130>)
 801a20c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a20e:	4b31      	ldr	r3, [pc, #196]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a210:	2207      	movs	r2, #7
 801a212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a214:	e009      	b.n	801a22a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a216:	4b2f      	ldr	r3, [pc, #188]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	3b01      	subs	r3, #1
 801a21c:	4a2d      	ldr	r2, [pc, #180]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a21e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a220:	78fb      	ldrb	r3, [r7, #3]
 801a222:	b2db      	uxtb	r3, r3
 801a224:	005b      	lsls	r3, r3, #1
 801a226:	b2db      	uxtb	r3, r3
 801a228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a22a:	78fb      	ldrb	r3, [r7, #3]
 801a22c:	b2db      	uxtb	r3, r3
 801a22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a232:	2b80      	cmp	r3, #128	; 0x80
 801a234:	d0ef      	beq.n	801a216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a236:	4b27      	ldr	r3, [pc, #156]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	f1c3 0307 	rsb	r3, r3, #7
 801a23e:	2b04      	cmp	r3, #4
 801a240:	d00a      	beq.n	801a258 <xPortStartScheduler+0xb8>
	__asm volatile
 801a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a246:	f383 8811 	msr	BASEPRI, r3
 801a24a:	f3bf 8f6f 	isb	sy
 801a24e:	f3bf 8f4f 	dsb	sy
 801a252:	60bb      	str	r3, [r7, #8]
}
 801a254:	bf00      	nop
 801a256:	e7fe      	b.n	801a256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a258:	4b1e      	ldr	r3, [pc, #120]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	021b      	lsls	r3, r3, #8
 801a25e:	4a1d      	ldr	r2, [pc, #116]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a262:	4b1c      	ldr	r3, [pc, #112]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a26a:	4a1a      	ldr	r2, [pc, #104]	; (801a2d4 <xPortStartScheduler+0x134>)
 801a26c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	b2da      	uxtb	r2, r3
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a276:	4b18      	ldr	r3, [pc, #96]	; (801a2d8 <xPortStartScheduler+0x138>)
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4a17      	ldr	r2, [pc, #92]	; (801a2d8 <xPortStartScheduler+0x138>)
 801a27c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a282:	4b15      	ldr	r3, [pc, #84]	; (801a2d8 <xPortStartScheduler+0x138>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4a14      	ldr	r2, [pc, #80]	; (801a2d8 <xPortStartScheduler+0x138>)
 801a288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a28c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a28e:	f000 f8dd 	bl	801a44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a292:	4b12      	ldr	r3, [pc, #72]	; (801a2dc <xPortStartScheduler+0x13c>)
 801a294:	2200      	movs	r2, #0
 801a296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a298:	f000 f8fc 	bl	801a494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a29c:	4b10      	ldr	r3, [pc, #64]	; (801a2e0 <xPortStartScheduler+0x140>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	4a0f      	ldr	r2, [pc, #60]	; (801a2e0 <xPortStartScheduler+0x140>)
 801a2a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a2a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a2a8:	f7ff ff66 	bl	801a178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a2ac:	f7fe fe7a 	bl	8018fa4 <vTaskSwitchContext>
	prvTaskExitError();
 801a2b0:	f7ff ff1c 	bl	801a0ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a2b4:	2300      	movs	r3, #0
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3718      	adds	r7, #24
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	e000ed00 	.word	0xe000ed00
 801a2c4:	410fc271 	.word	0x410fc271
 801a2c8:	410fc270 	.word	0x410fc270
 801a2cc:	e000e400 	.word	0xe000e400
 801a2d0:	240026a4 	.word	0x240026a4
 801a2d4:	240026a8 	.word	0x240026a8
 801a2d8:	e000ed20 	.word	0xe000ed20
 801a2dc:	240000a0 	.word	0x240000a0
 801a2e0:	e000ef34 	.word	0xe000ef34

0801a2e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a2e4:	b480      	push	{r7}
 801a2e6:	b083      	sub	sp, #12
 801a2e8:	af00      	add	r7, sp, #0
	__asm volatile
 801a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2ee:	f383 8811 	msr	BASEPRI, r3
 801a2f2:	f3bf 8f6f 	isb	sy
 801a2f6:	f3bf 8f4f 	dsb	sy
 801a2fa:	607b      	str	r3, [r7, #4]
}
 801a2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a2fe:	4b0f      	ldr	r3, [pc, #60]	; (801a33c <vPortEnterCritical+0x58>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	3301      	adds	r3, #1
 801a304:	4a0d      	ldr	r2, [pc, #52]	; (801a33c <vPortEnterCritical+0x58>)
 801a306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a308:	4b0c      	ldr	r3, [pc, #48]	; (801a33c <vPortEnterCritical+0x58>)
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	2b01      	cmp	r3, #1
 801a30e:	d10f      	bne.n	801a330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a310:	4b0b      	ldr	r3, [pc, #44]	; (801a340 <vPortEnterCritical+0x5c>)
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	b2db      	uxtb	r3, r3
 801a316:	2b00      	cmp	r3, #0
 801a318:	d00a      	beq.n	801a330 <vPortEnterCritical+0x4c>
	__asm volatile
 801a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a31e:	f383 8811 	msr	BASEPRI, r3
 801a322:	f3bf 8f6f 	isb	sy
 801a326:	f3bf 8f4f 	dsb	sy
 801a32a:	603b      	str	r3, [r7, #0]
}
 801a32c:	bf00      	nop
 801a32e:	e7fe      	b.n	801a32e <vPortEnterCritical+0x4a>
	}
}
 801a330:	bf00      	nop
 801a332:	370c      	adds	r7, #12
 801a334:	46bd      	mov	sp, r7
 801a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33a:	4770      	bx	lr
 801a33c:	240000a0 	.word	0x240000a0
 801a340:	e000ed04 	.word	0xe000ed04

0801a344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a344:	b480      	push	{r7}
 801a346:	b083      	sub	sp, #12
 801a348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a34a:	4b12      	ldr	r3, [pc, #72]	; (801a394 <vPortExitCritical+0x50>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d10a      	bne.n	801a368 <vPortExitCritical+0x24>
	__asm volatile
 801a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a356:	f383 8811 	msr	BASEPRI, r3
 801a35a:	f3bf 8f6f 	isb	sy
 801a35e:	f3bf 8f4f 	dsb	sy
 801a362:	607b      	str	r3, [r7, #4]
}
 801a364:	bf00      	nop
 801a366:	e7fe      	b.n	801a366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a368:	4b0a      	ldr	r3, [pc, #40]	; (801a394 <vPortExitCritical+0x50>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	3b01      	subs	r3, #1
 801a36e:	4a09      	ldr	r2, [pc, #36]	; (801a394 <vPortExitCritical+0x50>)
 801a370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a372:	4b08      	ldr	r3, [pc, #32]	; (801a394 <vPortExitCritical+0x50>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d105      	bne.n	801a386 <vPortExitCritical+0x42>
 801a37a:	2300      	movs	r3, #0
 801a37c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	f383 8811 	msr	BASEPRI, r3
}
 801a384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a386:	bf00      	nop
 801a388:	370c      	adds	r7, #12
 801a38a:	46bd      	mov	sp, r7
 801a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a390:	4770      	bx	lr
 801a392:	bf00      	nop
 801a394:	240000a0 	.word	0x240000a0
	...

0801a3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a3a0:	f3ef 8009 	mrs	r0, PSP
 801a3a4:	f3bf 8f6f 	isb	sy
 801a3a8:	4b15      	ldr	r3, [pc, #84]	; (801a400 <pxCurrentTCBConst>)
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	f01e 0f10 	tst.w	lr, #16
 801a3b0:	bf08      	it	eq
 801a3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ba:	6010      	str	r0, [r2, #0]
 801a3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a3c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a3c4:	f380 8811 	msr	BASEPRI, r0
 801a3c8:	f3bf 8f4f 	dsb	sy
 801a3cc:	f3bf 8f6f 	isb	sy
 801a3d0:	f7fe fde8 	bl	8018fa4 <vTaskSwitchContext>
 801a3d4:	f04f 0000 	mov.w	r0, #0
 801a3d8:	f380 8811 	msr	BASEPRI, r0
 801a3dc:	bc09      	pop	{r0, r3}
 801a3de:	6819      	ldr	r1, [r3, #0]
 801a3e0:	6808      	ldr	r0, [r1, #0]
 801a3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e6:	f01e 0f10 	tst.w	lr, #16
 801a3ea:	bf08      	it	eq
 801a3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a3f0:	f380 8809 	msr	PSP, r0
 801a3f4:	f3bf 8f6f 	isb	sy
 801a3f8:	4770      	bx	lr
 801a3fa:	bf00      	nop
 801a3fc:	f3af 8000 	nop.w

0801a400 <pxCurrentTCBConst>:
 801a400:	24002070 	.word	0x24002070
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a404:	bf00      	nop
 801a406:	bf00      	nop

0801a408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
	__asm volatile
 801a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a412:	f383 8811 	msr	BASEPRI, r3
 801a416:	f3bf 8f6f 	isb	sy
 801a41a:	f3bf 8f4f 	dsb	sy
 801a41e:	607b      	str	r3, [r7, #4]
}
 801a420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a422:	f7fe fd05 	bl	8018e30 <xTaskIncrementTick>
 801a426:	4603      	mov	r3, r0
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d003      	beq.n	801a434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a42c:	4b06      	ldr	r3, [pc, #24]	; (801a448 <xPortSysTickHandler+0x40>)
 801a42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a432:	601a      	str	r2, [r3, #0]
 801a434:	2300      	movs	r3, #0
 801a436:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a438:	683b      	ldr	r3, [r7, #0]
 801a43a:	f383 8811 	msr	BASEPRI, r3
}
 801a43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a440:	bf00      	nop
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}
 801a448:	e000ed04 	.word	0xe000ed04

0801a44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a44c:	b480      	push	{r7}
 801a44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a450:	4b0b      	ldr	r3, [pc, #44]	; (801a480 <vPortSetupTimerInterrupt+0x34>)
 801a452:	2200      	movs	r2, #0
 801a454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a456:	4b0b      	ldr	r3, [pc, #44]	; (801a484 <vPortSetupTimerInterrupt+0x38>)
 801a458:	2200      	movs	r2, #0
 801a45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a45c:	4b0a      	ldr	r3, [pc, #40]	; (801a488 <vPortSetupTimerInterrupt+0x3c>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	4a0a      	ldr	r2, [pc, #40]	; (801a48c <vPortSetupTimerInterrupt+0x40>)
 801a462:	fba2 2303 	umull	r2, r3, r2, r3
 801a466:	099b      	lsrs	r3, r3, #6
 801a468:	4a09      	ldr	r2, [pc, #36]	; (801a490 <vPortSetupTimerInterrupt+0x44>)
 801a46a:	3b01      	subs	r3, #1
 801a46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a46e:	4b04      	ldr	r3, [pc, #16]	; (801a480 <vPortSetupTimerInterrupt+0x34>)
 801a470:	2207      	movs	r2, #7
 801a472:	601a      	str	r2, [r3, #0]
}
 801a474:	bf00      	nop
 801a476:	46bd      	mov	sp, r7
 801a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47c:	4770      	bx	lr
 801a47e:	bf00      	nop
 801a480:	e000e010 	.word	0xe000e010
 801a484:	e000e018 	.word	0xe000e018
 801a488:	24000028 	.word	0x24000028
 801a48c:	10624dd3 	.word	0x10624dd3
 801a490:	e000e014 	.word	0xe000e014

0801a494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a4a4 <vPortEnableVFP+0x10>
 801a498:	6801      	ldr	r1, [r0, #0]
 801a49a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a49e:	6001      	str	r1, [r0, #0]
 801a4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a4a2:	bf00      	nop
 801a4a4:	e000ed88 	.word	0xe000ed88

0801a4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a4a8:	b480      	push	{r7}
 801a4aa:	b085      	sub	sp, #20
 801a4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a4ae:	f3ef 8305 	mrs	r3, IPSR
 801a4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	2b0f      	cmp	r3, #15
 801a4b8:	d914      	bls.n	801a4e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a4ba:	4a17      	ldr	r2, [pc, #92]	; (801a518 <vPortValidateInterruptPriority+0x70>)
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	4413      	add	r3, r2
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a4c4:	4b15      	ldr	r3, [pc, #84]	; (801a51c <vPortValidateInterruptPriority+0x74>)
 801a4c6:	781b      	ldrb	r3, [r3, #0]
 801a4c8:	7afa      	ldrb	r2, [r7, #11]
 801a4ca:	429a      	cmp	r2, r3
 801a4cc:	d20a      	bcs.n	801a4e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4d2:	f383 8811 	msr	BASEPRI, r3
 801a4d6:	f3bf 8f6f 	isb	sy
 801a4da:	f3bf 8f4f 	dsb	sy
 801a4de:	607b      	str	r3, [r7, #4]
}
 801a4e0:	bf00      	nop
 801a4e2:	e7fe      	b.n	801a4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a4e4:	4b0e      	ldr	r3, [pc, #56]	; (801a520 <vPortValidateInterruptPriority+0x78>)
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a4ec:	4b0d      	ldr	r3, [pc, #52]	; (801a524 <vPortValidateInterruptPriority+0x7c>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	429a      	cmp	r2, r3
 801a4f2:	d90a      	bls.n	801a50a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4f8:	f383 8811 	msr	BASEPRI, r3
 801a4fc:	f3bf 8f6f 	isb	sy
 801a500:	f3bf 8f4f 	dsb	sy
 801a504:	603b      	str	r3, [r7, #0]
}
 801a506:	bf00      	nop
 801a508:	e7fe      	b.n	801a508 <vPortValidateInterruptPriority+0x60>
	}
 801a50a:	bf00      	nop
 801a50c:	3714      	adds	r7, #20
 801a50e:	46bd      	mov	sp, r7
 801a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a514:	4770      	bx	lr
 801a516:	bf00      	nop
 801a518:	e000e3f0 	.word	0xe000e3f0
 801a51c:	240026a4 	.word	0x240026a4
 801a520:	e000ed0c 	.word	0xe000ed0c
 801a524:	240026a8 	.word	0x240026a8

0801a528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a528:	b580      	push	{r7, lr}
 801a52a:	b08a      	sub	sp, #40	; 0x28
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a530:	2300      	movs	r3, #0
 801a532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a534:	f7fe fbc0 	bl	8018cb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a538:	4b5b      	ldr	r3, [pc, #364]	; (801a6a8 <pvPortMalloc+0x180>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d101      	bne.n	801a544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a540:	f000 f920 	bl	801a784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a544:	4b59      	ldr	r3, [pc, #356]	; (801a6ac <pvPortMalloc+0x184>)
 801a546:	681a      	ldr	r2, [r3, #0]
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	4013      	ands	r3, r2
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	f040 8093 	bne.w	801a678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d01d      	beq.n	801a594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a558:	2208      	movs	r2, #8
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	4413      	add	r3, r2
 801a55e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	f003 0307 	and.w	r3, r3, #7
 801a566:	2b00      	cmp	r3, #0
 801a568:	d014      	beq.n	801a594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f023 0307 	bic.w	r3, r3, #7
 801a570:	3308      	adds	r3, #8
 801a572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	f003 0307 	and.w	r3, r3, #7
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d00a      	beq.n	801a594 <pvPortMalloc+0x6c>
	__asm volatile
 801a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a582:	f383 8811 	msr	BASEPRI, r3
 801a586:	f3bf 8f6f 	isb	sy
 801a58a:	f3bf 8f4f 	dsb	sy
 801a58e:	617b      	str	r3, [r7, #20]
}
 801a590:	bf00      	nop
 801a592:	e7fe      	b.n	801a592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d06e      	beq.n	801a678 <pvPortMalloc+0x150>
 801a59a:	4b45      	ldr	r3, [pc, #276]	; (801a6b0 <pvPortMalloc+0x188>)
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	687a      	ldr	r2, [r7, #4]
 801a5a0:	429a      	cmp	r2, r3
 801a5a2:	d869      	bhi.n	801a678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a5a4:	4b43      	ldr	r3, [pc, #268]	; (801a6b4 <pvPortMalloc+0x18c>)
 801a5a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a5a8:	4b42      	ldr	r3, [pc, #264]	; (801a6b4 <pvPortMalloc+0x18c>)
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a5ae:	e004      	b.n	801a5ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5bc:	685b      	ldr	r3, [r3, #4]
 801a5be:	687a      	ldr	r2, [r7, #4]
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d903      	bls.n	801a5cc <pvPortMalloc+0xa4>
 801a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d1f1      	bne.n	801a5b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a5cc:	4b36      	ldr	r3, [pc, #216]	; (801a6a8 <pvPortMalloc+0x180>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a5d2:	429a      	cmp	r2, r3
 801a5d4:	d050      	beq.n	801a678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a5d6:	6a3b      	ldr	r3, [r7, #32]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	2208      	movs	r2, #8
 801a5dc:	4413      	add	r3, r2
 801a5de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5e2:	681a      	ldr	r2, [r3, #0]
 801a5e4:	6a3b      	ldr	r3, [r7, #32]
 801a5e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ea:	685a      	ldr	r2, [r3, #4]
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	1ad2      	subs	r2, r2, r3
 801a5f0:	2308      	movs	r3, #8
 801a5f2:	005b      	lsls	r3, r3, #1
 801a5f4:	429a      	cmp	r2, r3
 801a5f6:	d91f      	bls.n	801a638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	4413      	add	r3, r2
 801a5fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a600:	69bb      	ldr	r3, [r7, #24]
 801a602:	f003 0307 	and.w	r3, r3, #7
 801a606:	2b00      	cmp	r3, #0
 801a608:	d00a      	beq.n	801a620 <pvPortMalloc+0xf8>
	__asm volatile
 801a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a60e:	f383 8811 	msr	BASEPRI, r3
 801a612:	f3bf 8f6f 	isb	sy
 801a616:	f3bf 8f4f 	dsb	sy
 801a61a:	613b      	str	r3, [r7, #16]
}
 801a61c:	bf00      	nop
 801a61e:	e7fe      	b.n	801a61e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a622:	685a      	ldr	r2, [r3, #4]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	1ad2      	subs	r2, r2, r3
 801a628:	69bb      	ldr	r3, [r7, #24]
 801a62a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a62e:	687a      	ldr	r2, [r7, #4]
 801a630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a632:	69b8      	ldr	r0, [r7, #24]
 801a634:	f000 f908 	bl	801a848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a638:	4b1d      	ldr	r3, [pc, #116]	; (801a6b0 <pvPortMalloc+0x188>)
 801a63a:	681a      	ldr	r2, [r3, #0]
 801a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	1ad3      	subs	r3, r2, r3
 801a642:	4a1b      	ldr	r2, [pc, #108]	; (801a6b0 <pvPortMalloc+0x188>)
 801a644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a646:	4b1a      	ldr	r3, [pc, #104]	; (801a6b0 <pvPortMalloc+0x188>)
 801a648:	681a      	ldr	r2, [r3, #0]
 801a64a:	4b1b      	ldr	r3, [pc, #108]	; (801a6b8 <pvPortMalloc+0x190>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	429a      	cmp	r2, r3
 801a650:	d203      	bcs.n	801a65a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a652:	4b17      	ldr	r3, [pc, #92]	; (801a6b0 <pvPortMalloc+0x188>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	4a18      	ldr	r2, [pc, #96]	; (801a6b8 <pvPortMalloc+0x190>)
 801a658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a65c:	685a      	ldr	r2, [r3, #4]
 801a65e:	4b13      	ldr	r3, [pc, #76]	; (801a6ac <pvPortMalloc+0x184>)
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	431a      	orrs	r2, r3
 801a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a66a:	2200      	movs	r2, #0
 801a66c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a66e:	4b13      	ldr	r3, [pc, #76]	; (801a6bc <pvPortMalloc+0x194>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	3301      	adds	r3, #1
 801a674:	4a11      	ldr	r2, [pc, #68]	; (801a6bc <pvPortMalloc+0x194>)
 801a676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a678:	f7fe fb2c 	bl	8018cd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a67c:	69fb      	ldr	r3, [r7, #28]
 801a67e:	f003 0307 	and.w	r3, r3, #7
 801a682:	2b00      	cmp	r3, #0
 801a684:	d00a      	beq.n	801a69c <pvPortMalloc+0x174>
	__asm volatile
 801a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a68a:	f383 8811 	msr	BASEPRI, r3
 801a68e:	f3bf 8f6f 	isb	sy
 801a692:	f3bf 8f4f 	dsb	sy
 801a696:	60fb      	str	r3, [r7, #12]
}
 801a698:	bf00      	nop
 801a69a:	e7fe      	b.n	801a69a <pvPortMalloc+0x172>
	return pvReturn;
 801a69c:	69fb      	ldr	r3, [r7, #28]
}
 801a69e:	4618      	mov	r0, r3
 801a6a0:	3728      	adds	r7, #40	; 0x28
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	bd80      	pop	{r7, pc}
 801a6a6:	bf00      	nop
 801a6a8:	2407f6b4 	.word	0x2407f6b4
 801a6ac:	2407f6c8 	.word	0x2407f6c8
 801a6b0:	2407f6b8 	.word	0x2407f6b8
 801a6b4:	2407f6ac 	.word	0x2407f6ac
 801a6b8:	2407f6bc 	.word	0x2407f6bc
 801a6bc:	2407f6c0 	.word	0x2407f6c0

0801a6c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b086      	sub	sp, #24
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d04d      	beq.n	801a76e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a6d2:	2308      	movs	r3, #8
 801a6d4:	425b      	negs	r3, r3
 801a6d6:	697a      	ldr	r2, [r7, #20]
 801a6d8:	4413      	add	r3, r2
 801a6da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	685a      	ldr	r2, [r3, #4]
 801a6e4:	4b24      	ldr	r3, [pc, #144]	; (801a778 <vPortFree+0xb8>)
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	4013      	ands	r3, r2
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d10a      	bne.n	801a704 <vPortFree+0x44>
	__asm volatile
 801a6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6f2:	f383 8811 	msr	BASEPRI, r3
 801a6f6:	f3bf 8f6f 	isb	sy
 801a6fa:	f3bf 8f4f 	dsb	sy
 801a6fe:	60fb      	str	r3, [r7, #12]
}
 801a700:	bf00      	nop
 801a702:	e7fe      	b.n	801a702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a704:	693b      	ldr	r3, [r7, #16]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d00a      	beq.n	801a722 <vPortFree+0x62>
	__asm volatile
 801a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a710:	f383 8811 	msr	BASEPRI, r3
 801a714:	f3bf 8f6f 	isb	sy
 801a718:	f3bf 8f4f 	dsb	sy
 801a71c:	60bb      	str	r3, [r7, #8]
}
 801a71e:	bf00      	nop
 801a720:	e7fe      	b.n	801a720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	685a      	ldr	r2, [r3, #4]
 801a726:	4b14      	ldr	r3, [pc, #80]	; (801a778 <vPortFree+0xb8>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	4013      	ands	r3, r2
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d01e      	beq.n	801a76e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d11a      	bne.n	801a76e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	685a      	ldr	r2, [r3, #4]
 801a73c:	4b0e      	ldr	r3, [pc, #56]	; (801a778 <vPortFree+0xb8>)
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	43db      	mvns	r3, r3
 801a742:	401a      	ands	r2, r3
 801a744:	693b      	ldr	r3, [r7, #16]
 801a746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a748:	f7fe fab6 	bl	8018cb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a74c:	693b      	ldr	r3, [r7, #16]
 801a74e:	685a      	ldr	r2, [r3, #4]
 801a750:	4b0a      	ldr	r3, [pc, #40]	; (801a77c <vPortFree+0xbc>)
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	4413      	add	r3, r2
 801a756:	4a09      	ldr	r2, [pc, #36]	; (801a77c <vPortFree+0xbc>)
 801a758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a75a:	6938      	ldr	r0, [r7, #16]
 801a75c:	f000 f874 	bl	801a848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a760:	4b07      	ldr	r3, [pc, #28]	; (801a780 <vPortFree+0xc0>)
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	3301      	adds	r3, #1
 801a766:	4a06      	ldr	r2, [pc, #24]	; (801a780 <vPortFree+0xc0>)
 801a768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a76a:	f7fe fab3 	bl	8018cd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a76e:	bf00      	nop
 801a770:	3718      	adds	r7, #24
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}
 801a776:	bf00      	nop
 801a778:	2407f6c8 	.word	0x2407f6c8
 801a77c:	2407f6b8 	.word	0x2407f6b8
 801a780:	2407f6c4 	.word	0x2407f6c4

0801a784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a784:	b480      	push	{r7}
 801a786:	b085      	sub	sp, #20
 801a788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a78a:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
 801a78e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a790:	4b27      	ldr	r3, [pc, #156]	; (801a830 <prvHeapInit+0xac>)
 801a792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	f003 0307 	and.w	r3, r3, #7
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d00c      	beq.n	801a7b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	3307      	adds	r3, #7
 801a7a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	f023 0307 	bic.w	r3, r3, #7
 801a7aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a7ac:	68ba      	ldr	r2, [r7, #8]
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	1ad3      	subs	r3, r2, r3
 801a7b2:	4a1f      	ldr	r2, [pc, #124]	; (801a830 <prvHeapInit+0xac>)
 801a7b4:	4413      	add	r3, r2
 801a7b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a7bc:	4a1d      	ldr	r2, [pc, #116]	; (801a834 <prvHeapInit+0xb0>)
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a7c2:	4b1c      	ldr	r3, [pc, #112]	; (801a834 <prvHeapInit+0xb0>)
 801a7c4:	2200      	movs	r2, #0
 801a7c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	68ba      	ldr	r2, [r7, #8]
 801a7cc:	4413      	add	r3, r2
 801a7ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a7d0:	2208      	movs	r2, #8
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	1a9b      	subs	r3, r3, r2
 801a7d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	f023 0307 	bic.w	r3, r3, #7
 801a7de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	4a15      	ldr	r2, [pc, #84]	; (801a838 <prvHeapInit+0xb4>)
 801a7e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a7e6:	4b14      	ldr	r3, [pc, #80]	; (801a838 <prvHeapInit+0xb4>)
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	2200      	movs	r2, #0
 801a7ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a7ee:	4b12      	ldr	r3, [pc, #72]	; (801a838 <prvHeapInit+0xb4>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a7fa:	683b      	ldr	r3, [r7, #0]
 801a7fc:	68fa      	ldr	r2, [r7, #12]
 801a7fe:	1ad2      	subs	r2, r2, r3
 801a800:	683b      	ldr	r3, [r7, #0]
 801a802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a804:	4b0c      	ldr	r3, [pc, #48]	; (801a838 <prvHeapInit+0xb4>)
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a80c:	683b      	ldr	r3, [r7, #0]
 801a80e:	685b      	ldr	r3, [r3, #4]
 801a810:	4a0a      	ldr	r2, [pc, #40]	; (801a83c <prvHeapInit+0xb8>)
 801a812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	685b      	ldr	r3, [r3, #4]
 801a818:	4a09      	ldr	r2, [pc, #36]	; (801a840 <prvHeapInit+0xbc>)
 801a81a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a81c:	4b09      	ldr	r3, [pc, #36]	; (801a844 <prvHeapInit+0xc0>)
 801a81e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a822:	601a      	str	r2, [r3, #0]
}
 801a824:	bf00      	nop
 801a826:	3714      	adds	r7, #20
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr
 801a830:	240026ac 	.word	0x240026ac
 801a834:	2407f6ac 	.word	0x2407f6ac
 801a838:	2407f6b4 	.word	0x2407f6b4
 801a83c:	2407f6bc 	.word	0x2407f6bc
 801a840:	2407f6b8 	.word	0x2407f6b8
 801a844:	2407f6c8 	.word	0x2407f6c8

0801a848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a848:	b480      	push	{r7}
 801a84a:	b085      	sub	sp, #20
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a850:	4b28      	ldr	r3, [pc, #160]	; (801a8f4 <prvInsertBlockIntoFreeList+0xac>)
 801a852:	60fb      	str	r3, [r7, #12]
 801a854:	e002      	b.n	801a85c <prvInsertBlockIntoFreeList+0x14>
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	60fb      	str	r3, [r7, #12]
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	687a      	ldr	r2, [r7, #4]
 801a862:	429a      	cmp	r2, r3
 801a864:	d8f7      	bhi.n	801a856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	685b      	ldr	r3, [r3, #4]
 801a86e:	68ba      	ldr	r2, [r7, #8]
 801a870:	4413      	add	r3, r2
 801a872:	687a      	ldr	r2, [r7, #4]
 801a874:	429a      	cmp	r2, r3
 801a876:	d108      	bne.n	801a88a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	685a      	ldr	r2, [r3, #4]
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	685b      	ldr	r3, [r3, #4]
 801a880:	441a      	add	r2, r3
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	685b      	ldr	r3, [r3, #4]
 801a892:	68ba      	ldr	r2, [r7, #8]
 801a894:	441a      	add	r2, r3
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	429a      	cmp	r2, r3
 801a89c:	d118      	bne.n	801a8d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	681a      	ldr	r2, [r3, #0]
 801a8a2:	4b15      	ldr	r3, [pc, #84]	; (801a8f8 <prvInsertBlockIntoFreeList+0xb0>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	429a      	cmp	r2, r3
 801a8a8:	d00d      	beq.n	801a8c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	685a      	ldr	r2, [r3, #4]
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	685b      	ldr	r3, [r3, #4]
 801a8b4:	441a      	add	r2, r3
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	681a      	ldr	r2, [r3, #0]
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	601a      	str	r2, [r3, #0]
 801a8c4:	e008      	b.n	801a8d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a8c6:	4b0c      	ldr	r3, [pc, #48]	; (801a8f8 <prvInsertBlockIntoFreeList+0xb0>)
 801a8c8:	681a      	ldr	r2, [r3, #0]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	601a      	str	r2, [r3, #0]
 801a8ce:	e003      	b.n	801a8d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	681a      	ldr	r2, [r3, #0]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a8d8:	68fa      	ldr	r2, [r7, #12]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	429a      	cmp	r2, r3
 801a8de:	d002      	beq.n	801a8e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	687a      	ldr	r2, [r7, #4]
 801a8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a8e6:	bf00      	nop
 801a8e8:	3714      	adds	r7, #20
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f0:	4770      	bx	lr
 801a8f2:	bf00      	nop
 801a8f4:	2407f6ac 	.word	0x2407f6ac
 801a8f8:	2407f6b4 	.word	0x2407f6b4

0801a8fc <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 801a8fc:	b480      	push	{r7}
 801a8fe:	b083      	sub	sp, #12
 801a900:	af00      	add	r7, sp, #0
 801a902:	ed87 0a01 	vstr	s0, [r7, #4]
 801a906:	ed97 7a01 	vldr	s14, [r7, #4]
 801a90a:	edd7 7a01 	vldr	s15, [r7, #4]
 801a90e:	eeb4 7a67 	vcmp.f32	s14, s15
 801a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a916:	bf6c      	ite	vs
 801a918:	2301      	movvs	r3, #1
 801a91a:	2300      	movvc	r3, #0
 801a91c:	b2db      	uxtb	r3, r3
 801a91e:	2b00      	cmp	r3, #0
 801a920:	bf14      	ite	ne
 801a922:	2301      	movne	r3, #1
 801a924:	2300      	moveq	r3, #0
 801a926:	b2db      	uxtb	r3, r3
 801a928:	4618      	mov	r0, r3
 801a92a:	370c      	adds	r7, #12
 801a92c:	46bd      	mov	sp, r7
 801a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a932:	4770      	bx	lr

0801a934 <_ZN7PackageC1Eh>:
 *      Author: tdubuke
 */

#include "Package.h"

Package::Package(uint8_t nucleoPackage): _nucleoPackage(nucleoPackage) {}
 801a934:	b480      	push	{r7}
 801a936:	b083      	sub	sp, #12
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
 801a93c:	460b      	mov	r3, r1
 801a93e:	70fb      	strb	r3, [r7, #3]
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	2201      	movs	r2, #1
 801a944:	701a      	strb	r2, [r3, #0]
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	78fa      	ldrb	r2, [r7, #3]
 801a94a:	705a      	strb	r2, [r3, #1]
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f04f 0200 	mov.w	r2, #0
 801a952:	60da      	str	r2, [r3, #12]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	4a13      	ldr	r2, [pc, #76]	; (801a9a4 <_ZN7PackageC1Eh+0x70>)
 801a958:	611a      	str	r2, [r3, #16]
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	4a11      	ldr	r2, [pc, #68]	; (801a9a4 <_ZN7PackageC1Eh+0x70>)
 801a95e:	615a      	str	r2, [r3, #20]
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	4a10      	ldr	r2, [pc, #64]	; (801a9a4 <_ZN7PackageC1Eh+0x70>)
 801a964:	619a      	str	r2, [r3, #24]
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	2200      	movs	r2, #0
 801a96a:	771a      	strb	r2, [r3, #28]
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	4a0d      	ldr	r2, [pc, #52]	; (801a9a4 <_ZN7PackageC1Eh+0x70>)
 801a970:	621a      	str	r2, [r3, #32]
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f04f 0200 	mov.w	r2, #0
 801a978:	625a      	str	r2, [r3, #36]	; 0x24
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	f04f 0200 	mov.w	r2, #0
 801a980:	629a      	str	r2, [r3, #40]	; 0x28
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2200      	movs	r2, #0
 801a986:	62da      	str	r2, [r3, #44]	; 0x2c
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	2200      	movs	r2, #0
 801a98c:	631a      	str	r2, [r3, #48]	; 0x30
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	2200      	movs	r2, #0
 801a992:	635a      	str	r2, [r3, #52]	; 0x34
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	4618      	mov	r0, r3
 801a998:	370c      	adds	r7, #12
 801a99a:	46bd      	mov	sp, r7
 801a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a0:	4770      	bx	lr
 801a9a2:	bf00      	nop
 801a9a4:	7fc00000 	.word	0x7fc00000

0801a9a8 <_ZN7Package7StepPIDEv>:

void Package::StepPID(){
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
	if(_actuator == 0){
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	f000 8085 	beq.w	801aac4 <_ZN7Package7StepPIDEv+0x11c>
		return;
	}

	if(!isnan(_posSetpoint)){
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	edd3 7a04 	vldr	s15, [r3, #16]
 801a9c0:	eeb0 0a67 	vmov.f32	s0, s15
 801a9c4:	f7ff ff9a 	bl	801a8fc <_ZSt5isnanf>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	f083 0301 	eor.w	r3, r3, #1
 801a9ce:	b2db      	uxtb	r3, r3
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d078      	beq.n	801aac6 <_ZN7Package7StepPIDEv+0x11e>
		// Do position control off-board without repeated commands
		if(_sensor != nullptr && _PID == nullptr && newPos){
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d01d      	beq.n	801aa18 <_ZN7Package7StepPIDEv+0x70>
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d119      	bne.n	801aa18 <_ZN7Package7StepPIDEv+0x70>
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	7f1b      	ldrb	r3, [r3, #28]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d015      	beq.n	801aa18 <_ZN7Package7StepPIDEv+0x70>
			_actuator->move(_posSetpoint, _playtime);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	edd2 7a04 	vldr	s15, [r2, #16]
 801a9fe:	687a      	ldr	r2, [r7, #4]
 801aa00:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 801aa04:	eef0 0a47 	vmov.f32	s1, s14
 801aa08:	eeb0 0a67 	vmov.f32	s0, s15
 801aa0c:	4608      	mov	r0, r1
 801aa0e:	4798      	blx	r3
			newPos = false;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2200      	movs	r2, #0
 801aa14:	771a      	strb	r2, [r3, #28]
 801aa16:	e056      	b.n	801aac6 <_ZN7Package7StepPIDEv+0x11e>
		}

		// On-board PID control
		else if(_sensor != nullptr && _PID != nullptr){
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d024      	beq.n	801aa6a <_ZN7Package7StepPIDEv+0xc2>
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d020      	beq.n	801aa6a <_ZN7Package7StepPIDEv+0xc2>
			float pid_percent = _PID->calculate(_posSetpoint, _sensorValue);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	edd3 7a04 	vldr	s15, [r3, #16]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801aa38:	eef0 0a47 	vmov.f32	s1, s14
 801aa3c:	eeb0 0a67 	vmov.f32	s0, s15
 801aa40:	4610      	mov	r0, r2
 801aa42:	f7e6 ff0b 	bl	800185c <_ZN3PID9calculateEff>
 801aa46:	ed87 0a03 	vstr	s0, [r7, #12]
			_actuator->move(_posSetpoint, pid_percent);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	687a      	ldr	r2, [r7, #4]
 801aa58:	edd2 7a04 	vldr	s15, [r2, #16]
 801aa5c:	edd7 0a03 	vldr	s1, [r7, #12]
 801aa60:	eeb0 0a67 	vmov.f32	s0, s15
 801aa64:	4608      	mov	r0, r1
 801aa66:	4798      	blx	r3
 801aa68:	e02d      	b.n	801aac6 <_ZN7Package7StepPIDEv+0x11e>
		}

		// Open loop control
		else if(_sensor == nullptr && _PID == nullptr && !isnan(_velSetpoint)){
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d112      	bne.n	801aa98 <_ZN7Package7StepPIDEv+0xf0>
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d10e      	bne.n	801aa98 <_ZN7Package7StepPIDEv+0xf0>
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	edd3 7a05 	vldr	s15, [r3, #20]
 801aa80:	eeb0 0a67 	vmov.f32	s0, s15
 801aa84:	f7ff ff3a 	bl	801a8fc <_ZSt5isnanf>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	f083 0301 	eor.w	r3, r3, #1
 801aa8e:	b2db      	uxtb	r3, r3
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d001      	beq.n	801aa98 <_ZN7Package7StepPIDEv+0xf0>
 801aa94:	2301      	movs	r3, #1
 801aa96:	e000      	b.n	801aa9a <_ZN7Package7StepPIDEv+0xf2>
 801aa98:	2300      	movs	r3, #0
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d013      	beq.n	801aac6 <_ZN7Package7StepPIDEv+0x11e>
			_actuator->move(_posSetpoint, _velSetpoint);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	687a      	ldr	r2, [r7, #4]
 801aaac:	edd2 7a04 	vldr	s15, [r2, #16]
 801aab0:	687a      	ldr	r2, [r7, #4]
 801aab2:	ed92 7a05 	vldr	s14, [r2, #20]
 801aab6:	eef0 0a47 	vmov.f32	s1, s14
 801aaba:	eeb0 0a67 	vmov.f32	s0, s15
 801aabe:	4608      	mov	r0, r1
 801aac0:	4798      	blx	r3
 801aac2:	e000      	b.n	801aac6 <_ZN7Package7StepPIDEv+0x11e>
		return;
 801aac4:	bf00      	nop
		}
	}
}
 801aac6:	3710      	adds	r7, #16
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}

0801aacc <_ZN7Package6torqueEb>:

void Package::torque(bool isOn){
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	460b      	mov	r3, r1
 801aad6:	70fb      	strb	r3, [r7, #3]
	if(_actuator != 0){
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d009      	beq.n	801aaf4 <_ZN7Package6torqueEb+0x28>
		_actuator->torque(isOn);
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	3304      	adds	r3, #4
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	78f9      	ldrb	r1, [r7, #3]
 801aaf0:	4610      	mov	r0, r2
 801aaf2:	4798      	blx	r3
	}
}
 801aaf4:	bf00      	nop
 801aaf6:	3708      	adds	r7, #8
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd80      	pop	{r7, pc}

0801aafc <_ZN7Package7initPIDEv>:

void Package::initPID(){
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b08c      	sub	sp, #48	; 0x30
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
	PID *pid_ptr = (PID *)pvPortMalloc(sizeof(PID));
 801ab04:	2020      	movs	r0, #32
 801ab06:	f7ff fd0f 	bl	801a528 <pvPortMalloc>
 801ab0a:	62f8      	str	r0, [r7, #44]	; 0x2c
	PID pid(0.02, 100, -100, 0, 0, 0);
 801ab0c:	f107 030c 	add.w	r3, r7, #12
 801ab10:	eddf 2a10 	vldr	s5, [pc, #64]	; 801ab54 <_ZN7Package7initPIDEv+0x58>
 801ab14:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 801ab54 <_ZN7Package7initPIDEv+0x58>
 801ab18:	eddf 1a0e 	vldr	s3, [pc, #56]	; 801ab54 <_ZN7Package7initPIDEv+0x58>
 801ab1c:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 801ab58 <_ZN7Package7initPIDEv+0x5c>
 801ab20:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801ab5c <_ZN7Package7initPIDEv+0x60>
 801ab24:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801ab60 <_ZN7Package7initPIDEv+0x64>
 801ab28:	4618      	mov	r0, r3
 801ab2a:	f7e6 fe5b 	bl	80017e4 <_ZN3PIDC1Effffff>

	memcpy(pid_ptr, &pid, sizeof(PID));
 801ab2e:	f107 030c 	add.w	r3, r7, #12
 801ab32:	2220      	movs	r2, #32
 801ab34:	4619      	mov	r1, r3
 801ab36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ab38:	f000 fc78 	bl	801b42c <memcpy>

	_PID = pid_ptr;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab40:	635a      	str	r2, [r3, #52]	; 0x34
	PID pid(0.02, 100, -100, 0, 0, 0);
 801ab42:	f107 030c 	add.w	r3, r7, #12
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7e6 fe7d 	bl	8001846 <_ZN3PIDD1Ev>
}
 801ab4c:	bf00      	nop
 801ab4e:	3730      	adds	r7, #48	; 0x30
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd80      	pop	{r7, pc}
 801ab54:	00000000 	.word	0x00000000
 801ab58:	c2c80000 	.word	0xc2c80000
 801ab5c:	42c80000 	.word	0x42c80000
 801ab60:	3ca3d70a 	.word	0x3ca3d70a

0801ab64 <_ZN7Package14getSensorValueEv>:

float Package::getSensorValue(){
 801ab64:	b480      	push	{r7}
 801ab66:	b083      	sub	sp, #12
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
	return _sensorValue;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab70:	ee07 3a90 	vmov	s15, r3
}
 801ab74:	eeb0 0a67 	vmov.f32	s0, s15
 801ab78:	370c      	adds	r7, #12
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab80:	4770      	bx	lr

0801ab82 <_ZN7Package17updateSensorValueEv>:

void Package::updateSensorValue(){
 801ab82:	b580      	push	{r7, lr}
 801ab84:	b084      	sub	sp, #16
 801ab86:	af00      	add	r7, sp, #0
 801ab88:	6078      	str	r0, [r7, #4]
	if(_sensor != nullptr){
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d015      	beq.n	801abbe <_ZN7Package17updateSensorValueEv+0x3c>
		float value = _sensor->getValue();
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	4610      	mov	r0, r2
 801aba0:	4798      	blx	r3
 801aba2:	ed87 0a03 	vstr	s0, [r7, #12]
		if(value != -1){
 801aba6:	edd7 7a03 	vldr	s15, [r7, #12]
 801abaa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801abae:	eef4 7a47 	vcmp.f32	s15, s14
 801abb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abb6:	d002      	beq.n	801abbe <_ZN7Package17updateSensorValueEv+0x3c>
			_sensorValue = value;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	68fa      	ldr	r2, [r7, #12]
 801abbc:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
}
 801abbe:	bf00      	nop
 801abc0:	3710      	adds	r7, #16
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}

0801abc6 <_ZN7Package14newPosSetpointEf>:

void Package::newPosSetpoint(float pos){
 801abc6:	b580      	push	{r7, lr}
 801abc8:	b082      	sub	sp, #8
 801abca:	af00      	add	r7, sp, #0
 801abcc:	6078      	str	r0, [r7, #4]
 801abce:	ed87 0a00 	vstr	s0, [r7]
	_posSetpoint = pos;
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	683a      	ldr	r2, [r7, #0]
 801abd6:	611a      	str	r2, [r3, #16]

	if(!isnan(_sensorValue)){
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801abde:	eeb0 0a67 	vmov.f32	s0, s15
 801abe2:	f7ff fe8b 	bl	801a8fc <_ZSt5isnanf>
 801abe6:	4603      	mov	r3, r0
 801abe8:	f083 0301 	eor.w	r3, r3, #1
 801abec:	b2db      	uxtb	r3, r3
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d00a      	beq.n	801ac08 <_ZN7Package14newPosSetpointEf+0x42>
		_posDelta = _sensorValue - _posSetpoint;
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	edd3 7a04 	vldr	s15, [r3, #16]
 801abfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	edc3 7a08 	vstr	s15, [r3, #32]
	}

	newPos = true;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2201      	movs	r2, #1
 801ac0c:	771a      	strb	r2, [r3, #28]
}
 801ac0e:	bf00      	nop
 801ac10:	3708      	adds	r7, #8
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}

0801ac16 <_ZN7Package14newVelSetpointEf>:
void Package::newVelSetpoint(float vel){
 801ac16:	b580      	push	{r7, lr}
 801ac18:	b082      	sub	sp, #8
 801ac1a:	af00      	add	r7, sp, #0
 801ac1c:	6078      	str	r0, [r7, #4]
 801ac1e:	ed87 0a00 	vstr	s0, [r7]
	_velSetpoint = vel;
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	683a      	ldr	r2, [r7, #0]
 801ac26:	615a      	str	r2, [r3, #20]

	if(!isnan(_posDelta)){
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	edd3 7a08 	vldr	s15, [r3, #32]
 801ac2e:	eeb0 0a67 	vmov.f32	s0, s15
 801ac32:	f7ff fe63 	bl	801a8fc <_ZSt5isnanf>
 801ac36:	4603      	mov	r3, r0
 801ac38:	f083 0301 	eor.w	r3, r3, #1
 801ac3c:	b2db      	uxtb	r3, r3
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d010      	beq.n	801ac64 <_ZN7Package14newVelSetpointEf+0x4e>
		_playtime = abs(_posDelta) / _velSetpoint;
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	edd3 7a08 	vldr	s15, [r3, #32]
 801ac48:	eeb0 0a67 	vmov.f32	s0, s15
 801ac4c:	f7e5 fd38 	bl	80006c0 <_ZSt3absf>
 801ac50:	eef0 6a40 	vmov.f32	s13, s0
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	ed93 7a05 	vldr	s14, [r3, #20]
 801ac5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	}
}
 801ac64:	bf00      	nop
 801ac66:	3708      	adds	r7, #8
 801ac68:	46bd      	mov	sp, r7
 801ac6a:	bd80      	pop	{r7, pc}

0801ac6c <_ZN7Package14newAccSetpointEf>:
void Package::newAccSetpoint(float acc){
 801ac6c:	b480      	push	{r7}
 801ac6e:	b083      	sub	sp, #12
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
 801ac74:	ed87 0a00 	vstr	s0, [r7]
	_accSetpoint = acc;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	683a      	ldr	r2, [r7, #0]
 801ac7c:	619a      	str	r2, [r3, #24]
}
 801ac7e:	bf00      	nop
 801ac80:	370c      	adds	r7, #12
 801ac82:	46bd      	mov	sp, r7
 801ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac88:	4770      	bx	lr

0801ac8a <_ZN7Package8setPGainEf>:

uint8_t Package::getPackageNum(){
	return _nucleoPackage;
}

void Package::setPGain(float K_P){
 801ac8a:	b580      	push	{r7, lr}
 801ac8c:	b082      	sub	sp, #8
 801ac8e:	af00      	add	r7, sp, #0
 801ac90:	6078      	str	r0, [r7, #4]
 801ac92:	ed87 0a00 	vstr	s0, [r7]
	if(_PID != 0)
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d006      	beq.n	801acac <_ZN7Package8setPGainEf+0x22>
		_PID->setPGain(K_P);
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aca2:	ed97 0a00 	vldr	s0, [r7]
 801aca6:	4618      	mov	r0, r3
 801aca8:	f7e6 fe55 	bl	8001956 <_ZN3PID8setPGainEf>
}
 801acac:	bf00      	nop
 801acae:	3708      	adds	r7, #8
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bd80      	pop	{r7, pc}

0801acb4 <_ZN7Package8setIGainEf>:
void Package::setIGain(float K_I){
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b082      	sub	sp, #8
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
 801acbc:	ed87 0a00 	vstr	s0, [r7]
	if(_PID != 0)
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d006      	beq.n	801acd6 <_ZN7Package8setIGainEf+0x22>
		_PID->setIGain(K_I);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801accc:	ed97 0a00 	vldr	s0, [r7]
 801acd0:	4618      	mov	r0, r3
 801acd2:	f7e6 fe4f 	bl	8001974 <_ZN3PID8setIGainEf>
}
 801acd6:	bf00      	nop
 801acd8:	3708      	adds	r7, #8
 801acda:	46bd      	mov	sp, r7
 801acdc:	bd80      	pop	{r7, pc}

0801acde <_ZN7Package8setDGainEf>:
void Package::setDGain(float K_D){
 801acde:	b580      	push	{r7, lr}
 801ace0:	b082      	sub	sp, #8
 801ace2:	af00      	add	r7, sp, #0
 801ace4:	6078      	str	r0, [r7, #4]
 801ace6:	ed87 0a00 	vstr	s0, [r7]
	if(_PID != 0)
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d006      	beq.n	801ad00 <_ZN7Package8setDGainEf+0x22>
		_PID->setDGain(K_D);
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801acf6:	ed97 0a00 	vldr	s0, [r7]
 801acfa:	4618      	mov	r0, r3
 801acfc:	f7e6 fe49 	bl	8001992 <_ZN3PID8setDGainEf>
}
 801ad00:	bf00      	nop
 801ad02:	3708      	adds	r7, #8
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}

0801ad08 <_ZN7Package10setVelGainEf>:
void Package::setVelGain(float K_Vel){
 801ad08:	b480      	push	{r7}
 801ad0a:	b083      	sub	sp, #12
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
 801ad10:	ed87 0a00 	vstr	s0, [r7]
	_KVel = K_Vel;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	683a      	ldr	r2, [r7, #0]
 801ad18:	605a      	str	r2, [r3, #4]
}
 801ad1a:	bf00      	nop
 801ad1c:	370c      	adds	r7, #12
 801ad1e:	46bd      	mov	sp, r7
 801ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad24:	4770      	bx	lr

0801ad26 <_ZN7Package10setAccGainEf>:
void Package::setAccGain(float K_Acc){
 801ad26:	b480      	push	{r7}
 801ad28:	b083      	sub	sp, #12
 801ad2a:	af00      	add	r7, sp, #0
 801ad2c:	6078      	str	r0, [r7, #4]
 801ad2e:	ed87 0a00 	vstr	s0, [r7]
	_KAcc = K_Acc;
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	683a      	ldr	r2, [r7, #0]
 801ad36:	609a      	str	r2, [r3, #8]
}
 801ad38:	bf00      	nop
 801ad3a:	370c      	adds	r7, #12
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad42:	4770      	bx	lr

0801ad44 <_ZN7Package11setJerkGainEf>:
void Package::setJerkGain(float K_Jerk){
 801ad44:	b480      	push	{r7}
 801ad46:	b083      	sub	sp, #12
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	ed87 0a00 	vstr	s0, [r7]
	_KJer = K_Jerk;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	683a      	ldr	r2, [r7, #0]
 801ad54:	60da      	str	r2, [r3, #12]
}
 801ad56:	bf00      	nop
 801ad58:	370c      	adds	r7, #12
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad60:	4770      	bx	lr

0801ad62 <_ZN7Package9addSensorEP6Sensor>:

void Package::addSensor(Sensor *sensor){
 801ad62:	b480      	push	{r7}
 801ad64:	b083      	sub	sp, #12
 801ad66:	af00      	add	r7, sp, #0
 801ad68:	6078      	str	r0, [r7, #4]
 801ad6a:	6039      	str	r1, [r7, #0]
	_sensor = sensor;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	683a      	ldr	r2, [r7, #0]
 801ad70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801ad72:	bf00      	nop
 801ad74:	370c      	adds	r7, #12
 801ad76:	46bd      	mov	sp, r7
 801ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7c:	4770      	bx	lr

0801ad7e <_ZN7Package11addActuatorEP8Actuator>:
void Package::addActuator(Actuator *actuator){
 801ad7e:	b480      	push	{r7}
 801ad80:	b083      	sub	sp, #12
 801ad82:	af00      	add	r7, sp, #0
 801ad84:	6078      	str	r0, [r7, #4]
 801ad86:	6039      	str	r1, [r7, #0]
	_actuator = actuator;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	683a      	ldr	r2, [r7, #0]
 801ad8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801ad8e:	bf00      	nop
 801ad90:	370c      	adds	r7, #12
 801ad92:	46bd      	mov	sp, r7
 801ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad98:	4770      	bx	lr

0801ad9a <_ZN7Package9getSensorEv>:
Sensor* Package::getSensor(){
 801ad9a:	b480      	push	{r7}
 801ad9c:	b083      	sub	sp, #12
 801ad9e:	af00      	add	r7, sp, #0
 801ada0:	6078      	str	r0, [r7, #4]
	return _sensor;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801ada6:	4618      	mov	r0, r3
 801ada8:	370c      	adds	r7, #12
 801adaa:	46bd      	mov	sp, r7
 801adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb0:	4770      	bx	lr

0801adb2 <_ZN7Package11getActuatorEv>:
Actuator* Package::getActuator(){
 801adb2:	b480      	push	{r7}
 801adb4:	b083      	sub	sp, #12
 801adb6:	af00      	add	r7, sp, #0
 801adb8:	6078      	str	r0, [r7, #4]
	return _actuator;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801adbe:	4618      	mov	r0, r3
 801adc0:	370c      	adds	r7, #12
 801adc2:	46bd      	mov	sp, r7
 801adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc8:	4770      	bx	lr

0801adca <Package_StepPID>:

#include "PackageWrapper.h"
#include "Package.h"

extern "C" {
	void Package_StepPID(Package *obj){
 801adca:	b580      	push	{r7, lr}
 801adcc:	b082      	sub	sp, #8
 801adce:	af00      	add	r7, sp, #0
 801add0:	6078      	str	r0, [r7, #4]
		obj->StepPID();
 801add2:	6878      	ldr	r0, [r7, #4]
 801add4:	f7ff fde8 	bl	801a9a8 <_ZN7Package7StepPIDEv>
	}
 801add8:	bf00      	nop
 801adda:	3708      	adds	r7, #8
 801addc:	46bd      	mov	sp, r7
 801adde:	bd80      	pop	{r7, pc}

0801ade0 <Package_updateSensorValue>:

	void Package_updateSensorValue(Package *obj){
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
		obj->updateSensorValue();
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	f7ff feca 	bl	801ab82 <_ZN7Package17updateSensorValueEv>
	}
 801adee:	bf00      	nop
 801adf0:	3708      	adds	r7, #8
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}
	...

0801adf8 <_ZN7AS5048AC1EtP19__SPI_HandleTypeDefhh>:

#include "AS5048A.h"
#include "cmsis_os.h"
#include <string.h>

AS5048A::AS5048A(uint16_t nucleoAddress, SPI_HandleTypeDef *hspi, uint8_t sizeOfDaisy, uint8_t numInDaisy):
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b084      	sub	sp, #16
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	60f8      	str	r0, [r7, #12]
 801ae00:	607a      	str	r2, [r7, #4]
 801ae02:	461a      	mov	r2, r3
 801ae04:	460b      	mov	r3, r1
 801ae06:	817b      	strh	r3, [r7, #10]
 801ae08:	4613      	mov	r3, r2
 801ae0a:	727b      	strb	r3, [r7, #9]
	Sensor(nucleoAddress), _hspi(hspi), _sizeOfDaisy(sizeOfDaisy), _numInDaisy(numInDaisy) {}
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	897a      	ldrh	r2, [r7, #10]
 801ae10:	4611      	mov	r1, r2
 801ae12:	4618      	mov	r0, r3
 801ae14:	f000 fa9a 	bl	801b34c <_ZN6SensorC1Et>
 801ae18:	4a09      	ldr	r2, [pc, #36]	; (801ae40 <_ZN7AS5048AC1EtP19__SPI_HandleTypeDefhh+0x48>)
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	601a      	str	r2, [r3, #0]
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	687a      	ldr	r2, [r7, #4]
 801ae22:	609a      	str	r2, [r3, #8]
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	7a7a      	ldrb	r2, [r7, #9]
 801ae28:	731a      	strb	r2, [r3, #12]
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	7e3a      	ldrb	r2, [r7, #24]
 801ae2e:	735a      	strb	r2, [r3, #13]
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	2200      	movs	r2, #0
 801ae34:	739a      	strb	r2, [r3, #14]
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	4618      	mov	r0, r3
 801ae3a:	3710      	adds	r7, #16
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd80      	pop	{r7, pc}
 801ae40:	0803d388 	.word	0x0803d388

0801ae44 <_ZN7AS5048AD1Ev>:

AS5048A::~AS5048A() {}
 801ae44:	b480      	push	{r7}
 801ae46:	b083      	sub	sp, #12
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	6078      	str	r0, [r7, #4]
 801ae4c:	4a04      	ldr	r2, [pc, #16]	; (801ae60 <_ZN7AS5048AD1Ev+0x1c>)
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	601a      	str	r2, [r3, #0]
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	4618      	mov	r0, r3
 801ae56:	370c      	adds	r7, #12
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5e:	4770      	bx	lr
 801ae60:	0803d388 	.word	0x0803d388

0801ae64 <_ZN7AS5048AD0Ev>:
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
 801ae6c:	6878      	ldr	r0, [r7, #4]
 801ae6e:	f7ff ffe9 	bl	801ae44 <_ZN7AS5048AD1Ev>
 801ae72:	2110      	movs	r1, #16
 801ae74:	6878      	ldr	r0, [r7, #4]
 801ae76:	f000 fa7f 	bl	801b378 <_ZdlPvj>
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3708      	adds	r7, #8
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}

0801ae84 <_ZN7AS5048A19transmitRecieveDataEPhS0_t>:

void AS5048A::transmitRecieveData(uint8_t *txData, uint8_t *rxData, uint16_t size){
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b086      	sub	sp, #24
 801ae88:	af02      	add	r7, sp, #8
 801ae8a:	60f8      	str	r0, [r7, #12]
 801ae8c:	60b9      	str	r1, [r7, #8]
 801ae8e:	607a      	str	r2, [r7, #4]
 801ae90:	807b      	strh	r3, [r7, #2]
	HAL_SPI_TransmitReceive(_hspi, txData, rxData, size, 20);
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	6898      	ldr	r0, [r3, #8]
 801ae96:	887b      	ldrh	r3, [r7, #2]
 801ae98:	2214      	movs	r2, #20
 801ae9a:	9200      	str	r2, [sp, #0]
 801ae9c:	687a      	ldr	r2, [r7, #4]
 801ae9e:	68b9      	ldr	r1, [r7, #8]
 801aea0:	f7f3 fc48 	bl	800e734 <HAL_SPI_TransmitReceive>
}
 801aea4:	bf00      	nop
 801aea6:	3710      	adds	r7, #16
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	bd80      	pop	{r7, pc}

0801aeac <_ZN7AS5048A14calcEvenParityEt>:


uint8_t AS5048A::calcEvenParity(uint16_t value){
 801aeac:	b480      	push	{r7}
 801aeae:	b085      	sub	sp, #20
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
 801aeb4:	460b      	mov	r3, r1
 801aeb6:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 801aeb8:	2300      	movs	r3, #0
 801aeba:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++)
 801aebc:	2300      	movs	r3, #0
 801aebe:	73bb      	strb	r3, [r7, #14]
 801aec0:	7bbb      	ldrb	r3, [r7, #14]
 801aec2:	2b0f      	cmp	r3, #15
 801aec4:	d80e      	bhi.n	801aee4 <_ZN7AS5048A14calcEvenParityEt+0x38>
	{
		if (value & 0x1)
 801aec6:	887b      	ldrh	r3, [r7, #2]
 801aec8:	f003 0301 	and.w	r3, r3, #1
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d002      	beq.n	801aed6 <_ZN7AS5048A14calcEvenParityEt+0x2a>
		{
			cnt++;
 801aed0:	7bfb      	ldrb	r3, [r7, #15]
 801aed2:	3301      	adds	r3, #1
 801aed4:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 801aed6:	887b      	ldrh	r3, [r7, #2]
 801aed8:	085b      	lsrs	r3, r3, #1
 801aeda:	807b      	strh	r3, [r7, #2]
	for (uint8_t i = 0; i < 16; i++)
 801aedc:	7bbb      	ldrb	r3, [r7, #14]
 801aede:	3301      	adds	r3, #1
 801aee0:	73bb      	strb	r3, [r7, #14]
 801aee2:	e7ed      	b.n	801aec0 <_ZN7AS5048A14calcEvenParityEt+0x14>
	}
	return cnt & 0x1;
 801aee4:	7bfb      	ldrb	r3, [r7, #15]
 801aee6:	f003 0301 	and.w	r3, r3, #1
 801aeea:	b2db      	uxtb	r3, r3
}
 801aeec:	4618      	mov	r0, r3
 801aeee:	3714      	adds	r7, #20
 801aef0:	46bd      	mov	sp, r7
 801aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef6:	4770      	bx	lr

0801aef8 <_ZN7AS5048A7swResetEv>:

void AS5048A::swReset(){
 801aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aefc:	b08b      	sub	sp, #44	; 0x2c
 801aefe:	af00      	add	r7, sp, #0
 801af00:	60f8      	str	r0, [r7, #12]

	transmitRecieveData(transmitBuffer, recieveBuffer, 2 * _sizeOfDaisy);

	uint16_t data = recieveBuffer[_numInDaisy * 2] << 8 | recieveBuffer[(_numInDaisy * 2) + 1];

	lastError = data & 0x0007;
 801af02:	466b      	mov	r3, sp
 801af04:	461e      	mov	r6, r3
	uint16_t opCode = CLEAR_ERROR;
 801af06:	2301      	movs	r3, #1
 801af08:	84fb      	strh	r3, [r7, #38]	; 0x26
	opCode |= 0x4000;
 801af0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801af0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801af10:	84fb      	strh	r3, [r7, #38]	; 0x26
	opCode |= ((uint16_t)calcEvenParity(opCode) << 15);
 801af12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801af14:	4619      	mov	r1, r3
 801af16:	68f8      	ldr	r0, [r7, #12]
 801af18:	f7ff ffc8 	bl	801aeac <_ZN7AS5048A14calcEvenParityEt>
 801af1c:	4603      	mov	r3, r0
 801af1e:	03db      	lsls	r3, r3, #15
 801af20:	b21a      	sxth	r2, r3
 801af22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801af26:	4313      	orrs	r3, r2
 801af28:	b21b      	sxth	r3, r3
 801af2a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t transmitBuffer[2 * _sizeOfDaisy];
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	7b1b      	ldrb	r3, [r3, #12]
 801af30:	005b      	lsls	r3, r3, #1
 801af32:	1e59      	subs	r1, r3, #1
 801af34:	6239      	str	r1, [r7, #32]
 801af36:	460b      	mov	r3, r1
 801af38:	3301      	adds	r3, #1
 801af3a:	2200      	movs	r2, #0
 801af3c:	603b      	str	r3, [r7, #0]
 801af3e:	607a      	str	r2, [r7, #4]
 801af40:	f04f 0200 	mov.w	r2, #0
 801af44:	f04f 0300 	mov.w	r3, #0
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	00c3      	lsls	r3, r0, #3
 801af4c:	6838      	ldr	r0, [r7, #0]
 801af4e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801af52:	6838      	ldr	r0, [r7, #0]
 801af54:	00c2      	lsls	r2, r0, #3
 801af56:	460b      	mov	r3, r1
 801af58:	3301      	adds	r3, #1
 801af5a:	2200      	movs	r2, #0
 801af5c:	469a      	mov	sl, r3
 801af5e:	4693      	mov	fp, r2
 801af60:	f04f 0200 	mov.w	r2, #0
 801af64:	f04f 0300 	mov.w	r3, #0
 801af68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801af6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801af70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801af74:	460b      	mov	r3, r1
 801af76:	3301      	adds	r3, #1
 801af78:	3307      	adds	r3, #7
 801af7a:	08db      	lsrs	r3, r3, #3
 801af7c:	00db      	lsls	r3, r3, #3
 801af7e:	ebad 0d03 	sub.w	sp, sp, r3
 801af82:	466b      	mov	r3, sp
 801af84:	3300      	adds	r3, #0
 801af86:	61fb      	str	r3, [r7, #28]
	uint8_t recieveBuffer[2 * _sizeOfDaisy];
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	7b1b      	ldrb	r3, [r3, #12]
 801af8c:	005b      	lsls	r3, r3, #1
 801af8e:	1e59      	subs	r1, r3, #1
 801af90:	61b9      	str	r1, [r7, #24]
 801af92:	460b      	mov	r3, r1
 801af94:	3301      	adds	r3, #1
 801af96:	2200      	movs	r2, #0
 801af98:	4698      	mov	r8, r3
 801af9a:	4691      	mov	r9, r2
 801af9c:	f04f 0200 	mov.w	r2, #0
 801afa0:	f04f 0300 	mov.w	r3, #0
 801afa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801afa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801afac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801afb0:	460b      	mov	r3, r1
 801afb2:	3301      	adds	r3, #1
 801afb4:	2200      	movs	r2, #0
 801afb6:	461c      	mov	r4, r3
 801afb8:	4615      	mov	r5, r2
 801afba:	f04f 0200 	mov.w	r2, #0
 801afbe:	f04f 0300 	mov.w	r3, #0
 801afc2:	00eb      	lsls	r3, r5, #3
 801afc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801afc8:	00e2      	lsls	r2, r4, #3
 801afca:	460b      	mov	r3, r1
 801afcc:	3301      	adds	r3, #1
 801afce:	3307      	adds	r3, #7
 801afd0:	08db      	lsrs	r3, r3, #3
 801afd2:	00db      	lsls	r3, r3, #3
 801afd4:	ebad 0d03 	sub.w	sp, sp, r3
 801afd8:	466b      	mov	r3, sp
 801afda:	3300      	adds	r3, #0
 801afdc:	617b      	str	r3, [r7, #20]
	uint8_t lsB = opCode;
 801afde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	747b      	strb	r3, [r7, #17]
	uint8_t msB = opCode >> 8;
 801afe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801afe6:	0a1b      	lsrs	r3, r3, #8
 801afe8:	b29b      	uxth	r3, r3
 801afea:	b2db      	uxtb	r3, r3
 801afec:	743b      	strb	r3, [r7, #16]
	for(uint8_t i = 0; i < _sizeOfDaisy; i++){
 801afee:	2300      	movs	r3, #0
 801aff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	7b1b      	ldrb	r3, [r3, #12]
 801aff8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801affc:	429a      	cmp	r2, r3
 801affe:	d214      	bcs.n	801b02a <_ZN7AS5048A7swResetEv+0x132>
		memcpy(&transmitBuffer[i * 2], &msB, 1);
 801b000:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801b004:	005b      	lsls	r3, r3, #1
 801b006:	69fa      	ldr	r2, [r7, #28]
 801b008:	4413      	add	r3, r2
 801b00a:	7c3a      	ldrb	r2, [r7, #16]
 801b00c:	701a      	strb	r2, [r3, #0]
		memcpy(&transmitBuffer[(i * 2) + 1], &lsB, 1);
 801b00e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801b012:	005b      	lsls	r3, r3, #1
 801b014:	3301      	adds	r3, #1
 801b016:	69fa      	ldr	r2, [r7, #28]
 801b018:	4413      	add	r3, r2
 801b01a:	7c7a      	ldrb	r2, [r7, #17]
 801b01c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < _sizeOfDaisy; i++){
 801b01e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801b022:	3301      	adds	r3, #1
 801b024:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801b028:	e7e4      	b.n	801aff4 <_ZN7AS5048A7swResetEv+0xfc>
	transmitRecieveData(transmitBuffer, recieveBuffer, 2 * _sizeOfDaisy);
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	7b1b      	ldrb	r3, [r3, #12]
 801b02e:	b29b      	uxth	r3, r3
 801b030:	005b      	lsls	r3, r3, #1
 801b032:	b29b      	uxth	r3, r3
 801b034:	697a      	ldr	r2, [r7, #20]
 801b036:	69f9      	ldr	r1, [r7, #28]
 801b038:	68f8      	ldr	r0, [r7, #12]
 801b03a:	f7ff ff23 	bl	801ae84 <_ZN7AS5048A19transmitRecieveDataEPhS0_t>
	uint16_t data = recieveBuffer[_numInDaisy * 2] << 8 | recieveBuffer[(_numInDaisy * 2) + 1];
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	7b5b      	ldrb	r3, [r3, #13]
 801b042:	005b      	lsls	r3, r3, #1
 801b044:	697a      	ldr	r2, [r7, #20]
 801b046:	5cd3      	ldrb	r3, [r2, r3]
 801b048:	021b      	lsls	r3, r3, #8
 801b04a:	b21a      	sxth	r2, r3
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	7b5b      	ldrb	r3, [r3, #13]
 801b050:	005b      	lsls	r3, r3, #1
 801b052:	3301      	adds	r3, #1
 801b054:	6979      	ldr	r1, [r7, #20]
 801b056:	5ccb      	ldrb	r3, [r1, r3]
 801b058:	b21b      	sxth	r3, r3
 801b05a:	4313      	orrs	r3, r2
 801b05c:	b21b      	sxth	r3, r3
 801b05e:	827b      	strh	r3, [r7, #18]
	lastError = data & 0x0007;
 801b060:	8a7b      	ldrh	r3, [r7, #18]
 801b062:	b2db      	uxtb	r3, r3
 801b064:	f003 0307 	and.w	r3, r3, #7
 801b068:	b2da      	uxtb	r2, r3
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	739a      	strb	r2, [r3, #14]
 801b06e:	46b5      	mov	sp, r6
}
 801b070:	bf00      	nop
 801b072:	372c      	adds	r7, #44	; 0x2c
 801b074:	46bd      	mov	sp, r7
 801b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b07a:	0000      	movs	r0, r0
 801b07c:	0000      	movs	r0, r0
	...

0801b080 <_ZN7AS5048A8getValueEv>:
	uint16_t data = recieveBuffer[0] << 8 | recieveBuffer[1];

	return (float)data;
}

float AS5048A::getValue(){
 801b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b084:	b08b      	sub	sp, #44	; 0x2c
 801b086:	af00      	add	r7, sp, #0
 801b088:	60f8      	str	r0, [r7, #12]
	if(data & 0x4000){
		swReset();
		return -1;
	}

	return (float)(data & ANGLE) * AS_RADS_PER_TICK;
 801b08a:	466b      	mov	r3, sp
 801b08c:	461e      	mov	r6, r3
	uint16_t opCode = ANGLE;
 801b08e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 801b092:	823b      	strh	r3, [r7, #16]
	opCode |= 0x4000;
 801b094:	8a3b      	ldrh	r3, [r7, #16]
 801b096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b09a:	b29b      	uxth	r3, r3
 801b09c:	823b      	strh	r3, [r7, #16]
	opCode |= ((uint16_t)calcEvenParity(opCode) << 15);
 801b09e:	8a3b      	ldrh	r3, [r7, #16]
 801b0a0:	4619      	mov	r1, r3
 801b0a2:	68f8      	ldr	r0, [r7, #12]
 801b0a4:	f7ff ff02 	bl	801aeac <_ZN7AS5048A14calcEvenParityEt>
 801b0a8:	4603      	mov	r3, r0
 801b0aa:	03db      	lsls	r3, r3, #15
 801b0ac:	b21a      	sxth	r2, r3
 801b0ae:	8a3b      	ldrh	r3, [r7, #16]
 801b0b0:	b21b      	sxth	r3, r3
 801b0b2:	4313      	orrs	r3, r2
 801b0b4:	b21b      	sxth	r3, r3
 801b0b6:	b29b      	uxth	r3, r3
 801b0b8:	823b      	strh	r3, [r7, #16]
	uint8_t transmitBuffer[2 * _sizeOfDaisy];
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	7b1b      	ldrb	r3, [r3, #12]
 801b0be:	005b      	lsls	r3, r3, #1
 801b0c0:	1e59      	subs	r1, r3, #1
 801b0c2:	6239      	str	r1, [r7, #32]
 801b0c4:	460b      	mov	r3, r1
 801b0c6:	3301      	adds	r3, #1
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	603b      	str	r3, [r7, #0]
 801b0cc:	607a      	str	r2, [r7, #4]
 801b0ce:	f04f 0200 	mov.w	r2, #0
 801b0d2:	f04f 0300 	mov.w	r3, #0
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	00c3      	lsls	r3, r0, #3
 801b0da:	6838      	ldr	r0, [r7, #0]
 801b0dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801b0e0:	6838      	ldr	r0, [r7, #0]
 801b0e2:	00c2      	lsls	r2, r0, #3
 801b0e4:	460b      	mov	r3, r1
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	469a      	mov	sl, r3
 801b0ec:	4693      	mov	fp, r2
 801b0ee:	f04f 0200 	mov.w	r2, #0
 801b0f2:	f04f 0300 	mov.w	r3, #0
 801b0f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801b0fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801b0fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b102:	460b      	mov	r3, r1
 801b104:	3301      	adds	r3, #1
 801b106:	3307      	adds	r3, #7
 801b108:	08db      	lsrs	r3, r3, #3
 801b10a:	00db      	lsls	r3, r3, #3
 801b10c:	ebad 0d03 	sub.w	sp, sp, r3
 801b110:	466b      	mov	r3, sp
 801b112:	3300      	adds	r3, #0
 801b114:	61fb      	str	r3, [r7, #28]
	uint8_t recieveBuffer[2 * _sizeOfDaisy];
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	7b1b      	ldrb	r3, [r3, #12]
 801b11a:	005b      	lsls	r3, r3, #1
 801b11c:	1e59      	subs	r1, r3, #1
 801b11e:	61b9      	str	r1, [r7, #24]
 801b120:	460b      	mov	r3, r1
 801b122:	3301      	adds	r3, #1
 801b124:	2200      	movs	r2, #0
 801b126:	4698      	mov	r8, r3
 801b128:	4691      	mov	r9, r2
 801b12a:	f04f 0200 	mov.w	r2, #0
 801b12e:	f04f 0300 	mov.w	r3, #0
 801b132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801b136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801b13a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801b13e:	460b      	mov	r3, r1
 801b140:	3301      	adds	r3, #1
 801b142:	2200      	movs	r2, #0
 801b144:	461c      	mov	r4, r3
 801b146:	4615      	mov	r5, r2
 801b148:	f04f 0200 	mov.w	r2, #0
 801b14c:	f04f 0300 	mov.w	r3, #0
 801b150:	00eb      	lsls	r3, r5, #3
 801b152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801b156:	00e2      	lsls	r2, r4, #3
 801b158:	460b      	mov	r3, r1
 801b15a:	3301      	adds	r3, #1
 801b15c:	3307      	adds	r3, #7
 801b15e:	08db      	lsrs	r3, r3, #3
 801b160:	00db      	lsls	r3, r3, #3
 801b162:	ebad 0d03 	sub.w	sp, sp, r3
 801b166:	466b      	mov	r3, sp
 801b168:	3300      	adds	r3, #0
 801b16a:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < _sizeOfDaisy; i++){
 801b16c:	2300      	movs	r3, #0
 801b16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	7b1b      	ldrb	r3, [r3, #12]
 801b176:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b17a:	429a      	cmp	r2, r3
 801b17c:	d20c      	bcs.n	801b198 <_ZN7AS5048A8getValueEv+0x118>
		memcpy(&transmitBuffer[i * 2], &opCode, 2);
 801b17e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b182:	005b      	lsls	r3, r3, #1
 801b184:	69fa      	ldr	r2, [r7, #28]
 801b186:	4413      	add	r3, r2
 801b188:	8a3a      	ldrh	r2, [r7, #16]
 801b18a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < _sizeOfDaisy; i++){
 801b18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b190:	3301      	adds	r3, #1
 801b192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b196:	e7ec      	b.n	801b172 <_ZN7AS5048A8getValueEv+0xf2>
	transmitRecieveData(transmitBuffer, recieveBuffer, 2 * _sizeOfDaisy);
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	7b1b      	ldrb	r3, [r3, #12]
 801b19c:	b29b      	uxth	r3, r3
 801b19e:	005b      	lsls	r3, r3, #1
 801b1a0:	b29b      	uxth	r3, r3
 801b1a2:	697a      	ldr	r2, [r7, #20]
 801b1a4:	69f9      	ldr	r1, [r7, #28]
 801b1a6:	68f8      	ldr	r0, [r7, #12]
 801b1a8:	f7ff fe6c 	bl	801ae84 <_ZN7AS5048A19transmitRecieveDataEPhS0_t>
	uint16_t data = recieveBuffer[_numInDaisy * 2] << 8 | recieveBuffer[(_numInDaisy * 2) + 1];
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	7b5b      	ldrb	r3, [r3, #13]
 801b1b0:	005b      	lsls	r3, r3, #1
 801b1b2:	697a      	ldr	r2, [r7, #20]
 801b1b4:	5cd3      	ldrb	r3, [r2, r3]
 801b1b6:	021b      	lsls	r3, r3, #8
 801b1b8:	b21a      	sxth	r2, r3
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	7b5b      	ldrb	r3, [r3, #13]
 801b1be:	005b      	lsls	r3, r3, #1
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	6979      	ldr	r1, [r7, #20]
 801b1c4:	5ccb      	ldrb	r3, [r1, r3]
 801b1c6:	b21b      	sxth	r3, r3
 801b1c8:	4313      	orrs	r3, r2
 801b1ca:	b21b      	sxth	r3, r3
 801b1cc:	827b      	strh	r3, [r7, #18]
	if(data & 0x4000){
 801b1ce:	8a7b      	ldrh	r3, [r7, #18]
 801b1d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d005      	beq.n	801b1e4 <_ZN7AS5048A8getValueEv+0x164>
		swReset();
 801b1d8:	68f8      	ldr	r0, [r7, #12]
 801b1da:	f7ff fe8d 	bl	801aef8 <_ZN7AS5048A7swResetEv>
		return -1;
 801b1de:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b1e2:	e00e      	b.n	801b202 <_ZN7AS5048A8getValueEv+0x182>
	return (float)(data & ANGLE) * AS_RADS_PER_TICK;
 801b1e4:	8a7b      	ldrh	r3, [r7, #18]
 801b1e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b1ea:	ee07 3a90 	vmov	s15, r3
 801b1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801b1f6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 801b210 <_ZN7AS5048A8getValueEv+0x190>
 801b1fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b1fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801b202:	46b5      	mov	sp, r6
}
 801b204:	eeb0 0a67 	vmov.f32	s0, s15
 801b208:	372c      	adds	r7, #44	; 0x2c
 801b20a:	46bd      	mov	sp, r7
 801b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b210:	597c1d32 	.word	0x597c1d32
 801b214:	3f390cc1 	.word	0x3f390cc1

0801b218 <_ZN7EncoderC1EP19LPTIM_HandleTypeDefP17TIM_HandleTypeDeftt>:
 *      Author: tdubuke
 */

#include "Encoder.h"

Encoder::Encoder(LPTIM_HandleTypeDef *lptim, TIM_HandleTypeDef *tim, uint16_t ticksPerRev, uint16_t nucleoAddress):
 801b218:	b580      	push	{r7, lr}
 801b21a:	b084      	sub	sp, #16
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	60f8      	str	r0, [r7, #12]
 801b220:	60b9      	str	r1, [r7, #8]
 801b222:	607a      	str	r2, [r7, #4]
 801b224:	807b      	strh	r3, [r7, #2]
	Sensor(nucleoAddress), _lptim(lptim), _tim(tim), _ticksPerRev(ticksPerRev){}
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	8b3a      	ldrh	r2, [r7, #24]
 801b22a:	4611      	mov	r1, r2
 801b22c:	4618      	mov	r0, r3
 801b22e:	f000 f88d 	bl	801b34c <_ZN6SensorC1Et>
 801b232:	4a08      	ldr	r2, [pc, #32]	; (801b254 <_ZN7EncoderC1EP19LPTIM_HandleTypeDefP17TIM_HandleTypeDeftt+0x3c>)
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	601a      	str	r2, [r3, #0]
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	68ba      	ldr	r2, [r7, #8]
 801b23c:	609a      	str	r2, [r3, #8]
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	687a      	ldr	r2, [r7, #4]
 801b242:	60da      	str	r2, [r3, #12]
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	887a      	ldrh	r2, [r7, #2]
 801b248:	821a      	strh	r2, [r3, #16]
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	4618      	mov	r0, r3
 801b24e:	3710      	adds	r7, #16
 801b250:	46bd      	mov	sp, r7
 801b252:	bd80      	pop	{r7, pc}
 801b254:	0803d39c 	.word	0x0803d39c

0801b258 <_ZN7EncoderD1Ev>:

Encoder::~Encoder(){}
 801b258:	b480      	push	{r7}
 801b25a:	b083      	sub	sp, #12
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
 801b260:	4a04      	ldr	r2, [pc, #16]	; (801b274 <_ZN7EncoderD1Ev+0x1c>)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	601a      	str	r2, [r3, #0]
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	4618      	mov	r0, r3
 801b26a:	370c      	adds	r7, #12
 801b26c:	46bd      	mov	sp, r7
 801b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b272:	4770      	bx	lr
 801b274:	0803d39c 	.word	0x0803d39c

0801b278 <_ZN7Encoder11initEncoderEv>:

void Encoder::initEncoder(){
 801b278:	b580      	push	{r7, lr}
 801b27a:	b082      	sub	sp, #8
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	6078      	str	r0, [r7, #4]
	if(_lptim != 0){
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	689b      	ldr	r3, [r3, #8]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d008      	beq.n	801b29a <_ZN7Encoder11initEncoderEv+0x22>
		HAL_LPTIM_Encoder_Start(_lptim, _ticksPerRev);
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	689a      	ldr	r2, [r3, #8]
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	8a1b      	ldrh	r3, [r3, #16]
 801b290:	4619      	mov	r1, r3
 801b292:	4610      	mov	r0, r2
 801b294:	f7ef f9c0 	bl	800a618 <HAL_LPTIM_Encoder_Start>
	}else if(_tim != 0){
		HAL_TIM_Encoder_Start(_tim, TIM_CHANNEL_ALL);
	}
}
 801b298:	e009      	b.n	801b2ae <_ZN7Encoder11initEncoderEv+0x36>
	}else if(_tim != 0){
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	68db      	ldr	r3, [r3, #12]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d005      	beq.n	801b2ae <_ZN7Encoder11initEncoderEv+0x36>
		HAL_TIM_Encoder_Start(_tim, TIM_CHANNEL_ALL);
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	68db      	ldr	r3, [r3, #12]
 801b2a6:	213c      	movs	r1, #60	; 0x3c
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	f7f4 fb57 	bl	800f95c <HAL_TIM_Encoder_Start>
}
 801b2ae:	bf00      	nop
 801b2b0:	3708      	adds	r7, #8
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	bd80      	pop	{r7, pc}
	...

0801b2b8 <_ZN7Encoder8getValueEv>:

float Encoder::getValue(){
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b084      	sub	sp, #16
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
	float count;
	if(_lptim != 0){
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	689b      	ldr	r3, [r3, #8]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d00b      	beq.n	801b2e0 <_ZN7Encoder8getValueEv+0x28>
		count = (float)HAL_LPTIM_ReadCounter(_lptim);
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	689b      	ldr	r3, [r3, #8]
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	f7ef f9ef 	bl	800a6b0 <HAL_LPTIM_ReadCounter>
 801b2d2:	ee07 0a90 	vmov	s15, r0
 801b2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b2da:	edc7 7a03 	vstr	s15, [r7, #12]
 801b2de:	e011      	b.n	801b304 <_ZN7Encoder8getValueEv+0x4c>
	}else if(_tim != 0){
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	68db      	ldr	r3, [r3, #12]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d00a      	beq.n	801b2fe <_ZN7Encoder8getValueEv+0x46>
		count = _tim->Instance->CNT;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	68db      	ldr	r3, [r3, #12]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2f0:	ee07 3a90 	vmov	s15, r3
 801b2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b2f8:	edc7 7a03 	vstr	s15, [r7, #12]
 801b2fc:	e002      	b.n	801b304 <_ZN7Encoder8getValueEv+0x4c>
	}else{
		return 0;
 801b2fe:	eddf 7a12 	vldr	s15, [pc, #72]	; 801b348 <_ZN7Encoder8getValueEv+0x90>
 801b302:	e015      	b.n	801b330 <_ZN7Encoder8getValueEv+0x78>
	}

	count = count / (float)_ticksPerRev;
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	8a1b      	ldrh	r3, [r3, #16]
 801b308:	ee07 3a90 	vmov	s15, r3
 801b30c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b310:	edd7 6a03 	vldr	s13, [r7, #12]
 801b314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b318:	edc7 7a03 	vstr	s15, [r7, #12]
	return count * 6.28319;
 801b31c:	edd7 7a03 	vldr	s15, [r7, #12]
 801b320:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801b324:	ed9f 6b06 	vldr	d6, [pc, #24]	; 801b340 <_ZN7Encoder8getValueEv+0x88>
 801b328:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b32c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 801b330:	eeb0 0a67 	vmov.f32	s0, s15
 801b334:	3710      	adds	r7, #16
 801b336:	46bd      	mov	sp, r7
 801b338:	bd80      	pop	{r7, pc}
 801b33a:	bf00      	nop
 801b33c:	f3af 8000 	nop.w
 801b340:	8f32378b 	.word	0x8f32378b
 801b344:	401921fc 	.word	0x401921fc
 801b348:	00000000 	.word	0x00000000

0801b34c <_ZN6SensorC1Et>:
 *      Author: tdubuke
 */

#include "Sensor.h"

Sensor::Sensor(uint16_t nucleoAddress): _nucleoAddress(nucleoAddress) {}
 801b34c:	b480      	push	{r7}
 801b34e:	b083      	sub	sp, #12
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
 801b354:	460b      	mov	r3, r1
 801b356:	807b      	strh	r3, [r7, #2]
 801b358:	4a06      	ldr	r2, [pc, #24]	; (801b374 <_ZN6SensorC1Et+0x28>)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	601a      	str	r2, [r3, #0]
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	887a      	ldrh	r2, [r7, #2]
 801b362:	809a      	strh	r2, [r3, #4]
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	4618      	mov	r0, r3
 801b368:	370c      	adds	r7, #12
 801b36a:	46bd      	mov	sp, r7
 801b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b370:	4770      	bx	lr
 801b372:	bf00      	nop
 801b374:	0803d3a8 	.word	0x0803d3a8

0801b378 <_ZdlPvj>:
 801b378:	f000 b803 	b.w	801b382 <_ZdlPv>

0801b37c <__cxa_pure_virtual>:
 801b37c:	b508      	push	{r3, lr}
 801b37e:	f000 f80f 	bl	801b3a0 <_ZSt9terminatev>

0801b382 <_ZdlPv>:
 801b382:	f000 b84b 	b.w	801b41c <free>

0801b386 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801b386:	b508      	push	{r3, lr}
 801b388:	4780      	blx	r0
 801b38a:	f000 f80e 	bl	801b3aa <abort>
	...

0801b390 <_ZSt13get_terminatev>:
 801b390:	4b02      	ldr	r3, [pc, #8]	; (801b39c <_ZSt13get_terminatev+0xc>)
 801b392:	6818      	ldr	r0, [r3, #0]
 801b394:	f3bf 8f5b 	dmb	ish
 801b398:	4770      	bx	lr
 801b39a:	bf00      	nop
 801b39c:	240000a4 	.word	0x240000a4

0801b3a0 <_ZSt9terminatev>:
 801b3a0:	b508      	push	{r3, lr}
 801b3a2:	f7ff fff5 	bl	801b390 <_ZSt13get_terminatev>
 801b3a6:	f7ff ffee 	bl	801b386 <_ZN10__cxxabiv111__terminateEPFvvE>

0801b3aa <abort>:
 801b3aa:	b508      	push	{r3, lr}
 801b3ac:	2006      	movs	r0, #6
 801b3ae:	f000 fdad 	bl	801bf0c <raise>
 801b3b2:	2001      	movs	r0, #1
 801b3b4:	f7e9 f836 	bl	8004424 <_exit>

0801b3b8 <__errno>:
 801b3b8:	4b01      	ldr	r3, [pc, #4]	; (801b3c0 <__errno+0x8>)
 801b3ba:	6818      	ldr	r0, [r3, #0]
 801b3bc:	4770      	bx	lr
 801b3be:	bf00      	nop
 801b3c0:	240000a8 	.word	0x240000a8

0801b3c4 <__libc_init_array>:
 801b3c4:	b570      	push	{r4, r5, r6, lr}
 801b3c6:	4d0d      	ldr	r5, [pc, #52]	; (801b3fc <__libc_init_array+0x38>)
 801b3c8:	4c0d      	ldr	r4, [pc, #52]	; (801b400 <__libc_init_array+0x3c>)
 801b3ca:	1b64      	subs	r4, r4, r5
 801b3cc:	10a4      	asrs	r4, r4, #2
 801b3ce:	2600      	movs	r6, #0
 801b3d0:	42a6      	cmp	r6, r4
 801b3d2:	d109      	bne.n	801b3e8 <__libc_init_array+0x24>
 801b3d4:	4d0b      	ldr	r5, [pc, #44]	; (801b404 <__libc_init_array+0x40>)
 801b3d6:	4c0c      	ldr	r4, [pc, #48]	; (801b408 <__libc_init_array+0x44>)
 801b3d8:	f002 fc92 	bl	801dd00 <_init>
 801b3dc:	1b64      	subs	r4, r4, r5
 801b3de:	10a4      	asrs	r4, r4, #2
 801b3e0:	2600      	movs	r6, #0
 801b3e2:	42a6      	cmp	r6, r4
 801b3e4:	d105      	bne.n	801b3f2 <__libc_init_array+0x2e>
 801b3e6:	bd70      	pop	{r4, r5, r6, pc}
 801b3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3ec:	4798      	blx	r3
 801b3ee:	3601      	adds	r6, #1
 801b3f0:	e7ee      	b.n	801b3d0 <__libc_init_array+0xc>
 801b3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3f6:	4798      	blx	r3
 801b3f8:	3601      	adds	r6, #1
 801b3fa:	e7f2      	b.n	801b3e2 <__libc_init_array+0x1e>
 801b3fc:	0803d78c 	.word	0x0803d78c
 801b400:	0803d78c 	.word	0x0803d78c
 801b404:	0803d78c 	.word	0x0803d78c
 801b408:	0803d790 	.word	0x0803d790

0801b40c <malloc>:
 801b40c:	4b02      	ldr	r3, [pc, #8]	; (801b418 <malloc+0xc>)
 801b40e:	4601      	mov	r1, r0
 801b410:	6818      	ldr	r0, [r3, #0]
 801b412:	f000 b88d 	b.w	801b530 <_malloc_r>
 801b416:	bf00      	nop
 801b418:	240000a8 	.word	0x240000a8

0801b41c <free>:
 801b41c:	4b02      	ldr	r3, [pc, #8]	; (801b428 <free+0xc>)
 801b41e:	4601      	mov	r1, r0
 801b420:	6818      	ldr	r0, [r3, #0]
 801b422:	f000 b819 	b.w	801b458 <_free_r>
 801b426:	bf00      	nop
 801b428:	240000a8 	.word	0x240000a8

0801b42c <memcpy>:
 801b42c:	440a      	add	r2, r1
 801b42e:	4291      	cmp	r1, r2
 801b430:	f100 33ff 	add.w	r3, r0, #4294967295
 801b434:	d100      	bne.n	801b438 <memcpy+0xc>
 801b436:	4770      	bx	lr
 801b438:	b510      	push	{r4, lr}
 801b43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b442:	4291      	cmp	r1, r2
 801b444:	d1f9      	bne.n	801b43a <memcpy+0xe>
 801b446:	bd10      	pop	{r4, pc}

0801b448 <memset>:
 801b448:	4402      	add	r2, r0
 801b44a:	4603      	mov	r3, r0
 801b44c:	4293      	cmp	r3, r2
 801b44e:	d100      	bne.n	801b452 <memset+0xa>
 801b450:	4770      	bx	lr
 801b452:	f803 1b01 	strb.w	r1, [r3], #1
 801b456:	e7f9      	b.n	801b44c <memset+0x4>

0801b458 <_free_r>:
 801b458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b45a:	2900      	cmp	r1, #0
 801b45c:	d044      	beq.n	801b4e8 <_free_r+0x90>
 801b45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b462:	9001      	str	r0, [sp, #4]
 801b464:	2b00      	cmp	r3, #0
 801b466:	f1a1 0404 	sub.w	r4, r1, #4
 801b46a:	bfb8      	it	lt
 801b46c:	18e4      	addlt	r4, r4, r3
 801b46e:	f001 fc63 	bl	801cd38 <__malloc_lock>
 801b472:	4a1e      	ldr	r2, [pc, #120]	; (801b4ec <_free_r+0x94>)
 801b474:	9801      	ldr	r0, [sp, #4]
 801b476:	6813      	ldr	r3, [r2, #0]
 801b478:	b933      	cbnz	r3, 801b488 <_free_r+0x30>
 801b47a:	6063      	str	r3, [r4, #4]
 801b47c:	6014      	str	r4, [r2, #0]
 801b47e:	b003      	add	sp, #12
 801b480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b484:	f001 bc5e 	b.w	801cd44 <__malloc_unlock>
 801b488:	42a3      	cmp	r3, r4
 801b48a:	d908      	bls.n	801b49e <_free_r+0x46>
 801b48c:	6825      	ldr	r5, [r4, #0]
 801b48e:	1961      	adds	r1, r4, r5
 801b490:	428b      	cmp	r3, r1
 801b492:	bf01      	itttt	eq
 801b494:	6819      	ldreq	r1, [r3, #0]
 801b496:	685b      	ldreq	r3, [r3, #4]
 801b498:	1949      	addeq	r1, r1, r5
 801b49a:	6021      	streq	r1, [r4, #0]
 801b49c:	e7ed      	b.n	801b47a <_free_r+0x22>
 801b49e:	461a      	mov	r2, r3
 801b4a0:	685b      	ldr	r3, [r3, #4]
 801b4a2:	b10b      	cbz	r3, 801b4a8 <_free_r+0x50>
 801b4a4:	42a3      	cmp	r3, r4
 801b4a6:	d9fa      	bls.n	801b49e <_free_r+0x46>
 801b4a8:	6811      	ldr	r1, [r2, #0]
 801b4aa:	1855      	adds	r5, r2, r1
 801b4ac:	42a5      	cmp	r5, r4
 801b4ae:	d10b      	bne.n	801b4c8 <_free_r+0x70>
 801b4b0:	6824      	ldr	r4, [r4, #0]
 801b4b2:	4421      	add	r1, r4
 801b4b4:	1854      	adds	r4, r2, r1
 801b4b6:	42a3      	cmp	r3, r4
 801b4b8:	6011      	str	r1, [r2, #0]
 801b4ba:	d1e0      	bne.n	801b47e <_free_r+0x26>
 801b4bc:	681c      	ldr	r4, [r3, #0]
 801b4be:	685b      	ldr	r3, [r3, #4]
 801b4c0:	6053      	str	r3, [r2, #4]
 801b4c2:	4421      	add	r1, r4
 801b4c4:	6011      	str	r1, [r2, #0]
 801b4c6:	e7da      	b.n	801b47e <_free_r+0x26>
 801b4c8:	d902      	bls.n	801b4d0 <_free_r+0x78>
 801b4ca:	230c      	movs	r3, #12
 801b4cc:	6003      	str	r3, [r0, #0]
 801b4ce:	e7d6      	b.n	801b47e <_free_r+0x26>
 801b4d0:	6825      	ldr	r5, [r4, #0]
 801b4d2:	1961      	adds	r1, r4, r5
 801b4d4:	428b      	cmp	r3, r1
 801b4d6:	bf04      	itt	eq
 801b4d8:	6819      	ldreq	r1, [r3, #0]
 801b4da:	685b      	ldreq	r3, [r3, #4]
 801b4dc:	6063      	str	r3, [r4, #4]
 801b4de:	bf04      	itt	eq
 801b4e0:	1949      	addeq	r1, r1, r5
 801b4e2:	6021      	streq	r1, [r4, #0]
 801b4e4:	6054      	str	r4, [r2, #4]
 801b4e6:	e7ca      	b.n	801b47e <_free_r+0x26>
 801b4e8:	b003      	add	sp, #12
 801b4ea:	bd30      	pop	{r4, r5, pc}
 801b4ec:	2407f6cc 	.word	0x2407f6cc

0801b4f0 <sbrk_aligned>:
 801b4f0:	b570      	push	{r4, r5, r6, lr}
 801b4f2:	4e0e      	ldr	r6, [pc, #56]	; (801b52c <sbrk_aligned+0x3c>)
 801b4f4:	460c      	mov	r4, r1
 801b4f6:	6831      	ldr	r1, [r6, #0]
 801b4f8:	4605      	mov	r5, r0
 801b4fa:	b911      	cbnz	r1, 801b502 <sbrk_aligned+0x12>
 801b4fc:	f000 fcce 	bl	801be9c <_sbrk_r>
 801b500:	6030      	str	r0, [r6, #0]
 801b502:	4621      	mov	r1, r4
 801b504:	4628      	mov	r0, r5
 801b506:	f000 fcc9 	bl	801be9c <_sbrk_r>
 801b50a:	1c43      	adds	r3, r0, #1
 801b50c:	d00a      	beq.n	801b524 <sbrk_aligned+0x34>
 801b50e:	1cc4      	adds	r4, r0, #3
 801b510:	f024 0403 	bic.w	r4, r4, #3
 801b514:	42a0      	cmp	r0, r4
 801b516:	d007      	beq.n	801b528 <sbrk_aligned+0x38>
 801b518:	1a21      	subs	r1, r4, r0
 801b51a:	4628      	mov	r0, r5
 801b51c:	f000 fcbe 	bl	801be9c <_sbrk_r>
 801b520:	3001      	adds	r0, #1
 801b522:	d101      	bne.n	801b528 <sbrk_aligned+0x38>
 801b524:	f04f 34ff 	mov.w	r4, #4294967295
 801b528:	4620      	mov	r0, r4
 801b52a:	bd70      	pop	{r4, r5, r6, pc}
 801b52c:	2407f6d0 	.word	0x2407f6d0

0801b530 <_malloc_r>:
 801b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b534:	1ccd      	adds	r5, r1, #3
 801b536:	f025 0503 	bic.w	r5, r5, #3
 801b53a:	3508      	adds	r5, #8
 801b53c:	2d0c      	cmp	r5, #12
 801b53e:	bf38      	it	cc
 801b540:	250c      	movcc	r5, #12
 801b542:	2d00      	cmp	r5, #0
 801b544:	4607      	mov	r7, r0
 801b546:	db01      	blt.n	801b54c <_malloc_r+0x1c>
 801b548:	42a9      	cmp	r1, r5
 801b54a:	d905      	bls.n	801b558 <_malloc_r+0x28>
 801b54c:	230c      	movs	r3, #12
 801b54e:	603b      	str	r3, [r7, #0]
 801b550:	2600      	movs	r6, #0
 801b552:	4630      	mov	r0, r6
 801b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b558:	4e2e      	ldr	r6, [pc, #184]	; (801b614 <_malloc_r+0xe4>)
 801b55a:	f001 fbed 	bl	801cd38 <__malloc_lock>
 801b55e:	6833      	ldr	r3, [r6, #0]
 801b560:	461c      	mov	r4, r3
 801b562:	bb34      	cbnz	r4, 801b5b2 <_malloc_r+0x82>
 801b564:	4629      	mov	r1, r5
 801b566:	4638      	mov	r0, r7
 801b568:	f7ff ffc2 	bl	801b4f0 <sbrk_aligned>
 801b56c:	1c43      	adds	r3, r0, #1
 801b56e:	4604      	mov	r4, r0
 801b570:	d14d      	bne.n	801b60e <_malloc_r+0xde>
 801b572:	6834      	ldr	r4, [r6, #0]
 801b574:	4626      	mov	r6, r4
 801b576:	2e00      	cmp	r6, #0
 801b578:	d140      	bne.n	801b5fc <_malloc_r+0xcc>
 801b57a:	6823      	ldr	r3, [r4, #0]
 801b57c:	4631      	mov	r1, r6
 801b57e:	4638      	mov	r0, r7
 801b580:	eb04 0803 	add.w	r8, r4, r3
 801b584:	f000 fc8a 	bl	801be9c <_sbrk_r>
 801b588:	4580      	cmp	r8, r0
 801b58a:	d13a      	bne.n	801b602 <_malloc_r+0xd2>
 801b58c:	6821      	ldr	r1, [r4, #0]
 801b58e:	3503      	adds	r5, #3
 801b590:	1a6d      	subs	r5, r5, r1
 801b592:	f025 0503 	bic.w	r5, r5, #3
 801b596:	3508      	adds	r5, #8
 801b598:	2d0c      	cmp	r5, #12
 801b59a:	bf38      	it	cc
 801b59c:	250c      	movcc	r5, #12
 801b59e:	4629      	mov	r1, r5
 801b5a0:	4638      	mov	r0, r7
 801b5a2:	f7ff ffa5 	bl	801b4f0 <sbrk_aligned>
 801b5a6:	3001      	adds	r0, #1
 801b5a8:	d02b      	beq.n	801b602 <_malloc_r+0xd2>
 801b5aa:	6823      	ldr	r3, [r4, #0]
 801b5ac:	442b      	add	r3, r5
 801b5ae:	6023      	str	r3, [r4, #0]
 801b5b0:	e00e      	b.n	801b5d0 <_malloc_r+0xa0>
 801b5b2:	6822      	ldr	r2, [r4, #0]
 801b5b4:	1b52      	subs	r2, r2, r5
 801b5b6:	d41e      	bmi.n	801b5f6 <_malloc_r+0xc6>
 801b5b8:	2a0b      	cmp	r2, #11
 801b5ba:	d916      	bls.n	801b5ea <_malloc_r+0xba>
 801b5bc:	1961      	adds	r1, r4, r5
 801b5be:	42a3      	cmp	r3, r4
 801b5c0:	6025      	str	r5, [r4, #0]
 801b5c2:	bf18      	it	ne
 801b5c4:	6059      	strne	r1, [r3, #4]
 801b5c6:	6863      	ldr	r3, [r4, #4]
 801b5c8:	bf08      	it	eq
 801b5ca:	6031      	streq	r1, [r6, #0]
 801b5cc:	5162      	str	r2, [r4, r5]
 801b5ce:	604b      	str	r3, [r1, #4]
 801b5d0:	4638      	mov	r0, r7
 801b5d2:	f104 060b 	add.w	r6, r4, #11
 801b5d6:	f001 fbb5 	bl	801cd44 <__malloc_unlock>
 801b5da:	f026 0607 	bic.w	r6, r6, #7
 801b5de:	1d23      	adds	r3, r4, #4
 801b5e0:	1af2      	subs	r2, r6, r3
 801b5e2:	d0b6      	beq.n	801b552 <_malloc_r+0x22>
 801b5e4:	1b9b      	subs	r3, r3, r6
 801b5e6:	50a3      	str	r3, [r4, r2]
 801b5e8:	e7b3      	b.n	801b552 <_malloc_r+0x22>
 801b5ea:	6862      	ldr	r2, [r4, #4]
 801b5ec:	42a3      	cmp	r3, r4
 801b5ee:	bf0c      	ite	eq
 801b5f0:	6032      	streq	r2, [r6, #0]
 801b5f2:	605a      	strne	r2, [r3, #4]
 801b5f4:	e7ec      	b.n	801b5d0 <_malloc_r+0xa0>
 801b5f6:	4623      	mov	r3, r4
 801b5f8:	6864      	ldr	r4, [r4, #4]
 801b5fa:	e7b2      	b.n	801b562 <_malloc_r+0x32>
 801b5fc:	4634      	mov	r4, r6
 801b5fe:	6876      	ldr	r6, [r6, #4]
 801b600:	e7b9      	b.n	801b576 <_malloc_r+0x46>
 801b602:	230c      	movs	r3, #12
 801b604:	603b      	str	r3, [r7, #0]
 801b606:	4638      	mov	r0, r7
 801b608:	f001 fb9c 	bl	801cd44 <__malloc_unlock>
 801b60c:	e7a1      	b.n	801b552 <_malloc_r+0x22>
 801b60e:	6025      	str	r5, [r4, #0]
 801b610:	e7de      	b.n	801b5d0 <_malloc_r+0xa0>
 801b612:	bf00      	nop
 801b614:	2407f6cc 	.word	0x2407f6cc

0801b618 <__cvt>:
 801b618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b61a:	ed2d 8b02 	vpush	{d8}
 801b61e:	eeb0 8b40 	vmov.f64	d8, d0
 801b622:	b085      	sub	sp, #20
 801b624:	4617      	mov	r7, r2
 801b626:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b628:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b62a:	ee18 2a90 	vmov	r2, s17
 801b62e:	f025 0520 	bic.w	r5, r5, #32
 801b632:	2a00      	cmp	r2, #0
 801b634:	bfb6      	itet	lt
 801b636:	222d      	movlt	r2, #45	; 0x2d
 801b638:	2200      	movge	r2, #0
 801b63a:	eeb1 8b40 	vneglt.f64	d8, d0
 801b63e:	2d46      	cmp	r5, #70	; 0x46
 801b640:	460c      	mov	r4, r1
 801b642:	701a      	strb	r2, [r3, #0]
 801b644:	d004      	beq.n	801b650 <__cvt+0x38>
 801b646:	2d45      	cmp	r5, #69	; 0x45
 801b648:	d100      	bne.n	801b64c <__cvt+0x34>
 801b64a:	3401      	adds	r4, #1
 801b64c:	2102      	movs	r1, #2
 801b64e:	e000      	b.n	801b652 <__cvt+0x3a>
 801b650:	2103      	movs	r1, #3
 801b652:	ab03      	add	r3, sp, #12
 801b654:	9301      	str	r3, [sp, #4]
 801b656:	ab02      	add	r3, sp, #8
 801b658:	9300      	str	r3, [sp, #0]
 801b65a:	4622      	mov	r2, r4
 801b65c:	4633      	mov	r3, r6
 801b65e:	eeb0 0b48 	vmov.f64	d0, d8
 801b662:	f000 fcfd 	bl	801c060 <_dtoa_r>
 801b666:	2d47      	cmp	r5, #71	; 0x47
 801b668:	d101      	bne.n	801b66e <__cvt+0x56>
 801b66a:	07fb      	lsls	r3, r7, #31
 801b66c:	d51a      	bpl.n	801b6a4 <__cvt+0x8c>
 801b66e:	2d46      	cmp	r5, #70	; 0x46
 801b670:	eb00 0204 	add.w	r2, r0, r4
 801b674:	d10c      	bne.n	801b690 <__cvt+0x78>
 801b676:	7803      	ldrb	r3, [r0, #0]
 801b678:	2b30      	cmp	r3, #48	; 0x30
 801b67a:	d107      	bne.n	801b68c <__cvt+0x74>
 801b67c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b684:	bf1c      	itt	ne
 801b686:	f1c4 0401 	rsbne	r4, r4, #1
 801b68a:	6034      	strne	r4, [r6, #0]
 801b68c:	6833      	ldr	r3, [r6, #0]
 801b68e:	441a      	add	r2, r3
 801b690:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b698:	bf08      	it	eq
 801b69a:	9203      	streq	r2, [sp, #12]
 801b69c:	2130      	movs	r1, #48	; 0x30
 801b69e:	9b03      	ldr	r3, [sp, #12]
 801b6a0:	4293      	cmp	r3, r2
 801b6a2:	d307      	bcc.n	801b6b4 <__cvt+0x9c>
 801b6a4:	9b03      	ldr	r3, [sp, #12]
 801b6a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6a8:	1a1b      	subs	r3, r3, r0
 801b6aa:	6013      	str	r3, [r2, #0]
 801b6ac:	b005      	add	sp, #20
 801b6ae:	ecbd 8b02 	vpop	{d8}
 801b6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6b4:	1c5c      	adds	r4, r3, #1
 801b6b6:	9403      	str	r4, [sp, #12]
 801b6b8:	7019      	strb	r1, [r3, #0]
 801b6ba:	e7f0      	b.n	801b69e <__cvt+0x86>

0801b6bc <__exponent>:
 801b6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b6be:	4603      	mov	r3, r0
 801b6c0:	2900      	cmp	r1, #0
 801b6c2:	bfb8      	it	lt
 801b6c4:	4249      	neglt	r1, r1
 801b6c6:	f803 2b02 	strb.w	r2, [r3], #2
 801b6ca:	bfb4      	ite	lt
 801b6cc:	222d      	movlt	r2, #45	; 0x2d
 801b6ce:	222b      	movge	r2, #43	; 0x2b
 801b6d0:	2909      	cmp	r1, #9
 801b6d2:	7042      	strb	r2, [r0, #1]
 801b6d4:	dd2a      	ble.n	801b72c <__exponent+0x70>
 801b6d6:	f10d 0407 	add.w	r4, sp, #7
 801b6da:	46a4      	mov	ip, r4
 801b6dc:	270a      	movs	r7, #10
 801b6de:	46a6      	mov	lr, r4
 801b6e0:	460a      	mov	r2, r1
 801b6e2:	fb91 f6f7 	sdiv	r6, r1, r7
 801b6e6:	fb07 1516 	mls	r5, r7, r6, r1
 801b6ea:	3530      	adds	r5, #48	; 0x30
 801b6ec:	2a63      	cmp	r2, #99	; 0x63
 801b6ee:	f104 34ff 	add.w	r4, r4, #4294967295
 801b6f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b6f6:	4631      	mov	r1, r6
 801b6f8:	dcf1      	bgt.n	801b6de <__exponent+0x22>
 801b6fa:	3130      	adds	r1, #48	; 0x30
 801b6fc:	f1ae 0502 	sub.w	r5, lr, #2
 801b700:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b704:	1c44      	adds	r4, r0, #1
 801b706:	4629      	mov	r1, r5
 801b708:	4561      	cmp	r1, ip
 801b70a:	d30a      	bcc.n	801b722 <__exponent+0x66>
 801b70c:	f10d 0209 	add.w	r2, sp, #9
 801b710:	eba2 020e 	sub.w	r2, r2, lr
 801b714:	4565      	cmp	r5, ip
 801b716:	bf88      	it	hi
 801b718:	2200      	movhi	r2, #0
 801b71a:	4413      	add	r3, r2
 801b71c:	1a18      	subs	r0, r3, r0
 801b71e:	b003      	add	sp, #12
 801b720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b722:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b726:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b72a:	e7ed      	b.n	801b708 <__exponent+0x4c>
 801b72c:	2330      	movs	r3, #48	; 0x30
 801b72e:	3130      	adds	r1, #48	; 0x30
 801b730:	7083      	strb	r3, [r0, #2]
 801b732:	70c1      	strb	r1, [r0, #3]
 801b734:	1d03      	adds	r3, r0, #4
 801b736:	e7f1      	b.n	801b71c <__exponent+0x60>

0801b738 <_printf_float>:
 801b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b73c:	b08b      	sub	sp, #44	; 0x2c
 801b73e:	460c      	mov	r4, r1
 801b740:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b744:	4616      	mov	r6, r2
 801b746:	461f      	mov	r7, r3
 801b748:	4605      	mov	r5, r0
 801b74a:	f001 faed 	bl	801cd28 <_localeconv_r>
 801b74e:	f8d0 b000 	ldr.w	fp, [r0]
 801b752:	4658      	mov	r0, fp
 801b754:	f7e4 fdc4 	bl	80002e0 <strlen>
 801b758:	2300      	movs	r3, #0
 801b75a:	9308      	str	r3, [sp, #32]
 801b75c:	f8d8 3000 	ldr.w	r3, [r8]
 801b760:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b764:	6822      	ldr	r2, [r4, #0]
 801b766:	3307      	adds	r3, #7
 801b768:	f023 0307 	bic.w	r3, r3, #7
 801b76c:	f103 0108 	add.w	r1, r3, #8
 801b770:	f8c8 1000 	str.w	r1, [r8]
 801b774:	4682      	mov	sl, r0
 801b776:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b77a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b77e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b9e0 <_printf_float+0x2a8>
 801b782:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b786:	eeb0 6bc0 	vabs.f64	d6, d0
 801b78a:	eeb4 6b47 	vcmp.f64	d6, d7
 801b78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b792:	dd24      	ble.n	801b7de <_printf_float+0xa6>
 801b794:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b79c:	d502      	bpl.n	801b7a4 <_printf_float+0x6c>
 801b79e:	232d      	movs	r3, #45	; 0x2d
 801b7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7a4:	4b90      	ldr	r3, [pc, #576]	; (801b9e8 <_printf_float+0x2b0>)
 801b7a6:	4891      	ldr	r0, [pc, #580]	; (801b9ec <_printf_float+0x2b4>)
 801b7a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b7ac:	bf94      	ite	ls
 801b7ae:	4698      	movls	r8, r3
 801b7b0:	4680      	movhi	r8, r0
 801b7b2:	2303      	movs	r3, #3
 801b7b4:	6123      	str	r3, [r4, #16]
 801b7b6:	f022 0204 	bic.w	r2, r2, #4
 801b7ba:	2300      	movs	r3, #0
 801b7bc:	6022      	str	r2, [r4, #0]
 801b7be:	9304      	str	r3, [sp, #16]
 801b7c0:	9700      	str	r7, [sp, #0]
 801b7c2:	4633      	mov	r3, r6
 801b7c4:	aa09      	add	r2, sp, #36	; 0x24
 801b7c6:	4621      	mov	r1, r4
 801b7c8:	4628      	mov	r0, r5
 801b7ca:	f000 f9d3 	bl	801bb74 <_printf_common>
 801b7ce:	3001      	adds	r0, #1
 801b7d0:	f040 808a 	bne.w	801b8e8 <_printf_float+0x1b0>
 801b7d4:	f04f 30ff 	mov.w	r0, #4294967295
 801b7d8:	b00b      	add	sp, #44	; 0x2c
 801b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7de:	eeb4 0b40 	vcmp.f64	d0, d0
 801b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e6:	d709      	bvc.n	801b7fc <_printf_float+0xc4>
 801b7e8:	ee10 3a90 	vmov	r3, s1
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	bfbc      	itt	lt
 801b7f0:	232d      	movlt	r3, #45	; 0x2d
 801b7f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b7f6:	487e      	ldr	r0, [pc, #504]	; (801b9f0 <_printf_float+0x2b8>)
 801b7f8:	4b7e      	ldr	r3, [pc, #504]	; (801b9f4 <_printf_float+0x2bc>)
 801b7fa:	e7d5      	b.n	801b7a8 <_printf_float+0x70>
 801b7fc:	6863      	ldr	r3, [r4, #4]
 801b7fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b802:	9104      	str	r1, [sp, #16]
 801b804:	1c59      	adds	r1, r3, #1
 801b806:	d13c      	bne.n	801b882 <_printf_float+0x14a>
 801b808:	2306      	movs	r3, #6
 801b80a:	6063      	str	r3, [r4, #4]
 801b80c:	2300      	movs	r3, #0
 801b80e:	9303      	str	r3, [sp, #12]
 801b810:	ab08      	add	r3, sp, #32
 801b812:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b816:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b81a:	ab07      	add	r3, sp, #28
 801b81c:	6861      	ldr	r1, [r4, #4]
 801b81e:	9300      	str	r3, [sp, #0]
 801b820:	6022      	str	r2, [r4, #0]
 801b822:	f10d 031b 	add.w	r3, sp, #27
 801b826:	4628      	mov	r0, r5
 801b828:	f7ff fef6 	bl	801b618 <__cvt>
 801b82c:	9b04      	ldr	r3, [sp, #16]
 801b82e:	9907      	ldr	r1, [sp, #28]
 801b830:	2b47      	cmp	r3, #71	; 0x47
 801b832:	4680      	mov	r8, r0
 801b834:	d108      	bne.n	801b848 <_printf_float+0x110>
 801b836:	1cc8      	adds	r0, r1, #3
 801b838:	db02      	blt.n	801b840 <_printf_float+0x108>
 801b83a:	6863      	ldr	r3, [r4, #4]
 801b83c:	4299      	cmp	r1, r3
 801b83e:	dd41      	ble.n	801b8c4 <_printf_float+0x18c>
 801b840:	f1a9 0902 	sub.w	r9, r9, #2
 801b844:	fa5f f989 	uxtb.w	r9, r9
 801b848:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b84c:	d820      	bhi.n	801b890 <_printf_float+0x158>
 801b84e:	3901      	subs	r1, #1
 801b850:	464a      	mov	r2, r9
 801b852:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b856:	9107      	str	r1, [sp, #28]
 801b858:	f7ff ff30 	bl	801b6bc <__exponent>
 801b85c:	9a08      	ldr	r2, [sp, #32]
 801b85e:	9004      	str	r0, [sp, #16]
 801b860:	1813      	adds	r3, r2, r0
 801b862:	2a01      	cmp	r2, #1
 801b864:	6123      	str	r3, [r4, #16]
 801b866:	dc02      	bgt.n	801b86e <_printf_float+0x136>
 801b868:	6822      	ldr	r2, [r4, #0]
 801b86a:	07d2      	lsls	r2, r2, #31
 801b86c:	d501      	bpl.n	801b872 <_printf_float+0x13a>
 801b86e:	3301      	adds	r3, #1
 801b870:	6123      	str	r3, [r4, #16]
 801b872:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d0a2      	beq.n	801b7c0 <_printf_float+0x88>
 801b87a:	232d      	movs	r3, #45	; 0x2d
 801b87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b880:	e79e      	b.n	801b7c0 <_printf_float+0x88>
 801b882:	9904      	ldr	r1, [sp, #16]
 801b884:	2947      	cmp	r1, #71	; 0x47
 801b886:	d1c1      	bne.n	801b80c <_printf_float+0xd4>
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d1bf      	bne.n	801b80c <_printf_float+0xd4>
 801b88c:	2301      	movs	r3, #1
 801b88e:	e7bc      	b.n	801b80a <_printf_float+0xd2>
 801b890:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b894:	d118      	bne.n	801b8c8 <_printf_float+0x190>
 801b896:	2900      	cmp	r1, #0
 801b898:	6863      	ldr	r3, [r4, #4]
 801b89a:	dd0b      	ble.n	801b8b4 <_printf_float+0x17c>
 801b89c:	6121      	str	r1, [r4, #16]
 801b89e:	b913      	cbnz	r3, 801b8a6 <_printf_float+0x16e>
 801b8a0:	6822      	ldr	r2, [r4, #0]
 801b8a2:	07d0      	lsls	r0, r2, #31
 801b8a4:	d502      	bpl.n	801b8ac <_printf_float+0x174>
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	440b      	add	r3, r1
 801b8aa:	6123      	str	r3, [r4, #16]
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	65a1      	str	r1, [r4, #88]	; 0x58
 801b8b0:	9304      	str	r3, [sp, #16]
 801b8b2:	e7de      	b.n	801b872 <_printf_float+0x13a>
 801b8b4:	b913      	cbnz	r3, 801b8bc <_printf_float+0x184>
 801b8b6:	6822      	ldr	r2, [r4, #0]
 801b8b8:	07d2      	lsls	r2, r2, #31
 801b8ba:	d501      	bpl.n	801b8c0 <_printf_float+0x188>
 801b8bc:	3302      	adds	r3, #2
 801b8be:	e7f4      	b.n	801b8aa <_printf_float+0x172>
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	e7f2      	b.n	801b8aa <_printf_float+0x172>
 801b8c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b8c8:	9b08      	ldr	r3, [sp, #32]
 801b8ca:	4299      	cmp	r1, r3
 801b8cc:	db05      	blt.n	801b8da <_printf_float+0x1a2>
 801b8ce:	6823      	ldr	r3, [r4, #0]
 801b8d0:	6121      	str	r1, [r4, #16]
 801b8d2:	07d8      	lsls	r0, r3, #31
 801b8d4:	d5ea      	bpl.n	801b8ac <_printf_float+0x174>
 801b8d6:	1c4b      	adds	r3, r1, #1
 801b8d8:	e7e7      	b.n	801b8aa <_printf_float+0x172>
 801b8da:	2900      	cmp	r1, #0
 801b8dc:	bfd4      	ite	le
 801b8de:	f1c1 0202 	rsble	r2, r1, #2
 801b8e2:	2201      	movgt	r2, #1
 801b8e4:	4413      	add	r3, r2
 801b8e6:	e7e0      	b.n	801b8aa <_printf_float+0x172>
 801b8e8:	6823      	ldr	r3, [r4, #0]
 801b8ea:	055a      	lsls	r2, r3, #21
 801b8ec:	d407      	bmi.n	801b8fe <_printf_float+0x1c6>
 801b8ee:	6923      	ldr	r3, [r4, #16]
 801b8f0:	4642      	mov	r2, r8
 801b8f2:	4631      	mov	r1, r6
 801b8f4:	4628      	mov	r0, r5
 801b8f6:	47b8      	blx	r7
 801b8f8:	3001      	adds	r0, #1
 801b8fa:	d12a      	bne.n	801b952 <_printf_float+0x21a>
 801b8fc:	e76a      	b.n	801b7d4 <_printf_float+0x9c>
 801b8fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b902:	f240 80e2 	bls.w	801baca <_printf_float+0x392>
 801b906:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b90a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b912:	d133      	bne.n	801b97c <_printf_float+0x244>
 801b914:	4a38      	ldr	r2, [pc, #224]	; (801b9f8 <_printf_float+0x2c0>)
 801b916:	2301      	movs	r3, #1
 801b918:	4631      	mov	r1, r6
 801b91a:	4628      	mov	r0, r5
 801b91c:	47b8      	blx	r7
 801b91e:	3001      	adds	r0, #1
 801b920:	f43f af58 	beq.w	801b7d4 <_printf_float+0x9c>
 801b924:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b928:	429a      	cmp	r2, r3
 801b92a:	db02      	blt.n	801b932 <_printf_float+0x1fa>
 801b92c:	6823      	ldr	r3, [r4, #0]
 801b92e:	07d8      	lsls	r0, r3, #31
 801b930:	d50f      	bpl.n	801b952 <_printf_float+0x21a>
 801b932:	4653      	mov	r3, sl
 801b934:	465a      	mov	r2, fp
 801b936:	4631      	mov	r1, r6
 801b938:	4628      	mov	r0, r5
 801b93a:	47b8      	blx	r7
 801b93c:	3001      	adds	r0, #1
 801b93e:	f43f af49 	beq.w	801b7d4 <_printf_float+0x9c>
 801b942:	f04f 0800 	mov.w	r8, #0
 801b946:	f104 091a 	add.w	r9, r4, #26
 801b94a:	9b08      	ldr	r3, [sp, #32]
 801b94c:	3b01      	subs	r3, #1
 801b94e:	4543      	cmp	r3, r8
 801b950:	dc09      	bgt.n	801b966 <_printf_float+0x22e>
 801b952:	6823      	ldr	r3, [r4, #0]
 801b954:	079b      	lsls	r3, r3, #30
 801b956:	f100 8108 	bmi.w	801bb6a <_printf_float+0x432>
 801b95a:	68e0      	ldr	r0, [r4, #12]
 801b95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b95e:	4298      	cmp	r0, r3
 801b960:	bfb8      	it	lt
 801b962:	4618      	movlt	r0, r3
 801b964:	e738      	b.n	801b7d8 <_printf_float+0xa0>
 801b966:	2301      	movs	r3, #1
 801b968:	464a      	mov	r2, r9
 801b96a:	4631      	mov	r1, r6
 801b96c:	4628      	mov	r0, r5
 801b96e:	47b8      	blx	r7
 801b970:	3001      	adds	r0, #1
 801b972:	f43f af2f 	beq.w	801b7d4 <_printf_float+0x9c>
 801b976:	f108 0801 	add.w	r8, r8, #1
 801b97a:	e7e6      	b.n	801b94a <_printf_float+0x212>
 801b97c:	9b07      	ldr	r3, [sp, #28]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	dc3c      	bgt.n	801b9fc <_printf_float+0x2c4>
 801b982:	4a1d      	ldr	r2, [pc, #116]	; (801b9f8 <_printf_float+0x2c0>)
 801b984:	2301      	movs	r3, #1
 801b986:	4631      	mov	r1, r6
 801b988:	4628      	mov	r0, r5
 801b98a:	47b8      	blx	r7
 801b98c:	3001      	adds	r0, #1
 801b98e:	f43f af21 	beq.w	801b7d4 <_printf_float+0x9c>
 801b992:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b996:	4313      	orrs	r3, r2
 801b998:	d102      	bne.n	801b9a0 <_printf_float+0x268>
 801b99a:	6823      	ldr	r3, [r4, #0]
 801b99c:	07d9      	lsls	r1, r3, #31
 801b99e:	d5d8      	bpl.n	801b952 <_printf_float+0x21a>
 801b9a0:	4653      	mov	r3, sl
 801b9a2:	465a      	mov	r2, fp
 801b9a4:	4631      	mov	r1, r6
 801b9a6:	4628      	mov	r0, r5
 801b9a8:	47b8      	blx	r7
 801b9aa:	3001      	adds	r0, #1
 801b9ac:	f43f af12 	beq.w	801b7d4 <_printf_float+0x9c>
 801b9b0:	f04f 0900 	mov.w	r9, #0
 801b9b4:	f104 0a1a 	add.w	sl, r4, #26
 801b9b8:	9b07      	ldr	r3, [sp, #28]
 801b9ba:	425b      	negs	r3, r3
 801b9bc:	454b      	cmp	r3, r9
 801b9be:	dc01      	bgt.n	801b9c4 <_printf_float+0x28c>
 801b9c0:	9b08      	ldr	r3, [sp, #32]
 801b9c2:	e795      	b.n	801b8f0 <_printf_float+0x1b8>
 801b9c4:	2301      	movs	r3, #1
 801b9c6:	4652      	mov	r2, sl
 801b9c8:	4631      	mov	r1, r6
 801b9ca:	4628      	mov	r0, r5
 801b9cc:	47b8      	blx	r7
 801b9ce:	3001      	adds	r0, #1
 801b9d0:	f43f af00 	beq.w	801b7d4 <_printf_float+0x9c>
 801b9d4:	f109 0901 	add.w	r9, r9, #1
 801b9d8:	e7ee      	b.n	801b9b8 <_printf_float+0x280>
 801b9da:	bf00      	nop
 801b9dc:	f3af 8000 	nop.w
 801b9e0:	ffffffff 	.word	0xffffffff
 801b9e4:	7fefffff 	.word	0x7fefffff
 801b9e8:	0803d3b0 	.word	0x0803d3b0
 801b9ec:	0803d3b4 	.word	0x0803d3b4
 801b9f0:	0803d3bc 	.word	0x0803d3bc
 801b9f4:	0803d3b8 	.word	0x0803d3b8
 801b9f8:	0803d3c0 	.word	0x0803d3c0
 801b9fc:	9a08      	ldr	r2, [sp, #32]
 801b9fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ba00:	429a      	cmp	r2, r3
 801ba02:	bfa8      	it	ge
 801ba04:	461a      	movge	r2, r3
 801ba06:	2a00      	cmp	r2, #0
 801ba08:	4691      	mov	r9, r2
 801ba0a:	dc38      	bgt.n	801ba7e <_printf_float+0x346>
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	9305      	str	r3, [sp, #20]
 801ba10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ba14:	f104 021a 	add.w	r2, r4, #26
 801ba18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ba1a:	9905      	ldr	r1, [sp, #20]
 801ba1c:	9304      	str	r3, [sp, #16]
 801ba1e:	eba3 0309 	sub.w	r3, r3, r9
 801ba22:	428b      	cmp	r3, r1
 801ba24:	dc33      	bgt.n	801ba8e <_printf_float+0x356>
 801ba26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	db3c      	blt.n	801baa8 <_printf_float+0x370>
 801ba2e:	6823      	ldr	r3, [r4, #0]
 801ba30:	07da      	lsls	r2, r3, #31
 801ba32:	d439      	bmi.n	801baa8 <_printf_float+0x370>
 801ba34:	9b08      	ldr	r3, [sp, #32]
 801ba36:	9a04      	ldr	r2, [sp, #16]
 801ba38:	9907      	ldr	r1, [sp, #28]
 801ba3a:	1a9a      	subs	r2, r3, r2
 801ba3c:	eba3 0901 	sub.w	r9, r3, r1
 801ba40:	4591      	cmp	r9, r2
 801ba42:	bfa8      	it	ge
 801ba44:	4691      	movge	r9, r2
 801ba46:	f1b9 0f00 	cmp.w	r9, #0
 801ba4a:	dc35      	bgt.n	801bab8 <_printf_float+0x380>
 801ba4c:	f04f 0800 	mov.w	r8, #0
 801ba50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ba54:	f104 0a1a 	add.w	sl, r4, #26
 801ba58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ba5c:	1a9b      	subs	r3, r3, r2
 801ba5e:	eba3 0309 	sub.w	r3, r3, r9
 801ba62:	4543      	cmp	r3, r8
 801ba64:	f77f af75 	ble.w	801b952 <_printf_float+0x21a>
 801ba68:	2301      	movs	r3, #1
 801ba6a:	4652      	mov	r2, sl
 801ba6c:	4631      	mov	r1, r6
 801ba6e:	4628      	mov	r0, r5
 801ba70:	47b8      	blx	r7
 801ba72:	3001      	adds	r0, #1
 801ba74:	f43f aeae 	beq.w	801b7d4 <_printf_float+0x9c>
 801ba78:	f108 0801 	add.w	r8, r8, #1
 801ba7c:	e7ec      	b.n	801ba58 <_printf_float+0x320>
 801ba7e:	4613      	mov	r3, r2
 801ba80:	4631      	mov	r1, r6
 801ba82:	4642      	mov	r2, r8
 801ba84:	4628      	mov	r0, r5
 801ba86:	47b8      	blx	r7
 801ba88:	3001      	adds	r0, #1
 801ba8a:	d1bf      	bne.n	801ba0c <_printf_float+0x2d4>
 801ba8c:	e6a2      	b.n	801b7d4 <_printf_float+0x9c>
 801ba8e:	2301      	movs	r3, #1
 801ba90:	4631      	mov	r1, r6
 801ba92:	4628      	mov	r0, r5
 801ba94:	9204      	str	r2, [sp, #16]
 801ba96:	47b8      	blx	r7
 801ba98:	3001      	adds	r0, #1
 801ba9a:	f43f ae9b 	beq.w	801b7d4 <_printf_float+0x9c>
 801ba9e:	9b05      	ldr	r3, [sp, #20]
 801baa0:	9a04      	ldr	r2, [sp, #16]
 801baa2:	3301      	adds	r3, #1
 801baa4:	9305      	str	r3, [sp, #20]
 801baa6:	e7b7      	b.n	801ba18 <_printf_float+0x2e0>
 801baa8:	4653      	mov	r3, sl
 801baaa:	465a      	mov	r2, fp
 801baac:	4631      	mov	r1, r6
 801baae:	4628      	mov	r0, r5
 801bab0:	47b8      	blx	r7
 801bab2:	3001      	adds	r0, #1
 801bab4:	d1be      	bne.n	801ba34 <_printf_float+0x2fc>
 801bab6:	e68d      	b.n	801b7d4 <_printf_float+0x9c>
 801bab8:	9a04      	ldr	r2, [sp, #16]
 801baba:	464b      	mov	r3, r9
 801babc:	4442      	add	r2, r8
 801babe:	4631      	mov	r1, r6
 801bac0:	4628      	mov	r0, r5
 801bac2:	47b8      	blx	r7
 801bac4:	3001      	adds	r0, #1
 801bac6:	d1c1      	bne.n	801ba4c <_printf_float+0x314>
 801bac8:	e684      	b.n	801b7d4 <_printf_float+0x9c>
 801baca:	9a08      	ldr	r2, [sp, #32]
 801bacc:	2a01      	cmp	r2, #1
 801bace:	dc01      	bgt.n	801bad4 <_printf_float+0x39c>
 801bad0:	07db      	lsls	r3, r3, #31
 801bad2:	d537      	bpl.n	801bb44 <_printf_float+0x40c>
 801bad4:	2301      	movs	r3, #1
 801bad6:	4642      	mov	r2, r8
 801bad8:	4631      	mov	r1, r6
 801bada:	4628      	mov	r0, r5
 801badc:	47b8      	blx	r7
 801bade:	3001      	adds	r0, #1
 801bae0:	f43f ae78 	beq.w	801b7d4 <_printf_float+0x9c>
 801bae4:	4653      	mov	r3, sl
 801bae6:	465a      	mov	r2, fp
 801bae8:	4631      	mov	r1, r6
 801baea:	4628      	mov	r0, r5
 801baec:	47b8      	blx	r7
 801baee:	3001      	adds	r0, #1
 801baf0:	f43f ae70 	beq.w	801b7d4 <_printf_float+0x9c>
 801baf4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801baf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb00:	d01b      	beq.n	801bb3a <_printf_float+0x402>
 801bb02:	9b08      	ldr	r3, [sp, #32]
 801bb04:	f108 0201 	add.w	r2, r8, #1
 801bb08:	3b01      	subs	r3, #1
 801bb0a:	4631      	mov	r1, r6
 801bb0c:	4628      	mov	r0, r5
 801bb0e:	47b8      	blx	r7
 801bb10:	3001      	adds	r0, #1
 801bb12:	d10e      	bne.n	801bb32 <_printf_float+0x3fa>
 801bb14:	e65e      	b.n	801b7d4 <_printf_float+0x9c>
 801bb16:	2301      	movs	r3, #1
 801bb18:	464a      	mov	r2, r9
 801bb1a:	4631      	mov	r1, r6
 801bb1c:	4628      	mov	r0, r5
 801bb1e:	47b8      	blx	r7
 801bb20:	3001      	adds	r0, #1
 801bb22:	f43f ae57 	beq.w	801b7d4 <_printf_float+0x9c>
 801bb26:	f108 0801 	add.w	r8, r8, #1
 801bb2a:	9b08      	ldr	r3, [sp, #32]
 801bb2c:	3b01      	subs	r3, #1
 801bb2e:	4543      	cmp	r3, r8
 801bb30:	dcf1      	bgt.n	801bb16 <_printf_float+0x3de>
 801bb32:	9b04      	ldr	r3, [sp, #16]
 801bb34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bb38:	e6db      	b.n	801b8f2 <_printf_float+0x1ba>
 801bb3a:	f04f 0800 	mov.w	r8, #0
 801bb3e:	f104 091a 	add.w	r9, r4, #26
 801bb42:	e7f2      	b.n	801bb2a <_printf_float+0x3f2>
 801bb44:	2301      	movs	r3, #1
 801bb46:	4642      	mov	r2, r8
 801bb48:	e7df      	b.n	801bb0a <_printf_float+0x3d2>
 801bb4a:	2301      	movs	r3, #1
 801bb4c:	464a      	mov	r2, r9
 801bb4e:	4631      	mov	r1, r6
 801bb50:	4628      	mov	r0, r5
 801bb52:	47b8      	blx	r7
 801bb54:	3001      	adds	r0, #1
 801bb56:	f43f ae3d 	beq.w	801b7d4 <_printf_float+0x9c>
 801bb5a:	f108 0801 	add.w	r8, r8, #1
 801bb5e:	68e3      	ldr	r3, [r4, #12]
 801bb60:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb62:	1a5b      	subs	r3, r3, r1
 801bb64:	4543      	cmp	r3, r8
 801bb66:	dcf0      	bgt.n	801bb4a <_printf_float+0x412>
 801bb68:	e6f7      	b.n	801b95a <_printf_float+0x222>
 801bb6a:	f04f 0800 	mov.w	r8, #0
 801bb6e:	f104 0919 	add.w	r9, r4, #25
 801bb72:	e7f4      	b.n	801bb5e <_printf_float+0x426>

0801bb74 <_printf_common>:
 801bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb78:	4616      	mov	r6, r2
 801bb7a:	4699      	mov	r9, r3
 801bb7c:	688a      	ldr	r2, [r1, #8]
 801bb7e:	690b      	ldr	r3, [r1, #16]
 801bb80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bb84:	4293      	cmp	r3, r2
 801bb86:	bfb8      	it	lt
 801bb88:	4613      	movlt	r3, r2
 801bb8a:	6033      	str	r3, [r6, #0]
 801bb8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bb90:	4607      	mov	r7, r0
 801bb92:	460c      	mov	r4, r1
 801bb94:	b10a      	cbz	r2, 801bb9a <_printf_common+0x26>
 801bb96:	3301      	adds	r3, #1
 801bb98:	6033      	str	r3, [r6, #0]
 801bb9a:	6823      	ldr	r3, [r4, #0]
 801bb9c:	0699      	lsls	r1, r3, #26
 801bb9e:	bf42      	ittt	mi
 801bba0:	6833      	ldrmi	r3, [r6, #0]
 801bba2:	3302      	addmi	r3, #2
 801bba4:	6033      	strmi	r3, [r6, #0]
 801bba6:	6825      	ldr	r5, [r4, #0]
 801bba8:	f015 0506 	ands.w	r5, r5, #6
 801bbac:	d106      	bne.n	801bbbc <_printf_common+0x48>
 801bbae:	f104 0a19 	add.w	sl, r4, #25
 801bbb2:	68e3      	ldr	r3, [r4, #12]
 801bbb4:	6832      	ldr	r2, [r6, #0]
 801bbb6:	1a9b      	subs	r3, r3, r2
 801bbb8:	42ab      	cmp	r3, r5
 801bbba:	dc26      	bgt.n	801bc0a <_printf_common+0x96>
 801bbbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bbc0:	1e13      	subs	r3, r2, #0
 801bbc2:	6822      	ldr	r2, [r4, #0]
 801bbc4:	bf18      	it	ne
 801bbc6:	2301      	movne	r3, #1
 801bbc8:	0692      	lsls	r2, r2, #26
 801bbca:	d42b      	bmi.n	801bc24 <_printf_common+0xb0>
 801bbcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bbd0:	4649      	mov	r1, r9
 801bbd2:	4638      	mov	r0, r7
 801bbd4:	47c0      	blx	r8
 801bbd6:	3001      	adds	r0, #1
 801bbd8:	d01e      	beq.n	801bc18 <_printf_common+0xa4>
 801bbda:	6823      	ldr	r3, [r4, #0]
 801bbdc:	68e5      	ldr	r5, [r4, #12]
 801bbde:	6832      	ldr	r2, [r6, #0]
 801bbe0:	f003 0306 	and.w	r3, r3, #6
 801bbe4:	2b04      	cmp	r3, #4
 801bbe6:	bf08      	it	eq
 801bbe8:	1aad      	subeq	r5, r5, r2
 801bbea:	68a3      	ldr	r3, [r4, #8]
 801bbec:	6922      	ldr	r2, [r4, #16]
 801bbee:	bf0c      	ite	eq
 801bbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bbf4:	2500      	movne	r5, #0
 801bbf6:	4293      	cmp	r3, r2
 801bbf8:	bfc4      	itt	gt
 801bbfa:	1a9b      	subgt	r3, r3, r2
 801bbfc:	18ed      	addgt	r5, r5, r3
 801bbfe:	2600      	movs	r6, #0
 801bc00:	341a      	adds	r4, #26
 801bc02:	42b5      	cmp	r5, r6
 801bc04:	d11a      	bne.n	801bc3c <_printf_common+0xc8>
 801bc06:	2000      	movs	r0, #0
 801bc08:	e008      	b.n	801bc1c <_printf_common+0xa8>
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	4652      	mov	r2, sl
 801bc0e:	4649      	mov	r1, r9
 801bc10:	4638      	mov	r0, r7
 801bc12:	47c0      	blx	r8
 801bc14:	3001      	adds	r0, #1
 801bc16:	d103      	bne.n	801bc20 <_printf_common+0xac>
 801bc18:	f04f 30ff 	mov.w	r0, #4294967295
 801bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc20:	3501      	adds	r5, #1
 801bc22:	e7c6      	b.n	801bbb2 <_printf_common+0x3e>
 801bc24:	18e1      	adds	r1, r4, r3
 801bc26:	1c5a      	adds	r2, r3, #1
 801bc28:	2030      	movs	r0, #48	; 0x30
 801bc2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bc2e:	4422      	add	r2, r4
 801bc30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bc34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bc38:	3302      	adds	r3, #2
 801bc3a:	e7c7      	b.n	801bbcc <_printf_common+0x58>
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	4622      	mov	r2, r4
 801bc40:	4649      	mov	r1, r9
 801bc42:	4638      	mov	r0, r7
 801bc44:	47c0      	blx	r8
 801bc46:	3001      	adds	r0, #1
 801bc48:	d0e6      	beq.n	801bc18 <_printf_common+0xa4>
 801bc4a:	3601      	adds	r6, #1
 801bc4c:	e7d9      	b.n	801bc02 <_printf_common+0x8e>
	...

0801bc50 <_printf_i>:
 801bc50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc54:	7e0f      	ldrb	r7, [r1, #24]
 801bc56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bc58:	2f78      	cmp	r7, #120	; 0x78
 801bc5a:	4691      	mov	r9, r2
 801bc5c:	4680      	mov	r8, r0
 801bc5e:	460c      	mov	r4, r1
 801bc60:	469a      	mov	sl, r3
 801bc62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bc66:	d807      	bhi.n	801bc78 <_printf_i+0x28>
 801bc68:	2f62      	cmp	r7, #98	; 0x62
 801bc6a:	d80a      	bhi.n	801bc82 <_printf_i+0x32>
 801bc6c:	2f00      	cmp	r7, #0
 801bc6e:	f000 80d8 	beq.w	801be22 <_printf_i+0x1d2>
 801bc72:	2f58      	cmp	r7, #88	; 0x58
 801bc74:	f000 80a3 	beq.w	801bdbe <_printf_i+0x16e>
 801bc78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bc7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bc80:	e03a      	b.n	801bcf8 <_printf_i+0xa8>
 801bc82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bc86:	2b15      	cmp	r3, #21
 801bc88:	d8f6      	bhi.n	801bc78 <_printf_i+0x28>
 801bc8a:	a101      	add	r1, pc, #4	; (adr r1, 801bc90 <_printf_i+0x40>)
 801bc8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bc90:	0801bce9 	.word	0x0801bce9
 801bc94:	0801bcfd 	.word	0x0801bcfd
 801bc98:	0801bc79 	.word	0x0801bc79
 801bc9c:	0801bc79 	.word	0x0801bc79
 801bca0:	0801bc79 	.word	0x0801bc79
 801bca4:	0801bc79 	.word	0x0801bc79
 801bca8:	0801bcfd 	.word	0x0801bcfd
 801bcac:	0801bc79 	.word	0x0801bc79
 801bcb0:	0801bc79 	.word	0x0801bc79
 801bcb4:	0801bc79 	.word	0x0801bc79
 801bcb8:	0801bc79 	.word	0x0801bc79
 801bcbc:	0801be09 	.word	0x0801be09
 801bcc0:	0801bd2d 	.word	0x0801bd2d
 801bcc4:	0801bdeb 	.word	0x0801bdeb
 801bcc8:	0801bc79 	.word	0x0801bc79
 801bccc:	0801bc79 	.word	0x0801bc79
 801bcd0:	0801be2b 	.word	0x0801be2b
 801bcd4:	0801bc79 	.word	0x0801bc79
 801bcd8:	0801bd2d 	.word	0x0801bd2d
 801bcdc:	0801bc79 	.word	0x0801bc79
 801bce0:	0801bc79 	.word	0x0801bc79
 801bce4:	0801bdf3 	.word	0x0801bdf3
 801bce8:	682b      	ldr	r3, [r5, #0]
 801bcea:	1d1a      	adds	r2, r3, #4
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	602a      	str	r2, [r5, #0]
 801bcf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bcf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bcf8:	2301      	movs	r3, #1
 801bcfa:	e0a3      	b.n	801be44 <_printf_i+0x1f4>
 801bcfc:	6820      	ldr	r0, [r4, #0]
 801bcfe:	6829      	ldr	r1, [r5, #0]
 801bd00:	0606      	lsls	r6, r0, #24
 801bd02:	f101 0304 	add.w	r3, r1, #4
 801bd06:	d50a      	bpl.n	801bd1e <_printf_i+0xce>
 801bd08:	680e      	ldr	r6, [r1, #0]
 801bd0a:	602b      	str	r3, [r5, #0]
 801bd0c:	2e00      	cmp	r6, #0
 801bd0e:	da03      	bge.n	801bd18 <_printf_i+0xc8>
 801bd10:	232d      	movs	r3, #45	; 0x2d
 801bd12:	4276      	negs	r6, r6
 801bd14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd18:	485e      	ldr	r0, [pc, #376]	; (801be94 <_printf_i+0x244>)
 801bd1a:	230a      	movs	r3, #10
 801bd1c:	e019      	b.n	801bd52 <_printf_i+0x102>
 801bd1e:	680e      	ldr	r6, [r1, #0]
 801bd20:	602b      	str	r3, [r5, #0]
 801bd22:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bd26:	bf18      	it	ne
 801bd28:	b236      	sxthne	r6, r6
 801bd2a:	e7ef      	b.n	801bd0c <_printf_i+0xbc>
 801bd2c:	682b      	ldr	r3, [r5, #0]
 801bd2e:	6820      	ldr	r0, [r4, #0]
 801bd30:	1d19      	adds	r1, r3, #4
 801bd32:	6029      	str	r1, [r5, #0]
 801bd34:	0601      	lsls	r1, r0, #24
 801bd36:	d501      	bpl.n	801bd3c <_printf_i+0xec>
 801bd38:	681e      	ldr	r6, [r3, #0]
 801bd3a:	e002      	b.n	801bd42 <_printf_i+0xf2>
 801bd3c:	0646      	lsls	r6, r0, #25
 801bd3e:	d5fb      	bpl.n	801bd38 <_printf_i+0xe8>
 801bd40:	881e      	ldrh	r6, [r3, #0]
 801bd42:	4854      	ldr	r0, [pc, #336]	; (801be94 <_printf_i+0x244>)
 801bd44:	2f6f      	cmp	r7, #111	; 0x6f
 801bd46:	bf0c      	ite	eq
 801bd48:	2308      	moveq	r3, #8
 801bd4a:	230a      	movne	r3, #10
 801bd4c:	2100      	movs	r1, #0
 801bd4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bd52:	6865      	ldr	r5, [r4, #4]
 801bd54:	60a5      	str	r5, [r4, #8]
 801bd56:	2d00      	cmp	r5, #0
 801bd58:	bfa2      	ittt	ge
 801bd5a:	6821      	ldrge	r1, [r4, #0]
 801bd5c:	f021 0104 	bicge.w	r1, r1, #4
 801bd60:	6021      	strge	r1, [r4, #0]
 801bd62:	b90e      	cbnz	r6, 801bd68 <_printf_i+0x118>
 801bd64:	2d00      	cmp	r5, #0
 801bd66:	d04d      	beq.n	801be04 <_printf_i+0x1b4>
 801bd68:	4615      	mov	r5, r2
 801bd6a:	fbb6 f1f3 	udiv	r1, r6, r3
 801bd6e:	fb03 6711 	mls	r7, r3, r1, r6
 801bd72:	5dc7      	ldrb	r7, [r0, r7]
 801bd74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bd78:	4637      	mov	r7, r6
 801bd7a:	42bb      	cmp	r3, r7
 801bd7c:	460e      	mov	r6, r1
 801bd7e:	d9f4      	bls.n	801bd6a <_printf_i+0x11a>
 801bd80:	2b08      	cmp	r3, #8
 801bd82:	d10b      	bne.n	801bd9c <_printf_i+0x14c>
 801bd84:	6823      	ldr	r3, [r4, #0]
 801bd86:	07de      	lsls	r6, r3, #31
 801bd88:	d508      	bpl.n	801bd9c <_printf_i+0x14c>
 801bd8a:	6923      	ldr	r3, [r4, #16]
 801bd8c:	6861      	ldr	r1, [r4, #4]
 801bd8e:	4299      	cmp	r1, r3
 801bd90:	bfde      	ittt	le
 801bd92:	2330      	movle	r3, #48	; 0x30
 801bd94:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bd98:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bd9c:	1b52      	subs	r2, r2, r5
 801bd9e:	6122      	str	r2, [r4, #16]
 801bda0:	f8cd a000 	str.w	sl, [sp]
 801bda4:	464b      	mov	r3, r9
 801bda6:	aa03      	add	r2, sp, #12
 801bda8:	4621      	mov	r1, r4
 801bdaa:	4640      	mov	r0, r8
 801bdac:	f7ff fee2 	bl	801bb74 <_printf_common>
 801bdb0:	3001      	adds	r0, #1
 801bdb2:	d14c      	bne.n	801be4e <_printf_i+0x1fe>
 801bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 801bdb8:	b004      	add	sp, #16
 801bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdbe:	4835      	ldr	r0, [pc, #212]	; (801be94 <_printf_i+0x244>)
 801bdc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bdc4:	6829      	ldr	r1, [r5, #0]
 801bdc6:	6823      	ldr	r3, [r4, #0]
 801bdc8:	f851 6b04 	ldr.w	r6, [r1], #4
 801bdcc:	6029      	str	r1, [r5, #0]
 801bdce:	061d      	lsls	r5, r3, #24
 801bdd0:	d514      	bpl.n	801bdfc <_printf_i+0x1ac>
 801bdd2:	07df      	lsls	r7, r3, #31
 801bdd4:	bf44      	itt	mi
 801bdd6:	f043 0320 	orrmi.w	r3, r3, #32
 801bdda:	6023      	strmi	r3, [r4, #0]
 801bddc:	b91e      	cbnz	r6, 801bde6 <_printf_i+0x196>
 801bdde:	6823      	ldr	r3, [r4, #0]
 801bde0:	f023 0320 	bic.w	r3, r3, #32
 801bde4:	6023      	str	r3, [r4, #0]
 801bde6:	2310      	movs	r3, #16
 801bde8:	e7b0      	b.n	801bd4c <_printf_i+0xfc>
 801bdea:	6823      	ldr	r3, [r4, #0]
 801bdec:	f043 0320 	orr.w	r3, r3, #32
 801bdf0:	6023      	str	r3, [r4, #0]
 801bdf2:	2378      	movs	r3, #120	; 0x78
 801bdf4:	4828      	ldr	r0, [pc, #160]	; (801be98 <_printf_i+0x248>)
 801bdf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bdfa:	e7e3      	b.n	801bdc4 <_printf_i+0x174>
 801bdfc:	0659      	lsls	r1, r3, #25
 801bdfe:	bf48      	it	mi
 801be00:	b2b6      	uxthmi	r6, r6
 801be02:	e7e6      	b.n	801bdd2 <_printf_i+0x182>
 801be04:	4615      	mov	r5, r2
 801be06:	e7bb      	b.n	801bd80 <_printf_i+0x130>
 801be08:	682b      	ldr	r3, [r5, #0]
 801be0a:	6826      	ldr	r6, [r4, #0]
 801be0c:	6961      	ldr	r1, [r4, #20]
 801be0e:	1d18      	adds	r0, r3, #4
 801be10:	6028      	str	r0, [r5, #0]
 801be12:	0635      	lsls	r5, r6, #24
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	d501      	bpl.n	801be1c <_printf_i+0x1cc>
 801be18:	6019      	str	r1, [r3, #0]
 801be1a:	e002      	b.n	801be22 <_printf_i+0x1d2>
 801be1c:	0670      	lsls	r0, r6, #25
 801be1e:	d5fb      	bpl.n	801be18 <_printf_i+0x1c8>
 801be20:	8019      	strh	r1, [r3, #0]
 801be22:	2300      	movs	r3, #0
 801be24:	6123      	str	r3, [r4, #16]
 801be26:	4615      	mov	r5, r2
 801be28:	e7ba      	b.n	801bda0 <_printf_i+0x150>
 801be2a:	682b      	ldr	r3, [r5, #0]
 801be2c:	1d1a      	adds	r2, r3, #4
 801be2e:	602a      	str	r2, [r5, #0]
 801be30:	681d      	ldr	r5, [r3, #0]
 801be32:	6862      	ldr	r2, [r4, #4]
 801be34:	2100      	movs	r1, #0
 801be36:	4628      	mov	r0, r5
 801be38:	f7e4 fa5a 	bl	80002f0 <memchr>
 801be3c:	b108      	cbz	r0, 801be42 <_printf_i+0x1f2>
 801be3e:	1b40      	subs	r0, r0, r5
 801be40:	6060      	str	r0, [r4, #4]
 801be42:	6863      	ldr	r3, [r4, #4]
 801be44:	6123      	str	r3, [r4, #16]
 801be46:	2300      	movs	r3, #0
 801be48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801be4c:	e7a8      	b.n	801bda0 <_printf_i+0x150>
 801be4e:	6923      	ldr	r3, [r4, #16]
 801be50:	462a      	mov	r2, r5
 801be52:	4649      	mov	r1, r9
 801be54:	4640      	mov	r0, r8
 801be56:	47d0      	blx	sl
 801be58:	3001      	adds	r0, #1
 801be5a:	d0ab      	beq.n	801bdb4 <_printf_i+0x164>
 801be5c:	6823      	ldr	r3, [r4, #0]
 801be5e:	079b      	lsls	r3, r3, #30
 801be60:	d413      	bmi.n	801be8a <_printf_i+0x23a>
 801be62:	68e0      	ldr	r0, [r4, #12]
 801be64:	9b03      	ldr	r3, [sp, #12]
 801be66:	4298      	cmp	r0, r3
 801be68:	bfb8      	it	lt
 801be6a:	4618      	movlt	r0, r3
 801be6c:	e7a4      	b.n	801bdb8 <_printf_i+0x168>
 801be6e:	2301      	movs	r3, #1
 801be70:	4632      	mov	r2, r6
 801be72:	4649      	mov	r1, r9
 801be74:	4640      	mov	r0, r8
 801be76:	47d0      	blx	sl
 801be78:	3001      	adds	r0, #1
 801be7a:	d09b      	beq.n	801bdb4 <_printf_i+0x164>
 801be7c:	3501      	adds	r5, #1
 801be7e:	68e3      	ldr	r3, [r4, #12]
 801be80:	9903      	ldr	r1, [sp, #12]
 801be82:	1a5b      	subs	r3, r3, r1
 801be84:	42ab      	cmp	r3, r5
 801be86:	dcf2      	bgt.n	801be6e <_printf_i+0x21e>
 801be88:	e7eb      	b.n	801be62 <_printf_i+0x212>
 801be8a:	2500      	movs	r5, #0
 801be8c:	f104 0619 	add.w	r6, r4, #25
 801be90:	e7f5      	b.n	801be7e <_printf_i+0x22e>
 801be92:	bf00      	nop
 801be94:	0803d3c2 	.word	0x0803d3c2
 801be98:	0803d3d3 	.word	0x0803d3d3

0801be9c <_sbrk_r>:
 801be9c:	b538      	push	{r3, r4, r5, lr}
 801be9e:	4d06      	ldr	r5, [pc, #24]	; (801beb8 <_sbrk_r+0x1c>)
 801bea0:	2300      	movs	r3, #0
 801bea2:	4604      	mov	r4, r0
 801bea4:	4608      	mov	r0, r1
 801bea6:	602b      	str	r3, [r5, #0]
 801bea8:	f7e8 fb34 	bl	8004514 <_sbrk>
 801beac:	1c43      	adds	r3, r0, #1
 801beae:	d102      	bne.n	801beb6 <_sbrk_r+0x1a>
 801beb0:	682b      	ldr	r3, [r5, #0]
 801beb2:	b103      	cbz	r3, 801beb6 <_sbrk_r+0x1a>
 801beb4:	6023      	str	r3, [r4, #0]
 801beb6:	bd38      	pop	{r3, r4, r5, pc}
 801beb8:	2407f6d8 	.word	0x2407f6d8

0801bebc <_raise_r>:
 801bebc:	291f      	cmp	r1, #31
 801bebe:	b538      	push	{r3, r4, r5, lr}
 801bec0:	4604      	mov	r4, r0
 801bec2:	460d      	mov	r5, r1
 801bec4:	d904      	bls.n	801bed0 <_raise_r+0x14>
 801bec6:	2316      	movs	r3, #22
 801bec8:	6003      	str	r3, [r0, #0]
 801beca:	f04f 30ff 	mov.w	r0, #4294967295
 801bece:	bd38      	pop	{r3, r4, r5, pc}
 801bed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bed2:	b112      	cbz	r2, 801beda <_raise_r+0x1e>
 801bed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bed8:	b94b      	cbnz	r3, 801beee <_raise_r+0x32>
 801beda:	4620      	mov	r0, r4
 801bedc:	f000 f830 	bl	801bf40 <_getpid_r>
 801bee0:	462a      	mov	r2, r5
 801bee2:	4601      	mov	r1, r0
 801bee4:	4620      	mov	r0, r4
 801bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801beea:	f000 b817 	b.w	801bf1c <_kill_r>
 801beee:	2b01      	cmp	r3, #1
 801bef0:	d00a      	beq.n	801bf08 <_raise_r+0x4c>
 801bef2:	1c59      	adds	r1, r3, #1
 801bef4:	d103      	bne.n	801befe <_raise_r+0x42>
 801bef6:	2316      	movs	r3, #22
 801bef8:	6003      	str	r3, [r0, #0]
 801befa:	2001      	movs	r0, #1
 801befc:	e7e7      	b.n	801bece <_raise_r+0x12>
 801befe:	2400      	movs	r4, #0
 801bf00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bf04:	4628      	mov	r0, r5
 801bf06:	4798      	blx	r3
 801bf08:	2000      	movs	r0, #0
 801bf0a:	e7e0      	b.n	801bece <_raise_r+0x12>

0801bf0c <raise>:
 801bf0c:	4b02      	ldr	r3, [pc, #8]	; (801bf18 <raise+0xc>)
 801bf0e:	4601      	mov	r1, r0
 801bf10:	6818      	ldr	r0, [r3, #0]
 801bf12:	f7ff bfd3 	b.w	801bebc <_raise_r>
 801bf16:	bf00      	nop
 801bf18:	240000a8 	.word	0x240000a8

0801bf1c <_kill_r>:
 801bf1c:	b538      	push	{r3, r4, r5, lr}
 801bf1e:	4d07      	ldr	r5, [pc, #28]	; (801bf3c <_kill_r+0x20>)
 801bf20:	2300      	movs	r3, #0
 801bf22:	4604      	mov	r4, r0
 801bf24:	4608      	mov	r0, r1
 801bf26:	4611      	mov	r1, r2
 801bf28:	602b      	str	r3, [r5, #0]
 801bf2a:	f7e8 fa6b 	bl	8004404 <_kill>
 801bf2e:	1c43      	adds	r3, r0, #1
 801bf30:	d102      	bne.n	801bf38 <_kill_r+0x1c>
 801bf32:	682b      	ldr	r3, [r5, #0]
 801bf34:	b103      	cbz	r3, 801bf38 <_kill_r+0x1c>
 801bf36:	6023      	str	r3, [r4, #0]
 801bf38:	bd38      	pop	{r3, r4, r5, pc}
 801bf3a:	bf00      	nop
 801bf3c:	2407f6d8 	.word	0x2407f6d8

0801bf40 <_getpid_r>:
 801bf40:	f7e8 ba58 	b.w	80043f4 <_getpid>

0801bf44 <quorem>:
 801bf44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf48:	6903      	ldr	r3, [r0, #16]
 801bf4a:	690c      	ldr	r4, [r1, #16]
 801bf4c:	42a3      	cmp	r3, r4
 801bf4e:	4607      	mov	r7, r0
 801bf50:	f2c0 8081 	blt.w	801c056 <quorem+0x112>
 801bf54:	3c01      	subs	r4, #1
 801bf56:	f101 0814 	add.w	r8, r1, #20
 801bf5a:	f100 0514 	add.w	r5, r0, #20
 801bf5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bf62:	9301      	str	r3, [sp, #4]
 801bf64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bf68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bf6c:	3301      	adds	r3, #1
 801bf6e:	429a      	cmp	r2, r3
 801bf70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bf74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bf78:	fbb2 f6f3 	udiv	r6, r2, r3
 801bf7c:	d331      	bcc.n	801bfe2 <quorem+0x9e>
 801bf7e:	f04f 0e00 	mov.w	lr, #0
 801bf82:	4640      	mov	r0, r8
 801bf84:	46ac      	mov	ip, r5
 801bf86:	46f2      	mov	sl, lr
 801bf88:	f850 2b04 	ldr.w	r2, [r0], #4
 801bf8c:	b293      	uxth	r3, r2
 801bf8e:	fb06 e303 	mla	r3, r6, r3, lr
 801bf92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801bf96:	b29b      	uxth	r3, r3
 801bf98:	ebaa 0303 	sub.w	r3, sl, r3
 801bf9c:	f8dc a000 	ldr.w	sl, [ip]
 801bfa0:	0c12      	lsrs	r2, r2, #16
 801bfa2:	fa13 f38a 	uxtah	r3, r3, sl
 801bfa6:	fb06 e202 	mla	r2, r6, r2, lr
 801bfaa:	9300      	str	r3, [sp, #0]
 801bfac:	9b00      	ldr	r3, [sp, #0]
 801bfae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bfb2:	b292      	uxth	r2, r2
 801bfb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bfb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bfbc:	f8bd 3000 	ldrh.w	r3, [sp]
 801bfc0:	4581      	cmp	r9, r0
 801bfc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bfc6:	f84c 3b04 	str.w	r3, [ip], #4
 801bfca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bfce:	d2db      	bcs.n	801bf88 <quorem+0x44>
 801bfd0:	f855 300b 	ldr.w	r3, [r5, fp]
 801bfd4:	b92b      	cbnz	r3, 801bfe2 <quorem+0x9e>
 801bfd6:	9b01      	ldr	r3, [sp, #4]
 801bfd8:	3b04      	subs	r3, #4
 801bfda:	429d      	cmp	r5, r3
 801bfdc:	461a      	mov	r2, r3
 801bfde:	d32e      	bcc.n	801c03e <quorem+0xfa>
 801bfe0:	613c      	str	r4, [r7, #16]
 801bfe2:	4638      	mov	r0, r7
 801bfe4:	f001 f936 	bl	801d254 <__mcmp>
 801bfe8:	2800      	cmp	r0, #0
 801bfea:	db24      	blt.n	801c036 <quorem+0xf2>
 801bfec:	3601      	adds	r6, #1
 801bfee:	4628      	mov	r0, r5
 801bff0:	f04f 0c00 	mov.w	ip, #0
 801bff4:	f858 2b04 	ldr.w	r2, [r8], #4
 801bff8:	f8d0 e000 	ldr.w	lr, [r0]
 801bffc:	b293      	uxth	r3, r2
 801bffe:	ebac 0303 	sub.w	r3, ip, r3
 801c002:	0c12      	lsrs	r2, r2, #16
 801c004:	fa13 f38e 	uxtah	r3, r3, lr
 801c008:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c010:	b29b      	uxth	r3, r3
 801c012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c016:	45c1      	cmp	r9, r8
 801c018:	f840 3b04 	str.w	r3, [r0], #4
 801c01c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c020:	d2e8      	bcs.n	801bff4 <quorem+0xb0>
 801c022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c02a:	b922      	cbnz	r2, 801c036 <quorem+0xf2>
 801c02c:	3b04      	subs	r3, #4
 801c02e:	429d      	cmp	r5, r3
 801c030:	461a      	mov	r2, r3
 801c032:	d30a      	bcc.n	801c04a <quorem+0x106>
 801c034:	613c      	str	r4, [r7, #16]
 801c036:	4630      	mov	r0, r6
 801c038:	b003      	add	sp, #12
 801c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c03e:	6812      	ldr	r2, [r2, #0]
 801c040:	3b04      	subs	r3, #4
 801c042:	2a00      	cmp	r2, #0
 801c044:	d1cc      	bne.n	801bfe0 <quorem+0x9c>
 801c046:	3c01      	subs	r4, #1
 801c048:	e7c7      	b.n	801bfda <quorem+0x96>
 801c04a:	6812      	ldr	r2, [r2, #0]
 801c04c:	3b04      	subs	r3, #4
 801c04e:	2a00      	cmp	r2, #0
 801c050:	d1f0      	bne.n	801c034 <quorem+0xf0>
 801c052:	3c01      	subs	r4, #1
 801c054:	e7eb      	b.n	801c02e <quorem+0xea>
 801c056:	2000      	movs	r0, #0
 801c058:	e7ee      	b.n	801c038 <quorem+0xf4>
 801c05a:	0000      	movs	r0, r0
 801c05c:	0000      	movs	r0, r0
	...

0801c060 <_dtoa_r>:
 801c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c064:	ed2d 8b02 	vpush	{d8}
 801c068:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c06a:	b091      	sub	sp, #68	; 0x44
 801c06c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c070:	ec59 8b10 	vmov	r8, r9, d0
 801c074:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c076:	9106      	str	r1, [sp, #24]
 801c078:	4606      	mov	r6, r0
 801c07a:	9208      	str	r2, [sp, #32]
 801c07c:	930c      	str	r3, [sp, #48]	; 0x30
 801c07e:	b975      	cbnz	r5, 801c09e <_dtoa_r+0x3e>
 801c080:	2010      	movs	r0, #16
 801c082:	f7ff f9c3 	bl	801b40c <malloc>
 801c086:	4602      	mov	r2, r0
 801c088:	6270      	str	r0, [r6, #36]	; 0x24
 801c08a:	b920      	cbnz	r0, 801c096 <_dtoa_r+0x36>
 801c08c:	4baa      	ldr	r3, [pc, #680]	; (801c338 <_dtoa_r+0x2d8>)
 801c08e:	21ea      	movs	r1, #234	; 0xea
 801c090:	48aa      	ldr	r0, [pc, #680]	; (801c33c <_dtoa_r+0x2dc>)
 801c092:	f001 fc67 	bl	801d964 <__assert_func>
 801c096:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c09a:	6005      	str	r5, [r0, #0]
 801c09c:	60c5      	str	r5, [r0, #12]
 801c09e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c0a0:	6819      	ldr	r1, [r3, #0]
 801c0a2:	b151      	cbz	r1, 801c0ba <_dtoa_r+0x5a>
 801c0a4:	685a      	ldr	r2, [r3, #4]
 801c0a6:	604a      	str	r2, [r1, #4]
 801c0a8:	2301      	movs	r3, #1
 801c0aa:	4093      	lsls	r3, r2
 801c0ac:	608b      	str	r3, [r1, #8]
 801c0ae:	4630      	mov	r0, r6
 801c0b0:	f000 fe8e 	bl	801cdd0 <_Bfree>
 801c0b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	601a      	str	r2, [r3, #0]
 801c0ba:	f1b9 0300 	subs.w	r3, r9, #0
 801c0be:	bfbb      	ittet	lt
 801c0c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c0c4:	9303      	strlt	r3, [sp, #12]
 801c0c6:	2300      	movge	r3, #0
 801c0c8:	2201      	movlt	r2, #1
 801c0ca:	bfac      	ite	ge
 801c0cc:	6023      	strge	r3, [r4, #0]
 801c0ce:	6022      	strlt	r2, [r4, #0]
 801c0d0:	4b9b      	ldr	r3, [pc, #620]	; (801c340 <_dtoa_r+0x2e0>)
 801c0d2:	9c03      	ldr	r4, [sp, #12]
 801c0d4:	43a3      	bics	r3, r4
 801c0d6:	d11c      	bne.n	801c112 <_dtoa_r+0xb2>
 801c0d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c0da:	f242 730f 	movw	r3, #9999	; 0x270f
 801c0de:	6013      	str	r3, [r2, #0]
 801c0e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c0e4:	ea53 0308 	orrs.w	r3, r3, r8
 801c0e8:	f000 84fd 	beq.w	801cae6 <_dtoa_r+0xa86>
 801c0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0ee:	b963      	cbnz	r3, 801c10a <_dtoa_r+0xaa>
 801c0f0:	4b94      	ldr	r3, [pc, #592]	; (801c344 <_dtoa_r+0x2e4>)
 801c0f2:	e01f      	b.n	801c134 <_dtoa_r+0xd4>
 801c0f4:	4b94      	ldr	r3, [pc, #592]	; (801c348 <_dtoa_r+0x2e8>)
 801c0f6:	9301      	str	r3, [sp, #4]
 801c0f8:	3308      	adds	r3, #8
 801c0fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c0fc:	6013      	str	r3, [r2, #0]
 801c0fe:	9801      	ldr	r0, [sp, #4]
 801c100:	b011      	add	sp, #68	; 0x44
 801c102:	ecbd 8b02 	vpop	{d8}
 801c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c10a:	4b8e      	ldr	r3, [pc, #568]	; (801c344 <_dtoa_r+0x2e4>)
 801c10c:	9301      	str	r3, [sp, #4]
 801c10e:	3303      	adds	r3, #3
 801c110:	e7f3      	b.n	801c0fa <_dtoa_r+0x9a>
 801c112:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c116:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c11e:	d10b      	bne.n	801c138 <_dtoa_r+0xd8>
 801c120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c122:	2301      	movs	r3, #1
 801c124:	6013      	str	r3, [r2, #0]
 801c126:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c128:	2b00      	cmp	r3, #0
 801c12a:	f000 84d9 	beq.w	801cae0 <_dtoa_r+0xa80>
 801c12e:	4887      	ldr	r0, [pc, #540]	; (801c34c <_dtoa_r+0x2ec>)
 801c130:	6018      	str	r0, [r3, #0]
 801c132:	1e43      	subs	r3, r0, #1
 801c134:	9301      	str	r3, [sp, #4]
 801c136:	e7e2      	b.n	801c0fe <_dtoa_r+0x9e>
 801c138:	a90f      	add	r1, sp, #60	; 0x3c
 801c13a:	aa0e      	add	r2, sp, #56	; 0x38
 801c13c:	4630      	mov	r0, r6
 801c13e:	eeb0 0b48 	vmov.f64	d0, d8
 801c142:	f001 f92d 	bl	801d3a0 <__d2b>
 801c146:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801c14a:	4605      	mov	r5, r0
 801c14c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c14e:	2900      	cmp	r1, #0
 801c150:	d046      	beq.n	801c1e0 <_dtoa_r+0x180>
 801c152:	ee18 4a90 	vmov	r4, s17
 801c156:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c15a:	ec53 2b18 	vmov	r2, r3, d8
 801c15e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801c162:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c166:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c16a:	2400      	movs	r4, #0
 801c16c:	ec43 2b16 	vmov	d6, r2, r3
 801c170:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c174:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801c320 <_dtoa_r+0x2c0>
 801c178:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c17c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801c328 <_dtoa_r+0x2c8>
 801c180:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c184:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801c330 <_dtoa_r+0x2d0>
 801c188:	ee07 1a90 	vmov	s15, r1
 801c18c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c190:	eeb0 7b46 	vmov.f64	d7, d6
 801c194:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c198:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c19c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1a4:	ee16 ba90 	vmov	fp, s13
 801c1a8:	940a      	str	r4, [sp, #40]	; 0x28
 801c1aa:	d508      	bpl.n	801c1be <_dtoa_r+0x15e>
 801c1ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c1b0:	eeb4 6b47 	vcmp.f64	d6, d7
 801c1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1b8:	bf18      	it	ne
 801c1ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c1be:	f1bb 0f16 	cmp.w	fp, #22
 801c1c2:	d82f      	bhi.n	801c224 <_dtoa_r+0x1c4>
 801c1c4:	4b62      	ldr	r3, [pc, #392]	; (801c350 <_dtoa_r+0x2f0>)
 801c1c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c1ca:	ed93 7b00 	vldr	d7, [r3]
 801c1ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1d6:	d501      	bpl.n	801c1dc <_dtoa_r+0x17c>
 801c1d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c1dc:	2300      	movs	r3, #0
 801c1de:	e022      	b.n	801c226 <_dtoa_r+0x1c6>
 801c1e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c1e2:	4401      	add	r1, r0
 801c1e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801c1e8:	2b20      	cmp	r3, #32
 801c1ea:	bfc1      	itttt	gt
 801c1ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c1f0:	fa04 f303 	lslgt.w	r3, r4, r3
 801c1f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801c1f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 801c1fc:	bfd6      	itet	le
 801c1fe:	f1c3 0320 	rsble	r3, r3, #32
 801c202:	ea43 0808 	orrgt.w	r8, r3, r8
 801c206:	fa08 f803 	lslle.w	r8, r8, r3
 801c20a:	ee07 8a90 	vmov	s15, r8
 801c20e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c212:	3901      	subs	r1, #1
 801c214:	ee17 4a90 	vmov	r4, s15
 801c218:	ec53 2b17 	vmov	r2, r3, d7
 801c21c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801c220:	2401      	movs	r4, #1
 801c222:	e7a3      	b.n	801c16c <_dtoa_r+0x10c>
 801c224:	2301      	movs	r3, #1
 801c226:	930b      	str	r3, [sp, #44]	; 0x2c
 801c228:	1a43      	subs	r3, r0, r1
 801c22a:	1e5a      	subs	r2, r3, #1
 801c22c:	bf45      	ittet	mi
 801c22e:	f1c3 0301 	rsbmi	r3, r3, #1
 801c232:	9304      	strmi	r3, [sp, #16]
 801c234:	2300      	movpl	r3, #0
 801c236:	2300      	movmi	r3, #0
 801c238:	9205      	str	r2, [sp, #20]
 801c23a:	bf54      	ite	pl
 801c23c:	9304      	strpl	r3, [sp, #16]
 801c23e:	9305      	strmi	r3, [sp, #20]
 801c240:	f1bb 0f00 	cmp.w	fp, #0
 801c244:	db18      	blt.n	801c278 <_dtoa_r+0x218>
 801c246:	9b05      	ldr	r3, [sp, #20]
 801c248:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801c24c:	445b      	add	r3, fp
 801c24e:	9305      	str	r3, [sp, #20]
 801c250:	2300      	movs	r3, #0
 801c252:	9a06      	ldr	r2, [sp, #24]
 801c254:	2a09      	cmp	r2, #9
 801c256:	d849      	bhi.n	801c2ec <_dtoa_r+0x28c>
 801c258:	2a05      	cmp	r2, #5
 801c25a:	bfc4      	itt	gt
 801c25c:	3a04      	subgt	r2, #4
 801c25e:	9206      	strgt	r2, [sp, #24]
 801c260:	9a06      	ldr	r2, [sp, #24]
 801c262:	f1a2 0202 	sub.w	r2, r2, #2
 801c266:	bfcc      	ite	gt
 801c268:	2400      	movgt	r4, #0
 801c26a:	2401      	movle	r4, #1
 801c26c:	2a03      	cmp	r2, #3
 801c26e:	d848      	bhi.n	801c302 <_dtoa_r+0x2a2>
 801c270:	e8df f002 	tbb	[pc, r2]
 801c274:	3a2c2e0b 	.word	0x3a2c2e0b
 801c278:	9b04      	ldr	r3, [sp, #16]
 801c27a:	2200      	movs	r2, #0
 801c27c:	eba3 030b 	sub.w	r3, r3, fp
 801c280:	9304      	str	r3, [sp, #16]
 801c282:	9209      	str	r2, [sp, #36]	; 0x24
 801c284:	f1cb 0300 	rsb	r3, fp, #0
 801c288:	e7e3      	b.n	801c252 <_dtoa_r+0x1f2>
 801c28a:	2200      	movs	r2, #0
 801c28c:	9207      	str	r2, [sp, #28]
 801c28e:	9a08      	ldr	r2, [sp, #32]
 801c290:	2a00      	cmp	r2, #0
 801c292:	dc39      	bgt.n	801c308 <_dtoa_r+0x2a8>
 801c294:	f04f 0a01 	mov.w	sl, #1
 801c298:	46d1      	mov	r9, sl
 801c29a:	4652      	mov	r2, sl
 801c29c:	f8cd a020 	str.w	sl, [sp, #32]
 801c2a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801c2a2:	2100      	movs	r1, #0
 801c2a4:	6079      	str	r1, [r7, #4]
 801c2a6:	2004      	movs	r0, #4
 801c2a8:	f100 0c14 	add.w	ip, r0, #20
 801c2ac:	4594      	cmp	ip, r2
 801c2ae:	6879      	ldr	r1, [r7, #4]
 801c2b0:	d92f      	bls.n	801c312 <_dtoa_r+0x2b2>
 801c2b2:	4630      	mov	r0, r6
 801c2b4:	930d      	str	r3, [sp, #52]	; 0x34
 801c2b6:	f000 fd4b 	bl	801cd50 <_Balloc>
 801c2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2bc:	9001      	str	r0, [sp, #4]
 801c2be:	4602      	mov	r2, r0
 801c2c0:	2800      	cmp	r0, #0
 801c2c2:	d149      	bne.n	801c358 <_dtoa_r+0x2f8>
 801c2c4:	4b23      	ldr	r3, [pc, #140]	; (801c354 <_dtoa_r+0x2f4>)
 801c2c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c2ca:	e6e1      	b.n	801c090 <_dtoa_r+0x30>
 801c2cc:	2201      	movs	r2, #1
 801c2ce:	e7dd      	b.n	801c28c <_dtoa_r+0x22c>
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	9207      	str	r2, [sp, #28]
 801c2d4:	9a08      	ldr	r2, [sp, #32]
 801c2d6:	eb0b 0a02 	add.w	sl, fp, r2
 801c2da:	f10a 0901 	add.w	r9, sl, #1
 801c2de:	464a      	mov	r2, r9
 801c2e0:	2a01      	cmp	r2, #1
 801c2e2:	bfb8      	it	lt
 801c2e4:	2201      	movlt	r2, #1
 801c2e6:	e7db      	b.n	801c2a0 <_dtoa_r+0x240>
 801c2e8:	2201      	movs	r2, #1
 801c2ea:	e7f2      	b.n	801c2d2 <_dtoa_r+0x272>
 801c2ec:	2401      	movs	r4, #1
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c2f4:	f04f 3aff 	mov.w	sl, #4294967295
 801c2f8:	2100      	movs	r1, #0
 801c2fa:	46d1      	mov	r9, sl
 801c2fc:	2212      	movs	r2, #18
 801c2fe:	9108      	str	r1, [sp, #32]
 801c300:	e7ce      	b.n	801c2a0 <_dtoa_r+0x240>
 801c302:	2201      	movs	r2, #1
 801c304:	9207      	str	r2, [sp, #28]
 801c306:	e7f5      	b.n	801c2f4 <_dtoa_r+0x294>
 801c308:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c30c:	46d1      	mov	r9, sl
 801c30e:	4652      	mov	r2, sl
 801c310:	e7c6      	b.n	801c2a0 <_dtoa_r+0x240>
 801c312:	3101      	adds	r1, #1
 801c314:	6079      	str	r1, [r7, #4]
 801c316:	0040      	lsls	r0, r0, #1
 801c318:	e7c6      	b.n	801c2a8 <_dtoa_r+0x248>
 801c31a:	bf00      	nop
 801c31c:	f3af 8000 	nop.w
 801c320:	636f4361 	.word	0x636f4361
 801c324:	3fd287a7 	.word	0x3fd287a7
 801c328:	8b60c8b3 	.word	0x8b60c8b3
 801c32c:	3fc68a28 	.word	0x3fc68a28
 801c330:	509f79fb 	.word	0x509f79fb
 801c334:	3fd34413 	.word	0x3fd34413
 801c338:	0803d3f1 	.word	0x0803d3f1
 801c33c:	0803d408 	.word	0x0803d408
 801c340:	7ff00000 	.word	0x7ff00000
 801c344:	0803d3ed 	.word	0x0803d3ed
 801c348:	0803d3e4 	.word	0x0803d3e4
 801c34c:	0803d3c1 	.word	0x0803d3c1
 801c350:	0803d558 	.word	0x0803d558
 801c354:	0803d463 	.word	0x0803d463
 801c358:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801c35a:	9901      	ldr	r1, [sp, #4]
 801c35c:	6011      	str	r1, [r2, #0]
 801c35e:	f1b9 0f0e 	cmp.w	r9, #14
 801c362:	d86c      	bhi.n	801c43e <_dtoa_r+0x3de>
 801c364:	2c00      	cmp	r4, #0
 801c366:	d06a      	beq.n	801c43e <_dtoa_r+0x3de>
 801c368:	f1bb 0f00 	cmp.w	fp, #0
 801c36c:	f340 80a0 	ble.w	801c4b0 <_dtoa_r+0x450>
 801c370:	49c1      	ldr	r1, [pc, #772]	; (801c678 <_dtoa_r+0x618>)
 801c372:	f00b 020f 	and.w	r2, fp, #15
 801c376:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801c37a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c37e:	ed92 7b00 	vldr	d7, [r2]
 801c382:	ea4f 112b 	mov.w	r1, fp, asr #4
 801c386:	f000 8087 	beq.w	801c498 <_dtoa_r+0x438>
 801c38a:	4abc      	ldr	r2, [pc, #752]	; (801c67c <_dtoa_r+0x61c>)
 801c38c:	ed92 6b08 	vldr	d6, [r2, #32]
 801c390:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c394:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c398:	f001 010f 	and.w	r1, r1, #15
 801c39c:	2203      	movs	r2, #3
 801c39e:	48b7      	ldr	r0, [pc, #732]	; (801c67c <_dtoa_r+0x61c>)
 801c3a0:	2900      	cmp	r1, #0
 801c3a2:	d17b      	bne.n	801c49c <_dtoa_r+0x43c>
 801c3a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c3a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c3ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c3b2:	2900      	cmp	r1, #0
 801c3b4:	f000 80a2 	beq.w	801c4fc <_dtoa_r+0x49c>
 801c3b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c3bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3c8:	f140 8098 	bpl.w	801c4fc <_dtoa_r+0x49c>
 801c3cc:	f1b9 0f00 	cmp.w	r9, #0
 801c3d0:	f000 8094 	beq.w	801c4fc <_dtoa_r+0x49c>
 801c3d4:	f1ba 0f00 	cmp.w	sl, #0
 801c3d8:	dd2f      	ble.n	801c43a <_dtoa_r+0x3da>
 801c3da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c3de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c3e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c3e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c3ea:	3201      	adds	r2, #1
 801c3ec:	4650      	mov	r0, sl
 801c3ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c3f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c3f6:	ee07 2a90 	vmov	s15, r2
 801c3fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c3fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c402:	ee15 4a90 	vmov	r4, s11
 801c406:	ec52 1b15 	vmov	r1, r2, d5
 801c40a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801c40e:	2800      	cmp	r0, #0
 801c410:	d177      	bne.n	801c502 <_dtoa_r+0x4a2>
 801c412:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c416:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c41a:	ec42 1b17 	vmov	d7, r1, r2
 801c41e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c426:	f300 8263 	bgt.w	801c8f0 <_dtoa_r+0x890>
 801c42a:	eeb1 7b47 	vneg.f64	d7, d7
 801c42e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c436:	f100 8258 	bmi.w	801c8ea <_dtoa_r+0x88a>
 801c43a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c43e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c440:	2a00      	cmp	r2, #0
 801c442:	f2c0 811d 	blt.w	801c680 <_dtoa_r+0x620>
 801c446:	f1bb 0f0e 	cmp.w	fp, #14
 801c44a:	f300 8119 	bgt.w	801c680 <_dtoa_r+0x620>
 801c44e:	4b8a      	ldr	r3, [pc, #552]	; (801c678 <_dtoa_r+0x618>)
 801c450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c454:	ed93 6b00 	vldr	d6, [r3]
 801c458:	9b08      	ldr	r3, [sp, #32]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	f280 80b7 	bge.w	801c5ce <_dtoa_r+0x56e>
 801c460:	f1b9 0f00 	cmp.w	r9, #0
 801c464:	f300 80b3 	bgt.w	801c5ce <_dtoa_r+0x56e>
 801c468:	f040 823f 	bne.w	801c8ea <_dtoa_r+0x88a>
 801c46c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c470:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c474:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c480:	464c      	mov	r4, r9
 801c482:	464f      	mov	r7, r9
 801c484:	f280 8215 	bge.w	801c8b2 <_dtoa_r+0x852>
 801c488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c48c:	2331      	movs	r3, #49	; 0x31
 801c48e:	f808 3b01 	strb.w	r3, [r8], #1
 801c492:	f10b 0b01 	add.w	fp, fp, #1
 801c496:	e211      	b.n	801c8bc <_dtoa_r+0x85c>
 801c498:	2202      	movs	r2, #2
 801c49a:	e780      	b.n	801c39e <_dtoa_r+0x33e>
 801c49c:	07cc      	lsls	r4, r1, #31
 801c49e:	d504      	bpl.n	801c4aa <_dtoa_r+0x44a>
 801c4a0:	ed90 6b00 	vldr	d6, [r0]
 801c4a4:	3201      	adds	r2, #1
 801c4a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4aa:	1049      	asrs	r1, r1, #1
 801c4ac:	3008      	adds	r0, #8
 801c4ae:	e777      	b.n	801c3a0 <_dtoa_r+0x340>
 801c4b0:	d022      	beq.n	801c4f8 <_dtoa_r+0x498>
 801c4b2:	f1cb 0100 	rsb	r1, fp, #0
 801c4b6:	4a70      	ldr	r2, [pc, #448]	; (801c678 <_dtoa_r+0x618>)
 801c4b8:	f001 000f 	and.w	r0, r1, #15
 801c4bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c4c0:	ed92 7b00 	vldr	d7, [r2]
 801c4c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4cc:	486b      	ldr	r0, [pc, #428]	; (801c67c <_dtoa_r+0x61c>)
 801c4ce:	1109      	asrs	r1, r1, #4
 801c4d0:	2400      	movs	r4, #0
 801c4d2:	2202      	movs	r2, #2
 801c4d4:	b929      	cbnz	r1, 801c4e2 <_dtoa_r+0x482>
 801c4d6:	2c00      	cmp	r4, #0
 801c4d8:	f43f af6a 	beq.w	801c3b0 <_dtoa_r+0x350>
 801c4dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4e0:	e766      	b.n	801c3b0 <_dtoa_r+0x350>
 801c4e2:	07cf      	lsls	r7, r1, #31
 801c4e4:	d505      	bpl.n	801c4f2 <_dtoa_r+0x492>
 801c4e6:	ed90 6b00 	vldr	d6, [r0]
 801c4ea:	3201      	adds	r2, #1
 801c4ec:	2401      	movs	r4, #1
 801c4ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4f2:	1049      	asrs	r1, r1, #1
 801c4f4:	3008      	adds	r0, #8
 801c4f6:	e7ed      	b.n	801c4d4 <_dtoa_r+0x474>
 801c4f8:	2202      	movs	r2, #2
 801c4fa:	e759      	b.n	801c3b0 <_dtoa_r+0x350>
 801c4fc:	465f      	mov	r7, fp
 801c4fe:	4648      	mov	r0, r9
 801c500:	e775      	b.n	801c3ee <_dtoa_r+0x38e>
 801c502:	ec42 1b17 	vmov	d7, r1, r2
 801c506:	4a5c      	ldr	r2, [pc, #368]	; (801c678 <_dtoa_r+0x618>)
 801c508:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c50c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c510:	9a01      	ldr	r2, [sp, #4]
 801c512:	1814      	adds	r4, r2, r0
 801c514:	9a07      	ldr	r2, [sp, #28]
 801c516:	b352      	cbz	r2, 801c56e <_dtoa_r+0x50e>
 801c518:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c51c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c520:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c524:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c528:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c52c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c530:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c534:	ee14 2a90 	vmov	r2, s9
 801c538:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c53c:	3230      	adds	r2, #48	; 0x30
 801c53e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c542:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54a:	f808 2b01 	strb.w	r2, [r8], #1
 801c54e:	d439      	bmi.n	801c5c4 <_dtoa_r+0x564>
 801c550:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c554:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c55c:	d472      	bmi.n	801c644 <_dtoa_r+0x5e4>
 801c55e:	45a0      	cmp	r8, r4
 801c560:	f43f af6b 	beq.w	801c43a <_dtoa_r+0x3da>
 801c564:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c568:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c56c:	e7e0      	b.n	801c530 <_dtoa_r+0x4d0>
 801c56e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c572:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c576:	4621      	mov	r1, r4
 801c578:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c57c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c580:	ee14 2a90 	vmov	r2, s9
 801c584:	3230      	adds	r2, #48	; 0x30
 801c586:	f808 2b01 	strb.w	r2, [r8], #1
 801c58a:	45a0      	cmp	r8, r4
 801c58c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c590:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c594:	d118      	bne.n	801c5c8 <_dtoa_r+0x568>
 801c596:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c59a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c59e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5a6:	dc4d      	bgt.n	801c644 <_dtoa_r+0x5e4>
 801c5a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c5ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5b4:	f57f af41 	bpl.w	801c43a <_dtoa_r+0x3da>
 801c5b8:	4688      	mov	r8, r1
 801c5ba:	3901      	subs	r1, #1
 801c5bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c5c0:	2b30      	cmp	r3, #48	; 0x30
 801c5c2:	d0f9      	beq.n	801c5b8 <_dtoa_r+0x558>
 801c5c4:	46bb      	mov	fp, r7
 801c5c6:	e02a      	b.n	801c61e <_dtoa_r+0x5be>
 801c5c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c5cc:	e7d6      	b.n	801c57c <_dtoa_r+0x51c>
 801c5ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c5d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c5d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c5da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c5de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c5e2:	ee15 3a10 	vmov	r3, s10
 801c5e6:	3330      	adds	r3, #48	; 0x30
 801c5e8:	f808 3b01 	strb.w	r3, [r8], #1
 801c5ec:	9b01      	ldr	r3, [sp, #4]
 801c5ee:	eba8 0303 	sub.w	r3, r8, r3
 801c5f2:	4599      	cmp	r9, r3
 801c5f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c5f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c5fc:	d133      	bne.n	801c666 <_dtoa_r+0x606>
 801c5fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c602:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c60a:	dc1a      	bgt.n	801c642 <_dtoa_r+0x5e2>
 801c60c:	eeb4 7b46 	vcmp.f64	d7, d6
 801c610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c614:	d103      	bne.n	801c61e <_dtoa_r+0x5be>
 801c616:	ee15 3a10 	vmov	r3, s10
 801c61a:	07d9      	lsls	r1, r3, #31
 801c61c:	d411      	bmi.n	801c642 <_dtoa_r+0x5e2>
 801c61e:	4629      	mov	r1, r5
 801c620:	4630      	mov	r0, r6
 801c622:	f000 fbd5 	bl	801cdd0 <_Bfree>
 801c626:	2300      	movs	r3, #0
 801c628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c62a:	f888 3000 	strb.w	r3, [r8]
 801c62e:	f10b 0301 	add.w	r3, fp, #1
 801c632:	6013      	str	r3, [r2, #0]
 801c634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c636:	2b00      	cmp	r3, #0
 801c638:	f43f ad61 	beq.w	801c0fe <_dtoa_r+0x9e>
 801c63c:	f8c3 8000 	str.w	r8, [r3]
 801c640:	e55d      	b.n	801c0fe <_dtoa_r+0x9e>
 801c642:	465f      	mov	r7, fp
 801c644:	4643      	mov	r3, r8
 801c646:	4698      	mov	r8, r3
 801c648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c64c:	2a39      	cmp	r2, #57	; 0x39
 801c64e:	d106      	bne.n	801c65e <_dtoa_r+0x5fe>
 801c650:	9a01      	ldr	r2, [sp, #4]
 801c652:	429a      	cmp	r2, r3
 801c654:	d1f7      	bne.n	801c646 <_dtoa_r+0x5e6>
 801c656:	9901      	ldr	r1, [sp, #4]
 801c658:	2230      	movs	r2, #48	; 0x30
 801c65a:	3701      	adds	r7, #1
 801c65c:	700a      	strb	r2, [r1, #0]
 801c65e:	781a      	ldrb	r2, [r3, #0]
 801c660:	3201      	adds	r2, #1
 801c662:	701a      	strb	r2, [r3, #0]
 801c664:	e7ae      	b.n	801c5c4 <_dtoa_r+0x564>
 801c666:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c66a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c672:	d1b2      	bne.n	801c5da <_dtoa_r+0x57a>
 801c674:	e7d3      	b.n	801c61e <_dtoa_r+0x5be>
 801c676:	bf00      	nop
 801c678:	0803d558 	.word	0x0803d558
 801c67c:	0803d530 	.word	0x0803d530
 801c680:	9907      	ldr	r1, [sp, #28]
 801c682:	2900      	cmp	r1, #0
 801c684:	f000 80d0 	beq.w	801c828 <_dtoa_r+0x7c8>
 801c688:	9906      	ldr	r1, [sp, #24]
 801c68a:	2901      	cmp	r1, #1
 801c68c:	f300 80b4 	bgt.w	801c7f8 <_dtoa_r+0x798>
 801c690:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c692:	2900      	cmp	r1, #0
 801c694:	f000 80ac 	beq.w	801c7f0 <_dtoa_r+0x790>
 801c698:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c69c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c6a0:	461c      	mov	r4, r3
 801c6a2:	930a      	str	r3, [sp, #40]	; 0x28
 801c6a4:	9b04      	ldr	r3, [sp, #16]
 801c6a6:	4413      	add	r3, r2
 801c6a8:	9304      	str	r3, [sp, #16]
 801c6aa:	9b05      	ldr	r3, [sp, #20]
 801c6ac:	2101      	movs	r1, #1
 801c6ae:	4413      	add	r3, r2
 801c6b0:	4630      	mov	r0, r6
 801c6b2:	9305      	str	r3, [sp, #20]
 801c6b4:	f000 fc44 	bl	801cf40 <__i2b>
 801c6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6ba:	4607      	mov	r7, r0
 801c6bc:	f1b8 0f00 	cmp.w	r8, #0
 801c6c0:	dd0d      	ble.n	801c6de <_dtoa_r+0x67e>
 801c6c2:	9a05      	ldr	r2, [sp, #20]
 801c6c4:	2a00      	cmp	r2, #0
 801c6c6:	dd0a      	ble.n	801c6de <_dtoa_r+0x67e>
 801c6c8:	4542      	cmp	r2, r8
 801c6ca:	9904      	ldr	r1, [sp, #16]
 801c6cc:	bfa8      	it	ge
 801c6ce:	4642      	movge	r2, r8
 801c6d0:	1a89      	subs	r1, r1, r2
 801c6d2:	9104      	str	r1, [sp, #16]
 801c6d4:	9905      	ldr	r1, [sp, #20]
 801c6d6:	eba8 0802 	sub.w	r8, r8, r2
 801c6da:	1a8a      	subs	r2, r1, r2
 801c6dc:	9205      	str	r2, [sp, #20]
 801c6de:	b303      	cbz	r3, 801c722 <_dtoa_r+0x6c2>
 801c6e0:	9a07      	ldr	r2, [sp, #28]
 801c6e2:	2a00      	cmp	r2, #0
 801c6e4:	f000 80a5 	beq.w	801c832 <_dtoa_r+0x7d2>
 801c6e8:	2c00      	cmp	r4, #0
 801c6ea:	dd13      	ble.n	801c714 <_dtoa_r+0x6b4>
 801c6ec:	4639      	mov	r1, r7
 801c6ee:	4622      	mov	r2, r4
 801c6f0:	4630      	mov	r0, r6
 801c6f2:	930d      	str	r3, [sp, #52]	; 0x34
 801c6f4:	f000 fce4 	bl	801d0c0 <__pow5mult>
 801c6f8:	462a      	mov	r2, r5
 801c6fa:	4601      	mov	r1, r0
 801c6fc:	4607      	mov	r7, r0
 801c6fe:	4630      	mov	r0, r6
 801c700:	f000 fc34 	bl	801cf6c <__multiply>
 801c704:	4629      	mov	r1, r5
 801c706:	900a      	str	r0, [sp, #40]	; 0x28
 801c708:	4630      	mov	r0, r6
 801c70a:	f000 fb61 	bl	801cdd0 <_Bfree>
 801c70e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c712:	4615      	mov	r5, r2
 801c714:	1b1a      	subs	r2, r3, r4
 801c716:	d004      	beq.n	801c722 <_dtoa_r+0x6c2>
 801c718:	4629      	mov	r1, r5
 801c71a:	4630      	mov	r0, r6
 801c71c:	f000 fcd0 	bl	801d0c0 <__pow5mult>
 801c720:	4605      	mov	r5, r0
 801c722:	2101      	movs	r1, #1
 801c724:	4630      	mov	r0, r6
 801c726:	f000 fc0b 	bl	801cf40 <__i2b>
 801c72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	4604      	mov	r4, r0
 801c730:	f340 8081 	ble.w	801c836 <_dtoa_r+0x7d6>
 801c734:	461a      	mov	r2, r3
 801c736:	4601      	mov	r1, r0
 801c738:	4630      	mov	r0, r6
 801c73a:	f000 fcc1 	bl	801d0c0 <__pow5mult>
 801c73e:	9b06      	ldr	r3, [sp, #24]
 801c740:	2b01      	cmp	r3, #1
 801c742:	4604      	mov	r4, r0
 801c744:	dd7a      	ble.n	801c83c <_dtoa_r+0x7dc>
 801c746:	2300      	movs	r3, #0
 801c748:	930a      	str	r3, [sp, #40]	; 0x28
 801c74a:	6922      	ldr	r2, [r4, #16]
 801c74c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c750:	6910      	ldr	r0, [r2, #16]
 801c752:	f000 fba5 	bl	801cea0 <__hi0bits>
 801c756:	f1c0 0020 	rsb	r0, r0, #32
 801c75a:	9b05      	ldr	r3, [sp, #20]
 801c75c:	4418      	add	r0, r3
 801c75e:	f010 001f 	ands.w	r0, r0, #31
 801c762:	f000 808c 	beq.w	801c87e <_dtoa_r+0x81e>
 801c766:	f1c0 0220 	rsb	r2, r0, #32
 801c76a:	2a04      	cmp	r2, #4
 801c76c:	f340 8085 	ble.w	801c87a <_dtoa_r+0x81a>
 801c770:	f1c0 001c 	rsb	r0, r0, #28
 801c774:	9b04      	ldr	r3, [sp, #16]
 801c776:	4403      	add	r3, r0
 801c778:	9304      	str	r3, [sp, #16]
 801c77a:	9b05      	ldr	r3, [sp, #20]
 801c77c:	4403      	add	r3, r0
 801c77e:	4480      	add	r8, r0
 801c780:	9305      	str	r3, [sp, #20]
 801c782:	9b04      	ldr	r3, [sp, #16]
 801c784:	2b00      	cmp	r3, #0
 801c786:	dd05      	ble.n	801c794 <_dtoa_r+0x734>
 801c788:	4629      	mov	r1, r5
 801c78a:	461a      	mov	r2, r3
 801c78c:	4630      	mov	r0, r6
 801c78e:	f000 fcf1 	bl	801d174 <__lshift>
 801c792:	4605      	mov	r5, r0
 801c794:	9b05      	ldr	r3, [sp, #20]
 801c796:	2b00      	cmp	r3, #0
 801c798:	dd05      	ble.n	801c7a6 <_dtoa_r+0x746>
 801c79a:	4621      	mov	r1, r4
 801c79c:	461a      	mov	r2, r3
 801c79e:	4630      	mov	r0, r6
 801c7a0:	f000 fce8 	bl	801d174 <__lshift>
 801c7a4:	4604      	mov	r4, r0
 801c7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d06a      	beq.n	801c882 <_dtoa_r+0x822>
 801c7ac:	4621      	mov	r1, r4
 801c7ae:	4628      	mov	r0, r5
 801c7b0:	f000 fd50 	bl	801d254 <__mcmp>
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	da64      	bge.n	801c882 <_dtoa_r+0x822>
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	4629      	mov	r1, r5
 801c7bc:	220a      	movs	r2, #10
 801c7be:	4630      	mov	r0, r6
 801c7c0:	f000 fb28 	bl	801ce14 <__multadd>
 801c7c4:	9b07      	ldr	r3, [sp, #28]
 801c7c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c7ca:	4605      	mov	r5, r0
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	f000 8191 	beq.w	801caf4 <_dtoa_r+0xa94>
 801c7d2:	4639      	mov	r1, r7
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	220a      	movs	r2, #10
 801c7d8:	4630      	mov	r0, r6
 801c7da:	f000 fb1b 	bl	801ce14 <__multadd>
 801c7de:	f1ba 0f00 	cmp.w	sl, #0
 801c7e2:	4607      	mov	r7, r0
 801c7e4:	f300 808d 	bgt.w	801c902 <_dtoa_r+0x8a2>
 801c7e8:	9b06      	ldr	r3, [sp, #24]
 801c7ea:	2b02      	cmp	r3, #2
 801c7ec:	dc50      	bgt.n	801c890 <_dtoa_r+0x830>
 801c7ee:	e088      	b.n	801c902 <_dtoa_r+0x8a2>
 801c7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c7f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c7f6:	e751      	b.n	801c69c <_dtoa_r+0x63c>
 801c7f8:	f109 34ff 	add.w	r4, r9, #4294967295
 801c7fc:	42a3      	cmp	r3, r4
 801c7fe:	bfbf      	itttt	lt
 801c800:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801c802:	1ae3      	sublt	r3, r4, r3
 801c804:	18d2      	addlt	r2, r2, r3
 801c806:	9209      	strlt	r2, [sp, #36]	; 0x24
 801c808:	bfb6      	itet	lt
 801c80a:	4623      	movlt	r3, r4
 801c80c:	1b1c      	subge	r4, r3, r4
 801c80e:	2400      	movlt	r4, #0
 801c810:	f1b9 0f00 	cmp.w	r9, #0
 801c814:	bfb5      	itete	lt
 801c816:	9a04      	ldrlt	r2, [sp, #16]
 801c818:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c81c:	eba2 0809 	sublt.w	r8, r2, r9
 801c820:	464a      	movge	r2, r9
 801c822:	bfb8      	it	lt
 801c824:	2200      	movlt	r2, #0
 801c826:	e73c      	b.n	801c6a2 <_dtoa_r+0x642>
 801c828:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c82c:	9f07      	ldr	r7, [sp, #28]
 801c82e:	461c      	mov	r4, r3
 801c830:	e744      	b.n	801c6bc <_dtoa_r+0x65c>
 801c832:	461a      	mov	r2, r3
 801c834:	e770      	b.n	801c718 <_dtoa_r+0x6b8>
 801c836:	9b06      	ldr	r3, [sp, #24]
 801c838:	2b01      	cmp	r3, #1
 801c83a:	dc18      	bgt.n	801c86e <_dtoa_r+0x80e>
 801c83c:	9b02      	ldr	r3, [sp, #8]
 801c83e:	b9b3      	cbnz	r3, 801c86e <_dtoa_r+0x80e>
 801c840:	9b03      	ldr	r3, [sp, #12]
 801c842:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c846:	b9a2      	cbnz	r2, 801c872 <_dtoa_r+0x812>
 801c848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c84c:	0d12      	lsrs	r2, r2, #20
 801c84e:	0512      	lsls	r2, r2, #20
 801c850:	b18a      	cbz	r2, 801c876 <_dtoa_r+0x816>
 801c852:	9b04      	ldr	r3, [sp, #16]
 801c854:	3301      	adds	r3, #1
 801c856:	9304      	str	r3, [sp, #16]
 801c858:	9b05      	ldr	r3, [sp, #20]
 801c85a:	3301      	adds	r3, #1
 801c85c:	9305      	str	r3, [sp, #20]
 801c85e:	2301      	movs	r3, #1
 801c860:	930a      	str	r3, [sp, #40]	; 0x28
 801c862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c864:	2b00      	cmp	r3, #0
 801c866:	f47f af70 	bne.w	801c74a <_dtoa_r+0x6ea>
 801c86a:	2001      	movs	r0, #1
 801c86c:	e775      	b.n	801c75a <_dtoa_r+0x6fa>
 801c86e:	2300      	movs	r3, #0
 801c870:	e7f6      	b.n	801c860 <_dtoa_r+0x800>
 801c872:	9b02      	ldr	r3, [sp, #8]
 801c874:	e7f4      	b.n	801c860 <_dtoa_r+0x800>
 801c876:	920a      	str	r2, [sp, #40]	; 0x28
 801c878:	e7f3      	b.n	801c862 <_dtoa_r+0x802>
 801c87a:	d082      	beq.n	801c782 <_dtoa_r+0x722>
 801c87c:	4610      	mov	r0, r2
 801c87e:	301c      	adds	r0, #28
 801c880:	e778      	b.n	801c774 <_dtoa_r+0x714>
 801c882:	f1b9 0f00 	cmp.w	r9, #0
 801c886:	dc37      	bgt.n	801c8f8 <_dtoa_r+0x898>
 801c888:	9b06      	ldr	r3, [sp, #24]
 801c88a:	2b02      	cmp	r3, #2
 801c88c:	dd34      	ble.n	801c8f8 <_dtoa_r+0x898>
 801c88e:	46ca      	mov	sl, r9
 801c890:	f1ba 0f00 	cmp.w	sl, #0
 801c894:	d10d      	bne.n	801c8b2 <_dtoa_r+0x852>
 801c896:	4621      	mov	r1, r4
 801c898:	4653      	mov	r3, sl
 801c89a:	2205      	movs	r2, #5
 801c89c:	4630      	mov	r0, r6
 801c89e:	f000 fab9 	bl	801ce14 <__multadd>
 801c8a2:	4601      	mov	r1, r0
 801c8a4:	4604      	mov	r4, r0
 801c8a6:	4628      	mov	r0, r5
 801c8a8:	f000 fcd4 	bl	801d254 <__mcmp>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	f73f adeb 	bgt.w	801c488 <_dtoa_r+0x428>
 801c8b2:	9b08      	ldr	r3, [sp, #32]
 801c8b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c8b8:	ea6f 0b03 	mvn.w	fp, r3
 801c8bc:	f04f 0900 	mov.w	r9, #0
 801c8c0:	4621      	mov	r1, r4
 801c8c2:	4630      	mov	r0, r6
 801c8c4:	f000 fa84 	bl	801cdd0 <_Bfree>
 801c8c8:	2f00      	cmp	r7, #0
 801c8ca:	f43f aea8 	beq.w	801c61e <_dtoa_r+0x5be>
 801c8ce:	f1b9 0f00 	cmp.w	r9, #0
 801c8d2:	d005      	beq.n	801c8e0 <_dtoa_r+0x880>
 801c8d4:	45b9      	cmp	r9, r7
 801c8d6:	d003      	beq.n	801c8e0 <_dtoa_r+0x880>
 801c8d8:	4649      	mov	r1, r9
 801c8da:	4630      	mov	r0, r6
 801c8dc:	f000 fa78 	bl	801cdd0 <_Bfree>
 801c8e0:	4639      	mov	r1, r7
 801c8e2:	4630      	mov	r0, r6
 801c8e4:	f000 fa74 	bl	801cdd0 <_Bfree>
 801c8e8:	e699      	b.n	801c61e <_dtoa_r+0x5be>
 801c8ea:	2400      	movs	r4, #0
 801c8ec:	4627      	mov	r7, r4
 801c8ee:	e7e0      	b.n	801c8b2 <_dtoa_r+0x852>
 801c8f0:	46bb      	mov	fp, r7
 801c8f2:	4604      	mov	r4, r0
 801c8f4:	4607      	mov	r7, r0
 801c8f6:	e5c7      	b.n	801c488 <_dtoa_r+0x428>
 801c8f8:	9b07      	ldr	r3, [sp, #28]
 801c8fa:	46ca      	mov	sl, r9
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	f000 8100 	beq.w	801cb02 <_dtoa_r+0xaa2>
 801c902:	f1b8 0f00 	cmp.w	r8, #0
 801c906:	dd05      	ble.n	801c914 <_dtoa_r+0x8b4>
 801c908:	4639      	mov	r1, r7
 801c90a:	4642      	mov	r2, r8
 801c90c:	4630      	mov	r0, r6
 801c90e:	f000 fc31 	bl	801d174 <__lshift>
 801c912:	4607      	mov	r7, r0
 801c914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c916:	2b00      	cmp	r3, #0
 801c918:	d05d      	beq.n	801c9d6 <_dtoa_r+0x976>
 801c91a:	6879      	ldr	r1, [r7, #4]
 801c91c:	4630      	mov	r0, r6
 801c91e:	f000 fa17 	bl	801cd50 <_Balloc>
 801c922:	4680      	mov	r8, r0
 801c924:	b928      	cbnz	r0, 801c932 <_dtoa_r+0x8d2>
 801c926:	4b82      	ldr	r3, [pc, #520]	; (801cb30 <_dtoa_r+0xad0>)
 801c928:	4602      	mov	r2, r0
 801c92a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c92e:	f7ff bbaf 	b.w	801c090 <_dtoa_r+0x30>
 801c932:	693a      	ldr	r2, [r7, #16]
 801c934:	3202      	adds	r2, #2
 801c936:	0092      	lsls	r2, r2, #2
 801c938:	f107 010c 	add.w	r1, r7, #12
 801c93c:	300c      	adds	r0, #12
 801c93e:	f7fe fd75 	bl	801b42c <memcpy>
 801c942:	2201      	movs	r2, #1
 801c944:	4641      	mov	r1, r8
 801c946:	4630      	mov	r0, r6
 801c948:	f000 fc14 	bl	801d174 <__lshift>
 801c94c:	9b01      	ldr	r3, [sp, #4]
 801c94e:	3301      	adds	r3, #1
 801c950:	9304      	str	r3, [sp, #16]
 801c952:	9b01      	ldr	r3, [sp, #4]
 801c954:	4453      	add	r3, sl
 801c956:	9308      	str	r3, [sp, #32]
 801c958:	9b02      	ldr	r3, [sp, #8]
 801c95a:	f003 0301 	and.w	r3, r3, #1
 801c95e:	46b9      	mov	r9, r7
 801c960:	9307      	str	r3, [sp, #28]
 801c962:	4607      	mov	r7, r0
 801c964:	9b04      	ldr	r3, [sp, #16]
 801c966:	4621      	mov	r1, r4
 801c968:	3b01      	subs	r3, #1
 801c96a:	4628      	mov	r0, r5
 801c96c:	9302      	str	r3, [sp, #8]
 801c96e:	f7ff fae9 	bl	801bf44 <quorem>
 801c972:	4603      	mov	r3, r0
 801c974:	3330      	adds	r3, #48	; 0x30
 801c976:	9005      	str	r0, [sp, #20]
 801c978:	4649      	mov	r1, r9
 801c97a:	4628      	mov	r0, r5
 801c97c:	9309      	str	r3, [sp, #36]	; 0x24
 801c97e:	f000 fc69 	bl	801d254 <__mcmp>
 801c982:	463a      	mov	r2, r7
 801c984:	4682      	mov	sl, r0
 801c986:	4621      	mov	r1, r4
 801c988:	4630      	mov	r0, r6
 801c98a:	f000 fc7f 	bl	801d28c <__mdiff>
 801c98e:	68c2      	ldr	r2, [r0, #12]
 801c990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c992:	4680      	mov	r8, r0
 801c994:	bb0a      	cbnz	r2, 801c9da <_dtoa_r+0x97a>
 801c996:	4601      	mov	r1, r0
 801c998:	4628      	mov	r0, r5
 801c99a:	f000 fc5b 	bl	801d254 <__mcmp>
 801c99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9a0:	4602      	mov	r2, r0
 801c9a2:	4641      	mov	r1, r8
 801c9a4:	4630      	mov	r0, r6
 801c9a6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c9aa:	f000 fa11 	bl	801cdd0 <_Bfree>
 801c9ae:	9b06      	ldr	r3, [sp, #24]
 801c9b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9b2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c9b6:	ea43 0102 	orr.w	r1, r3, r2
 801c9ba:	9b07      	ldr	r3, [sp, #28]
 801c9bc:	430b      	orrs	r3, r1
 801c9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9c0:	d10d      	bne.n	801c9de <_dtoa_r+0x97e>
 801c9c2:	2b39      	cmp	r3, #57	; 0x39
 801c9c4:	d029      	beq.n	801ca1a <_dtoa_r+0x9ba>
 801c9c6:	f1ba 0f00 	cmp.w	sl, #0
 801c9ca:	dd01      	ble.n	801c9d0 <_dtoa_r+0x970>
 801c9cc:	9b05      	ldr	r3, [sp, #20]
 801c9ce:	3331      	adds	r3, #49	; 0x31
 801c9d0:	9a02      	ldr	r2, [sp, #8]
 801c9d2:	7013      	strb	r3, [r2, #0]
 801c9d4:	e774      	b.n	801c8c0 <_dtoa_r+0x860>
 801c9d6:	4638      	mov	r0, r7
 801c9d8:	e7b8      	b.n	801c94c <_dtoa_r+0x8ec>
 801c9da:	2201      	movs	r2, #1
 801c9dc:	e7e1      	b.n	801c9a2 <_dtoa_r+0x942>
 801c9de:	f1ba 0f00 	cmp.w	sl, #0
 801c9e2:	db06      	blt.n	801c9f2 <_dtoa_r+0x992>
 801c9e4:	9906      	ldr	r1, [sp, #24]
 801c9e6:	ea41 0a0a 	orr.w	sl, r1, sl
 801c9ea:	9907      	ldr	r1, [sp, #28]
 801c9ec:	ea5a 0101 	orrs.w	r1, sl, r1
 801c9f0:	d120      	bne.n	801ca34 <_dtoa_r+0x9d4>
 801c9f2:	2a00      	cmp	r2, #0
 801c9f4:	ddec      	ble.n	801c9d0 <_dtoa_r+0x970>
 801c9f6:	4629      	mov	r1, r5
 801c9f8:	2201      	movs	r2, #1
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	9304      	str	r3, [sp, #16]
 801c9fe:	f000 fbb9 	bl	801d174 <__lshift>
 801ca02:	4621      	mov	r1, r4
 801ca04:	4605      	mov	r5, r0
 801ca06:	f000 fc25 	bl	801d254 <__mcmp>
 801ca0a:	2800      	cmp	r0, #0
 801ca0c:	9b04      	ldr	r3, [sp, #16]
 801ca0e:	dc02      	bgt.n	801ca16 <_dtoa_r+0x9b6>
 801ca10:	d1de      	bne.n	801c9d0 <_dtoa_r+0x970>
 801ca12:	07da      	lsls	r2, r3, #31
 801ca14:	d5dc      	bpl.n	801c9d0 <_dtoa_r+0x970>
 801ca16:	2b39      	cmp	r3, #57	; 0x39
 801ca18:	d1d8      	bne.n	801c9cc <_dtoa_r+0x96c>
 801ca1a:	9a02      	ldr	r2, [sp, #8]
 801ca1c:	2339      	movs	r3, #57	; 0x39
 801ca1e:	7013      	strb	r3, [r2, #0]
 801ca20:	4643      	mov	r3, r8
 801ca22:	4698      	mov	r8, r3
 801ca24:	3b01      	subs	r3, #1
 801ca26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ca2a:	2a39      	cmp	r2, #57	; 0x39
 801ca2c:	d051      	beq.n	801cad2 <_dtoa_r+0xa72>
 801ca2e:	3201      	adds	r2, #1
 801ca30:	701a      	strb	r2, [r3, #0]
 801ca32:	e745      	b.n	801c8c0 <_dtoa_r+0x860>
 801ca34:	2a00      	cmp	r2, #0
 801ca36:	dd03      	ble.n	801ca40 <_dtoa_r+0x9e0>
 801ca38:	2b39      	cmp	r3, #57	; 0x39
 801ca3a:	d0ee      	beq.n	801ca1a <_dtoa_r+0x9ba>
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	e7c7      	b.n	801c9d0 <_dtoa_r+0x970>
 801ca40:	9a04      	ldr	r2, [sp, #16]
 801ca42:	9908      	ldr	r1, [sp, #32]
 801ca44:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ca48:	428a      	cmp	r2, r1
 801ca4a:	d02b      	beq.n	801caa4 <_dtoa_r+0xa44>
 801ca4c:	4629      	mov	r1, r5
 801ca4e:	2300      	movs	r3, #0
 801ca50:	220a      	movs	r2, #10
 801ca52:	4630      	mov	r0, r6
 801ca54:	f000 f9de 	bl	801ce14 <__multadd>
 801ca58:	45b9      	cmp	r9, r7
 801ca5a:	4605      	mov	r5, r0
 801ca5c:	f04f 0300 	mov.w	r3, #0
 801ca60:	f04f 020a 	mov.w	r2, #10
 801ca64:	4649      	mov	r1, r9
 801ca66:	4630      	mov	r0, r6
 801ca68:	d107      	bne.n	801ca7a <_dtoa_r+0xa1a>
 801ca6a:	f000 f9d3 	bl	801ce14 <__multadd>
 801ca6e:	4681      	mov	r9, r0
 801ca70:	4607      	mov	r7, r0
 801ca72:	9b04      	ldr	r3, [sp, #16]
 801ca74:	3301      	adds	r3, #1
 801ca76:	9304      	str	r3, [sp, #16]
 801ca78:	e774      	b.n	801c964 <_dtoa_r+0x904>
 801ca7a:	f000 f9cb 	bl	801ce14 <__multadd>
 801ca7e:	4639      	mov	r1, r7
 801ca80:	4681      	mov	r9, r0
 801ca82:	2300      	movs	r3, #0
 801ca84:	220a      	movs	r2, #10
 801ca86:	4630      	mov	r0, r6
 801ca88:	f000 f9c4 	bl	801ce14 <__multadd>
 801ca8c:	4607      	mov	r7, r0
 801ca8e:	e7f0      	b.n	801ca72 <_dtoa_r+0xa12>
 801ca90:	f1ba 0f00 	cmp.w	sl, #0
 801ca94:	9a01      	ldr	r2, [sp, #4]
 801ca96:	bfcc      	ite	gt
 801ca98:	46d0      	movgt	r8, sl
 801ca9a:	f04f 0801 	movle.w	r8, #1
 801ca9e:	4490      	add	r8, r2
 801caa0:	f04f 0900 	mov.w	r9, #0
 801caa4:	4629      	mov	r1, r5
 801caa6:	2201      	movs	r2, #1
 801caa8:	4630      	mov	r0, r6
 801caaa:	9302      	str	r3, [sp, #8]
 801caac:	f000 fb62 	bl	801d174 <__lshift>
 801cab0:	4621      	mov	r1, r4
 801cab2:	4605      	mov	r5, r0
 801cab4:	f000 fbce 	bl	801d254 <__mcmp>
 801cab8:	2800      	cmp	r0, #0
 801caba:	dcb1      	bgt.n	801ca20 <_dtoa_r+0x9c0>
 801cabc:	d102      	bne.n	801cac4 <_dtoa_r+0xa64>
 801cabe:	9b02      	ldr	r3, [sp, #8]
 801cac0:	07db      	lsls	r3, r3, #31
 801cac2:	d4ad      	bmi.n	801ca20 <_dtoa_r+0x9c0>
 801cac4:	4643      	mov	r3, r8
 801cac6:	4698      	mov	r8, r3
 801cac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cacc:	2a30      	cmp	r2, #48	; 0x30
 801cace:	d0fa      	beq.n	801cac6 <_dtoa_r+0xa66>
 801cad0:	e6f6      	b.n	801c8c0 <_dtoa_r+0x860>
 801cad2:	9a01      	ldr	r2, [sp, #4]
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d1a4      	bne.n	801ca22 <_dtoa_r+0x9c2>
 801cad8:	f10b 0b01 	add.w	fp, fp, #1
 801cadc:	2331      	movs	r3, #49	; 0x31
 801cade:	e778      	b.n	801c9d2 <_dtoa_r+0x972>
 801cae0:	4b14      	ldr	r3, [pc, #80]	; (801cb34 <_dtoa_r+0xad4>)
 801cae2:	f7ff bb27 	b.w	801c134 <_dtoa_r+0xd4>
 801cae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cae8:	2b00      	cmp	r3, #0
 801caea:	f47f ab03 	bne.w	801c0f4 <_dtoa_r+0x94>
 801caee:	4b12      	ldr	r3, [pc, #72]	; (801cb38 <_dtoa_r+0xad8>)
 801caf0:	f7ff bb20 	b.w	801c134 <_dtoa_r+0xd4>
 801caf4:	f1ba 0f00 	cmp.w	sl, #0
 801caf8:	dc03      	bgt.n	801cb02 <_dtoa_r+0xaa2>
 801cafa:	9b06      	ldr	r3, [sp, #24]
 801cafc:	2b02      	cmp	r3, #2
 801cafe:	f73f aec7 	bgt.w	801c890 <_dtoa_r+0x830>
 801cb02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cb06:	4621      	mov	r1, r4
 801cb08:	4628      	mov	r0, r5
 801cb0a:	f7ff fa1b 	bl	801bf44 <quorem>
 801cb0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cb12:	f808 3b01 	strb.w	r3, [r8], #1
 801cb16:	9a01      	ldr	r2, [sp, #4]
 801cb18:	eba8 0202 	sub.w	r2, r8, r2
 801cb1c:	4592      	cmp	sl, r2
 801cb1e:	ddb7      	ble.n	801ca90 <_dtoa_r+0xa30>
 801cb20:	4629      	mov	r1, r5
 801cb22:	2300      	movs	r3, #0
 801cb24:	220a      	movs	r2, #10
 801cb26:	4630      	mov	r0, r6
 801cb28:	f000 f974 	bl	801ce14 <__multadd>
 801cb2c:	4605      	mov	r5, r0
 801cb2e:	e7ea      	b.n	801cb06 <_dtoa_r+0xaa6>
 801cb30:	0803d463 	.word	0x0803d463
 801cb34:	0803d3c0 	.word	0x0803d3c0
 801cb38:	0803d3e4 	.word	0x0803d3e4

0801cb3c <std>:
 801cb3c:	2300      	movs	r3, #0
 801cb3e:	b510      	push	{r4, lr}
 801cb40:	4604      	mov	r4, r0
 801cb42:	e9c0 3300 	strd	r3, r3, [r0]
 801cb46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cb4a:	6083      	str	r3, [r0, #8]
 801cb4c:	8181      	strh	r1, [r0, #12]
 801cb4e:	6643      	str	r3, [r0, #100]	; 0x64
 801cb50:	81c2      	strh	r2, [r0, #14]
 801cb52:	6183      	str	r3, [r0, #24]
 801cb54:	4619      	mov	r1, r3
 801cb56:	2208      	movs	r2, #8
 801cb58:	305c      	adds	r0, #92	; 0x5c
 801cb5a:	f7fe fc75 	bl	801b448 <memset>
 801cb5e:	4b05      	ldr	r3, [pc, #20]	; (801cb74 <std+0x38>)
 801cb60:	6263      	str	r3, [r4, #36]	; 0x24
 801cb62:	4b05      	ldr	r3, [pc, #20]	; (801cb78 <std+0x3c>)
 801cb64:	62a3      	str	r3, [r4, #40]	; 0x28
 801cb66:	4b05      	ldr	r3, [pc, #20]	; (801cb7c <std+0x40>)
 801cb68:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cb6a:	4b05      	ldr	r3, [pc, #20]	; (801cb80 <std+0x44>)
 801cb6c:	6224      	str	r4, [r4, #32]
 801cb6e:	6323      	str	r3, [r4, #48]	; 0x30
 801cb70:	bd10      	pop	{r4, pc}
 801cb72:	bf00      	nop
 801cb74:	0801d739 	.word	0x0801d739
 801cb78:	0801d75b 	.word	0x0801d75b
 801cb7c:	0801d793 	.word	0x0801d793
 801cb80:	0801d7b7 	.word	0x0801d7b7

0801cb84 <_cleanup_r>:
 801cb84:	4901      	ldr	r1, [pc, #4]	; (801cb8c <_cleanup_r+0x8>)
 801cb86:	f000 b8af 	b.w	801cce8 <_fwalk_reent>
 801cb8a:	bf00      	nop
 801cb8c:	0801dacd 	.word	0x0801dacd

0801cb90 <__sfmoreglue>:
 801cb90:	b570      	push	{r4, r5, r6, lr}
 801cb92:	2268      	movs	r2, #104	; 0x68
 801cb94:	1e4d      	subs	r5, r1, #1
 801cb96:	4355      	muls	r5, r2
 801cb98:	460e      	mov	r6, r1
 801cb9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cb9e:	f7fe fcc7 	bl	801b530 <_malloc_r>
 801cba2:	4604      	mov	r4, r0
 801cba4:	b140      	cbz	r0, 801cbb8 <__sfmoreglue+0x28>
 801cba6:	2100      	movs	r1, #0
 801cba8:	e9c0 1600 	strd	r1, r6, [r0]
 801cbac:	300c      	adds	r0, #12
 801cbae:	60a0      	str	r0, [r4, #8]
 801cbb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cbb4:	f7fe fc48 	bl	801b448 <memset>
 801cbb8:	4620      	mov	r0, r4
 801cbba:	bd70      	pop	{r4, r5, r6, pc}

0801cbbc <__sfp_lock_acquire>:
 801cbbc:	4801      	ldr	r0, [pc, #4]	; (801cbc4 <__sfp_lock_acquire+0x8>)
 801cbbe:	f000 b8b8 	b.w	801cd32 <__retarget_lock_acquire_recursive>
 801cbc2:	bf00      	nop
 801cbc4:	2407f6d5 	.word	0x2407f6d5

0801cbc8 <__sfp_lock_release>:
 801cbc8:	4801      	ldr	r0, [pc, #4]	; (801cbd0 <__sfp_lock_release+0x8>)
 801cbca:	f000 b8b3 	b.w	801cd34 <__retarget_lock_release_recursive>
 801cbce:	bf00      	nop
 801cbd0:	2407f6d5 	.word	0x2407f6d5

0801cbd4 <__sinit_lock_acquire>:
 801cbd4:	4801      	ldr	r0, [pc, #4]	; (801cbdc <__sinit_lock_acquire+0x8>)
 801cbd6:	f000 b8ac 	b.w	801cd32 <__retarget_lock_acquire_recursive>
 801cbda:	bf00      	nop
 801cbdc:	2407f6d6 	.word	0x2407f6d6

0801cbe0 <__sinit_lock_release>:
 801cbe0:	4801      	ldr	r0, [pc, #4]	; (801cbe8 <__sinit_lock_release+0x8>)
 801cbe2:	f000 b8a7 	b.w	801cd34 <__retarget_lock_release_recursive>
 801cbe6:	bf00      	nop
 801cbe8:	2407f6d6 	.word	0x2407f6d6

0801cbec <__sinit>:
 801cbec:	b510      	push	{r4, lr}
 801cbee:	4604      	mov	r4, r0
 801cbf0:	f7ff fff0 	bl	801cbd4 <__sinit_lock_acquire>
 801cbf4:	69a3      	ldr	r3, [r4, #24]
 801cbf6:	b11b      	cbz	r3, 801cc00 <__sinit+0x14>
 801cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbfc:	f7ff bff0 	b.w	801cbe0 <__sinit_lock_release>
 801cc00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cc04:	6523      	str	r3, [r4, #80]	; 0x50
 801cc06:	4b13      	ldr	r3, [pc, #76]	; (801cc54 <__sinit+0x68>)
 801cc08:	4a13      	ldr	r2, [pc, #76]	; (801cc58 <__sinit+0x6c>)
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	62a2      	str	r2, [r4, #40]	; 0x28
 801cc0e:	42a3      	cmp	r3, r4
 801cc10:	bf04      	itt	eq
 801cc12:	2301      	moveq	r3, #1
 801cc14:	61a3      	streq	r3, [r4, #24]
 801cc16:	4620      	mov	r0, r4
 801cc18:	f000 f820 	bl	801cc5c <__sfp>
 801cc1c:	6060      	str	r0, [r4, #4]
 801cc1e:	4620      	mov	r0, r4
 801cc20:	f000 f81c 	bl	801cc5c <__sfp>
 801cc24:	60a0      	str	r0, [r4, #8]
 801cc26:	4620      	mov	r0, r4
 801cc28:	f000 f818 	bl	801cc5c <__sfp>
 801cc2c:	2200      	movs	r2, #0
 801cc2e:	60e0      	str	r0, [r4, #12]
 801cc30:	2104      	movs	r1, #4
 801cc32:	6860      	ldr	r0, [r4, #4]
 801cc34:	f7ff ff82 	bl	801cb3c <std>
 801cc38:	68a0      	ldr	r0, [r4, #8]
 801cc3a:	2201      	movs	r2, #1
 801cc3c:	2109      	movs	r1, #9
 801cc3e:	f7ff ff7d 	bl	801cb3c <std>
 801cc42:	68e0      	ldr	r0, [r4, #12]
 801cc44:	2202      	movs	r2, #2
 801cc46:	2112      	movs	r1, #18
 801cc48:	f7ff ff78 	bl	801cb3c <std>
 801cc4c:	2301      	movs	r3, #1
 801cc4e:	61a3      	str	r3, [r4, #24]
 801cc50:	e7d2      	b.n	801cbf8 <__sinit+0xc>
 801cc52:	bf00      	nop
 801cc54:	0803d3ac 	.word	0x0803d3ac
 801cc58:	0801cb85 	.word	0x0801cb85

0801cc5c <__sfp>:
 801cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc5e:	4607      	mov	r7, r0
 801cc60:	f7ff ffac 	bl	801cbbc <__sfp_lock_acquire>
 801cc64:	4b1e      	ldr	r3, [pc, #120]	; (801cce0 <__sfp+0x84>)
 801cc66:	681e      	ldr	r6, [r3, #0]
 801cc68:	69b3      	ldr	r3, [r6, #24]
 801cc6a:	b913      	cbnz	r3, 801cc72 <__sfp+0x16>
 801cc6c:	4630      	mov	r0, r6
 801cc6e:	f7ff ffbd 	bl	801cbec <__sinit>
 801cc72:	3648      	adds	r6, #72	; 0x48
 801cc74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cc78:	3b01      	subs	r3, #1
 801cc7a:	d503      	bpl.n	801cc84 <__sfp+0x28>
 801cc7c:	6833      	ldr	r3, [r6, #0]
 801cc7e:	b30b      	cbz	r3, 801ccc4 <__sfp+0x68>
 801cc80:	6836      	ldr	r6, [r6, #0]
 801cc82:	e7f7      	b.n	801cc74 <__sfp+0x18>
 801cc84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cc88:	b9d5      	cbnz	r5, 801ccc0 <__sfp+0x64>
 801cc8a:	4b16      	ldr	r3, [pc, #88]	; (801cce4 <__sfp+0x88>)
 801cc8c:	60e3      	str	r3, [r4, #12]
 801cc8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cc92:	6665      	str	r5, [r4, #100]	; 0x64
 801cc94:	f000 f84c 	bl	801cd30 <__retarget_lock_init_recursive>
 801cc98:	f7ff ff96 	bl	801cbc8 <__sfp_lock_release>
 801cc9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cca4:	6025      	str	r5, [r4, #0]
 801cca6:	61a5      	str	r5, [r4, #24]
 801cca8:	2208      	movs	r2, #8
 801ccaa:	4629      	mov	r1, r5
 801ccac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ccb0:	f7fe fbca 	bl	801b448 <memset>
 801ccb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ccb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ccbc:	4620      	mov	r0, r4
 801ccbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ccc0:	3468      	adds	r4, #104	; 0x68
 801ccc2:	e7d9      	b.n	801cc78 <__sfp+0x1c>
 801ccc4:	2104      	movs	r1, #4
 801ccc6:	4638      	mov	r0, r7
 801ccc8:	f7ff ff62 	bl	801cb90 <__sfmoreglue>
 801cccc:	4604      	mov	r4, r0
 801ccce:	6030      	str	r0, [r6, #0]
 801ccd0:	2800      	cmp	r0, #0
 801ccd2:	d1d5      	bne.n	801cc80 <__sfp+0x24>
 801ccd4:	f7ff ff78 	bl	801cbc8 <__sfp_lock_release>
 801ccd8:	230c      	movs	r3, #12
 801ccda:	603b      	str	r3, [r7, #0]
 801ccdc:	e7ee      	b.n	801ccbc <__sfp+0x60>
 801ccde:	bf00      	nop
 801cce0:	0803d3ac 	.word	0x0803d3ac
 801cce4:	ffff0001 	.word	0xffff0001

0801cce8 <_fwalk_reent>:
 801cce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccec:	4606      	mov	r6, r0
 801ccee:	4688      	mov	r8, r1
 801ccf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ccf4:	2700      	movs	r7, #0
 801ccf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ccfa:	f1b9 0901 	subs.w	r9, r9, #1
 801ccfe:	d505      	bpl.n	801cd0c <_fwalk_reent+0x24>
 801cd00:	6824      	ldr	r4, [r4, #0]
 801cd02:	2c00      	cmp	r4, #0
 801cd04:	d1f7      	bne.n	801ccf6 <_fwalk_reent+0xe>
 801cd06:	4638      	mov	r0, r7
 801cd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd0c:	89ab      	ldrh	r3, [r5, #12]
 801cd0e:	2b01      	cmp	r3, #1
 801cd10:	d907      	bls.n	801cd22 <_fwalk_reent+0x3a>
 801cd12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cd16:	3301      	adds	r3, #1
 801cd18:	d003      	beq.n	801cd22 <_fwalk_reent+0x3a>
 801cd1a:	4629      	mov	r1, r5
 801cd1c:	4630      	mov	r0, r6
 801cd1e:	47c0      	blx	r8
 801cd20:	4307      	orrs	r7, r0
 801cd22:	3568      	adds	r5, #104	; 0x68
 801cd24:	e7e9      	b.n	801ccfa <_fwalk_reent+0x12>
	...

0801cd28 <_localeconv_r>:
 801cd28:	4800      	ldr	r0, [pc, #0]	; (801cd2c <_localeconv_r+0x4>)
 801cd2a:	4770      	bx	lr
 801cd2c:	240001fc 	.word	0x240001fc

0801cd30 <__retarget_lock_init_recursive>:
 801cd30:	4770      	bx	lr

0801cd32 <__retarget_lock_acquire_recursive>:
 801cd32:	4770      	bx	lr

0801cd34 <__retarget_lock_release_recursive>:
 801cd34:	4770      	bx	lr
	...

0801cd38 <__malloc_lock>:
 801cd38:	4801      	ldr	r0, [pc, #4]	; (801cd40 <__malloc_lock+0x8>)
 801cd3a:	f7ff bffa 	b.w	801cd32 <__retarget_lock_acquire_recursive>
 801cd3e:	bf00      	nop
 801cd40:	2407f6d4 	.word	0x2407f6d4

0801cd44 <__malloc_unlock>:
 801cd44:	4801      	ldr	r0, [pc, #4]	; (801cd4c <__malloc_unlock+0x8>)
 801cd46:	f7ff bff5 	b.w	801cd34 <__retarget_lock_release_recursive>
 801cd4a:	bf00      	nop
 801cd4c:	2407f6d4 	.word	0x2407f6d4

0801cd50 <_Balloc>:
 801cd50:	b570      	push	{r4, r5, r6, lr}
 801cd52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cd54:	4604      	mov	r4, r0
 801cd56:	460d      	mov	r5, r1
 801cd58:	b976      	cbnz	r6, 801cd78 <_Balloc+0x28>
 801cd5a:	2010      	movs	r0, #16
 801cd5c:	f7fe fb56 	bl	801b40c <malloc>
 801cd60:	4602      	mov	r2, r0
 801cd62:	6260      	str	r0, [r4, #36]	; 0x24
 801cd64:	b920      	cbnz	r0, 801cd70 <_Balloc+0x20>
 801cd66:	4b18      	ldr	r3, [pc, #96]	; (801cdc8 <_Balloc+0x78>)
 801cd68:	4818      	ldr	r0, [pc, #96]	; (801cdcc <_Balloc+0x7c>)
 801cd6a:	2166      	movs	r1, #102	; 0x66
 801cd6c:	f000 fdfa 	bl	801d964 <__assert_func>
 801cd70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd74:	6006      	str	r6, [r0, #0]
 801cd76:	60c6      	str	r6, [r0, #12]
 801cd78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cd7a:	68f3      	ldr	r3, [r6, #12]
 801cd7c:	b183      	cbz	r3, 801cda0 <_Balloc+0x50>
 801cd7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cd80:	68db      	ldr	r3, [r3, #12]
 801cd82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cd86:	b9b8      	cbnz	r0, 801cdb8 <_Balloc+0x68>
 801cd88:	2101      	movs	r1, #1
 801cd8a:	fa01 f605 	lsl.w	r6, r1, r5
 801cd8e:	1d72      	adds	r2, r6, #5
 801cd90:	0092      	lsls	r2, r2, #2
 801cd92:	4620      	mov	r0, r4
 801cd94:	f000 fb60 	bl	801d458 <_calloc_r>
 801cd98:	b160      	cbz	r0, 801cdb4 <_Balloc+0x64>
 801cd9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cd9e:	e00e      	b.n	801cdbe <_Balloc+0x6e>
 801cda0:	2221      	movs	r2, #33	; 0x21
 801cda2:	2104      	movs	r1, #4
 801cda4:	4620      	mov	r0, r4
 801cda6:	f000 fb57 	bl	801d458 <_calloc_r>
 801cdaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cdac:	60f0      	str	r0, [r6, #12]
 801cdae:	68db      	ldr	r3, [r3, #12]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d1e4      	bne.n	801cd7e <_Balloc+0x2e>
 801cdb4:	2000      	movs	r0, #0
 801cdb6:	bd70      	pop	{r4, r5, r6, pc}
 801cdb8:	6802      	ldr	r2, [r0, #0]
 801cdba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cdc4:	e7f7      	b.n	801cdb6 <_Balloc+0x66>
 801cdc6:	bf00      	nop
 801cdc8:	0803d3f1 	.word	0x0803d3f1
 801cdcc:	0803d4d4 	.word	0x0803d4d4

0801cdd0 <_Bfree>:
 801cdd0:	b570      	push	{r4, r5, r6, lr}
 801cdd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cdd4:	4605      	mov	r5, r0
 801cdd6:	460c      	mov	r4, r1
 801cdd8:	b976      	cbnz	r6, 801cdf8 <_Bfree+0x28>
 801cdda:	2010      	movs	r0, #16
 801cddc:	f7fe fb16 	bl	801b40c <malloc>
 801cde0:	4602      	mov	r2, r0
 801cde2:	6268      	str	r0, [r5, #36]	; 0x24
 801cde4:	b920      	cbnz	r0, 801cdf0 <_Bfree+0x20>
 801cde6:	4b09      	ldr	r3, [pc, #36]	; (801ce0c <_Bfree+0x3c>)
 801cde8:	4809      	ldr	r0, [pc, #36]	; (801ce10 <_Bfree+0x40>)
 801cdea:	218a      	movs	r1, #138	; 0x8a
 801cdec:	f000 fdba 	bl	801d964 <__assert_func>
 801cdf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cdf4:	6006      	str	r6, [r0, #0]
 801cdf6:	60c6      	str	r6, [r0, #12]
 801cdf8:	b13c      	cbz	r4, 801ce0a <_Bfree+0x3a>
 801cdfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cdfc:	6862      	ldr	r2, [r4, #4]
 801cdfe:	68db      	ldr	r3, [r3, #12]
 801ce00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ce04:	6021      	str	r1, [r4, #0]
 801ce06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ce0a:	bd70      	pop	{r4, r5, r6, pc}
 801ce0c:	0803d3f1 	.word	0x0803d3f1
 801ce10:	0803d4d4 	.word	0x0803d4d4

0801ce14 <__multadd>:
 801ce14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce18:	690d      	ldr	r5, [r1, #16]
 801ce1a:	4607      	mov	r7, r0
 801ce1c:	460c      	mov	r4, r1
 801ce1e:	461e      	mov	r6, r3
 801ce20:	f101 0c14 	add.w	ip, r1, #20
 801ce24:	2000      	movs	r0, #0
 801ce26:	f8dc 3000 	ldr.w	r3, [ip]
 801ce2a:	b299      	uxth	r1, r3
 801ce2c:	fb02 6101 	mla	r1, r2, r1, r6
 801ce30:	0c1e      	lsrs	r6, r3, #16
 801ce32:	0c0b      	lsrs	r3, r1, #16
 801ce34:	fb02 3306 	mla	r3, r2, r6, r3
 801ce38:	b289      	uxth	r1, r1
 801ce3a:	3001      	adds	r0, #1
 801ce3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ce40:	4285      	cmp	r5, r0
 801ce42:	f84c 1b04 	str.w	r1, [ip], #4
 801ce46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ce4a:	dcec      	bgt.n	801ce26 <__multadd+0x12>
 801ce4c:	b30e      	cbz	r6, 801ce92 <__multadd+0x7e>
 801ce4e:	68a3      	ldr	r3, [r4, #8]
 801ce50:	42ab      	cmp	r3, r5
 801ce52:	dc19      	bgt.n	801ce88 <__multadd+0x74>
 801ce54:	6861      	ldr	r1, [r4, #4]
 801ce56:	4638      	mov	r0, r7
 801ce58:	3101      	adds	r1, #1
 801ce5a:	f7ff ff79 	bl	801cd50 <_Balloc>
 801ce5e:	4680      	mov	r8, r0
 801ce60:	b928      	cbnz	r0, 801ce6e <__multadd+0x5a>
 801ce62:	4602      	mov	r2, r0
 801ce64:	4b0c      	ldr	r3, [pc, #48]	; (801ce98 <__multadd+0x84>)
 801ce66:	480d      	ldr	r0, [pc, #52]	; (801ce9c <__multadd+0x88>)
 801ce68:	21b5      	movs	r1, #181	; 0xb5
 801ce6a:	f000 fd7b 	bl	801d964 <__assert_func>
 801ce6e:	6922      	ldr	r2, [r4, #16]
 801ce70:	3202      	adds	r2, #2
 801ce72:	f104 010c 	add.w	r1, r4, #12
 801ce76:	0092      	lsls	r2, r2, #2
 801ce78:	300c      	adds	r0, #12
 801ce7a:	f7fe fad7 	bl	801b42c <memcpy>
 801ce7e:	4621      	mov	r1, r4
 801ce80:	4638      	mov	r0, r7
 801ce82:	f7ff ffa5 	bl	801cdd0 <_Bfree>
 801ce86:	4644      	mov	r4, r8
 801ce88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ce8c:	3501      	adds	r5, #1
 801ce8e:	615e      	str	r6, [r3, #20]
 801ce90:	6125      	str	r5, [r4, #16]
 801ce92:	4620      	mov	r0, r4
 801ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce98:	0803d463 	.word	0x0803d463
 801ce9c:	0803d4d4 	.word	0x0803d4d4

0801cea0 <__hi0bits>:
 801cea0:	0c03      	lsrs	r3, r0, #16
 801cea2:	041b      	lsls	r3, r3, #16
 801cea4:	b9d3      	cbnz	r3, 801cedc <__hi0bits+0x3c>
 801cea6:	0400      	lsls	r0, r0, #16
 801cea8:	2310      	movs	r3, #16
 801ceaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ceae:	bf04      	itt	eq
 801ceb0:	0200      	lsleq	r0, r0, #8
 801ceb2:	3308      	addeq	r3, #8
 801ceb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ceb8:	bf04      	itt	eq
 801ceba:	0100      	lsleq	r0, r0, #4
 801cebc:	3304      	addeq	r3, #4
 801cebe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cec2:	bf04      	itt	eq
 801cec4:	0080      	lsleq	r0, r0, #2
 801cec6:	3302      	addeq	r3, #2
 801cec8:	2800      	cmp	r0, #0
 801ceca:	db05      	blt.n	801ced8 <__hi0bits+0x38>
 801cecc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ced0:	f103 0301 	add.w	r3, r3, #1
 801ced4:	bf08      	it	eq
 801ced6:	2320      	moveq	r3, #32
 801ced8:	4618      	mov	r0, r3
 801ceda:	4770      	bx	lr
 801cedc:	2300      	movs	r3, #0
 801cede:	e7e4      	b.n	801ceaa <__hi0bits+0xa>

0801cee0 <__lo0bits>:
 801cee0:	6803      	ldr	r3, [r0, #0]
 801cee2:	f013 0207 	ands.w	r2, r3, #7
 801cee6:	4601      	mov	r1, r0
 801cee8:	d00b      	beq.n	801cf02 <__lo0bits+0x22>
 801ceea:	07da      	lsls	r2, r3, #31
 801ceec:	d423      	bmi.n	801cf36 <__lo0bits+0x56>
 801ceee:	0798      	lsls	r0, r3, #30
 801cef0:	bf49      	itett	mi
 801cef2:	085b      	lsrmi	r3, r3, #1
 801cef4:	089b      	lsrpl	r3, r3, #2
 801cef6:	2001      	movmi	r0, #1
 801cef8:	600b      	strmi	r3, [r1, #0]
 801cefa:	bf5c      	itt	pl
 801cefc:	600b      	strpl	r3, [r1, #0]
 801cefe:	2002      	movpl	r0, #2
 801cf00:	4770      	bx	lr
 801cf02:	b298      	uxth	r0, r3
 801cf04:	b9a8      	cbnz	r0, 801cf32 <__lo0bits+0x52>
 801cf06:	0c1b      	lsrs	r3, r3, #16
 801cf08:	2010      	movs	r0, #16
 801cf0a:	b2da      	uxtb	r2, r3
 801cf0c:	b90a      	cbnz	r2, 801cf12 <__lo0bits+0x32>
 801cf0e:	3008      	adds	r0, #8
 801cf10:	0a1b      	lsrs	r3, r3, #8
 801cf12:	071a      	lsls	r2, r3, #28
 801cf14:	bf04      	itt	eq
 801cf16:	091b      	lsreq	r3, r3, #4
 801cf18:	3004      	addeq	r0, #4
 801cf1a:	079a      	lsls	r2, r3, #30
 801cf1c:	bf04      	itt	eq
 801cf1e:	089b      	lsreq	r3, r3, #2
 801cf20:	3002      	addeq	r0, #2
 801cf22:	07da      	lsls	r2, r3, #31
 801cf24:	d403      	bmi.n	801cf2e <__lo0bits+0x4e>
 801cf26:	085b      	lsrs	r3, r3, #1
 801cf28:	f100 0001 	add.w	r0, r0, #1
 801cf2c:	d005      	beq.n	801cf3a <__lo0bits+0x5a>
 801cf2e:	600b      	str	r3, [r1, #0]
 801cf30:	4770      	bx	lr
 801cf32:	4610      	mov	r0, r2
 801cf34:	e7e9      	b.n	801cf0a <__lo0bits+0x2a>
 801cf36:	2000      	movs	r0, #0
 801cf38:	4770      	bx	lr
 801cf3a:	2020      	movs	r0, #32
 801cf3c:	4770      	bx	lr
	...

0801cf40 <__i2b>:
 801cf40:	b510      	push	{r4, lr}
 801cf42:	460c      	mov	r4, r1
 801cf44:	2101      	movs	r1, #1
 801cf46:	f7ff ff03 	bl	801cd50 <_Balloc>
 801cf4a:	4602      	mov	r2, r0
 801cf4c:	b928      	cbnz	r0, 801cf5a <__i2b+0x1a>
 801cf4e:	4b05      	ldr	r3, [pc, #20]	; (801cf64 <__i2b+0x24>)
 801cf50:	4805      	ldr	r0, [pc, #20]	; (801cf68 <__i2b+0x28>)
 801cf52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cf56:	f000 fd05 	bl	801d964 <__assert_func>
 801cf5a:	2301      	movs	r3, #1
 801cf5c:	6144      	str	r4, [r0, #20]
 801cf5e:	6103      	str	r3, [r0, #16]
 801cf60:	bd10      	pop	{r4, pc}
 801cf62:	bf00      	nop
 801cf64:	0803d463 	.word	0x0803d463
 801cf68:	0803d4d4 	.word	0x0803d4d4

0801cf6c <__multiply>:
 801cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf70:	4691      	mov	r9, r2
 801cf72:	690a      	ldr	r2, [r1, #16]
 801cf74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	bfb8      	it	lt
 801cf7c:	460b      	movlt	r3, r1
 801cf7e:	460c      	mov	r4, r1
 801cf80:	bfbc      	itt	lt
 801cf82:	464c      	movlt	r4, r9
 801cf84:	4699      	movlt	r9, r3
 801cf86:	6927      	ldr	r7, [r4, #16]
 801cf88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cf8c:	68a3      	ldr	r3, [r4, #8]
 801cf8e:	6861      	ldr	r1, [r4, #4]
 801cf90:	eb07 060a 	add.w	r6, r7, sl
 801cf94:	42b3      	cmp	r3, r6
 801cf96:	b085      	sub	sp, #20
 801cf98:	bfb8      	it	lt
 801cf9a:	3101      	addlt	r1, #1
 801cf9c:	f7ff fed8 	bl	801cd50 <_Balloc>
 801cfa0:	b930      	cbnz	r0, 801cfb0 <__multiply+0x44>
 801cfa2:	4602      	mov	r2, r0
 801cfa4:	4b44      	ldr	r3, [pc, #272]	; (801d0b8 <__multiply+0x14c>)
 801cfa6:	4845      	ldr	r0, [pc, #276]	; (801d0bc <__multiply+0x150>)
 801cfa8:	f240 115d 	movw	r1, #349	; 0x15d
 801cfac:	f000 fcda 	bl	801d964 <__assert_func>
 801cfb0:	f100 0514 	add.w	r5, r0, #20
 801cfb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cfb8:	462b      	mov	r3, r5
 801cfba:	2200      	movs	r2, #0
 801cfbc:	4543      	cmp	r3, r8
 801cfbe:	d321      	bcc.n	801d004 <__multiply+0x98>
 801cfc0:	f104 0314 	add.w	r3, r4, #20
 801cfc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cfc8:	f109 0314 	add.w	r3, r9, #20
 801cfcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cfd0:	9202      	str	r2, [sp, #8]
 801cfd2:	1b3a      	subs	r2, r7, r4
 801cfd4:	3a15      	subs	r2, #21
 801cfd6:	f022 0203 	bic.w	r2, r2, #3
 801cfda:	3204      	adds	r2, #4
 801cfdc:	f104 0115 	add.w	r1, r4, #21
 801cfe0:	428f      	cmp	r7, r1
 801cfe2:	bf38      	it	cc
 801cfe4:	2204      	movcc	r2, #4
 801cfe6:	9201      	str	r2, [sp, #4]
 801cfe8:	9a02      	ldr	r2, [sp, #8]
 801cfea:	9303      	str	r3, [sp, #12]
 801cfec:	429a      	cmp	r2, r3
 801cfee:	d80c      	bhi.n	801d00a <__multiply+0x9e>
 801cff0:	2e00      	cmp	r6, #0
 801cff2:	dd03      	ble.n	801cffc <__multiply+0x90>
 801cff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d05a      	beq.n	801d0b2 <__multiply+0x146>
 801cffc:	6106      	str	r6, [r0, #16]
 801cffe:	b005      	add	sp, #20
 801d000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d004:	f843 2b04 	str.w	r2, [r3], #4
 801d008:	e7d8      	b.n	801cfbc <__multiply+0x50>
 801d00a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d00e:	f1ba 0f00 	cmp.w	sl, #0
 801d012:	d024      	beq.n	801d05e <__multiply+0xf2>
 801d014:	f104 0e14 	add.w	lr, r4, #20
 801d018:	46a9      	mov	r9, r5
 801d01a:	f04f 0c00 	mov.w	ip, #0
 801d01e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d022:	f8d9 1000 	ldr.w	r1, [r9]
 801d026:	fa1f fb82 	uxth.w	fp, r2
 801d02a:	b289      	uxth	r1, r1
 801d02c:	fb0a 110b 	mla	r1, sl, fp, r1
 801d030:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d034:	f8d9 2000 	ldr.w	r2, [r9]
 801d038:	4461      	add	r1, ip
 801d03a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d03e:	fb0a c20b 	mla	r2, sl, fp, ip
 801d042:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d046:	b289      	uxth	r1, r1
 801d048:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d04c:	4577      	cmp	r7, lr
 801d04e:	f849 1b04 	str.w	r1, [r9], #4
 801d052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d056:	d8e2      	bhi.n	801d01e <__multiply+0xb2>
 801d058:	9a01      	ldr	r2, [sp, #4]
 801d05a:	f845 c002 	str.w	ip, [r5, r2]
 801d05e:	9a03      	ldr	r2, [sp, #12]
 801d060:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d064:	3304      	adds	r3, #4
 801d066:	f1b9 0f00 	cmp.w	r9, #0
 801d06a:	d020      	beq.n	801d0ae <__multiply+0x142>
 801d06c:	6829      	ldr	r1, [r5, #0]
 801d06e:	f104 0c14 	add.w	ip, r4, #20
 801d072:	46ae      	mov	lr, r5
 801d074:	f04f 0a00 	mov.w	sl, #0
 801d078:	f8bc b000 	ldrh.w	fp, [ip]
 801d07c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d080:	fb09 220b 	mla	r2, r9, fp, r2
 801d084:	4492      	add	sl, r2
 801d086:	b289      	uxth	r1, r1
 801d088:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801d08c:	f84e 1b04 	str.w	r1, [lr], #4
 801d090:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d094:	f8be 1000 	ldrh.w	r1, [lr]
 801d098:	0c12      	lsrs	r2, r2, #16
 801d09a:	fb09 1102 	mla	r1, r9, r2, r1
 801d09e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801d0a2:	4567      	cmp	r7, ip
 801d0a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d0a8:	d8e6      	bhi.n	801d078 <__multiply+0x10c>
 801d0aa:	9a01      	ldr	r2, [sp, #4]
 801d0ac:	50a9      	str	r1, [r5, r2]
 801d0ae:	3504      	adds	r5, #4
 801d0b0:	e79a      	b.n	801cfe8 <__multiply+0x7c>
 801d0b2:	3e01      	subs	r6, #1
 801d0b4:	e79c      	b.n	801cff0 <__multiply+0x84>
 801d0b6:	bf00      	nop
 801d0b8:	0803d463 	.word	0x0803d463
 801d0bc:	0803d4d4 	.word	0x0803d4d4

0801d0c0 <__pow5mult>:
 801d0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0c4:	4615      	mov	r5, r2
 801d0c6:	f012 0203 	ands.w	r2, r2, #3
 801d0ca:	4606      	mov	r6, r0
 801d0cc:	460f      	mov	r7, r1
 801d0ce:	d007      	beq.n	801d0e0 <__pow5mult+0x20>
 801d0d0:	4c25      	ldr	r4, [pc, #148]	; (801d168 <__pow5mult+0xa8>)
 801d0d2:	3a01      	subs	r2, #1
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d0da:	f7ff fe9b 	bl	801ce14 <__multadd>
 801d0de:	4607      	mov	r7, r0
 801d0e0:	10ad      	asrs	r5, r5, #2
 801d0e2:	d03d      	beq.n	801d160 <__pow5mult+0xa0>
 801d0e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d0e6:	b97c      	cbnz	r4, 801d108 <__pow5mult+0x48>
 801d0e8:	2010      	movs	r0, #16
 801d0ea:	f7fe f98f 	bl	801b40c <malloc>
 801d0ee:	4602      	mov	r2, r0
 801d0f0:	6270      	str	r0, [r6, #36]	; 0x24
 801d0f2:	b928      	cbnz	r0, 801d100 <__pow5mult+0x40>
 801d0f4:	4b1d      	ldr	r3, [pc, #116]	; (801d16c <__pow5mult+0xac>)
 801d0f6:	481e      	ldr	r0, [pc, #120]	; (801d170 <__pow5mult+0xb0>)
 801d0f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d0fc:	f000 fc32 	bl	801d964 <__assert_func>
 801d100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d104:	6004      	str	r4, [r0, #0]
 801d106:	60c4      	str	r4, [r0, #12]
 801d108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d110:	b94c      	cbnz	r4, 801d126 <__pow5mult+0x66>
 801d112:	f240 2171 	movw	r1, #625	; 0x271
 801d116:	4630      	mov	r0, r6
 801d118:	f7ff ff12 	bl	801cf40 <__i2b>
 801d11c:	2300      	movs	r3, #0
 801d11e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d122:	4604      	mov	r4, r0
 801d124:	6003      	str	r3, [r0, #0]
 801d126:	f04f 0900 	mov.w	r9, #0
 801d12a:	07eb      	lsls	r3, r5, #31
 801d12c:	d50a      	bpl.n	801d144 <__pow5mult+0x84>
 801d12e:	4639      	mov	r1, r7
 801d130:	4622      	mov	r2, r4
 801d132:	4630      	mov	r0, r6
 801d134:	f7ff ff1a 	bl	801cf6c <__multiply>
 801d138:	4639      	mov	r1, r7
 801d13a:	4680      	mov	r8, r0
 801d13c:	4630      	mov	r0, r6
 801d13e:	f7ff fe47 	bl	801cdd0 <_Bfree>
 801d142:	4647      	mov	r7, r8
 801d144:	106d      	asrs	r5, r5, #1
 801d146:	d00b      	beq.n	801d160 <__pow5mult+0xa0>
 801d148:	6820      	ldr	r0, [r4, #0]
 801d14a:	b938      	cbnz	r0, 801d15c <__pow5mult+0x9c>
 801d14c:	4622      	mov	r2, r4
 801d14e:	4621      	mov	r1, r4
 801d150:	4630      	mov	r0, r6
 801d152:	f7ff ff0b 	bl	801cf6c <__multiply>
 801d156:	6020      	str	r0, [r4, #0]
 801d158:	f8c0 9000 	str.w	r9, [r0]
 801d15c:	4604      	mov	r4, r0
 801d15e:	e7e4      	b.n	801d12a <__pow5mult+0x6a>
 801d160:	4638      	mov	r0, r7
 801d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d166:	bf00      	nop
 801d168:	0803d620 	.word	0x0803d620
 801d16c:	0803d3f1 	.word	0x0803d3f1
 801d170:	0803d4d4 	.word	0x0803d4d4

0801d174 <__lshift>:
 801d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d178:	460c      	mov	r4, r1
 801d17a:	6849      	ldr	r1, [r1, #4]
 801d17c:	6923      	ldr	r3, [r4, #16]
 801d17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d182:	68a3      	ldr	r3, [r4, #8]
 801d184:	4607      	mov	r7, r0
 801d186:	4691      	mov	r9, r2
 801d188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d18c:	f108 0601 	add.w	r6, r8, #1
 801d190:	42b3      	cmp	r3, r6
 801d192:	db0b      	blt.n	801d1ac <__lshift+0x38>
 801d194:	4638      	mov	r0, r7
 801d196:	f7ff fddb 	bl	801cd50 <_Balloc>
 801d19a:	4605      	mov	r5, r0
 801d19c:	b948      	cbnz	r0, 801d1b2 <__lshift+0x3e>
 801d19e:	4602      	mov	r2, r0
 801d1a0:	4b2a      	ldr	r3, [pc, #168]	; (801d24c <__lshift+0xd8>)
 801d1a2:	482b      	ldr	r0, [pc, #172]	; (801d250 <__lshift+0xdc>)
 801d1a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d1a8:	f000 fbdc 	bl	801d964 <__assert_func>
 801d1ac:	3101      	adds	r1, #1
 801d1ae:	005b      	lsls	r3, r3, #1
 801d1b0:	e7ee      	b.n	801d190 <__lshift+0x1c>
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	f100 0114 	add.w	r1, r0, #20
 801d1b8:	f100 0210 	add.w	r2, r0, #16
 801d1bc:	4618      	mov	r0, r3
 801d1be:	4553      	cmp	r3, sl
 801d1c0:	db37      	blt.n	801d232 <__lshift+0xbe>
 801d1c2:	6920      	ldr	r0, [r4, #16]
 801d1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d1c8:	f104 0314 	add.w	r3, r4, #20
 801d1cc:	f019 091f 	ands.w	r9, r9, #31
 801d1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d1d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d1d8:	d02f      	beq.n	801d23a <__lshift+0xc6>
 801d1da:	f1c9 0e20 	rsb	lr, r9, #32
 801d1de:	468a      	mov	sl, r1
 801d1e0:	f04f 0c00 	mov.w	ip, #0
 801d1e4:	681a      	ldr	r2, [r3, #0]
 801d1e6:	fa02 f209 	lsl.w	r2, r2, r9
 801d1ea:	ea42 020c 	orr.w	r2, r2, ip
 801d1ee:	f84a 2b04 	str.w	r2, [sl], #4
 801d1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1f6:	4298      	cmp	r0, r3
 801d1f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d1fc:	d8f2      	bhi.n	801d1e4 <__lshift+0x70>
 801d1fe:	1b03      	subs	r3, r0, r4
 801d200:	3b15      	subs	r3, #21
 801d202:	f023 0303 	bic.w	r3, r3, #3
 801d206:	3304      	adds	r3, #4
 801d208:	f104 0215 	add.w	r2, r4, #21
 801d20c:	4290      	cmp	r0, r2
 801d20e:	bf38      	it	cc
 801d210:	2304      	movcc	r3, #4
 801d212:	f841 c003 	str.w	ip, [r1, r3]
 801d216:	f1bc 0f00 	cmp.w	ip, #0
 801d21a:	d001      	beq.n	801d220 <__lshift+0xac>
 801d21c:	f108 0602 	add.w	r6, r8, #2
 801d220:	3e01      	subs	r6, #1
 801d222:	4638      	mov	r0, r7
 801d224:	612e      	str	r6, [r5, #16]
 801d226:	4621      	mov	r1, r4
 801d228:	f7ff fdd2 	bl	801cdd0 <_Bfree>
 801d22c:	4628      	mov	r0, r5
 801d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d232:	f842 0f04 	str.w	r0, [r2, #4]!
 801d236:	3301      	adds	r3, #1
 801d238:	e7c1      	b.n	801d1be <__lshift+0x4a>
 801d23a:	3904      	subs	r1, #4
 801d23c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d240:	f841 2f04 	str.w	r2, [r1, #4]!
 801d244:	4298      	cmp	r0, r3
 801d246:	d8f9      	bhi.n	801d23c <__lshift+0xc8>
 801d248:	e7ea      	b.n	801d220 <__lshift+0xac>
 801d24a:	bf00      	nop
 801d24c:	0803d463 	.word	0x0803d463
 801d250:	0803d4d4 	.word	0x0803d4d4

0801d254 <__mcmp>:
 801d254:	b530      	push	{r4, r5, lr}
 801d256:	6902      	ldr	r2, [r0, #16]
 801d258:	690c      	ldr	r4, [r1, #16]
 801d25a:	1b12      	subs	r2, r2, r4
 801d25c:	d10e      	bne.n	801d27c <__mcmp+0x28>
 801d25e:	f100 0314 	add.w	r3, r0, #20
 801d262:	3114      	adds	r1, #20
 801d264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d26c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d274:	42a5      	cmp	r5, r4
 801d276:	d003      	beq.n	801d280 <__mcmp+0x2c>
 801d278:	d305      	bcc.n	801d286 <__mcmp+0x32>
 801d27a:	2201      	movs	r2, #1
 801d27c:	4610      	mov	r0, r2
 801d27e:	bd30      	pop	{r4, r5, pc}
 801d280:	4283      	cmp	r3, r0
 801d282:	d3f3      	bcc.n	801d26c <__mcmp+0x18>
 801d284:	e7fa      	b.n	801d27c <__mcmp+0x28>
 801d286:	f04f 32ff 	mov.w	r2, #4294967295
 801d28a:	e7f7      	b.n	801d27c <__mcmp+0x28>

0801d28c <__mdiff>:
 801d28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d290:	460c      	mov	r4, r1
 801d292:	4606      	mov	r6, r0
 801d294:	4611      	mov	r1, r2
 801d296:	4620      	mov	r0, r4
 801d298:	4690      	mov	r8, r2
 801d29a:	f7ff ffdb 	bl	801d254 <__mcmp>
 801d29e:	1e05      	subs	r5, r0, #0
 801d2a0:	d110      	bne.n	801d2c4 <__mdiff+0x38>
 801d2a2:	4629      	mov	r1, r5
 801d2a4:	4630      	mov	r0, r6
 801d2a6:	f7ff fd53 	bl	801cd50 <_Balloc>
 801d2aa:	b930      	cbnz	r0, 801d2ba <__mdiff+0x2e>
 801d2ac:	4b3a      	ldr	r3, [pc, #232]	; (801d398 <__mdiff+0x10c>)
 801d2ae:	4602      	mov	r2, r0
 801d2b0:	f240 2132 	movw	r1, #562	; 0x232
 801d2b4:	4839      	ldr	r0, [pc, #228]	; (801d39c <__mdiff+0x110>)
 801d2b6:	f000 fb55 	bl	801d964 <__assert_func>
 801d2ba:	2301      	movs	r3, #1
 801d2bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d2c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2c4:	bfa4      	itt	ge
 801d2c6:	4643      	movge	r3, r8
 801d2c8:	46a0      	movge	r8, r4
 801d2ca:	4630      	mov	r0, r6
 801d2cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d2d0:	bfa6      	itte	ge
 801d2d2:	461c      	movge	r4, r3
 801d2d4:	2500      	movge	r5, #0
 801d2d6:	2501      	movlt	r5, #1
 801d2d8:	f7ff fd3a 	bl	801cd50 <_Balloc>
 801d2dc:	b920      	cbnz	r0, 801d2e8 <__mdiff+0x5c>
 801d2de:	4b2e      	ldr	r3, [pc, #184]	; (801d398 <__mdiff+0x10c>)
 801d2e0:	4602      	mov	r2, r0
 801d2e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d2e6:	e7e5      	b.n	801d2b4 <__mdiff+0x28>
 801d2e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d2ec:	6926      	ldr	r6, [r4, #16]
 801d2ee:	60c5      	str	r5, [r0, #12]
 801d2f0:	f104 0914 	add.w	r9, r4, #20
 801d2f4:	f108 0514 	add.w	r5, r8, #20
 801d2f8:	f100 0e14 	add.w	lr, r0, #20
 801d2fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d300:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d304:	f108 0210 	add.w	r2, r8, #16
 801d308:	46f2      	mov	sl, lr
 801d30a:	2100      	movs	r1, #0
 801d30c:	f859 3b04 	ldr.w	r3, [r9], #4
 801d310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d314:	fa1f f883 	uxth.w	r8, r3
 801d318:	fa11 f18b 	uxtah	r1, r1, fp
 801d31c:	0c1b      	lsrs	r3, r3, #16
 801d31e:	eba1 0808 	sub.w	r8, r1, r8
 801d322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d326:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d32a:	fa1f f888 	uxth.w	r8, r8
 801d32e:	1419      	asrs	r1, r3, #16
 801d330:	454e      	cmp	r6, r9
 801d332:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d336:	f84a 3b04 	str.w	r3, [sl], #4
 801d33a:	d8e7      	bhi.n	801d30c <__mdiff+0x80>
 801d33c:	1b33      	subs	r3, r6, r4
 801d33e:	3b15      	subs	r3, #21
 801d340:	f023 0303 	bic.w	r3, r3, #3
 801d344:	3304      	adds	r3, #4
 801d346:	3415      	adds	r4, #21
 801d348:	42a6      	cmp	r6, r4
 801d34a:	bf38      	it	cc
 801d34c:	2304      	movcc	r3, #4
 801d34e:	441d      	add	r5, r3
 801d350:	4473      	add	r3, lr
 801d352:	469e      	mov	lr, r3
 801d354:	462e      	mov	r6, r5
 801d356:	4566      	cmp	r6, ip
 801d358:	d30e      	bcc.n	801d378 <__mdiff+0xec>
 801d35a:	f10c 0203 	add.w	r2, ip, #3
 801d35e:	1b52      	subs	r2, r2, r5
 801d360:	f022 0203 	bic.w	r2, r2, #3
 801d364:	3d03      	subs	r5, #3
 801d366:	45ac      	cmp	ip, r5
 801d368:	bf38      	it	cc
 801d36a:	2200      	movcc	r2, #0
 801d36c:	441a      	add	r2, r3
 801d36e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d372:	b17b      	cbz	r3, 801d394 <__mdiff+0x108>
 801d374:	6107      	str	r7, [r0, #16]
 801d376:	e7a3      	b.n	801d2c0 <__mdiff+0x34>
 801d378:	f856 8b04 	ldr.w	r8, [r6], #4
 801d37c:	fa11 f288 	uxtah	r2, r1, r8
 801d380:	1414      	asrs	r4, r2, #16
 801d382:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d386:	b292      	uxth	r2, r2
 801d388:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d38c:	f84e 2b04 	str.w	r2, [lr], #4
 801d390:	1421      	asrs	r1, r4, #16
 801d392:	e7e0      	b.n	801d356 <__mdiff+0xca>
 801d394:	3f01      	subs	r7, #1
 801d396:	e7ea      	b.n	801d36e <__mdiff+0xe2>
 801d398:	0803d463 	.word	0x0803d463
 801d39c:	0803d4d4 	.word	0x0803d4d4

0801d3a0 <__d2b>:
 801d3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d3a4:	4689      	mov	r9, r1
 801d3a6:	2101      	movs	r1, #1
 801d3a8:	ec57 6b10 	vmov	r6, r7, d0
 801d3ac:	4690      	mov	r8, r2
 801d3ae:	f7ff fccf 	bl	801cd50 <_Balloc>
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	b930      	cbnz	r0, 801d3c4 <__d2b+0x24>
 801d3b6:	4602      	mov	r2, r0
 801d3b8:	4b25      	ldr	r3, [pc, #148]	; (801d450 <__d2b+0xb0>)
 801d3ba:	4826      	ldr	r0, [pc, #152]	; (801d454 <__d2b+0xb4>)
 801d3bc:	f240 310a 	movw	r1, #778	; 0x30a
 801d3c0:	f000 fad0 	bl	801d964 <__assert_func>
 801d3c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d3cc:	bb35      	cbnz	r5, 801d41c <__d2b+0x7c>
 801d3ce:	2e00      	cmp	r6, #0
 801d3d0:	9301      	str	r3, [sp, #4]
 801d3d2:	d028      	beq.n	801d426 <__d2b+0x86>
 801d3d4:	4668      	mov	r0, sp
 801d3d6:	9600      	str	r6, [sp, #0]
 801d3d8:	f7ff fd82 	bl	801cee0 <__lo0bits>
 801d3dc:	9900      	ldr	r1, [sp, #0]
 801d3de:	b300      	cbz	r0, 801d422 <__d2b+0x82>
 801d3e0:	9a01      	ldr	r2, [sp, #4]
 801d3e2:	f1c0 0320 	rsb	r3, r0, #32
 801d3e6:	fa02 f303 	lsl.w	r3, r2, r3
 801d3ea:	430b      	orrs	r3, r1
 801d3ec:	40c2      	lsrs	r2, r0
 801d3ee:	6163      	str	r3, [r4, #20]
 801d3f0:	9201      	str	r2, [sp, #4]
 801d3f2:	9b01      	ldr	r3, [sp, #4]
 801d3f4:	61a3      	str	r3, [r4, #24]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	bf14      	ite	ne
 801d3fa:	2202      	movne	r2, #2
 801d3fc:	2201      	moveq	r2, #1
 801d3fe:	6122      	str	r2, [r4, #16]
 801d400:	b1d5      	cbz	r5, 801d438 <__d2b+0x98>
 801d402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d406:	4405      	add	r5, r0
 801d408:	f8c9 5000 	str.w	r5, [r9]
 801d40c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d410:	f8c8 0000 	str.w	r0, [r8]
 801d414:	4620      	mov	r0, r4
 801d416:	b003      	add	sp, #12
 801d418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d41c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d420:	e7d5      	b.n	801d3ce <__d2b+0x2e>
 801d422:	6161      	str	r1, [r4, #20]
 801d424:	e7e5      	b.n	801d3f2 <__d2b+0x52>
 801d426:	a801      	add	r0, sp, #4
 801d428:	f7ff fd5a 	bl	801cee0 <__lo0bits>
 801d42c:	9b01      	ldr	r3, [sp, #4]
 801d42e:	6163      	str	r3, [r4, #20]
 801d430:	2201      	movs	r2, #1
 801d432:	6122      	str	r2, [r4, #16]
 801d434:	3020      	adds	r0, #32
 801d436:	e7e3      	b.n	801d400 <__d2b+0x60>
 801d438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d43c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d440:	f8c9 0000 	str.w	r0, [r9]
 801d444:	6918      	ldr	r0, [r3, #16]
 801d446:	f7ff fd2b 	bl	801cea0 <__hi0bits>
 801d44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d44e:	e7df      	b.n	801d410 <__d2b+0x70>
 801d450:	0803d463 	.word	0x0803d463
 801d454:	0803d4d4 	.word	0x0803d4d4

0801d458 <_calloc_r>:
 801d458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d45a:	fba1 2402 	umull	r2, r4, r1, r2
 801d45e:	b94c      	cbnz	r4, 801d474 <_calloc_r+0x1c>
 801d460:	4611      	mov	r1, r2
 801d462:	9201      	str	r2, [sp, #4]
 801d464:	f7fe f864 	bl	801b530 <_malloc_r>
 801d468:	9a01      	ldr	r2, [sp, #4]
 801d46a:	4605      	mov	r5, r0
 801d46c:	b930      	cbnz	r0, 801d47c <_calloc_r+0x24>
 801d46e:	4628      	mov	r0, r5
 801d470:	b003      	add	sp, #12
 801d472:	bd30      	pop	{r4, r5, pc}
 801d474:	220c      	movs	r2, #12
 801d476:	6002      	str	r2, [r0, #0]
 801d478:	2500      	movs	r5, #0
 801d47a:	e7f8      	b.n	801d46e <_calloc_r+0x16>
 801d47c:	4621      	mov	r1, r4
 801d47e:	f7fd ffe3 	bl	801b448 <memset>
 801d482:	e7f4      	b.n	801d46e <_calloc_r+0x16>

0801d484 <__sfputc_r>:
 801d484:	6893      	ldr	r3, [r2, #8]
 801d486:	3b01      	subs	r3, #1
 801d488:	2b00      	cmp	r3, #0
 801d48a:	b410      	push	{r4}
 801d48c:	6093      	str	r3, [r2, #8]
 801d48e:	da08      	bge.n	801d4a2 <__sfputc_r+0x1e>
 801d490:	6994      	ldr	r4, [r2, #24]
 801d492:	42a3      	cmp	r3, r4
 801d494:	db01      	blt.n	801d49a <__sfputc_r+0x16>
 801d496:	290a      	cmp	r1, #10
 801d498:	d103      	bne.n	801d4a2 <__sfputc_r+0x1e>
 801d49a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d49e:	f000 b98f 	b.w	801d7c0 <__swbuf_r>
 801d4a2:	6813      	ldr	r3, [r2, #0]
 801d4a4:	1c58      	adds	r0, r3, #1
 801d4a6:	6010      	str	r0, [r2, #0]
 801d4a8:	7019      	strb	r1, [r3, #0]
 801d4aa:	4608      	mov	r0, r1
 801d4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d4b0:	4770      	bx	lr

0801d4b2 <__sfputs_r>:
 801d4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4b4:	4606      	mov	r6, r0
 801d4b6:	460f      	mov	r7, r1
 801d4b8:	4614      	mov	r4, r2
 801d4ba:	18d5      	adds	r5, r2, r3
 801d4bc:	42ac      	cmp	r4, r5
 801d4be:	d101      	bne.n	801d4c4 <__sfputs_r+0x12>
 801d4c0:	2000      	movs	r0, #0
 801d4c2:	e007      	b.n	801d4d4 <__sfputs_r+0x22>
 801d4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4c8:	463a      	mov	r2, r7
 801d4ca:	4630      	mov	r0, r6
 801d4cc:	f7ff ffda 	bl	801d484 <__sfputc_r>
 801d4d0:	1c43      	adds	r3, r0, #1
 801d4d2:	d1f3      	bne.n	801d4bc <__sfputs_r+0xa>
 801d4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d4d8 <_vfiprintf_r>:
 801d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4dc:	460d      	mov	r5, r1
 801d4de:	b09d      	sub	sp, #116	; 0x74
 801d4e0:	4614      	mov	r4, r2
 801d4e2:	4698      	mov	r8, r3
 801d4e4:	4606      	mov	r6, r0
 801d4e6:	b118      	cbz	r0, 801d4f0 <_vfiprintf_r+0x18>
 801d4e8:	6983      	ldr	r3, [r0, #24]
 801d4ea:	b90b      	cbnz	r3, 801d4f0 <_vfiprintf_r+0x18>
 801d4ec:	f7ff fb7e 	bl	801cbec <__sinit>
 801d4f0:	4b89      	ldr	r3, [pc, #548]	; (801d718 <_vfiprintf_r+0x240>)
 801d4f2:	429d      	cmp	r5, r3
 801d4f4:	d11b      	bne.n	801d52e <_vfiprintf_r+0x56>
 801d4f6:	6875      	ldr	r5, [r6, #4]
 801d4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4fa:	07d9      	lsls	r1, r3, #31
 801d4fc:	d405      	bmi.n	801d50a <_vfiprintf_r+0x32>
 801d4fe:	89ab      	ldrh	r3, [r5, #12]
 801d500:	059a      	lsls	r2, r3, #22
 801d502:	d402      	bmi.n	801d50a <_vfiprintf_r+0x32>
 801d504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d506:	f7ff fc14 	bl	801cd32 <__retarget_lock_acquire_recursive>
 801d50a:	89ab      	ldrh	r3, [r5, #12]
 801d50c:	071b      	lsls	r3, r3, #28
 801d50e:	d501      	bpl.n	801d514 <_vfiprintf_r+0x3c>
 801d510:	692b      	ldr	r3, [r5, #16]
 801d512:	b9eb      	cbnz	r3, 801d550 <_vfiprintf_r+0x78>
 801d514:	4629      	mov	r1, r5
 801d516:	4630      	mov	r0, r6
 801d518:	f000 f9b6 	bl	801d888 <__swsetup_r>
 801d51c:	b1c0      	cbz	r0, 801d550 <_vfiprintf_r+0x78>
 801d51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d520:	07dc      	lsls	r4, r3, #31
 801d522:	d50e      	bpl.n	801d542 <_vfiprintf_r+0x6a>
 801d524:	f04f 30ff 	mov.w	r0, #4294967295
 801d528:	b01d      	add	sp, #116	; 0x74
 801d52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d52e:	4b7b      	ldr	r3, [pc, #492]	; (801d71c <_vfiprintf_r+0x244>)
 801d530:	429d      	cmp	r5, r3
 801d532:	d101      	bne.n	801d538 <_vfiprintf_r+0x60>
 801d534:	68b5      	ldr	r5, [r6, #8]
 801d536:	e7df      	b.n	801d4f8 <_vfiprintf_r+0x20>
 801d538:	4b79      	ldr	r3, [pc, #484]	; (801d720 <_vfiprintf_r+0x248>)
 801d53a:	429d      	cmp	r5, r3
 801d53c:	bf08      	it	eq
 801d53e:	68f5      	ldreq	r5, [r6, #12]
 801d540:	e7da      	b.n	801d4f8 <_vfiprintf_r+0x20>
 801d542:	89ab      	ldrh	r3, [r5, #12]
 801d544:	0598      	lsls	r0, r3, #22
 801d546:	d4ed      	bmi.n	801d524 <_vfiprintf_r+0x4c>
 801d548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d54a:	f7ff fbf3 	bl	801cd34 <__retarget_lock_release_recursive>
 801d54e:	e7e9      	b.n	801d524 <_vfiprintf_r+0x4c>
 801d550:	2300      	movs	r3, #0
 801d552:	9309      	str	r3, [sp, #36]	; 0x24
 801d554:	2320      	movs	r3, #32
 801d556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d55a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d55e:	2330      	movs	r3, #48	; 0x30
 801d560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d724 <_vfiprintf_r+0x24c>
 801d564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d568:	f04f 0901 	mov.w	r9, #1
 801d56c:	4623      	mov	r3, r4
 801d56e:	469a      	mov	sl, r3
 801d570:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d574:	b10a      	cbz	r2, 801d57a <_vfiprintf_r+0xa2>
 801d576:	2a25      	cmp	r2, #37	; 0x25
 801d578:	d1f9      	bne.n	801d56e <_vfiprintf_r+0x96>
 801d57a:	ebba 0b04 	subs.w	fp, sl, r4
 801d57e:	d00b      	beq.n	801d598 <_vfiprintf_r+0xc0>
 801d580:	465b      	mov	r3, fp
 801d582:	4622      	mov	r2, r4
 801d584:	4629      	mov	r1, r5
 801d586:	4630      	mov	r0, r6
 801d588:	f7ff ff93 	bl	801d4b2 <__sfputs_r>
 801d58c:	3001      	adds	r0, #1
 801d58e:	f000 80aa 	beq.w	801d6e6 <_vfiprintf_r+0x20e>
 801d592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d594:	445a      	add	r2, fp
 801d596:	9209      	str	r2, [sp, #36]	; 0x24
 801d598:	f89a 3000 	ldrb.w	r3, [sl]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	f000 80a2 	beq.w	801d6e6 <_vfiprintf_r+0x20e>
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	f04f 32ff 	mov.w	r2, #4294967295
 801d5a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d5ac:	f10a 0a01 	add.w	sl, sl, #1
 801d5b0:	9304      	str	r3, [sp, #16]
 801d5b2:	9307      	str	r3, [sp, #28]
 801d5b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d5b8:	931a      	str	r3, [sp, #104]	; 0x68
 801d5ba:	4654      	mov	r4, sl
 801d5bc:	2205      	movs	r2, #5
 801d5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5c2:	4858      	ldr	r0, [pc, #352]	; (801d724 <_vfiprintf_r+0x24c>)
 801d5c4:	f7e2 fe94 	bl	80002f0 <memchr>
 801d5c8:	9a04      	ldr	r2, [sp, #16]
 801d5ca:	b9d8      	cbnz	r0, 801d604 <_vfiprintf_r+0x12c>
 801d5cc:	06d1      	lsls	r1, r2, #27
 801d5ce:	bf44      	itt	mi
 801d5d0:	2320      	movmi	r3, #32
 801d5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d5d6:	0713      	lsls	r3, r2, #28
 801d5d8:	bf44      	itt	mi
 801d5da:	232b      	movmi	r3, #43	; 0x2b
 801d5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d5e0:	f89a 3000 	ldrb.w	r3, [sl]
 801d5e4:	2b2a      	cmp	r3, #42	; 0x2a
 801d5e6:	d015      	beq.n	801d614 <_vfiprintf_r+0x13c>
 801d5e8:	9a07      	ldr	r2, [sp, #28]
 801d5ea:	4654      	mov	r4, sl
 801d5ec:	2000      	movs	r0, #0
 801d5ee:	f04f 0c0a 	mov.w	ip, #10
 801d5f2:	4621      	mov	r1, r4
 801d5f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d5f8:	3b30      	subs	r3, #48	; 0x30
 801d5fa:	2b09      	cmp	r3, #9
 801d5fc:	d94e      	bls.n	801d69c <_vfiprintf_r+0x1c4>
 801d5fe:	b1b0      	cbz	r0, 801d62e <_vfiprintf_r+0x156>
 801d600:	9207      	str	r2, [sp, #28]
 801d602:	e014      	b.n	801d62e <_vfiprintf_r+0x156>
 801d604:	eba0 0308 	sub.w	r3, r0, r8
 801d608:	fa09 f303 	lsl.w	r3, r9, r3
 801d60c:	4313      	orrs	r3, r2
 801d60e:	9304      	str	r3, [sp, #16]
 801d610:	46a2      	mov	sl, r4
 801d612:	e7d2      	b.n	801d5ba <_vfiprintf_r+0xe2>
 801d614:	9b03      	ldr	r3, [sp, #12]
 801d616:	1d19      	adds	r1, r3, #4
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	9103      	str	r1, [sp, #12]
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	bfbb      	ittet	lt
 801d620:	425b      	neglt	r3, r3
 801d622:	f042 0202 	orrlt.w	r2, r2, #2
 801d626:	9307      	strge	r3, [sp, #28]
 801d628:	9307      	strlt	r3, [sp, #28]
 801d62a:	bfb8      	it	lt
 801d62c:	9204      	strlt	r2, [sp, #16]
 801d62e:	7823      	ldrb	r3, [r4, #0]
 801d630:	2b2e      	cmp	r3, #46	; 0x2e
 801d632:	d10c      	bne.n	801d64e <_vfiprintf_r+0x176>
 801d634:	7863      	ldrb	r3, [r4, #1]
 801d636:	2b2a      	cmp	r3, #42	; 0x2a
 801d638:	d135      	bne.n	801d6a6 <_vfiprintf_r+0x1ce>
 801d63a:	9b03      	ldr	r3, [sp, #12]
 801d63c:	1d1a      	adds	r2, r3, #4
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	9203      	str	r2, [sp, #12]
 801d642:	2b00      	cmp	r3, #0
 801d644:	bfb8      	it	lt
 801d646:	f04f 33ff 	movlt.w	r3, #4294967295
 801d64a:	3402      	adds	r4, #2
 801d64c:	9305      	str	r3, [sp, #20]
 801d64e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d734 <_vfiprintf_r+0x25c>
 801d652:	7821      	ldrb	r1, [r4, #0]
 801d654:	2203      	movs	r2, #3
 801d656:	4650      	mov	r0, sl
 801d658:	f7e2 fe4a 	bl	80002f0 <memchr>
 801d65c:	b140      	cbz	r0, 801d670 <_vfiprintf_r+0x198>
 801d65e:	2340      	movs	r3, #64	; 0x40
 801d660:	eba0 000a 	sub.w	r0, r0, sl
 801d664:	fa03 f000 	lsl.w	r0, r3, r0
 801d668:	9b04      	ldr	r3, [sp, #16]
 801d66a:	4303      	orrs	r3, r0
 801d66c:	3401      	adds	r4, #1
 801d66e:	9304      	str	r3, [sp, #16]
 801d670:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d674:	482c      	ldr	r0, [pc, #176]	; (801d728 <_vfiprintf_r+0x250>)
 801d676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d67a:	2206      	movs	r2, #6
 801d67c:	f7e2 fe38 	bl	80002f0 <memchr>
 801d680:	2800      	cmp	r0, #0
 801d682:	d03f      	beq.n	801d704 <_vfiprintf_r+0x22c>
 801d684:	4b29      	ldr	r3, [pc, #164]	; (801d72c <_vfiprintf_r+0x254>)
 801d686:	bb1b      	cbnz	r3, 801d6d0 <_vfiprintf_r+0x1f8>
 801d688:	9b03      	ldr	r3, [sp, #12]
 801d68a:	3307      	adds	r3, #7
 801d68c:	f023 0307 	bic.w	r3, r3, #7
 801d690:	3308      	adds	r3, #8
 801d692:	9303      	str	r3, [sp, #12]
 801d694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d696:	443b      	add	r3, r7
 801d698:	9309      	str	r3, [sp, #36]	; 0x24
 801d69a:	e767      	b.n	801d56c <_vfiprintf_r+0x94>
 801d69c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d6a0:	460c      	mov	r4, r1
 801d6a2:	2001      	movs	r0, #1
 801d6a4:	e7a5      	b.n	801d5f2 <_vfiprintf_r+0x11a>
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	3401      	adds	r4, #1
 801d6aa:	9305      	str	r3, [sp, #20]
 801d6ac:	4619      	mov	r1, r3
 801d6ae:	f04f 0c0a 	mov.w	ip, #10
 801d6b2:	4620      	mov	r0, r4
 801d6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d6b8:	3a30      	subs	r2, #48	; 0x30
 801d6ba:	2a09      	cmp	r2, #9
 801d6bc:	d903      	bls.n	801d6c6 <_vfiprintf_r+0x1ee>
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d0c5      	beq.n	801d64e <_vfiprintf_r+0x176>
 801d6c2:	9105      	str	r1, [sp, #20]
 801d6c4:	e7c3      	b.n	801d64e <_vfiprintf_r+0x176>
 801d6c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	2301      	movs	r3, #1
 801d6ce:	e7f0      	b.n	801d6b2 <_vfiprintf_r+0x1da>
 801d6d0:	ab03      	add	r3, sp, #12
 801d6d2:	9300      	str	r3, [sp, #0]
 801d6d4:	462a      	mov	r2, r5
 801d6d6:	4b16      	ldr	r3, [pc, #88]	; (801d730 <_vfiprintf_r+0x258>)
 801d6d8:	a904      	add	r1, sp, #16
 801d6da:	4630      	mov	r0, r6
 801d6dc:	f7fe f82c 	bl	801b738 <_printf_float>
 801d6e0:	4607      	mov	r7, r0
 801d6e2:	1c78      	adds	r0, r7, #1
 801d6e4:	d1d6      	bne.n	801d694 <_vfiprintf_r+0x1bc>
 801d6e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d6e8:	07d9      	lsls	r1, r3, #31
 801d6ea:	d405      	bmi.n	801d6f8 <_vfiprintf_r+0x220>
 801d6ec:	89ab      	ldrh	r3, [r5, #12]
 801d6ee:	059a      	lsls	r2, r3, #22
 801d6f0:	d402      	bmi.n	801d6f8 <_vfiprintf_r+0x220>
 801d6f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d6f4:	f7ff fb1e 	bl	801cd34 <__retarget_lock_release_recursive>
 801d6f8:	89ab      	ldrh	r3, [r5, #12]
 801d6fa:	065b      	lsls	r3, r3, #25
 801d6fc:	f53f af12 	bmi.w	801d524 <_vfiprintf_r+0x4c>
 801d700:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d702:	e711      	b.n	801d528 <_vfiprintf_r+0x50>
 801d704:	ab03      	add	r3, sp, #12
 801d706:	9300      	str	r3, [sp, #0]
 801d708:	462a      	mov	r2, r5
 801d70a:	4b09      	ldr	r3, [pc, #36]	; (801d730 <_vfiprintf_r+0x258>)
 801d70c:	a904      	add	r1, sp, #16
 801d70e:	4630      	mov	r0, r6
 801d710:	f7fe fa9e 	bl	801bc50 <_printf_i>
 801d714:	e7e4      	b.n	801d6e0 <_vfiprintf_r+0x208>
 801d716:	bf00      	nop
 801d718:	0803d494 	.word	0x0803d494
 801d71c:	0803d4b4 	.word	0x0803d4b4
 801d720:	0803d474 	.word	0x0803d474
 801d724:	0803d62c 	.word	0x0803d62c
 801d728:	0803d636 	.word	0x0803d636
 801d72c:	0801b739 	.word	0x0801b739
 801d730:	0801d4b3 	.word	0x0801d4b3
 801d734:	0803d632 	.word	0x0803d632

0801d738 <__sread>:
 801d738:	b510      	push	{r4, lr}
 801d73a:	460c      	mov	r4, r1
 801d73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d740:	f000 fa9c 	bl	801dc7c <_read_r>
 801d744:	2800      	cmp	r0, #0
 801d746:	bfab      	itete	ge
 801d748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d74a:	89a3      	ldrhlt	r3, [r4, #12]
 801d74c:	181b      	addge	r3, r3, r0
 801d74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d752:	bfac      	ite	ge
 801d754:	6563      	strge	r3, [r4, #84]	; 0x54
 801d756:	81a3      	strhlt	r3, [r4, #12]
 801d758:	bd10      	pop	{r4, pc}

0801d75a <__swrite>:
 801d75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d75e:	461f      	mov	r7, r3
 801d760:	898b      	ldrh	r3, [r1, #12]
 801d762:	05db      	lsls	r3, r3, #23
 801d764:	4605      	mov	r5, r0
 801d766:	460c      	mov	r4, r1
 801d768:	4616      	mov	r6, r2
 801d76a:	d505      	bpl.n	801d778 <__swrite+0x1e>
 801d76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d770:	2302      	movs	r3, #2
 801d772:	2200      	movs	r2, #0
 801d774:	f000 f9f8 	bl	801db68 <_lseek_r>
 801d778:	89a3      	ldrh	r3, [r4, #12]
 801d77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d782:	81a3      	strh	r3, [r4, #12]
 801d784:	4632      	mov	r2, r6
 801d786:	463b      	mov	r3, r7
 801d788:	4628      	mov	r0, r5
 801d78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d78e:	f000 b869 	b.w	801d864 <_write_r>

0801d792 <__sseek>:
 801d792:	b510      	push	{r4, lr}
 801d794:	460c      	mov	r4, r1
 801d796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d79a:	f000 f9e5 	bl	801db68 <_lseek_r>
 801d79e:	1c43      	adds	r3, r0, #1
 801d7a0:	89a3      	ldrh	r3, [r4, #12]
 801d7a2:	bf15      	itete	ne
 801d7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801d7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d7ae:	81a3      	strheq	r3, [r4, #12]
 801d7b0:	bf18      	it	ne
 801d7b2:	81a3      	strhne	r3, [r4, #12]
 801d7b4:	bd10      	pop	{r4, pc}

0801d7b6 <__sclose>:
 801d7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7ba:	f000 b8f1 	b.w	801d9a0 <_close_r>
	...

0801d7c0 <__swbuf_r>:
 801d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7c2:	460e      	mov	r6, r1
 801d7c4:	4614      	mov	r4, r2
 801d7c6:	4605      	mov	r5, r0
 801d7c8:	b118      	cbz	r0, 801d7d2 <__swbuf_r+0x12>
 801d7ca:	6983      	ldr	r3, [r0, #24]
 801d7cc:	b90b      	cbnz	r3, 801d7d2 <__swbuf_r+0x12>
 801d7ce:	f7ff fa0d 	bl	801cbec <__sinit>
 801d7d2:	4b21      	ldr	r3, [pc, #132]	; (801d858 <__swbuf_r+0x98>)
 801d7d4:	429c      	cmp	r4, r3
 801d7d6:	d12b      	bne.n	801d830 <__swbuf_r+0x70>
 801d7d8:	686c      	ldr	r4, [r5, #4]
 801d7da:	69a3      	ldr	r3, [r4, #24]
 801d7dc:	60a3      	str	r3, [r4, #8]
 801d7de:	89a3      	ldrh	r3, [r4, #12]
 801d7e0:	071a      	lsls	r2, r3, #28
 801d7e2:	d52f      	bpl.n	801d844 <__swbuf_r+0x84>
 801d7e4:	6923      	ldr	r3, [r4, #16]
 801d7e6:	b36b      	cbz	r3, 801d844 <__swbuf_r+0x84>
 801d7e8:	6923      	ldr	r3, [r4, #16]
 801d7ea:	6820      	ldr	r0, [r4, #0]
 801d7ec:	1ac0      	subs	r0, r0, r3
 801d7ee:	6963      	ldr	r3, [r4, #20]
 801d7f0:	b2f6      	uxtb	r6, r6
 801d7f2:	4283      	cmp	r3, r0
 801d7f4:	4637      	mov	r7, r6
 801d7f6:	dc04      	bgt.n	801d802 <__swbuf_r+0x42>
 801d7f8:	4621      	mov	r1, r4
 801d7fa:	4628      	mov	r0, r5
 801d7fc:	f000 f966 	bl	801dacc <_fflush_r>
 801d800:	bb30      	cbnz	r0, 801d850 <__swbuf_r+0x90>
 801d802:	68a3      	ldr	r3, [r4, #8]
 801d804:	3b01      	subs	r3, #1
 801d806:	60a3      	str	r3, [r4, #8]
 801d808:	6823      	ldr	r3, [r4, #0]
 801d80a:	1c5a      	adds	r2, r3, #1
 801d80c:	6022      	str	r2, [r4, #0]
 801d80e:	701e      	strb	r6, [r3, #0]
 801d810:	6963      	ldr	r3, [r4, #20]
 801d812:	3001      	adds	r0, #1
 801d814:	4283      	cmp	r3, r0
 801d816:	d004      	beq.n	801d822 <__swbuf_r+0x62>
 801d818:	89a3      	ldrh	r3, [r4, #12]
 801d81a:	07db      	lsls	r3, r3, #31
 801d81c:	d506      	bpl.n	801d82c <__swbuf_r+0x6c>
 801d81e:	2e0a      	cmp	r6, #10
 801d820:	d104      	bne.n	801d82c <__swbuf_r+0x6c>
 801d822:	4621      	mov	r1, r4
 801d824:	4628      	mov	r0, r5
 801d826:	f000 f951 	bl	801dacc <_fflush_r>
 801d82a:	b988      	cbnz	r0, 801d850 <__swbuf_r+0x90>
 801d82c:	4638      	mov	r0, r7
 801d82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d830:	4b0a      	ldr	r3, [pc, #40]	; (801d85c <__swbuf_r+0x9c>)
 801d832:	429c      	cmp	r4, r3
 801d834:	d101      	bne.n	801d83a <__swbuf_r+0x7a>
 801d836:	68ac      	ldr	r4, [r5, #8]
 801d838:	e7cf      	b.n	801d7da <__swbuf_r+0x1a>
 801d83a:	4b09      	ldr	r3, [pc, #36]	; (801d860 <__swbuf_r+0xa0>)
 801d83c:	429c      	cmp	r4, r3
 801d83e:	bf08      	it	eq
 801d840:	68ec      	ldreq	r4, [r5, #12]
 801d842:	e7ca      	b.n	801d7da <__swbuf_r+0x1a>
 801d844:	4621      	mov	r1, r4
 801d846:	4628      	mov	r0, r5
 801d848:	f000 f81e 	bl	801d888 <__swsetup_r>
 801d84c:	2800      	cmp	r0, #0
 801d84e:	d0cb      	beq.n	801d7e8 <__swbuf_r+0x28>
 801d850:	f04f 37ff 	mov.w	r7, #4294967295
 801d854:	e7ea      	b.n	801d82c <__swbuf_r+0x6c>
 801d856:	bf00      	nop
 801d858:	0803d494 	.word	0x0803d494
 801d85c:	0803d4b4 	.word	0x0803d4b4
 801d860:	0803d474 	.word	0x0803d474

0801d864 <_write_r>:
 801d864:	b538      	push	{r3, r4, r5, lr}
 801d866:	4d07      	ldr	r5, [pc, #28]	; (801d884 <_write_r+0x20>)
 801d868:	4604      	mov	r4, r0
 801d86a:	4608      	mov	r0, r1
 801d86c:	4611      	mov	r1, r2
 801d86e:	2200      	movs	r2, #0
 801d870:	602a      	str	r2, [r5, #0]
 801d872:	461a      	mov	r2, r3
 801d874:	f7e6 fdfd 	bl	8004472 <_write>
 801d878:	1c43      	adds	r3, r0, #1
 801d87a:	d102      	bne.n	801d882 <_write_r+0x1e>
 801d87c:	682b      	ldr	r3, [r5, #0]
 801d87e:	b103      	cbz	r3, 801d882 <_write_r+0x1e>
 801d880:	6023      	str	r3, [r4, #0]
 801d882:	bd38      	pop	{r3, r4, r5, pc}
 801d884:	2407f6d8 	.word	0x2407f6d8

0801d888 <__swsetup_r>:
 801d888:	4b32      	ldr	r3, [pc, #200]	; (801d954 <__swsetup_r+0xcc>)
 801d88a:	b570      	push	{r4, r5, r6, lr}
 801d88c:	681d      	ldr	r5, [r3, #0]
 801d88e:	4606      	mov	r6, r0
 801d890:	460c      	mov	r4, r1
 801d892:	b125      	cbz	r5, 801d89e <__swsetup_r+0x16>
 801d894:	69ab      	ldr	r3, [r5, #24]
 801d896:	b913      	cbnz	r3, 801d89e <__swsetup_r+0x16>
 801d898:	4628      	mov	r0, r5
 801d89a:	f7ff f9a7 	bl	801cbec <__sinit>
 801d89e:	4b2e      	ldr	r3, [pc, #184]	; (801d958 <__swsetup_r+0xd0>)
 801d8a0:	429c      	cmp	r4, r3
 801d8a2:	d10f      	bne.n	801d8c4 <__swsetup_r+0x3c>
 801d8a4:	686c      	ldr	r4, [r5, #4]
 801d8a6:	89a3      	ldrh	r3, [r4, #12]
 801d8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d8ac:	0719      	lsls	r1, r3, #28
 801d8ae:	d42c      	bmi.n	801d90a <__swsetup_r+0x82>
 801d8b0:	06dd      	lsls	r5, r3, #27
 801d8b2:	d411      	bmi.n	801d8d8 <__swsetup_r+0x50>
 801d8b4:	2309      	movs	r3, #9
 801d8b6:	6033      	str	r3, [r6, #0]
 801d8b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d8bc:	81a3      	strh	r3, [r4, #12]
 801d8be:	f04f 30ff 	mov.w	r0, #4294967295
 801d8c2:	e03e      	b.n	801d942 <__swsetup_r+0xba>
 801d8c4:	4b25      	ldr	r3, [pc, #148]	; (801d95c <__swsetup_r+0xd4>)
 801d8c6:	429c      	cmp	r4, r3
 801d8c8:	d101      	bne.n	801d8ce <__swsetup_r+0x46>
 801d8ca:	68ac      	ldr	r4, [r5, #8]
 801d8cc:	e7eb      	b.n	801d8a6 <__swsetup_r+0x1e>
 801d8ce:	4b24      	ldr	r3, [pc, #144]	; (801d960 <__swsetup_r+0xd8>)
 801d8d0:	429c      	cmp	r4, r3
 801d8d2:	bf08      	it	eq
 801d8d4:	68ec      	ldreq	r4, [r5, #12]
 801d8d6:	e7e6      	b.n	801d8a6 <__swsetup_r+0x1e>
 801d8d8:	0758      	lsls	r0, r3, #29
 801d8da:	d512      	bpl.n	801d902 <__swsetup_r+0x7a>
 801d8dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d8de:	b141      	cbz	r1, 801d8f2 <__swsetup_r+0x6a>
 801d8e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d8e4:	4299      	cmp	r1, r3
 801d8e6:	d002      	beq.n	801d8ee <__swsetup_r+0x66>
 801d8e8:	4630      	mov	r0, r6
 801d8ea:	f7fd fdb5 	bl	801b458 <_free_r>
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	6363      	str	r3, [r4, #52]	; 0x34
 801d8f2:	89a3      	ldrh	r3, [r4, #12]
 801d8f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d8f8:	81a3      	strh	r3, [r4, #12]
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	6063      	str	r3, [r4, #4]
 801d8fe:	6923      	ldr	r3, [r4, #16]
 801d900:	6023      	str	r3, [r4, #0]
 801d902:	89a3      	ldrh	r3, [r4, #12]
 801d904:	f043 0308 	orr.w	r3, r3, #8
 801d908:	81a3      	strh	r3, [r4, #12]
 801d90a:	6923      	ldr	r3, [r4, #16]
 801d90c:	b94b      	cbnz	r3, 801d922 <__swsetup_r+0x9a>
 801d90e:	89a3      	ldrh	r3, [r4, #12]
 801d910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d918:	d003      	beq.n	801d922 <__swsetup_r+0x9a>
 801d91a:	4621      	mov	r1, r4
 801d91c:	4630      	mov	r0, r6
 801d91e:	f000 f95b 	bl	801dbd8 <__smakebuf_r>
 801d922:	89a0      	ldrh	r0, [r4, #12]
 801d924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d928:	f010 0301 	ands.w	r3, r0, #1
 801d92c:	d00a      	beq.n	801d944 <__swsetup_r+0xbc>
 801d92e:	2300      	movs	r3, #0
 801d930:	60a3      	str	r3, [r4, #8]
 801d932:	6963      	ldr	r3, [r4, #20]
 801d934:	425b      	negs	r3, r3
 801d936:	61a3      	str	r3, [r4, #24]
 801d938:	6923      	ldr	r3, [r4, #16]
 801d93a:	b943      	cbnz	r3, 801d94e <__swsetup_r+0xc6>
 801d93c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d940:	d1ba      	bne.n	801d8b8 <__swsetup_r+0x30>
 801d942:	bd70      	pop	{r4, r5, r6, pc}
 801d944:	0781      	lsls	r1, r0, #30
 801d946:	bf58      	it	pl
 801d948:	6963      	ldrpl	r3, [r4, #20]
 801d94a:	60a3      	str	r3, [r4, #8]
 801d94c:	e7f4      	b.n	801d938 <__swsetup_r+0xb0>
 801d94e:	2000      	movs	r0, #0
 801d950:	e7f7      	b.n	801d942 <__swsetup_r+0xba>
 801d952:	bf00      	nop
 801d954:	240000a8 	.word	0x240000a8
 801d958:	0803d494 	.word	0x0803d494
 801d95c:	0803d4b4 	.word	0x0803d4b4
 801d960:	0803d474 	.word	0x0803d474

0801d964 <__assert_func>:
 801d964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d966:	4614      	mov	r4, r2
 801d968:	461a      	mov	r2, r3
 801d96a:	4b09      	ldr	r3, [pc, #36]	; (801d990 <__assert_func+0x2c>)
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	4605      	mov	r5, r0
 801d970:	68d8      	ldr	r0, [r3, #12]
 801d972:	b14c      	cbz	r4, 801d988 <__assert_func+0x24>
 801d974:	4b07      	ldr	r3, [pc, #28]	; (801d994 <__assert_func+0x30>)
 801d976:	9100      	str	r1, [sp, #0]
 801d978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d97c:	4906      	ldr	r1, [pc, #24]	; (801d998 <__assert_func+0x34>)
 801d97e:	462b      	mov	r3, r5
 801d980:	f000 f8e0 	bl	801db44 <fiprintf>
 801d984:	f7fd fd11 	bl	801b3aa <abort>
 801d988:	4b04      	ldr	r3, [pc, #16]	; (801d99c <__assert_func+0x38>)
 801d98a:	461c      	mov	r4, r3
 801d98c:	e7f3      	b.n	801d976 <__assert_func+0x12>
 801d98e:	bf00      	nop
 801d990:	240000a8 	.word	0x240000a8
 801d994:	0803d63d 	.word	0x0803d63d
 801d998:	0803d64a 	.word	0x0803d64a
 801d99c:	0803d678 	.word	0x0803d678

0801d9a0 <_close_r>:
 801d9a0:	b538      	push	{r3, r4, r5, lr}
 801d9a2:	4d06      	ldr	r5, [pc, #24]	; (801d9bc <_close_r+0x1c>)
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	4604      	mov	r4, r0
 801d9a8:	4608      	mov	r0, r1
 801d9aa:	602b      	str	r3, [r5, #0]
 801d9ac:	f7e6 fd7d 	bl	80044aa <_close>
 801d9b0:	1c43      	adds	r3, r0, #1
 801d9b2:	d102      	bne.n	801d9ba <_close_r+0x1a>
 801d9b4:	682b      	ldr	r3, [r5, #0]
 801d9b6:	b103      	cbz	r3, 801d9ba <_close_r+0x1a>
 801d9b8:	6023      	str	r3, [r4, #0]
 801d9ba:	bd38      	pop	{r3, r4, r5, pc}
 801d9bc:	2407f6d8 	.word	0x2407f6d8

0801d9c0 <__sflush_r>:
 801d9c0:	898a      	ldrh	r2, [r1, #12]
 801d9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9c6:	4605      	mov	r5, r0
 801d9c8:	0710      	lsls	r0, r2, #28
 801d9ca:	460c      	mov	r4, r1
 801d9cc:	d458      	bmi.n	801da80 <__sflush_r+0xc0>
 801d9ce:	684b      	ldr	r3, [r1, #4]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	dc05      	bgt.n	801d9e0 <__sflush_r+0x20>
 801d9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	dc02      	bgt.n	801d9e0 <__sflush_r+0x20>
 801d9da:	2000      	movs	r0, #0
 801d9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9e2:	2e00      	cmp	r6, #0
 801d9e4:	d0f9      	beq.n	801d9da <__sflush_r+0x1a>
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d9ec:	682f      	ldr	r7, [r5, #0]
 801d9ee:	602b      	str	r3, [r5, #0]
 801d9f0:	d032      	beq.n	801da58 <__sflush_r+0x98>
 801d9f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d9f4:	89a3      	ldrh	r3, [r4, #12]
 801d9f6:	075a      	lsls	r2, r3, #29
 801d9f8:	d505      	bpl.n	801da06 <__sflush_r+0x46>
 801d9fa:	6863      	ldr	r3, [r4, #4]
 801d9fc:	1ac0      	subs	r0, r0, r3
 801d9fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801da00:	b10b      	cbz	r3, 801da06 <__sflush_r+0x46>
 801da02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da04:	1ac0      	subs	r0, r0, r3
 801da06:	2300      	movs	r3, #0
 801da08:	4602      	mov	r2, r0
 801da0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da0c:	6a21      	ldr	r1, [r4, #32]
 801da0e:	4628      	mov	r0, r5
 801da10:	47b0      	blx	r6
 801da12:	1c43      	adds	r3, r0, #1
 801da14:	89a3      	ldrh	r3, [r4, #12]
 801da16:	d106      	bne.n	801da26 <__sflush_r+0x66>
 801da18:	6829      	ldr	r1, [r5, #0]
 801da1a:	291d      	cmp	r1, #29
 801da1c:	d82c      	bhi.n	801da78 <__sflush_r+0xb8>
 801da1e:	4a2a      	ldr	r2, [pc, #168]	; (801dac8 <__sflush_r+0x108>)
 801da20:	40ca      	lsrs	r2, r1
 801da22:	07d6      	lsls	r6, r2, #31
 801da24:	d528      	bpl.n	801da78 <__sflush_r+0xb8>
 801da26:	2200      	movs	r2, #0
 801da28:	6062      	str	r2, [r4, #4]
 801da2a:	04d9      	lsls	r1, r3, #19
 801da2c:	6922      	ldr	r2, [r4, #16]
 801da2e:	6022      	str	r2, [r4, #0]
 801da30:	d504      	bpl.n	801da3c <__sflush_r+0x7c>
 801da32:	1c42      	adds	r2, r0, #1
 801da34:	d101      	bne.n	801da3a <__sflush_r+0x7a>
 801da36:	682b      	ldr	r3, [r5, #0]
 801da38:	b903      	cbnz	r3, 801da3c <__sflush_r+0x7c>
 801da3a:	6560      	str	r0, [r4, #84]	; 0x54
 801da3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da3e:	602f      	str	r7, [r5, #0]
 801da40:	2900      	cmp	r1, #0
 801da42:	d0ca      	beq.n	801d9da <__sflush_r+0x1a>
 801da44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da48:	4299      	cmp	r1, r3
 801da4a:	d002      	beq.n	801da52 <__sflush_r+0x92>
 801da4c:	4628      	mov	r0, r5
 801da4e:	f7fd fd03 	bl	801b458 <_free_r>
 801da52:	2000      	movs	r0, #0
 801da54:	6360      	str	r0, [r4, #52]	; 0x34
 801da56:	e7c1      	b.n	801d9dc <__sflush_r+0x1c>
 801da58:	6a21      	ldr	r1, [r4, #32]
 801da5a:	2301      	movs	r3, #1
 801da5c:	4628      	mov	r0, r5
 801da5e:	47b0      	blx	r6
 801da60:	1c41      	adds	r1, r0, #1
 801da62:	d1c7      	bne.n	801d9f4 <__sflush_r+0x34>
 801da64:	682b      	ldr	r3, [r5, #0]
 801da66:	2b00      	cmp	r3, #0
 801da68:	d0c4      	beq.n	801d9f4 <__sflush_r+0x34>
 801da6a:	2b1d      	cmp	r3, #29
 801da6c:	d001      	beq.n	801da72 <__sflush_r+0xb2>
 801da6e:	2b16      	cmp	r3, #22
 801da70:	d101      	bne.n	801da76 <__sflush_r+0xb6>
 801da72:	602f      	str	r7, [r5, #0]
 801da74:	e7b1      	b.n	801d9da <__sflush_r+0x1a>
 801da76:	89a3      	ldrh	r3, [r4, #12]
 801da78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da7c:	81a3      	strh	r3, [r4, #12]
 801da7e:	e7ad      	b.n	801d9dc <__sflush_r+0x1c>
 801da80:	690f      	ldr	r7, [r1, #16]
 801da82:	2f00      	cmp	r7, #0
 801da84:	d0a9      	beq.n	801d9da <__sflush_r+0x1a>
 801da86:	0793      	lsls	r3, r2, #30
 801da88:	680e      	ldr	r6, [r1, #0]
 801da8a:	bf08      	it	eq
 801da8c:	694b      	ldreq	r3, [r1, #20]
 801da8e:	600f      	str	r7, [r1, #0]
 801da90:	bf18      	it	ne
 801da92:	2300      	movne	r3, #0
 801da94:	eba6 0807 	sub.w	r8, r6, r7
 801da98:	608b      	str	r3, [r1, #8]
 801da9a:	f1b8 0f00 	cmp.w	r8, #0
 801da9e:	dd9c      	ble.n	801d9da <__sflush_r+0x1a>
 801daa0:	6a21      	ldr	r1, [r4, #32]
 801daa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801daa4:	4643      	mov	r3, r8
 801daa6:	463a      	mov	r2, r7
 801daa8:	4628      	mov	r0, r5
 801daaa:	47b0      	blx	r6
 801daac:	2800      	cmp	r0, #0
 801daae:	dc06      	bgt.n	801dabe <__sflush_r+0xfe>
 801dab0:	89a3      	ldrh	r3, [r4, #12]
 801dab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dab6:	81a3      	strh	r3, [r4, #12]
 801dab8:	f04f 30ff 	mov.w	r0, #4294967295
 801dabc:	e78e      	b.n	801d9dc <__sflush_r+0x1c>
 801dabe:	4407      	add	r7, r0
 801dac0:	eba8 0800 	sub.w	r8, r8, r0
 801dac4:	e7e9      	b.n	801da9a <__sflush_r+0xda>
 801dac6:	bf00      	nop
 801dac8:	20400001 	.word	0x20400001

0801dacc <_fflush_r>:
 801dacc:	b538      	push	{r3, r4, r5, lr}
 801dace:	690b      	ldr	r3, [r1, #16]
 801dad0:	4605      	mov	r5, r0
 801dad2:	460c      	mov	r4, r1
 801dad4:	b913      	cbnz	r3, 801dadc <_fflush_r+0x10>
 801dad6:	2500      	movs	r5, #0
 801dad8:	4628      	mov	r0, r5
 801dada:	bd38      	pop	{r3, r4, r5, pc}
 801dadc:	b118      	cbz	r0, 801dae6 <_fflush_r+0x1a>
 801dade:	6983      	ldr	r3, [r0, #24]
 801dae0:	b90b      	cbnz	r3, 801dae6 <_fflush_r+0x1a>
 801dae2:	f7ff f883 	bl	801cbec <__sinit>
 801dae6:	4b14      	ldr	r3, [pc, #80]	; (801db38 <_fflush_r+0x6c>)
 801dae8:	429c      	cmp	r4, r3
 801daea:	d11b      	bne.n	801db24 <_fflush_r+0x58>
 801daec:	686c      	ldr	r4, [r5, #4]
 801daee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d0ef      	beq.n	801dad6 <_fflush_r+0xa>
 801daf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801daf8:	07d0      	lsls	r0, r2, #31
 801dafa:	d404      	bmi.n	801db06 <_fflush_r+0x3a>
 801dafc:	0599      	lsls	r1, r3, #22
 801dafe:	d402      	bmi.n	801db06 <_fflush_r+0x3a>
 801db00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db02:	f7ff f916 	bl	801cd32 <__retarget_lock_acquire_recursive>
 801db06:	4628      	mov	r0, r5
 801db08:	4621      	mov	r1, r4
 801db0a:	f7ff ff59 	bl	801d9c0 <__sflush_r>
 801db0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db10:	07da      	lsls	r2, r3, #31
 801db12:	4605      	mov	r5, r0
 801db14:	d4e0      	bmi.n	801dad8 <_fflush_r+0xc>
 801db16:	89a3      	ldrh	r3, [r4, #12]
 801db18:	059b      	lsls	r3, r3, #22
 801db1a:	d4dd      	bmi.n	801dad8 <_fflush_r+0xc>
 801db1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db1e:	f7ff f909 	bl	801cd34 <__retarget_lock_release_recursive>
 801db22:	e7d9      	b.n	801dad8 <_fflush_r+0xc>
 801db24:	4b05      	ldr	r3, [pc, #20]	; (801db3c <_fflush_r+0x70>)
 801db26:	429c      	cmp	r4, r3
 801db28:	d101      	bne.n	801db2e <_fflush_r+0x62>
 801db2a:	68ac      	ldr	r4, [r5, #8]
 801db2c:	e7df      	b.n	801daee <_fflush_r+0x22>
 801db2e:	4b04      	ldr	r3, [pc, #16]	; (801db40 <_fflush_r+0x74>)
 801db30:	429c      	cmp	r4, r3
 801db32:	bf08      	it	eq
 801db34:	68ec      	ldreq	r4, [r5, #12]
 801db36:	e7da      	b.n	801daee <_fflush_r+0x22>
 801db38:	0803d494 	.word	0x0803d494
 801db3c:	0803d4b4 	.word	0x0803d4b4
 801db40:	0803d474 	.word	0x0803d474

0801db44 <fiprintf>:
 801db44:	b40e      	push	{r1, r2, r3}
 801db46:	b503      	push	{r0, r1, lr}
 801db48:	4601      	mov	r1, r0
 801db4a:	ab03      	add	r3, sp, #12
 801db4c:	4805      	ldr	r0, [pc, #20]	; (801db64 <fiprintf+0x20>)
 801db4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801db52:	6800      	ldr	r0, [r0, #0]
 801db54:	9301      	str	r3, [sp, #4]
 801db56:	f7ff fcbf 	bl	801d4d8 <_vfiprintf_r>
 801db5a:	b002      	add	sp, #8
 801db5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801db60:	b003      	add	sp, #12
 801db62:	4770      	bx	lr
 801db64:	240000a8 	.word	0x240000a8

0801db68 <_lseek_r>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	4d07      	ldr	r5, [pc, #28]	; (801db88 <_lseek_r+0x20>)
 801db6c:	4604      	mov	r4, r0
 801db6e:	4608      	mov	r0, r1
 801db70:	4611      	mov	r1, r2
 801db72:	2200      	movs	r2, #0
 801db74:	602a      	str	r2, [r5, #0]
 801db76:	461a      	mov	r2, r3
 801db78:	f7e6 fcbe 	bl	80044f8 <_lseek>
 801db7c:	1c43      	adds	r3, r0, #1
 801db7e:	d102      	bne.n	801db86 <_lseek_r+0x1e>
 801db80:	682b      	ldr	r3, [r5, #0]
 801db82:	b103      	cbz	r3, 801db86 <_lseek_r+0x1e>
 801db84:	6023      	str	r3, [r4, #0]
 801db86:	bd38      	pop	{r3, r4, r5, pc}
 801db88:	2407f6d8 	.word	0x2407f6d8

0801db8c <__swhatbuf_r>:
 801db8c:	b570      	push	{r4, r5, r6, lr}
 801db8e:	460e      	mov	r6, r1
 801db90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db94:	2900      	cmp	r1, #0
 801db96:	b096      	sub	sp, #88	; 0x58
 801db98:	4614      	mov	r4, r2
 801db9a:	461d      	mov	r5, r3
 801db9c:	da08      	bge.n	801dbb0 <__swhatbuf_r+0x24>
 801db9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dba2:	2200      	movs	r2, #0
 801dba4:	602a      	str	r2, [r5, #0]
 801dba6:	061a      	lsls	r2, r3, #24
 801dba8:	d410      	bmi.n	801dbcc <__swhatbuf_r+0x40>
 801dbaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dbae:	e00e      	b.n	801dbce <__swhatbuf_r+0x42>
 801dbb0:	466a      	mov	r2, sp
 801dbb2:	f000 f883 	bl	801dcbc <_fstat_r>
 801dbb6:	2800      	cmp	r0, #0
 801dbb8:	dbf1      	blt.n	801db9e <__swhatbuf_r+0x12>
 801dbba:	9a01      	ldr	r2, [sp, #4]
 801dbbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dbc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dbc4:	425a      	negs	r2, r3
 801dbc6:	415a      	adcs	r2, r3
 801dbc8:	602a      	str	r2, [r5, #0]
 801dbca:	e7ee      	b.n	801dbaa <__swhatbuf_r+0x1e>
 801dbcc:	2340      	movs	r3, #64	; 0x40
 801dbce:	2000      	movs	r0, #0
 801dbd0:	6023      	str	r3, [r4, #0]
 801dbd2:	b016      	add	sp, #88	; 0x58
 801dbd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dbd8 <__smakebuf_r>:
 801dbd8:	898b      	ldrh	r3, [r1, #12]
 801dbda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dbdc:	079d      	lsls	r5, r3, #30
 801dbde:	4606      	mov	r6, r0
 801dbe0:	460c      	mov	r4, r1
 801dbe2:	d507      	bpl.n	801dbf4 <__smakebuf_r+0x1c>
 801dbe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dbe8:	6023      	str	r3, [r4, #0]
 801dbea:	6123      	str	r3, [r4, #16]
 801dbec:	2301      	movs	r3, #1
 801dbee:	6163      	str	r3, [r4, #20]
 801dbf0:	b002      	add	sp, #8
 801dbf2:	bd70      	pop	{r4, r5, r6, pc}
 801dbf4:	ab01      	add	r3, sp, #4
 801dbf6:	466a      	mov	r2, sp
 801dbf8:	f7ff ffc8 	bl	801db8c <__swhatbuf_r>
 801dbfc:	9900      	ldr	r1, [sp, #0]
 801dbfe:	4605      	mov	r5, r0
 801dc00:	4630      	mov	r0, r6
 801dc02:	f7fd fc95 	bl	801b530 <_malloc_r>
 801dc06:	b948      	cbnz	r0, 801dc1c <__smakebuf_r+0x44>
 801dc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc0c:	059a      	lsls	r2, r3, #22
 801dc0e:	d4ef      	bmi.n	801dbf0 <__smakebuf_r+0x18>
 801dc10:	f023 0303 	bic.w	r3, r3, #3
 801dc14:	f043 0302 	orr.w	r3, r3, #2
 801dc18:	81a3      	strh	r3, [r4, #12]
 801dc1a:	e7e3      	b.n	801dbe4 <__smakebuf_r+0xc>
 801dc1c:	4b0d      	ldr	r3, [pc, #52]	; (801dc54 <__smakebuf_r+0x7c>)
 801dc1e:	62b3      	str	r3, [r6, #40]	; 0x28
 801dc20:	89a3      	ldrh	r3, [r4, #12]
 801dc22:	6020      	str	r0, [r4, #0]
 801dc24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc28:	81a3      	strh	r3, [r4, #12]
 801dc2a:	9b00      	ldr	r3, [sp, #0]
 801dc2c:	6163      	str	r3, [r4, #20]
 801dc2e:	9b01      	ldr	r3, [sp, #4]
 801dc30:	6120      	str	r0, [r4, #16]
 801dc32:	b15b      	cbz	r3, 801dc4c <__smakebuf_r+0x74>
 801dc34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc38:	4630      	mov	r0, r6
 801dc3a:	f000 f851 	bl	801dce0 <_isatty_r>
 801dc3e:	b128      	cbz	r0, 801dc4c <__smakebuf_r+0x74>
 801dc40:	89a3      	ldrh	r3, [r4, #12]
 801dc42:	f023 0303 	bic.w	r3, r3, #3
 801dc46:	f043 0301 	orr.w	r3, r3, #1
 801dc4a:	81a3      	strh	r3, [r4, #12]
 801dc4c:	89a0      	ldrh	r0, [r4, #12]
 801dc4e:	4305      	orrs	r5, r0
 801dc50:	81a5      	strh	r5, [r4, #12]
 801dc52:	e7cd      	b.n	801dbf0 <__smakebuf_r+0x18>
 801dc54:	0801cb85 	.word	0x0801cb85

0801dc58 <__ascii_mbtowc>:
 801dc58:	b082      	sub	sp, #8
 801dc5a:	b901      	cbnz	r1, 801dc5e <__ascii_mbtowc+0x6>
 801dc5c:	a901      	add	r1, sp, #4
 801dc5e:	b142      	cbz	r2, 801dc72 <__ascii_mbtowc+0x1a>
 801dc60:	b14b      	cbz	r3, 801dc76 <__ascii_mbtowc+0x1e>
 801dc62:	7813      	ldrb	r3, [r2, #0]
 801dc64:	600b      	str	r3, [r1, #0]
 801dc66:	7812      	ldrb	r2, [r2, #0]
 801dc68:	1e10      	subs	r0, r2, #0
 801dc6a:	bf18      	it	ne
 801dc6c:	2001      	movne	r0, #1
 801dc6e:	b002      	add	sp, #8
 801dc70:	4770      	bx	lr
 801dc72:	4610      	mov	r0, r2
 801dc74:	e7fb      	b.n	801dc6e <__ascii_mbtowc+0x16>
 801dc76:	f06f 0001 	mvn.w	r0, #1
 801dc7a:	e7f8      	b.n	801dc6e <__ascii_mbtowc+0x16>

0801dc7c <_read_r>:
 801dc7c:	b538      	push	{r3, r4, r5, lr}
 801dc7e:	4d07      	ldr	r5, [pc, #28]	; (801dc9c <_read_r+0x20>)
 801dc80:	4604      	mov	r4, r0
 801dc82:	4608      	mov	r0, r1
 801dc84:	4611      	mov	r1, r2
 801dc86:	2200      	movs	r2, #0
 801dc88:	602a      	str	r2, [r5, #0]
 801dc8a:	461a      	mov	r2, r3
 801dc8c:	f7e6 fbd4 	bl	8004438 <_read>
 801dc90:	1c43      	adds	r3, r0, #1
 801dc92:	d102      	bne.n	801dc9a <_read_r+0x1e>
 801dc94:	682b      	ldr	r3, [r5, #0]
 801dc96:	b103      	cbz	r3, 801dc9a <_read_r+0x1e>
 801dc98:	6023      	str	r3, [r4, #0]
 801dc9a:	bd38      	pop	{r3, r4, r5, pc}
 801dc9c:	2407f6d8 	.word	0x2407f6d8

0801dca0 <__ascii_wctomb>:
 801dca0:	b149      	cbz	r1, 801dcb6 <__ascii_wctomb+0x16>
 801dca2:	2aff      	cmp	r2, #255	; 0xff
 801dca4:	bf85      	ittet	hi
 801dca6:	238a      	movhi	r3, #138	; 0x8a
 801dca8:	6003      	strhi	r3, [r0, #0]
 801dcaa:	700a      	strbls	r2, [r1, #0]
 801dcac:	f04f 30ff 	movhi.w	r0, #4294967295
 801dcb0:	bf98      	it	ls
 801dcb2:	2001      	movls	r0, #1
 801dcb4:	4770      	bx	lr
 801dcb6:	4608      	mov	r0, r1
 801dcb8:	4770      	bx	lr
	...

0801dcbc <_fstat_r>:
 801dcbc:	b538      	push	{r3, r4, r5, lr}
 801dcbe:	4d07      	ldr	r5, [pc, #28]	; (801dcdc <_fstat_r+0x20>)
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	4604      	mov	r4, r0
 801dcc4:	4608      	mov	r0, r1
 801dcc6:	4611      	mov	r1, r2
 801dcc8:	602b      	str	r3, [r5, #0]
 801dcca:	f7e6 fbfa 	bl	80044c2 <_fstat>
 801dcce:	1c43      	adds	r3, r0, #1
 801dcd0:	d102      	bne.n	801dcd8 <_fstat_r+0x1c>
 801dcd2:	682b      	ldr	r3, [r5, #0]
 801dcd4:	b103      	cbz	r3, 801dcd8 <_fstat_r+0x1c>
 801dcd6:	6023      	str	r3, [r4, #0]
 801dcd8:	bd38      	pop	{r3, r4, r5, pc}
 801dcda:	bf00      	nop
 801dcdc:	2407f6d8 	.word	0x2407f6d8

0801dce0 <_isatty_r>:
 801dce0:	b538      	push	{r3, r4, r5, lr}
 801dce2:	4d06      	ldr	r5, [pc, #24]	; (801dcfc <_isatty_r+0x1c>)
 801dce4:	2300      	movs	r3, #0
 801dce6:	4604      	mov	r4, r0
 801dce8:	4608      	mov	r0, r1
 801dcea:	602b      	str	r3, [r5, #0]
 801dcec:	f7e6 fbf9 	bl	80044e2 <_isatty>
 801dcf0:	1c43      	adds	r3, r0, #1
 801dcf2:	d102      	bne.n	801dcfa <_isatty_r+0x1a>
 801dcf4:	682b      	ldr	r3, [r5, #0]
 801dcf6:	b103      	cbz	r3, 801dcfa <_isatty_r+0x1a>
 801dcf8:	6023      	str	r3, [r4, #0]
 801dcfa:	bd38      	pop	{r3, r4, r5, pc}
 801dcfc:	2407f6d8 	.word	0x2407f6d8

0801dd00 <_init>:
 801dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd02:	bf00      	nop
 801dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd06:	bc08      	pop	{r3}
 801dd08:	469e      	mov	lr, r3
 801dd0a:	4770      	bx	lr

0801dd0c <_fini>:
 801dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd0e:	bf00      	nop
 801dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd12:	bc08      	pop	{r3}
 801dd14:	469e      	mov	lr, r3
 801dd16:	4770      	bx	lr
